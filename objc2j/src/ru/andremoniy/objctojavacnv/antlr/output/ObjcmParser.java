// $ANTLR 3.4 Objcm.g 2012-10-01 20:33:50

package ru.andremoniy.objctojavacnv.antlr.output;


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;

import org.antlr.runtime.tree.*;


@SuppressWarnings({"all", "warnings", "unchecked"})
public class ObjcmParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "ASTERISK", "BLOCK", "BREAK", "BREAK_WORD", "BR_STMT", "CASE_BODY", "CASE_EXPR", "CASE_STMT", "CATEGORY", "CLASSICAL_EXPR", "CLASSICAL_EXPR_2", "COLON", "COMMA", "CONST_PREFIX", "DEFAULT_BODY", "DEFAULT_STMT", "DIGIT", "DOT", "ENCODE", "ENUM", "ENUM_PREFIX", "ESC", "EXPR", "EXPR_ADD", "EXPR_AND", "EXPR_AND_AND", "EXPR_ASSIGN", "EXPR_COND", "EXPR_EQ", "EXPR_FULL", "EXPR_MOV", "EXPR_MULT", "EXPR_NOT", "EXPR_OR", "EXPR_OR_OR", "EXPR_QUESTION", "EXPR_TYPE", "EXPR_XOR", "EXTERN", "FIELD", "FIELD_ACCESS", "FIELD_TYPE_STARTED", "FOR_IN_STMT", "FUNCTION", "GENERIC", "ID", "IF_BLOCK", "IF_EXPR", "IF_STMT", "IMPLEMENTATION", "INCOMPLETE_PREFIX", "INTERFACE", "LETTER", "L_AND", "L_AND_AND", "L_AND_EQ", "L_BR", "L_DIV", "L_DIV_EQ", "L_EQ", "L_EQ_EQ", "L_FBR", "L_KBR", "L_LEFT", "L_LEFT_EQ", "L_LESS", "L_LESS_EQ", "L_MINUS", "L_MINUS_EQ", "L_MINUS_MINUS", "L_MORE", "L_MORE_EQ", "L_MULT_EQ", "L_NEQ", "L_NOT", "L_OR", "L_OR_EQ", "L_OR_OR", "L_PERC", "L_PERC_EQ", "L_PLUS", "L_PLUS_EQ", "L_PLUS_PLUS", "L_QUESTION", "L_RIGHT", "L_RIGHT_EQ", "L_TILDA", "L_XOR", "L_XOR_EQ", "MESSAGE", "METHOD", "METHOD_CALL", "METHOD_MSG", "METHOD_NAME", "MODIFIER", "MSG_LIST", "MULTI_COMMENT", "M_IMPORT", "M_TYPE_START", "NAME", "NOT", "NUMBER", "OBJECT", "OP", "OPER", "OPERATOR", "PARAM", "PREFIX", "PREPROCESSOR_DECLARATION", "RETURN_STMT", "R_BR", "R_FBR", "R_KBR", "SELECTOR", "SELECTOR_VALUE", "SEMICOLON", "SIMPLE_EXPR", "SINGLE_COMMENT", "SINGLE_OP", "SIZEOF", "STATIC", "STATIC_METHOD", "STATIC_PREFIX", "STATIC_START", "STRING_LITERAL", "STRING_LITERAL2", "STRING_LITERAL3", "STRUCT_FIELD", "STRUCT_PREFIX", "SUPER_CLASS", "SWITCH", "SWITCH_BODY", "SWITCH_EXPRESSION", "TYPE", "TYPEDEF", "TYPEDEF_ELEMENT", "TYPEDEF_STRUCT", "TYPE_CONVERTION", "TYPE_CONVERTION_MAY_BE", "TYPE_CONVERTION_TRUE", "VALUE", "VA_ARGS", "VOID", "WHILE_EXPR", "WHILE_STMT", "WS", "'\"C\"'", "'->'", "'...'", "'@catch'", "'@encode'", "'@end'", "'@finally'", "'@implementation'", "'@interface'", "'@private'", "'@public'", "'@selector'", "'@synthesize'", "'@throw'", "'@try'", "'Nil'", "'__attribute__'", "'__typeof__'", "'case'", "'constructor'", "'default'", "'do'", "'else'", "'extern'", "'for'", "'if'", "'in'", "'inline'", "'nil'", "'return'", "'switch'", "'typedef'", "'union'", "'unsigned'", "'while'"
    };

    public static final int EOF=-1;
    public static final int T__150=150;
    public static final int T__151=151;
    public static final int T__152=152;
    public static final int T__153=153;
    public static final int T__154=154;
    public static final int T__155=155;
    public static final int T__156=156;
    public static final int T__157=157;
    public static final int T__158=158;
    public static final int T__159=159;
    public static final int T__160=160;
    public static final int T__161=161;
    public static final int T__162=162;
    public static final int T__163=163;
    public static final int T__164=164;
    public static final int T__165=165;
    public static final int T__166=166;
    public static final int T__167=167;
    public static final int T__168=168;
    public static final int T__169=169;
    public static final int T__170=170;
    public static final int T__171=171;
    public static final int T__172=172;
    public static final int T__173=173;
    public static final int T__174=174;
    public static final int T__175=175;
    public static final int T__176=176;
    public static final int T__177=177;
    public static final int T__178=178;
    public static final int T__179=179;
    public static final int T__180=180;
    public static final int T__181=181;
    public static final int T__182=182;
    public static final int T__183=183;
    public static final int T__184=184;
    public static final int ASTERISK=4;
    public static final int BLOCK=5;
    public static final int BREAK=6;
    public static final int BREAK_WORD=7;
    public static final int BR_STMT=8;
    public static final int CASE_BODY=9;
    public static final int CASE_EXPR=10;
    public static final int CASE_STMT=11;
    public static final int CATEGORY=12;
    public static final int CLASSICAL_EXPR=13;
    public static final int CLASSICAL_EXPR_2=14;
    public static final int COLON=15;
    public static final int COMMA=16;
    public static final int CONST_PREFIX=17;
    public static final int DEFAULT_BODY=18;
    public static final int DEFAULT_STMT=19;
    public static final int DIGIT=20;
    public static final int DOT=21;
    public static final int ENCODE=22;
    public static final int ENUM=23;
    public static final int ENUM_PREFIX=24;
    public static final int ESC=25;
    public static final int EXPR=26;
    public static final int EXPR_ADD=27;
    public static final int EXPR_AND=28;
    public static final int EXPR_AND_AND=29;
    public static final int EXPR_ASSIGN=30;
    public static final int EXPR_COND=31;
    public static final int EXPR_EQ=32;
    public static final int EXPR_FULL=33;
    public static final int EXPR_MOV=34;
    public static final int EXPR_MULT=35;
    public static final int EXPR_NOT=36;
    public static final int EXPR_OR=37;
    public static final int EXPR_OR_OR=38;
    public static final int EXPR_QUESTION=39;
    public static final int EXPR_TYPE=40;
    public static final int EXPR_XOR=41;
    public static final int EXTERN=42;
    public static final int FIELD=43;
    public static final int FIELD_ACCESS=44;
    public static final int FIELD_TYPE_STARTED=45;
    public static final int FOR_IN_STMT=46;
    public static final int FUNCTION=47;
    public static final int GENERIC=48;
    public static final int ID=49;
    public static final int IF_BLOCK=50;
    public static final int IF_EXPR=51;
    public static final int IF_STMT=52;
    public static final int IMPLEMENTATION=53;
    public static final int INCOMPLETE_PREFIX=54;
    public static final int INTERFACE=55;
    public static final int LETTER=56;
    public static final int L_AND=57;
    public static final int L_AND_AND=58;
    public static final int L_AND_EQ=59;
    public static final int L_BR=60;
    public static final int L_DIV=61;
    public static final int L_DIV_EQ=62;
    public static final int L_EQ=63;
    public static final int L_EQ_EQ=64;
    public static final int L_FBR=65;
    public static final int L_KBR=66;
    public static final int L_LEFT=67;
    public static final int L_LEFT_EQ=68;
    public static final int L_LESS=69;
    public static final int L_LESS_EQ=70;
    public static final int L_MINUS=71;
    public static final int L_MINUS_EQ=72;
    public static final int L_MINUS_MINUS=73;
    public static final int L_MORE=74;
    public static final int L_MORE_EQ=75;
    public static final int L_MULT_EQ=76;
    public static final int L_NEQ=77;
    public static final int L_NOT=78;
    public static final int L_OR=79;
    public static final int L_OR_EQ=80;
    public static final int L_OR_OR=81;
    public static final int L_PERC=82;
    public static final int L_PERC_EQ=83;
    public static final int L_PLUS=84;
    public static final int L_PLUS_EQ=85;
    public static final int L_PLUS_PLUS=86;
    public static final int L_QUESTION=87;
    public static final int L_RIGHT=88;
    public static final int L_RIGHT_EQ=89;
    public static final int L_TILDA=90;
    public static final int L_XOR=91;
    public static final int L_XOR_EQ=92;
    public static final int MESSAGE=93;
    public static final int METHOD=94;
    public static final int METHOD_CALL=95;
    public static final int METHOD_MSG=96;
    public static final int METHOD_NAME=97;
    public static final int MODIFIER=98;
    public static final int MSG_LIST=99;
    public static final int MULTI_COMMENT=100;
    public static final int M_IMPORT=101;
    public static final int M_TYPE_START=102;
    public static final int NAME=103;
    public static final int NOT=104;
    public static final int NUMBER=105;
    public static final int OBJECT=106;
    public static final int OP=107;
    public static final int OPER=108;
    public static final int OPERATOR=109;
    public static final int PARAM=110;
    public static final int PREFIX=111;
    public static final int PREPROCESSOR_DECLARATION=112;
    public static final int RETURN_STMT=113;
    public static final int R_BR=114;
    public static final int R_FBR=115;
    public static final int R_KBR=116;
    public static final int SELECTOR=117;
    public static final int SELECTOR_VALUE=118;
    public static final int SEMICOLON=119;
    public static final int SIMPLE_EXPR=120;
    public static final int SINGLE_COMMENT=121;
    public static final int SINGLE_OP=122;
    public static final int SIZEOF=123;
    public static final int STATIC=124;
    public static final int STATIC_METHOD=125;
    public static final int STATIC_PREFIX=126;
    public static final int STATIC_START=127;
    public static final int STRING_LITERAL=128;
    public static final int STRING_LITERAL2=129;
    public static final int STRING_LITERAL3=130;
    public static final int STRUCT_FIELD=131;
    public static final int STRUCT_PREFIX=132;
    public static final int SUPER_CLASS=133;
    public static final int SWITCH=134;
    public static final int SWITCH_BODY=135;
    public static final int SWITCH_EXPRESSION=136;
    public static final int TYPE=137;
    public static final int TYPEDEF=138;
    public static final int TYPEDEF_ELEMENT=139;
    public static final int TYPEDEF_STRUCT=140;
    public static final int TYPE_CONVERTION=141;
    public static final int TYPE_CONVERTION_MAY_BE=142;
    public static final int TYPE_CONVERTION_TRUE=143;
    public static final int VALUE=144;
    public static final int VA_ARGS=145;
    public static final int VOID=146;
    public static final int WHILE_EXPR=147;
    public static final int WHILE_STMT=148;
    public static final int WS=149;

    // delegates
    public Parser[] getDelegates() {
        return new Parser[] {};
    }

    // delegators


    public ObjcmParser(TokenStream input) {
        this(input, new RecognizerSharedState());
    }
    public ObjcmParser(TokenStream input, RecognizerSharedState state) {
        super(input, state);
    }

protected TreeAdaptor adaptor = new CommonTreeAdaptor();

public void setTreeAdaptor(TreeAdaptor adaptor) {
    this.adaptor = adaptor;
}
public TreeAdaptor getTreeAdaptor() {
    return adaptor;
}
    public String[] getTokenNames() { return ObjcmParser.tokenNames; }
    public String getGrammarFileName() { return "Objcm.g"; }


    public static class code_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "code"
    // Objcm.g:104:1: code : ( code_internal )+ ;
    public final ObjcmParser.code_return code() throws RecognitionException {
        ObjcmParser.code_return retval = new ObjcmParser.code_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.code_internal_return code_internal1 =null;



        try {
            // Objcm.g:104:6: ( ( code_internal )+ )
            // Objcm.g:105:3: ( code_internal )+
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:105:3: ( code_internal )+
            int cnt1=0;
            loop1:
            do {
                int alt1=2;
                int LA1_0 = input.LA(1);

                if ( (LA1_0==CONST_PREFIX||LA1_0==ID||LA1_0==STATIC_PREFIX||LA1_0==STRUCT_PREFIX||LA1_0==VOID||(LA1_0 >= 157 && LA1_0 <= 158)||LA1_0==173) ) {
                    alt1=1;
                }


                switch (alt1) {
            	case 1 :
            	    // Objcm.g:105:3: code_internal
            	    {
            	    pushFollow(FOLLOW_code_internal_in_code387);
            	    code_internal1=code_internal();

            	    state._fsp--;

            	    adaptor.addChild(root_0, code_internal1.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt1 >= 1 ) break loop1;
                        EarlyExitException eee =
                            new EarlyExitException(1, input);
                        throw eee;
                }
                cnt1++;
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "code"


    public static class code_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "code_internal"
    // Objcm.g:109:1: code_internal : ( operator_wrapper | implementation_wrapper );
    public final ObjcmParser.code_internal_return code_internal() throws RecognitionException {
        ObjcmParser.code_internal_return retval = new ObjcmParser.code_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.operator_wrapper_return operator_wrapper2 =null;

        ObjcmParser.implementation_wrapper_return implementation_wrapper3 =null;



        try {
            // Objcm.g:110:2: ( operator_wrapper | implementation_wrapper )
            int alt2=2;
            int LA2_0 = input.LA(1);

            if ( (LA2_0==CONST_PREFIX||LA2_0==ID||LA2_0==STATIC_PREFIX||LA2_0==STRUCT_PREFIX||LA2_0==VOID||LA2_0==158||LA2_0==173) ) {
                alt2=1;
            }
            else if ( (LA2_0==157) ) {
                alt2=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 2, 0, input);

                throw nvae;

            }
            switch (alt2) {
                case 1 :
                    // Objcm.g:110:4: operator_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_operator_wrapper_in_code_internal401);
                    operator_wrapper2=operator_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, operator_wrapper2.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:111:5: implementation_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_implementation_wrapper_in_code_internal407);
                    implementation_wrapper3=implementation_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, implementation_wrapper3.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "code_internal"


    public static class operator_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "operator_wrapper"
    // Objcm.g:114:1: operator_wrapper : operator -> ^( OPERATOR operator ) ;
    public final ObjcmParser.operator_wrapper_return operator_wrapper() throws RecognitionException {
        ObjcmParser.operator_wrapper_return retval = new ObjcmParser.operator_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.operator_return operator4 =null;


        RewriteRuleSubtreeStream stream_operator=new RewriteRuleSubtreeStream(adaptor,"rule operator");
        try {
            // Objcm.g:115:2: ( operator -> ^( OPERATOR operator ) )
            // Objcm.g:115:4: operator
            {
            pushFollow(FOLLOW_operator_in_operator_wrapper418);
            operator4=operator();

            state._fsp--;

            stream_operator.add(operator4.getTree());

            // AST REWRITE
            // elements: operator
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 115:13: -> ^( OPERATOR operator )
            {
                // Objcm.g:115:16: ^( OPERATOR operator )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(OPERATOR, "OPERATOR")
                , root_1);

                adaptor.addChild(root_1, stream_operator.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "operator_wrapper"


    public static class operator_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "operator"
    // Objcm.g:117:1: operator : ( extern_wrapper | static_section_wrapper | type_start_wrapper | interface_declaration_wrapper | typedef_struct_declaration );
    public final ObjcmParser.operator_return operator() throws RecognitionException {
        ObjcmParser.operator_return retval = new ObjcmParser.operator_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.extern_wrapper_return extern_wrapper5 =null;

        ObjcmParser.static_section_wrapper_return static_section_wrapper6 =null;

        ObjcmParser.type_start_wrapper_return type_start_wrapper7 =null;

        ObjcmParser.interface_declaration_wrapper_return interface_declaration_wrapper8 =null;

        ObjcmParser.typedef_struct_declaration_return typedef_struct_declaration9 =null;



        try {
            // Objcm.g:118:2: ( extern_wrapper | static_section_wrapper | type_start_wrapper | interface_declaration_wrapper | typedef_struct_declaration )
            int alt3=5;
            switch ( input.LA(1) ) {
            case 173:
                {
                alt3=1;
                }
                break;
            case STATIC_PREFIX:
                {
                alt3=2;
                }
                break;
            case CONST_PREFIX:
            case ID:
            case VOID:
                {
                alt3=3;
                }
                break;
            case 158:
                {
                alt3=4;
                }
                break;
            case STRUCT_PREFIX:
                {
                alt3=5;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 3, 0, input);

                throw nvae;

            }

            switch (alt3) {
                case 1 :
                    // Objcm.g:118:4: extern_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_extern_wrapper_in_operator436);
                    extern_wrapper5=extern_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, extern_wrapper5.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:119:4: static_section_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_static_section_wrapper_in_operator442);
                    static_section_wrapper6=static_section_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, static_section_wrapper6.getTree());

                    }
                    break;
                case 3 :
                    // Objcm.g:120:4: type_start_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_start_wrapper_in_operator447);
                    type_start_wrapper7=type_start_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, type_start_wrapper7.getTree());

                    }
                    break;
                case 4 :
                    // Objcm.g:121:5: interface_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_interface_declaration_wrapper_in_operator454);
                    interface_declaration_wrapper8=interface_declaration_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, interface_declaration_wrapper8.getTree());

                    }
                    break;
                case 5 :
                    // Objcm.g:122:4: typedef_struct_declaration
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_typedef_struct_declaration_in_operator460);
                    typedef_struct_declaration9=typedef_struct_declaration();

                    state._fsp--;

                    adaptor.addChild(root_0, typedef_struct_declaration9.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "operator"


    public static class extern_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "extern_wrapper"
    // Objcm.g:129:2: extern_wrapper : extern -> ^( EXTERN ) ;
    public final ObjcmParser.extern_wrapper_return extern_wrapper() throws RecognitionException {
        ObjcmParser.extern_wrapper_return retval = new ObjcmParser.extern_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.extern_return extern10 =null;


        RewriteRuleSubtreeStream stream_extern=new RewriteRuleSubtreeStream(adaptor,"rule extern");
        try {
            // Objcm.g:130:3: ( extern -> ^( EXTERN ) )
            // Objcm.g:130:5: extern
            {
            pushFollow(FOLLOW_extern_in_extern_wrapper479);
            extern10=extern();

            state._fsp--;

            stream_extern.add(extern10.getTree());

            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 130:12: -> ^( EXTERN )
            {
                // Objcm.g:130:15: ^( EXTERN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXTERN, "EXTERN")
                , root_1);

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "extern_wrapper"


    public static class extern_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "extern"
    // Objcm.g:133:2: extern : 'extern' '\"C\"' L_FBR ~ ( R_FBR ) R_FBR ;
    public final ObjcmParser.extern_return extern() throws RecognitionException {
        ObjcmParser.extern_return retval = new ObjcmParser.extern_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal11=null;
        Token string_literal12=null;
        Token L_FBR13=null;
        Token set14=null;
        Token R_FBR15=null;

        Object string_literal11_tree=null;
        Object string_literal12_tree=null;
        Object L_FBR13_tree=null;
        Object set14_tree=null;
        Object R_FBR15_tree=null;

        try {
            // Objcm.g:133:9: ( 'extern' '\"C\"' L_FBR ~ ( R_FBR ) R_FBR )
            // Objcm.g:133:11: 'extern' '\"C\"' L_FBR ~ ( R_FBR ) R_FBR
            {
            root_0 = (Object)adaptor.nil();


            string_literal11=(Token)match(input,173,FOLLOW_173_in_extern498); 
            string_literal11_tree = 
            (Object)adaptor.create(string_literal11)
            ;
            adaptor.addChild(root_0, string_literal11_tree);


            string_literal12=(Token)match(input,150,FOLLOW_150_in_extern501); 
            string_literal12_tree = 
            (Object)adaptor.create(string_literal12)
            ;
            adaptor.addChild(root_0, string_literal12_tree);


            L_FBR13=(Token)match(input,L_FBR,FOLLOW_L_FBR_in_extern504); 
            L_FBR13_tree = 
            (Object)adaptor.create(L_FBR13)
            ;
            adaptor.addChild(root_0, L_FBR13_tree);


            set14=(Token)input.LT(1);

            if ( (input.LA(1) >= ASTERISK && input.LA(1) <= R_BR)||(input.LA(1) >= R_KBR && input.LA(1) <= 184) ) {
                input.consume();
                adaptor.addChild(root_0, 
                (Object)adaptor.create(set14)
                );
                state.errorRecovery=false;
            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            R_FBR15=(Token)match(input,R_FBR,FOLLOW_R_FBR_in_extern511); 
            R_FBR15_tree = 
            (Object)adaptor.create(R_FBR15)
            ;
            adaptor.addChild(root_0, R_FBR15_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "extern"


    public static class implementation_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementation_wrapper"
    // Objcm.g:135:1: implementation_wrapper : implementation -> ^( IMPLEMENTATION implementation ) ;
    public final ObjcmParser.implementation_wrapper_return implementation_wrapper() throws RecognitionException {
        ObjcmParser.implementation_wrapper_return retval = new ObjcmParser.implementation_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.implementation_return implementation16 =null;


        RewriteRuleSubtreeStream stream_implementation=new RewriteRuleSubtreeStream(adaptor,"rule implementation");
        try {
            // Objcm.g:136:3: ( implementation -> ^( IMPLEMENTATION implementation ) )
            // Objcm.g:136:5: implementation
            {
            pushFollow(FOLLOW_implementation_in_implementation_wrapper523);
            implementation16=implementation();

            state._fsp--;

            stream_implementation.add(implementation16.getTree());

            // AST REWRITE
            // elements: implementation
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 136:20: -> ^( IMPLEMENTATION implementation )
            {
                // Objcm.g:136:23: ^( IMPLEMENTATION implementation )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(IMPLEMENTATION, "IMPLEMENTATION")
                , root_1);

                adaptor.addChild(root_1, stream_implementation.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implementation_wrapper"


    public static class implementation_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementation"
    // Objcm.g:138:1: implementation : '@implementation' name ( category )? ( super_class )? ( implementation_body )+ '@end' ( SEMICOLON )? ;
    public final ObjcmParser.implementation_return implementation() throws RecognitionException {
        ObjcmParser.implementation_return retval = new ObjcmParser.implementation_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal17=null;
        Token string_literal22=null;
        Token SEMICOLON23=null;
        ObjcmParser.name_return name18 =null;

        ObjcmParser.category_return category19 =null;

        ObjcmParser.super_class_return super_class20 =null;

        ObjcmParser.implementation_body_return implementation_body21 =null;


        Object string_literal17_tree=null;
        Object string_literal22_tree=null;
        Object SEMICOLON23_tree=null;

        try {
            // Objcm.g:139:2: ( '@implementation' name ( category )? ( super_class )? ( implementation_body )+ '@end' ( SEMICOLON )? )
            // Objcm.g:139:4: '@implementation' name ( category )? ( super_class )? ( implementation_body )+ '@end' ( SEMICOLON )?
            {
            root_0 = (Object)adaptor.nil();


            string_literal17=(Token)match(input,157,FOLLOW_157_in_implementation542); 
            string_literal17_tree = 
            (Object)adaptor.create(string_literal17)
            ;
            adaptor.addChild(root_0, string_literal17_tree);


            pushFollow(FOLLOW_name_in_implementation545);
            name18=name();

            state._fsp--;

            adaptor.addChild(root_0, name18.getTree());

            // Objcm.g:139:29: ( category )?
            int alt4=2;
            int LA4_0 = input.LA(1);

            if ( (LA4_0==L_BR) ) {
                alt4=1;
            }
            switch (alt4) {
                case 1 :
                    // Objcm.g:139:29: category
                    {
                    pushFollow(FOLLOW_category_in_implementation548);
                    category19=category();

                    state._fsp--;

                    adaptor.addChild(root_0, category19.getTree());

                    }
                    break;

            }


            // Objcm.g:139:39: ( super_class )?
            int alt5=2;
            int LA5_0 = input.LA(1);

            if ( (LA5_0==COLON) ) {
                alt5=1;
            }
            switch (alt5) {
                case 1 :
                    // Objcm.g:139:39: super_class
                    {
                    pushFollow(FOLLOW_super_class_in_implementation551);
                    super_class20=super_class();

                    state._fsp--;

                    adaptor.addChild(root_0, super_class20.getTree());

                    }
                    break;

            }


            // Objcm.g:140:3: ( implementation_body )+
            int cnt6=0;
            loop6:
            do {
                int alt6=2;
                int LA6_0 = input.LA(1);

                if ( (LA6_0==ID||LA6_0==L_MINUS||LA6_0==L_PLUS||LA6_0==STATIC_PREFIX||LA6_0==STRUCT_PREFIX||LA6_0==VOID||LA6_0==162||LA6_0==173||LA6_0==181) ) {
                    alt6=1;
                }


                switch (alt6) {
            	case 1 :
            	    // Objcm.g:140:3: implementation_body
            	    {
            	    pushFollow(FOLLOW_implementation_body_in_implementation556);
            	    implementation_body21=implementation_body();

            	    state._fsp--;

            	    adaptor.addChild(root_0, implementation_body21.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt6 >= 1 ) break loop6;
                        EarlyExitException eee =
                            new EarlyExitException(6, input);
                        throw eee;
                }
                cnt6++;
            } while (true);


            string_literal22=(Token)match(input,155,FOLLOW_155_in_implementation561); 
            string_literal22_tree = 
            (Object)adaptor.create(string_literal22)
            ;
            adaptor.addChild(root_0, string_literal22_tree);


            // Objcm.g:141:11: ( SEMICOLON )?
            int alt7=2;
            int LA7_0 = input.LA(1);

            if ( (LA7_0==SEMICOLON) ) {
                alt7=1;
            }
            switch (alt7) {
                case 1 :
                    // Objcm.g:141:11: SEMICOLON
                    {
                    SEMICOLON23=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_implementation564); 
                    SEMICOLON23_tree = 
                    (Object)adaptor.create(SEMICOLON23)
                    ;
                    adaptor.addChild(root_0, SEMICOLON23_tree);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implementation"


    public static class category_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "category"
    // Objcm.g:144:1: category : L_BR name R_BR -> ^( CATEGORY name ) ;
    public final ObjcmParser.category_return category() throws RecognitionException {
        ObjcmParser.category_return retval = new ObjcmParser.category_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_BR24=null;
        Token R_BR26=null;
        ObjcmParser.name_return name25 =null;


        Object L_BR24_tree=null;
        Object R_BR26_tree=null;
        RewriteRuleTokenStream stream_R_BR=new RewriteRuleTokenStream(adaptor,"token R_BR");
        RewriteRuleTokenStream stream_L_BR=new RewriteRuleTokenStream(adaptor,"token L_BR");
        RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name");
        try {
            // Objcm.g:144:9: ( L_BR name R_BR -> ^( CATEGORY name ) )
            // Objcm.g:144:11: L_BR name R_BR
            {
            L_BR24=(Token)match(input,L_BR,FOLLOW_L_BR_in_category576);  
            stream_L_BR.add(L_BR24);


            pushFollow(FOLLOW_name_in_category579);
            name25=name();

            state._fsp--;

            stream_name.add(name25.getTree());

            R_BR26=(Token)match(input,R_BR,FOLLOW_R_BR_in_category582);  
            stream_R_BR.add(R_BR26);


            // AST REWRITE
            // elements: name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 144:28: -> ^( CATEGORY name )
            {
                // Objcm.g:144:31: ^( CATEGORY name )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CATEGORY, "CATEGORY")
                , root_1);

                adaptor.addChild(root_1, stream_name.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "category"


    public static class implementation_body_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementation_body"
    // Objcm.g:146:1: implementation_body : ( directives | typedef | static_section_wrapper | implementation_method_wrapper | field_type_started_wrapper | field_declaration_wrapper | typedef_struct_declaration_wrapper );
    public final ObjcmParser.implementation_body_return implementation_body() throws RecognitionException {
        ObjcmParser.implementation_body_return retval = new ObjcmParser.implementation_body_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.directives_return directives27 =null;

        ObjcmParser.typedef_return typedef28 =null;

        ObjcmParser.static_section_wrapper_return static_section_wrapper29 =null;

        ObjcmParser.implementation_method_wrapper_return implementation_method_wrapper30 =null;

        ObjcmParser.field_type_started_wrapper_return field_type_started_wrapper31 =null;

        ObjcmParser.field_declaration_wrapper_return field_declaration_wrapper32 =null;

        ObjcmParser.typedef_struct_declaration_wrapper_return typedef_struct_declaration_wrapper33 =null;



        try {
            // Objcm.g:147:2: ( directives | typedef | static_section_wrapper | implementation_method_wrapper | field_type_started_wrapper | field_declaration_wrapper | typedef_struct_declaration_wrapper )
            int alt8=7;
            switch ( input.LA(1) ) {
            case 162:
                {
                alt8=1;
                }
                break;
            case 181:
                {
                alt8=2;
                }
                break;
            case STATIC_PREFIX:
                {
                alt8=3;
                }
                break;
            case L_MINUS:
            case L_PLUS:
                {
                alt8=4;
                }
                break;
            case ID:
            case VOID:
                {
                alt8=5;
                }
                break;
            case 173:
                {
                alt8=6;
                }
                break;
            case STRUCT_PREFIX:
                {
                alt8=7;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 8, 0, input);

                throw nvae;

            }

            switch (alt8) {
                case 1 :
                    // Objcm.g:147:4: directives
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_directives_in_implementation_body600);
                    directives27=directives();

                    state._fsp--;

                    adaptor.addChild(root_0, directives27.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:148:5: typedef
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_typedef_in_implementation_body606);
                    typedef28=typedef();

                    state._fsp--;

                    adaptor.addChild(root_0, typedef28.getTree());

                    }
                    break;
                case 3 :
                    // Objcm.g:149:5: static_section_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_static_section_wrapper_in_implementation_body612);
                    static_section_wrapper29=static_section_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, static_section_wrapper29.getTree());

                    }
                    break;
                case 4 :
                    // Objcm.g:150:5: implementation_method_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_implementation_method_wrapper_in_implementation_body618);
                    implementation_method_wrapper30=implementation_method_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, implementation_method_wrapper30.getTree());

                    }
                    break;
                case 5 :
                    // Objcm.g:152:4: field_type_started_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_field_type_started_wrapper_in_implementation_body624);
                    field_type_started_wrapper31=field_type_started_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, field_type_started_wrapper31.getTree());

                    }
                    break;
                case 6 :
                    // Objcm.g:153:5: field_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_field_declaration_wrapper_in_implementation_body630);
                    field_declaration_wrapper32=field_declaration_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, field_declaration_wrapper32.getTree());

                    }
                    break;
                case 7 :
                    // Objcm.g:154:4: typedef_struct_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_typedef_struct_declaration_wrapper_in_implementation_body635);
                    typedef_struct_declaration_wrapper33=typedef_struct_declaration_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, typedef_struct_declaration_wrapper33.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implementation_body"


    public static class directives_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "directives"
    // Objcm.g:157:1: directives : synthesize ;
    public final ObjcmParser.directives_return directives() throws RecognitionException {
        ObjcmParser.directives_return retval = new ObjcmParser.directives_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.synthesize_return synthesize34 =null;



        try {
            // Objcm.g:158:2: ( synthesize )
            // Objcm.g:158:4: synthesize
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_synthesize_in_directives646);
            synthesize34=synthesize();

            state._fsp--;

            adaptor.addChild(root_0, synthesize34.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "directives"


    public static class synthesize_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "synthesize"
    // Objcm.g:161:1: synthesize : '@synthesize' ID SEMICOLON ;
    public final ObjcmParser.synthesize_return synthesize() throws RecognitionException {
        ObjcmParser.synthesize_return retval = new ObjcmParser.synthesize_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal35=null;
        Token ID36=null;
        Token SEMICOLON37=null;

        Object string_literal35_tree=null;
        Object ID36_tree=null;
        Object SEMICOLON37_tree=null;

        try {
            // Objcm.g:162:2: ( '@synthesize' ID SEMICOLON )
            // Objcm.g:162:4: '@synthesize' ID SEMICOLON
            {
            root_0 = (Object)adaptor.nil();


            string_literal35=(Token)match(input,162,FOLLOW_162_in_synthesize659); 
            string_literal35_tree = 
            (Object)adaptor.create(string_literal35)
            ;
            adaptor.addChild(root_0, string_literal35_tree);


            ID36=(Token)match(input,ID,FOLLOW_ID_in_synthesize662); 
            ID36_tree = 
            (Object)adaptor.create(ID36)
            ;
            adaptor.addChild(root_0, ID36_tree);


            SEMICOLON37=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_synthesize665); 
            SEMICOLON37_tree = 
            (Object)adaptor.create(SEMICOLON37)
            ;
            adaptor.addChild(root_0, SEMICOLON37_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "synthesize"


    public static class typedef_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typedef"
    // Objcm.g:165:1: typedef : 'typedef' ( typedef_declaration_wrapper | typedef_struct_declaration_wrapper ) ;
    public final ObjcmParser.typedef_return typedef() throws RecognitionException {
        ObjcmParser.typedef_return retval = new ObjcmParser.typedef_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal38=null;
        ObjcmParser.typedef_declaration_wrapper_return typedef_declaration_wrapper39 =null;

        ObjcmParser.typedef_struct_declaration_wrapper_return typedef_struct_declaration_wrapper40 =null;


        Object string_literal38_tree=null;

        try {
            // Objcm.g:165:9: ( 'typedef' ( typedef_declaration_wrapper | typedef_struct_declaration_wrapper ) )
            // Objcm.g:165:11: 'typedef' ( typedef_declaration_wrapper | typedef_struct_declaration_wrapper )
            {
            root_0 = (Object)adaptor.nil();


            string_literal38=(Token)match(input,181,FOLLOW_181_in_typedef677); 
            string_literal38_tree = 
            (Object)adaptor.create(string_literal38)
            ;
            adaptor.addChild(root_0, string_literal38_tree);


            // Objcm.g:165:22: ( typedef_declaration_wrapper | typedef_struct_declaration_wrapper )
            int alt9=2;
            int LA9_0 = input.LA(1);

            if ( (LA9_0==ENUM_PREFIX) ) {
                alt9=1;
            }
            else if ( (LA9_0==STRUCT_PREFIX) ) {
                alt9=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 9, 0, input);

                throw nvae;

            }
            switch (alt9) {
                case 1 :
                    // Objcm.g:165:23: typedef_declaration_wrapper
                    {
                    pushFollow(FOLLOW_typedef_declaration_wrapper_in_typedef681);
                    typedef_declaration_wrapper39=typedef_declaration_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, typedef_declaration_wrapper39.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:165:53: typedef_struct_declaration_wrapper
                    {
                    pushFollow(FOLLOW_typedef_struct_declaration_wrapper_in_typedef685);
                    typedef_struct_declaration_wrapper40=typedef_struct_declaration_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, typedef_struct_declaration_wrapper40.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typedef"


    public static class static_section_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "static_section_wrapper"
    // Objcm.g:168:1: static_section_wrapper : static_section -> ^( STATIC static_section ) ;
    public final ObjcmParser.static_section_wrapper_return static_section_wrapper() throws RecognitionException {
        ObjcmParser.static_section_wrapper_return retval = new ObjcmParser.static_section_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.static_section_return static_section41 =null;


        RewriteRuleSubtreeStream stream_static_section=new RewriteRuleSubtreeStream(adaptor,"rule static_section");
        try {
            // Objcm.g:169:2: ( static_section -> ^( STATIC static_section ) )
            // Objcm.g:169:4: static_section
            {
            pushFollow(FOLLOW_static_section_in_static_section_wrapper700);
            static_section41=static_section();

            state._fsp--;

            stream_static_section.add(static_section41.getTree());

            // AST REWRITE
            // elements: static_section
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 169:19: -> ^( STATIC static_section )
            {
                // Objcm.g:169:22: ^( STATIC static_section )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(STATIC, "STATIC")
                , root_1);

                adaptor.addChild(root_1, stream_static_section.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "static_section_wrapper"


    public static class static_section_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "static_section"
    // Objcm.g:171:1: static_section : STATIC_PREFIX ( CONST_PREFIX )? ( STRUCT_PREFIX )? ( ENUM_PREFIX )? static_section2 ;
    public final ObjcmParser.static_section_return static_section() throws RecognitionException {
        ObjcmParser.static_section_return retval = new ObjcmParser.static_section_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STATIC_PREFIX42=null;
        Token CONST_PREFIX43=null;
        Token STRUCT_PREFIX44=null;
        Token ENUM_PREFIX45=null;
        ObjcmParser.static_section2_return static_section246 =null;


        Object STATIC_PREFIX42_tree=null;
        Object CONST_PREFIX43_tree=null;
        Object STRUCT_PREFIX44_tree=null;
        Object ENUM_PREFIX45_tree=null;

        try {
            // Objcm.g:172:2: ( STATIC_PREFIX ( CONST_PREFIX )? ( STRUCT_PREFIX )? ( ENUM_PREFIX )? static_section2 )
            // Objcm.g:172:4: STATIC_PREFIX ( CONST_PREFIX )? ( STRUCT_PREFIX )? ( ENUM_PREFIX )? static_section2
            {
            root_0 = (Object)adaptor.nil();


            STATIC_PREFIX42=(Token)match(input,STATIC_PREFIX,FOLLOW_STATIC_PREFIX_in_static_section720); 
            STATIC_PREFIX42_tree = 
            (Object)adaptor.create(STATIC_PREFIX42)
            ;
            adaptor.addChild(root_0, STATIC_PREFIX42_tree);


            // Objcm.g:172:18: ( CONST_PREFIX )?
            int alt10=2;
            int LA10_0 = input.LA(1);

            if ( (LA10_0==CONST_PREFIX) ) {
                alt10=1;
            }
            switch (alt10) {
                case 1 :
                    // Objcm.g:172:18: CONST_PREFIX
                    {
                    CONST_PREFIX43=(Token)match(input,CONST_PREFIX,FOLLOW_CONST_PREFIX_in_static_section722); 
                    CONST_PREFIX43_tree = 
                    (Object)adaptor.create(CONST_PREFIX43)
                    ;
                    adaptor.addChild(root_0, CONST_PREFIX43_tree);


                    }
                    break;

            }


            // Objcm.g:172:32: ( STRUCT_PREFIX )?
            int alt11=2;
            int LA11_0 = input.LA(1);

            if ( (LA11_0==STRUCT_PREFIX) ) {
                alt11=1;
            }
            switch (alt11) {
                case 1 :
                    // Objcm.g:172:32: STRUCT_PREFIX
                    {
                    STRUCT_PREFIX44=(Token)match(input,STRUCT_PREFIX,FOLLOW_STRUCT_PREFIX_in_static_section725); 
                    STRUCT_PREFIX44_tree = 
                    (Object)adaptor.create(STRUCT_PREFIX44)
                    ;
                    adaptor.addChild(root_0, STRUCT_PREFIX44_tree);


                    }
                    break;

            }


            // Objcm.g:172:47: ( ENUM_PREFIX )?
            int alt12=2;
            int LA12_0 = input.LA(1);

            if ( (LA12_0==ENUM_PREFIX) ) {
                alt12=1;
            }
            switch (alt12) {
                case 1 :
                    // Objcm.g:172:47: ENUM_PREFIX
                    {
                    ENUM_PREFIX45=(Token)match(input,ENUM_PREFIX,FOLLOW_ENUM_PREFIX_in_static_section728); 
                    ENUM_PREFIX45_tree = 
                    (Object)adaptor.create(ENUM_PREFIX45)
                    ;
                    adaptor.addChild(root_0, ENUM_PREFIX45_tree);


                    }
                    break;

            }


            pushFollow(FOLLOW_static_section2_in_static_section731);
            static_section246=static_section2();

            state._fsp--;

            adaptor.addChild(root_0, static_section246.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "static_section"


    public static class static_section2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "static_section2"
    // Objcm.g:174:1: static_section2 : ( inline_section | implementation_method_wrapper2 | static_section3 );
    public final ObjcmParser.static_section2_return static_section2() throws RecognitionException {
        ObjcmParser.static_section2_return retval = new ObjcmParser.static_section2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.inline_section_return inline_section47 =null;

        ObjcmParser.implementation_method_wrapper2_return implementation_method_wrapper248 =null;

        ObjcmParser.static_section3_return static_section349 =null;



        try {
            // Objcm.g:175:2: ( inline_section | implementation_method_wrapper2 | static_section3 )
            int alt13=3;
            switch ( input.LA(1) ) {
            case 177:
                {
                alt13=1;
                }
                break;
            case L_FBR:
            case SEMICOLON:
                {
                alt13=2;
                }
                break;
            case ID:
            case VOID:
                {
                alt13=3;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 13, 0, input);

                throw nvae;

            }

            switch (alt13) {
                case 1 :
                    // Objcm.g:175:4: inline_section
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_inline_section_in_static_section2740);
                    inline_section47=inline_section();

                    state._fsp--;

                    adaptor.addChild(root_0, inline_section47.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:176:5: implementation_method_wrapper2
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_implementation_method_wrapper2_in_static_section2747);
                    implementation_method_wrapper248=implementation_method_wrapper2();

                    state._fsp--;

                    adaptor.addChild(root_0, implementation_method_wrapper248.getTree());

                    }
                    break;
                case 3 :
                    // Objcm.g:177:5: static_section3
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_static_section3_in_static_section2754);
                    static_section349=static_section3();

                    state._fsp--;

                    adaptor.addChild(root_0, static_section349.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "static_section2"


    public static class inline_section_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "inline_section"
    // Objcm.g:180:1: inline_section : 'inline' field_type name ( method_params2 )? ( block_wrapper | SEMICOLON ) ;
    public final ObjcmParser.inline_section_return inline_section() throws RecognitionException {
        ObjcmParser.inline_section_return retval = new ObjcmParser.inline_section_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal50=null;
        Token SEMICOLON55=null;
        ObjcmParser.field_type_return field_type51 =null;

        ObjcmParser.name_return name52 =null;

        ObjcmParser.method_params2_return method_params253 =null;

        ObjcmParser.block_wrapper_return block_wrapper54 =null;


        Object string_literal50_tree=null;
        Object SEMICOLON55_tree=null;

        try {
            // Objcm.g:181:2: ( 'inline' field_type name ( method_params2 )? ( block_wrapper | SEMICOLON ) )
            // Objcm.g:181:4: 'inline' field_type name ( method_params2 )? ( block_wrapper | SEMICOLON )
            {
            root_0 = (Object)adaptor.nil();


            string_literal50=(Token)match(input,177,FOLLOW_177_in_inline_section766); 
            string_literal50_tree = 
            (Object)adaptor.create(string_literal50)
            ;
            adaptor.addChild(root_0, string_literal50_tree);


            pushFollow(FOLLOW_field_type_in_inline_section769);
            field_type51=field_type();

            state._fsp--;

            adaptor.addChild(root_0, field_type51.getTree());

            pushFollow(FOLLOW_name_in_inline_section771);
            name52=name();

            state._fsp--;

            adaptor.addChild(root_0, name52.getTree());

            // Objcm.g:181:31: ( method_params2 )?
            int alt14=2;
            int LA14_0 = input.LA(1);

            if ( (LA14_0==L_BR) ) {
                alt14=1;
            }
            switch (alt14) {
                case 1 :
                    // Objcm.g:181:31: method_params2
                    {
                    pushFollow(FOLLOW_method_params2_in_inline_section774);
                    method_params253=method_params2();

                    state._fsp--;

                    adaptor.addChild(root_0, method_params253.getTree());

                    }
                    break;

            }


            // Objcm.g:181:47: ( block_wrapper | SEMICOLON )
            int alt15=2;
            int LA15_0 = input.LA(1);

            if ( (LA15_0==L_FBR) ) {
                alt15=1;
            }
            else if ( (LA15_0==SEMICOLON) ) {
                alt15=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 15, 0, input);

                throw nvae;

            }
            switch (alt15) {
                case 1 :
                    // Objcm.g:181:48: block_wrapper
                    {
                    pushFollow(FOLLOW_block_wrapper_in_inline_section778);
                    block_wrapper54=block_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, block_wrapper54.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:181:64: SEMICOLON
                    {
                    SEMICOLON55=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_inline_section782); 
                    SEMICOLON55_tree = 
                    (Object)adaptor.create(SEMICOLON55)
                    ;
                    adaptor.addChild(root_0, SEMICOLON55_tree);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "inline_section"


    public static class static_section3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "static_section3"
    // Objcm.g:183:1: static_section3 : field_type name ( indexed )* static_end ;
    public final ObjcmParser.static_section3_return static_section3() throws RecognitionException {
        ObjcmParser.static_section3_return retval = new ObjcmParser.static_section3_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.field_type_return field_type56 =null;

        ObjcmParser.name_return name57 =null;

        ObjcmParser.indexed_return indexed58 =null;

        ObjcmParser.static_end_return static_end59 =null;



        try {
            // Objcm.g:184:2: ( field_type name ( indexed )* static_end )
            // Objcm.g:184:4: field_type name ( indexed )* static_end
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_field_type_in_static_section3793);
            field_type56=field_type();

            state._fsp--;

            adaptor.addChild(root_0, field_type56.getTree());

            pushFollow(FOLLOW_name_in_static_section3795);
            name57=name();

            state._fsp--;

            adaptor.addChild(root_0, name57.getTree());

            // Objcm.g:184:20: ( indexed )*
            loop16:
            do {
                int alt16=2;
                int LA16_0 = input.LA(1);

                if ( (LA16_0==L_KBR) ) {
                    alt16=1;
                }


                switch (alt16) {
            	case 1 :
            	    // Objcm.g:184:20: indexed
            	    {
            	    pushFollow(FOLLOW_indexed_in_static_section3797);
            	    indexed58=indexed();

            	    state._fsp--;

            	    adaptor.addChild(root_0, indexed58.getTree());

            	    }
            	    break;

            	default :
            	    break loop16;
                }
            } while (true);


            pushFollow(FOLLOW_static_end_in_static_section3801);
            static_end59=static_end();

            state._fsp--;

            adaptor.addChild(root_0, static_end59.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "static_section3"


    public static class static_end_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "static_end"
    // Objcm.g:187:1: static_end : ( implementation_method_wrapper3 | field_end );
    public final ObjcmParser.static_end_return static_end() throws RecognitionException {
        ObjcmParser.static_end_return retval = new ObjcmParser.static_end_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.implementation_method_wrapper3_return implementation_method_wrapper360 =null;

        ObjcmParser.field_end_return field_end61 =null;



        try {
            // Objcm.g:188:2: ( implementation_method_wrapper3 | field_end )
            int alt17=2;
            int LA17_0 = input.LA(1);

            if ( (LA17_0==L_BR) ) {
                alt17=1;
            }
            else if ( (LA17_0==L_EQ||LA17_0==SEMICOLON) ) {
                alt17=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 17, 0, input);

                throw nvae;

            }
            switch (alt17) {
                case 1 :
                    // Objcm.g:188:4: implementation_method_wrapper3
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_implementation_method_wrapper3_in_static_end813);
                    implementation_method_wrapper360=implementation_method_wrapper3();

                    state._fsp--;

                    adaptor.addChild(root_0, implementation_method_wrapper360.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:189:5: field_end
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_field_end_in_static_end819);
                    field_end61=field_end();

                    state._fsp--;

                    adaptor.addChild(root_0, field_end61.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "static_end"


    public static class field_end_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_end"
    // Objcm.g:191:1: field_end : field_end_internal -> ^( FIELD field_end_internal ) ;
    public final ObjcmParser.field_end_return field_end() throws RecognitionException {
        ObjcmParser.field_end_return retval = new ObjcmParser.field_end_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.field_end_internal_return field_end_internal62 =null;


        RewriteRuleSubtreeStream stream_field_end_internal=new RewriteRuleSubtreeStream(adaptor,"rule field_end_internal");
        try {
            // Objcm.g:192:2: ( field_end_internal -> ^( FIELD field_end_internal ) )
            // Objcm.g:192:4: field_end_internal
            {
            pushFollow(FOLLOW_field_end_internal_in_field_end830);
            field_end_internal62=field_end_internal();

            state._fsp--;

            stream_field_end_internal.add(field_end_internal62.getTree());

            // AST REWRITE
            // elements: field_end_internal
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 192:23: -> ^( FIELD field_end_internal )
            {
                // Objcm.g:192:26: ^( FIELD field_end_internal )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FIELD, "FIELD")
                , root_1);

                adaptor.addChild(root_1, stream_field_end_internal.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_end"


    public static class field_end_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_end_internal"
    // Objcm.g:194:1: field_end_internal : ( value_set )? SEMICOLON ;
    public final ObjcmParser.field_end_internal_return field_end_internal() throws RecognitionException {
        ObjcmParser.field_end_internal_return retval = new ObjcmParser.field_end_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON64=null;
        ObjcmParser.value_set_return value_set63 =null;


        Object SEMICOLON64_tree=null;

        try {
            // Objcm.g:195:2: ( ( value_set )? SEMICOLON )
            // Objcm.g:195:4: ( value_set )? SEMICOLON
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:195:4: ( value_set )?
            int alt18=2;
            int LA18_0 = input.LA(1);

            if ( (LA18_0==L_EQ) ) {
                alt18=1;
            }
            switch (alt18) {
                case 1 :
                    // Objcm.g:195:4: value_set
                    {
                    pushFollow(FOLLOW_value_set_in_field_end_internal848);
                    value_set63=value_set();

                    state._fsp--;

                    adaptor.addChild(root_0, value_set63.getTree());

                    }
                    break;

            }


            SEMICOLON64=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_field_end_internal851); 
            SEMICOLON64_tree = 
            (Object)adaptor.create(SEMICOLON64)
            ;
            adaptor.addChild(root_0, SEMICOLON64_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_end_internal"


    public static class implementation_method_wrapper3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementation_method_wrapper3"
    // Objcm.g:197:1: implementation_method_wrapper3 : implementation_method3 -> ^( METHOD implementation_method3 ) ;
    public final ObjcmParser.implementation_method_wrapper3_return implementation_method_wrapper3() throws RecognitionException {
        ObjcmParser.implementation_method_wrapper3_return retval = new ObjcmParser.implementation_method_wrapper3_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.implementation_method3_return implementation_method365 =null;


        RewriteRuleSubtreeStream stream_implementation_method3=new RewriteRuleSubtreeStream(adaptor,"rule implementation_method3");
        try {
            // Objcm.g:198:2: ( implementation_method3 -> ^( METHOD implementation_method3 ) )
            // Objcm.g:198:4: implementation_method3
            {
            pushFollow(FOLLOW_implementation_method3_in_implementation_method_wrapper3863);
            implementation_method365=implementation_method3();

            state._fsp--;

            stream_implementation_method3.add(implementation_method365.getTree());

            // AST REWRITE
            // elements: implementation_method3
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 198:27: -> ^( METHOD implementation_method3 )
            {
                // Objcm.g:198:30: ^( METHOD implementation_method3 )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD, "METHOD")
                , root_1);

                adaptor.addChild(root_1, stream_implementation_method3.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implementation_method_wrapper3"


    public static class implementation_method3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementation_method3"
    // Objcm.g:200:1: implementation_method3 : method_header_body3 ( SEMICOLON )? ( attribute )? ( block_wrapper )? ;
    public final ObjcmParser.implementation_method3_return implementation_method3() throws RecognitionException {
        ObjcmParser.implementation_method3_return retval = new ObjcmParser.implementation_method3_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON67=null;
        ObjcmParser.method_header_body3_return method_header_body366 =null;

        ObjcmParser.attribute_return attribute68 =null;

        ObjcmParser.block_wrapper_return block_wrapper69 =null;


        Object SEMICOLON67_tree=null;

        try {
            // Objcm.g:201:2: ( method_header_body3 ( SEMICOLON )? ( attribute )? ( block_wrapper )? )
            // Objcm.g:201:4: method_header_body3 ( SEMICOLON )? ( attribute )? ( block_wrapper )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_method_header_body3_in_implementation_method3881);
            method_header_body366=method_header_body3();

            state._fsp--;

            adaptor.addChild(root_0, method_header_body366.getTree());

            // Objcm.g:201:25: ( SEMICOLON )?
            int alt19=2;
            int LA19_0 = input.LA(1);

            if ( (LA19_0==SEMICOLON) ) {
                alt19=1;
            }
            switch (alt19) {
                case 1 :
                    // Objcm.g:201:25: SEMICOLON
                    {
                    SEMICOLON67=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_implementation_method3884); 
                    SEMICOLON67_tree = 
                    (Object)adaptor.create(SEMICOLON67)
                    ;
                    adaptor.addChild(root_0, SEMICOLON67_tree);


                    }
                    break;

            }


            // Objcm.g:202:3: ( attribute )?
            int alt20=2;
            int LA20_0 = input.LA(1);

            if ( (LA20_0==166) ) {
                alt20=1;
            }
            switch (alt20) {
                case 1 :
                    // Objcm.g:202:3: attribute
                    {
                    pushFollow(FOLLOW_attribute_in_implementation_method3889);
                    attribute68=attribute();

                    state._fsp--;

                    adaptor.addChild(root_0, attribute68.getTree());

                    }
                    break;

            }


            // Objcm.g:203:3: ( block_wrapper )?
            int alt21=2;
            int LA21_0 = input.LA(1);

            if ( (LA21_0==L_FBR) ) {
                alt21=1;
            }
            switch (alt21) {
                case 1 :
                    // Objcm.g:203:3: block_wrapper
                    {
                    pushFollow(FOLLOW_block_wrapper_in_implementation_method3894);
                    block_wrapper69=block_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, block_wrapper69.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implementation_method3"


    public static class attribute_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "attribute"
    // Objcm.g:206:1: attribute : '__attribute__' L_BR L_BR 'constructor' R_BR R_BR SEMICOLON ;
    public final ObjcmParser.attribute_return attribute() throws RecognitionException {
        ObjcmParser.attribute_return retval = new ObjcmParser.attribute_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal70=null;
        Token L_BR71=null;
        Token L_BR72=null;
        Token string_literal73=null;
        Token R_BR74=null;
        Token R_BR75=null;
        Token SEMICOLON76=null;

        Object string_literal70_tree=null;
        Object L_BR71_tree=null;
        Object L_BR72_tree=null;
        Object string_literal73_tree=null;
        Object R_BR74_tree=null;
        Object R_BR75_tree=null;
        Object SEMICOLON76_tree=null;

        try {
            // Objcm.g:207:2: ( '__attribute__' L_BR L_BR 'constructor' R_BR R_BR SEMICOLON )
            // Objcm.g:207:4: '__attribute__' L_BR L_BR 'constructor' R_BR R_BR SEMICOLON
            {
            root_0 = (Object)adaptor.nil();


            string_literal70=(Token)match(input,166,FOLLOW_166_in_attribute907); 
            string_literal70_tree = 
            (Object)adaptor.create(string_literal70)
            ;
            adaptor.addChild(root_0, string_literal70_tree);


            L_BR71=(Token)match(input,L_BR,FOLLOW_L_BR_in_attribute910); 
            L_BR71_tree = 
            (Object)adaptor.create(L_BR71)
            ;
            adaptor.addChild(root_0, L_BR71_tree);


            L_BR72=(Token)match(input,L_BR,FOLLOW_L_BR_in_attribute913); 
            L_BR72_tree = 
            (Object)adaptor.create(L_BR72)
            ;
            adaptor.addChild(root_0, L_BR72_tree);


            string_literal73=(Token)match(input,169,FOLLOW_169_in_attribute916); 
            string_literal73_tree = 
            (Object)adaptor.create(string_literal73)
            ;
            adaptor.addChild(root_0, string_literal73_tree);


            R_BR74=(Token)match(input,R_BR,FOLLOW_R_BR_in_attribute919); 
            R_BR74_tree = 
            (Object)adaptor.create(R_BR74)
            ;
            adaptor.addChild(root_0, R_BR74_tree);


            R_BR75=(Token)match(input,R_BR,FOLLOW_R_BR_in_attribute922); 
            R_BR75_tree = 
            (Object)adaptor.create(R_BR75)
            ;
            adaptor.addChild(root_0, R_BR75_tree);


            SEMICOLON76=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_attribute925); 
            SEMICOLON76_tree = 
            (Object)adaptor.create(SEMICOLON76)
            ;
            adaptor.addChild(root_0, SEMICOLON76_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "attribute"


    public static class implementation_method2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementation_method2"
    // Objcm.g:209:1: implementation_method2 : ( SEMICOLON )? block_wrapper ;
    public final ObjcmParser.implementation_method2_return implementation_method2() throws RecognitionException {
        ObjcmParser.implementation_method2_return retval = new ObjcmParser.implementation_method2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON77=null;
        ObjcmParser.block_wrapper_return block_wrapper78 =null;


        Object SEMICOLON77_tree=null;

        try {
            // Objcm.g:210:2: ( ( SEMICOLON )? block_wrapper )
            // Objcm.g:210:5: ( SEMICOLON )? block_wrapper
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:210:5: ( SEMICOLON )?
            int alt22=2;
            int LA22_0 = input.LA(1);

            if ( (LA22_0==SEMICOLON) ) {
                alt22=1;
            }
            switch (alt22) {
                case 1 :
                    // Objcm.g:210:5: SEMICOLON
                    {
                    SEMICOLON77=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_implementation_method2937); 
                    SEMICOLON77_tree = 
                    (Object)adaptor.create(SEMICOLON77)
                    ;
                    adaptor.addChild(root_0, SEMICOLON77_tree);


                    }
                    break;

            }


            pushFollow(FOLLOW_block_wrapper_in_implementation_method2942);
            block_wrapper78=block_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, block_wrapper78.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implementation_method2"


    public static class field_type_started_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_type_started_wrapper"
    // Objcm.g:214:1: field_type_started_wrapper : field_type_started -> ^( FIELD_TYPE_STARTED field_type_started ) ;
    public final ObjcmParser.field_type_started_wrapper_return field_type_started_wrapper() throws RecognitionException {
        ObjcmParser.field_type_started_wrapper_return retval = new ObjcmParser.field_type_started_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.field_type_started_return field_type_started79 =null;


        RewriteRuleSubtreeStream stream_field_type_started=new RewriteRuleSubtreeStream(adaptor,"rule field_type_started");
        try {
            // Objcm.g:215:2: ( field_type_started -> ^( FIELD_TYPE_STARTED field_type_started ) )
            // Objcm.g:215:4: field_type_started
            {
            pushFollow(FOLLOW_field_type_started_in_field_type_started_wrapper954);
            field_type_started79=field_type_started();

            state._fsp--;

            stream_field_type_started.add(field_type_started79.getTree());

            // AST REWRITE
            // elements: field_type_started
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 215:23: -> ^( FIELD_TYPE_STARTED field_type_started )
            {
                // Objcm.g:215:26: ^( FIELD_TYPE_STARTED field_type_started )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FIELD_TYPE_STARTED, "FIELD_TYPE_STARTED")
                , root_1);

                adaptor.addChild(root_1, stream_field_type_started.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_type_started_wrapper"


    public static class field_type_started_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_type_started"
    // Objcm.g:217:1: field_type_started : field_type name ( classic_method_declaration_wrapper | field_declaration_end_wrapper ) ;
    public final ObjcmParser.field_type_started_return field_type_started() throws RecognitionException {
        ObjcmParser.field_type_started_return retval = new ObjcmParser.field_type_started_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.field_type_return field_type80 =null;

        ObjcmParser.name_return name81 =null;

        ObjcmParser.classic_method_declaration_wrapper_return classic_method_declaration_wrapper82 =null;

        ObjcmParser.field_declaration_end_wrapper_return field_declaration_end_wrapper83 =null;



        try {
            // Objcm.g:218:2: ( field_type name ( classic_method_declaration_wrapper | field_declaration_end_wrapper ) )
            // Objcm.g:218:4: field_type name ( classic_method_declaration_wrapper | field_declaration_end_wrapper )
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_field_type_in_field_type_started973);
            field_type80=field_type();

            state._fsp--;

            adaptor.addChild(root_0, field_type80.getTree());

            pushFollow(FOLLOW_name_in_field_type_started975);
            name81=name();

            state._fsp--;

            adaptor.addChild(root_0, name81.getTree());

            // Objcm.g:218:20: ( classic_method_declaration_wrapper | field_declaration_end_wrapper )
            int alt23=2;
            int LA23_0 = input.LA(1);

            if ( (LA23_0==L_BR) ) {
                alt23=1;
            }
            else if ( (LA23_0==L_EQ||LA23_0==SEMICOLON) ) {
                alt23=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 23, 0, input);

                throw nvae;

            }
            switch (alt23) {
                case 1 :
                    // Objcm.g:218:21: classic_method_declaration_wrapper
                    {
                    pushFollow(FOLLOW_classic_method_declaration_wrapper_in_field_type_started978);
                    classic_method_declaration_wrapper82=classic_method_declaration_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, classic_method_declaration_wrapper82.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:218:58: field_declaration_end_wrapper
                    {
                    pushFollow(FOLLOW_field_declaration_end_wrapper_in_field_type_started982);
                    field_declaration_end_wrapper83=field_declaration_end_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, field_declaration_end_wrapper83.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_type_started"


    public static class field_declaration_end_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_declaration_end_wrapper"
    // Objcm.g:220:1: field_declaration_end_wrapper : field_declaration_end -> ^( FIELD field_declaration_end ) ;
    public final ObjcmParser.field_declaration_end_wrapper_return field_declaration_end_wrapper() throws RecognitionException {
        ObjcmParser.field_declaration_end_wrapper_return retval = new ObjcmParser.field_declaration_end_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.field_declaration_end_return field_declaration_end84 =null;


        RewriteRuleSubtreeStream stream_field_declaration_end=new RewriteRuleSubtreeStream(adaptor,"rule field_declaration_end");
        try {
            // Objcm.g:221:2: ( field_declaration_end -> ^( FIELD field_declaration_end ) )
            // Objcm.g:221:4: field_declaration_end
            {
            pushFollow(FOLLOW_field_declaration_end_in_field_declaration_end_wrapper993);
            field_declaration_end84=field_declaration_end();

            state._fsp--;

            stream_field_declaration_end.add(field_declaration_end84.getTree());

            // AST REWRITE
            // elements: field_declaration_end
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 221:26: -> ^( FIELD field_declaration_end )
            {
                // Objcm.g:221:29: ^( FIELD field_declaration_end )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FIELD, "FIELD")
                , root_1);

                adaptor.addChild(root_1, stream_field_declaration_end.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_declaration_end_wrapper"


    public static class classic_method_declaration_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classic_method_declaration_wrapper"
    // Objcm.g:223:1: classic_method_declaration_wrapper : classic_method_declaration -> ^( STATIC_METHOD classic_method_declaration ) ;
    public final ObjcmParser.classic_method_declaration_wrapper_return classic_method_declaration_wrapper() throws RecognitionException {
        ObjcmParser.classic_method_declaration_wrapper_return retval = new ObjcmParser.classic_method_declaration_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.classic_method_declaration_return classic_method_declaration85 =null;


        RewriteRuleSubtreeStream stream_classic_method_declaration=new RewriteRuleSubtreeStream(adaptor,"rule classic_method_declaration");
        try {
            // Objcm.g:224:2: ( classic_method_declaration -> ^( STATIC_METHOD classic_method_declaration ) )
            // Objcm.g:224:4: classic_method_declaration
            {
            pushFollow(FOLLOW_classic_method_declaration_in_classic_method_declaration_wrapper1011);
            classic_method_declaration85=classic_method_declaration();

            state._fsp--;

            stream_classic_method_declaration.add(classic_method_declaration85.getTree());

            // AST REWRITE
            // elements: classic_method_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 224:31: -> ^( STATIC_METHOD classic_method_declaration )
            {
                // Objcm.g:224:34: ^( STATIC_METHOD classic_method_declaration )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(STATIC_METHOD, "STATIC_METHOD")
                , root_1);

                adaptor.addChild(root_1, stream_classic_method_declaration.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classic_method_declaration_wrapper"


    public static class classic_method_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classic_method_declaration"
    // Objcm.g:226:1: classic_method_declaration : method_params2 block_wrapper ;
    public final ObjcmParser.classic_method_declaration_return classic_method_declaration() throws RecognitionException {
        ObjcmParser.classic_method_declaration_return retval = new ObjcmParser.classic_method_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_params2_return method_params286 =null;

        ObjcmParser.block_wrapper_return block_wrapper87 =null;



        try {
            // Objcm.g:228:2: ( method_params2 block_wrapper )
            // Objcm.g:228:4: method_params2 block_wrapper
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_method_params2_in_classic_method_declaration1031);
            method_params286=method_params2();

            state._fsp--;

            adaptor.addChild(root_0, method_params286.getTree());

            pushFollow(FOLLOW_block_wrapper_in_classic_method_declaration1036);
            block_wrapper87=block_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, block_wrapper87.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classic_method_declaration"


    public static class implementation_method_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementation_method_wrapper"
    // Objcm.g:232:1: implementation_method_wrapper : implementation_method -> ^( METHOD implementation_method ) ;
    public final ObjcmParser.implementation_method_wrapper_return implementation_method_wrapper() throws RecognitionException {
        ObjcmParser.implementation_method_wrapper_return retval = new ObjcmParser.implementation_method_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.implementation_method_return implementation_method88 =null;


        RewriteRuleSubtreeStream stream_implementation_method=new RewriteRuleSubtreeStream(adaptor,"rule implementation_method");
        try {
            // Objcm.g:233:2: ( implementation_method -> ^( METHOD implementation_method ) )
            // Objcm.g:233:4: implementation_method
            {
            pushFollow(FOLLOW_implementation_method_in_implementation_method_wrapper1049);
            implementation_method88=implementation_method();

            state._fsp--;

            stream_implementation_method.add(implementation_method88.getTree());

            // AST REWRITE
            // elements: implementation_method
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 233:26: -> ^( METHOD implementation_method )
            {
                // Objcm.g:233:29: ^( METHOD implementation_method )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD, "METHOD")
                , root_1);

                adaptor.addChild(root_1, stream_implementation_method.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implementation_method_wrapper"


    public static class implementation_method_wrapper2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementation_method_wrapper2"
    // Objcm.g:235:1: implementation_method_wrapper2 : implementation_method2 -> ^( METHOD implementation_method2 ) ;
    public final ObjcmParser.implementation_method_wrapper2_return implementation_method_wrapper2() throws RecognitionException {
        ObjcmParser.implementation_method_wrapper2_return retval = new ObjcmParser.implementation_method_wrapper2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.implementation_method2_return implementation_method289 =null;


        RewriteRuleSubtreeStream stream_implementation_method2=new RewriteRuleSubtreeStream(adaptor,"rule implementation_method2");
        try {
            // Objcm.g:236:2: ( implementation_method2 -> ^( METHOD implementation_method2 ) )
            // Objcm.g:236:4: implementation_method2
            {
            pushFollow(FOLLOW_implementation_method2_in_implementation_method_wrapper21066);
            implementation_method289=implementation_method2();

            state._fsp--;

            stream_implementation_method2.add(implementation_method289.getTree());

            // AST REWRITE
            // elements: implementation_method2
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 236:27: -> ^( METHOD implementation_method2 )
            {
                // Objcm.g:236:30: ^( METHOD implementation_method2 )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD, "METHOD")
                , root_1);

                adaptor.addChild(root_1, stream_implementation_method2.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implementation_method_wrapper2"


    public static class implementation_method_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementation_method"
    // Objcm.g:238:1: implementation_method : method_header_body ( SEMICOLON )? block_wrapper ;
    public final ObjcmParser.implementation_method_return implementation_method() throws RecognitionException {
        ObjcmParser.implementation_method_return retval = new ObjcmParser.implementation_method_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON91=null;
        ObjcmParser.method_header_body_return method_header_body90 =null;

        ObjcmParser.block_wrapper_return block_wrapper92 =null;


        Object SEMICOLON91_tree=null;

        try {
            // Objcm.g:239:2: ( method_header_body ( SEMICOLON )? block_wrapper )
            // Objcm.g:239:4: method_header_body ( SEMICOLON )? block_wrapper
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_method_header_body_in_implementation_method1083);
            method_header_body90=method_header_body();

            state._fsp--;

            adaptor.addChild(root_0, method_header_body90.getTree());

            // Objcm.g:239:23: ( SEMICOLON )?
            int alt24=2;
            int LA24_0 = input.LA(1);

            if ( (LA24_0==SEMICOLON) ) {
                alt24=1;
            }
            switch (alt24) {
                case 1 :
                    // Objcm.g:239:23: SEMICOLON
                    {
                    SEMICOLON91=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_implementation_method1085); 
                    SEMICOLON91_tree = 
                    (Object)adaptor.create(SEMICOLON91)
                    ;
                    adaptor.addChild(root_0, SEMICOLON91_tree);


                    }
                    break;

            }


            pushFollow(FOLLOW_block_wrapper_in_implementation_method1090);
            block_wrapper92=block_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, block_wrapper92.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implementation_method"


    public static class block_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_wrapper"
    // Objcm.g:243:1: block_wrapper : block -> ^( BLOCK block ) ;
    public final ObjcmParser.block_wrapper_return block_wrapper() throws RecognitionException {
        ObjcmParser.block_wrapper_return retval = new ObjcmParser.block_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.block_return block93 =null;


        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            // Objcm.g:244:2: ( block -> ^( BLOCK block ) )
            // Objcm.g:244:4: block
            {
            pushFollow(FOLLOW_block_in_block_wrapper1103);
            block93=block();

            state._fsp--;

            stream_block.add(block93.getTree());

            // AST REWRITE
            // elements: block
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 244:10: -> ^( BLOCK block )
            {
                // Objcm.g:244:13: ^( BLOCK block )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(BLOCK, "BLOCK")
                , root_1);

                adaptor.addChild(root_1, stream_block.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_wrapper"


    public static class block_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block"
    // Objcm.g:246:1: block : L_FBR ( block_internal_full | block )* R_FBR ;
    public final ObjcmParser.block_return block() throws RecognitionException {
        ObjcmParser.block_return retval = new ObjcmParser.block_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_FBR94=null;
        Token R_FBR97=null;
        ObjcmParser.block_internal_full_return block_internal_full95 =null;

        ObjcmParser.block_return block96 =null;


        Object L_FBR94_tree=null;
        Object R_FBR97_tree=null;

        try {
            // Objcm.g:246:7: ( L_FBR ( block_internal_full | block )* R_FBR )
            // Objcm.g:247:3: L_FBR ( block_internal_full | block )* R_FBR
            {
            root_0 = (Object)adaptor.nil();


            L_FBR94=(Token)match(input,L_FBR,FOLLOW_L_FBR_in_block1125); 
            L_FBR94_tree = 
            (Object)adaptor.create(L_FBR94)
            ;
            adaptor.addChild(root_0, L_FBR94_tree);


            // Objcm.g:248:4: ( block_internal_full | block )*
            loop25:
            do {
                int alt25=3;
                int LA25_0 = input.LA(1);

                if ( (LA25_0==ASTERISK||LA25_0==BREAK_WORD||LA25_0==CONST_PREFIX||LA25_0==ENUM_PREFIX||LA25_0==ID||LA25_0==L_AND||LA25_0==L_BR||LA25_0==L_KBR||LA25_0==L_MINUS||LA25_0==L_MINUS_MINUS||LA25_0==L_NOT||LA25_0==L_PLUS||LA25_0==L_PLUS_PLUS||LA25_0==L_TILDA||LA25_0==NUMBER||LA25_0==SEMICOLON||(LA25_0 >= SINGLE_OP && LA25_0 <= SIZEOF)||LA25_0==STATIC_PREFIX||(LA25_0 >= STRING_LITERAL && LA25_0 <= STRING_LITERAL3)||LA25_0==STRUCT_PREFIX||LA25_0==VOID||LA25_0==154||LA25_0==161||(LA25_0 >= 163 && LA25_0 <= 165)||LA25_0==167||(LA25_0 >= 171 && LA25_0 <= 172)||(LA25_0 >= 174 && LA25_0 <= 176)||(LA25_0 >= 178 && LA25_0 <= 180)||(LA25_0 >= 183 && LA25_0 <= 184)) ) {
                    alt25=1;
                }
                else if ( (LA25_0==L_FBR) ) {
                    alt25=2;
                }


                switch (alt25) {
            	case 1 :
            	    // Objcm.g:248:5: block_internal_full
            	    {
            	    pushFollow(FOLLOW_block_internal_full_in_block1131);
            	    block_internal_full95=block_internal_full();

            	    state._fsp--;

            	    adaptor.addChild(root_0, block_internal_full95.getTree());

            	    }
            	    break;
            	case 2 :
            	    // Objcm.g:248:27: block
            	    {
            	    pushFollow(FOLLOW_block_in_block1135);
            	    block96=block();

            	    state._fsp--;

            	    adaptor.addChild(root_0, block96.getTree());

            	    }
            	    break;

            	default :
            	    break loop25;
                }
            } while (true);


            R_FBR97=(Token)match(input,R_FBR,FOLLOW_R_FBR_in_block1143); 
            R_FBR97_tree = 
            (Object)adaptor.create(R_FBR97)
            ;
            adaptor.addChild(root_0, R_FBR97_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block"


    public static class block_case_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_case"
    // Objcm.g:252:1: block_case : L_FBR ( block_internal_full | block )* ( default_stmt )? R_FBR ;
    public final ObjcmParser.block_case_return block_case() throws RecognitionException {
        ObjcmParser.block_case_return retval = new ObjcmParser.block_case_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_FBR98=null;
        Token R_FBR102=null;
        ObjcmParser.block_internal_full_return block_internal_full99 =null;

        ObjcmParser.block_return block100 =null;

        ObjcmParser.default_stmt_return default_stmt101 =null;


        Object L_FBR98_tree=null;
        Object R_FBR102_tree=null;

        try {
            // Objcm.g:253:2: ( L_FBR ( block_internal_full | block )* ( default_stmt )? R_FBR )
            // Objcm.g:254:3: L_FBR ( block_internal_full | block )* ( default_stmt )? R_FBR
            {
            root_0 = (Object)adaptor.nil();


            L_FBR98=(Token)match(input,L_FBR,FOLLOW_L_FBR_in_block_case1158); 
            L_FBR98_tree = 
            (Object)adaptor.create(L_FBR98)
            ;
            adaptor.addChild(root_0, L_FBR98_tree);


            // Objcm.g:255:4: ( block_internal_full | block )*
            loop26:
            do {
                int alt26=3;
                int LA26_0 = input.LA(1);

                if ( (LA26_0==ASTERISK||LA26_0==BREAK_WORD||LA26_0==CONST_PREFIX||LA26_0==ENUM_PREFIX||LA26_0==ID||LA26_0==L_AND||LA26_0==L_BR||LA26_0==L_KBR||LA26_0==L_MINUS||LA26_0==L_MINUS_MINUS||LA26_0==L_NOT||LA26_0==L_PLUS||LA26_0==L_PLUS_PLUS||LA26_0==L_TILDA||LA26_0==NUMBER||LA26_0==SEMICOLON||(LA26_0 >= SINGLE_OP && LA26_0 <= SIZEOF)||LA26_0==STATIC_PREFIX||(LA26_0 >= STRING_LITERAL && LA26_0 <= STRING_LITERAL3)||LA26_0==STRUCT_PREFIX||LA26_0==VOID||LA26_0==154||LA26_0==161||(LA26_0 >= 163 && LA26_0 <= 165)||LA26_0==167||(LA26_0 >= 171 && LA26_0 <= 172)||(LA26_0 >= 174 && LA26_0 <= 176)||(LA26_0 >= 178 && LA26_0 <= 180)||(LA26_0 >= 183 && LA26_0 <= 184)) ) {
                    alt26=1;
                }
                else if ( (LA26_0==L_FBR) ) {
                    alt26=2;
                }


                switch (alt26) {
            	case 1 :
            	    // Objcm.g:255:5: block_internal_full
            	    {
            	    pushFollow(FOLLOW_block_internal_full_in_block_case1164);
            	    block_internal_full99=block_internal_full();

            	    state._fsp--;

            	    adaptor.addChild(root_0, block_internal_full99.getTree());

            	    }
            	    break;
            	case 2 :
            	    // Objcm.g:255:27: block
            	    {
            	    pushFollow(FOLLOW_block_in_block_case1168);
            	    block100=block();

            	    state._fsp--;

            	    adaptor.addChild(root_0, block100.getTree());

            	    }
            	    break;

            	default :
            	    break loop26;
                }
            } while (true);


            // Objcm.g:256:4: ( default_stmt )?
            int alt27=2;
            int LA27_0 = input.LA(1);

            if ( (LA27_0==170) ) {
                alt27=1;
            }
            switch (alt27) {
                case 1 :
                    // Objcm.g:256:4: default_stmt
                    {
                    pushFollow(FOLLOW_default_stmt_in_block_case1177);
                    default_stmt101=default_stmt();

                    state._fsp--;

                    adaptor.addChild(root_0, default_stmt101.getTree());

                    }
                    break;

            }


            R_FBR102=(Token)match(input,R_FBR,FOLLOW_R_FBR_in_block_case1182); 
            R_FBR102_tree = 
            (Object)adaptor.create(R_FBR102)
            ;
            adaptor.addChild(root_0, R_FBR102_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_case"


    public static class block_internal_full_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_internal_full"
    // Objcm.g:260:1: block_internal_full : block_internal ;
    public final ObjcmParser.block_internal_full_return block_internal_full() throws RecognitionException {
        ObjcmParser.block_internal_full_return retval = new ObjcmParser.block_internal_full_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.block_internal_return block_internal103 =null;



        try {
            // Objcm.g:261:2: ( block_internal )
            // Objcm.g:261:4: block_internal
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_block_internal_in_block_internal_full1194);
            block_internal103=block_internal();

            state._fsp--;

            adaptor.addChild(root_0, block_internal103.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_internal_full"


    public static class block_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_internal"
    // Objcm.g:264:1: block_internal : ( try_stmt | throw_stmt | static_start_wrapper SEMICOLON | do_stmt | const_expression SEMICOLON | full_expr_wrapper ( ( ( full_expr2 )? SEMICOLON ) | COLON ) | if_stmt_wrapper | else_stmt | switch_stmt_wrapper | return_stmt | for_stmt | while_stmt_wrapper | single_operators | struct_variable SEMICOLON | enum_variable SEMICOLON | typeof_started SEMICOLON | known_type_started SEMICOLON | SEMICOLON );
    public final ObjcmParser.block_internal_return block_internal() throws RecognitionException {
        ObjcmParser.block_internal_return retval = new ObjcmParser.block_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON107=null;
        Token SEMICOLON110=null;
        Token SEMICOLON113=null;
        Token COLON114=null;
        Token SEMICOLON123=null;
        Token SEMICOLON125=null;
        Token SEMICOLON127=null;
        Token SEMICOLON129=null;
        Token SEMICOLON130=null;
        ObjcmParser.try_stmt_return try_stmt104 =null;

        ObjcmParser.throw_stmt_return throw_stmt105 =null;

        ObjcmParser.static_start_wrapper_return static_start_wrapper106 =null;

        ObjcmParser.do_stmt_return do_stmt108 =null;

        ObjcmParser.const_expression_return const_expression109 =null;

        ObjcmParser.full_expr_wrapper_return full_expr_wrapper111 =null;

        ObjcmParser.full_expr2_return full_expr2112 =null;

        ObjcmParser.if_stmt_wrapper_return if_stmt_wrapper115 =null;

        ObjcmParser.else_stmt_return else_stmt116 =null;

        ObjcmParser.switch_stmt_wrapper_return switch_stmt_wrapper117 =null;

        ObjcmParser.return_stmt_return return_stmt118 =null;

        ObjcmParser.for_stmt_return for_stmt119 =null;

        ObjcmParser.while_stmt_wrapper_return while_stmt_wrapper120 =null;

        ObjcmParser.single_operators_return single_operators121 =null;

        ObjcmParser.struct_variable_return struct_variable122 =null;

        ObjcmParser.enum_variable_return enum_variable124 =null;

        ObjcmParser.typeof_started_return typeof_started126 =null;

        ObjcmParser.known_type_started_return known_type_started128 =null;


        Object SEMICOLON107_tree=null;
        Object SEMICOLON110_tree=null;
        Object SEMICOLON113_tree=null;
        Object COLON114_tree=null;
        Object SEMICOLON123_tree=null;
        Object SEMICOLON125_tree=null;
        Object SEMICOLON127_tree=null;
        Object SEMICOLON129_tree=null;
        Object SEMICOLON130_tree=null;

        try {
            // Objcm.g:265:2: ( try_stmt | throw_stmt | static_start_wrapper SEMICOLON | do_stmt | const_expression SEMICOLON | full_expr_wrapper ( ( ( full_expr2 )? SEMICOLON ) | COLON ) | if_stmt_wrapper | else_stmt | switch_stmt_wrapper | return_stmt | for_stmt | while_stmt_wrapper | single_operators | struct_variable SEMICOLON | enum_variable SEMICOLON | typeof_started SEMICOLON | known_type_started SEMICOLON | SEMICOLON )
            int alt30=18;
            alt30 = dfa30.predict(input);
            switch (alt30) {
                case 1 :
                    // Objcm.g:265:4: try_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_try_stmt_in_block_internal1205);
                    try_stmt104=try_stmt();

                    state._fsp--;

                    adaptor.addChild(root_0, try_stmt104.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:266:4: throw_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_throw_stmt_in_block_internal1210);
                    throw_stmt105=throw_stmt();

                    state._fsp--;

                    adaptor.addChild(root_0, throw_stmt105.getTree());

                    }
                    break;
                case 3 :
                    // Objcm.g:267:4: static_start_wrapper SEMICOLON
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_static_start_wrapper_in_block_internal1215);
                    static_start_wrapper106=static_start_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, static_start_wrapper106.getTree());

                    SEMICOLON107=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_block_internal1217); 
                    SEMICOLON107_tree = 
                    (Object)adaptor.create(SEMICOLON107)
                    ;
                    adaptor.addChild(root_0, SEMICOLON107_tree);


                    }
                    break;
                case 4 :
                    // Objcm.g:268:4: do_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_do_stmt_in_block_internal1222);
                    do_stmt108=do_stmt();

                    state._fsp--;

                    adaptor.addChild(root_0, do_stmt108.getTree());

                    }
                    break;
                case 5 :
                    // Objcm.g:269:4: const_expression SEMICOLON
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_const_expression_in_block_internal1227);
                    const_expression109=const_expression();

                    state._fsp--;

                    adaptor.addChild(root_0, const_expression109.getTree());

                    SEMICOLON110=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_block_internal1229); 
                    SEMICOLON110_tree = 
                    (Object)adaptor.create(SEMICOLON110)
                    ;
                    adaptor.addChild(root_0, SEMICOLON110_tree);


                    }
                    break;
                case 6 :
                    // Objcm.g:270:4: full_expr_wrapper ( ( ( full_expr2 )? SEMICOLON ) | COLON )
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_full_expr_wrapper_in_block_internal1234);
                    full_expr_wrapper111=full_expr_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, full_expr_wrapper111.getTree());

                    // Objcm.g:270:22: ( ( ( full_expr2 )? SEMICOLON ) | COLON )
                    int alt29=2;
                    int LA29_0 = input.LA(1);

                    if ( (LA29_0==ID||LA29_0==SEMICOLON||LA29_0==VOID||LA29_0==176) ) {
                        alt29=1;
                    }
                    else if ( (LA29_0==COLON) ) {
                        alt29=2;
                    }
                    else {
                        NoViableAltException nvae =
                            new NoViableAltException("", 29, 0, input);

                        throw nvae;

                    }
                    switch (alt29) {
                        case 1 :
                            // Objcm.g:270:23: ( ( full_expr2 )? SEMICOLON )
                            {
                            // Objcm.g:270:23: ( ( full_expr2 )? SEMICOLON )
                            // Objcm.g:270:24: ( full_expr2 )? SEMICOLON
                            {
                            // Objcm.g:270:24: ( full_expr2 )?
                            int alt28=2;
                            int LA28_0 = input.LA(1);

                            if ( (LA28_0==ID||LA28_0==VOID||LA28_0==176) ) {
                                alt28=1;
                            }
                            switch (alt28) {
                                case 1 :
                                    // Objcm.g:270:24: full_expr2
                                    {
                                    pushFollow(FOLLOW_full_expr2_in_block_internal1238);
                                    full_expr2112=full_expr2();

                                    state._fsp--;

                                    adaptor.addChild(root_0, full_expr2112.getTree());

                                    }
                                    break;

                            }


                            SEMICOLON113=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_block_internal1241); 
                            SEMICOLON113_tree = 
                            (Object)adaptor.create(SEMICOLON113)
                            ;
                            adaptor.addChild(root_0, SEMICOLON113_tree);


                            }


                            }
                            break;
                        case 2 :
                            // Objcm.g:270:49: COLON
                            {
                            COLON114=(Token)match(input,COLON,FOLLOW_COLON_in_block_internal1246); 
                            COLON114_tree = 
                            (Object)adaptor.create(COLON114)
                            ;
                            adaptor.addChild(root_0, COLON114_tree);


                            }
                            break;

                    }


                    }
                    break;
                case 7 :
                    // Objcm.g:271:4: if_stmt_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_if_stmt_wrapper_in_block_internal1252);
                    if_stmt_wrapper115=if_stmt_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, if_stmt_wrapper115.getTree());

                    }
                    break;
                case 8 :
                    // Objcm.g:272:4: else_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_else_stmt_in_block_internal1257);
                    else_stmt116=else_stmt();

                    state._fsp--;

                    adaptor.addChild(root_0, else_stmt116.getTree());

                    }
                    break;
                case 9 :
                    // Objcm.g:273:4: switch_stmt_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_switch_stmt_wrapper_in_block_internal1262);
                    switch_stmt_wrapper117=switch_stmt_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, switch_stmt_wrapper117.getTree());

                    }
                    break;
                case 10 :
                    // Objcm.g:274:4: return_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_return_stmt_in_block_internal1267);
                    return_stmt118=return_stmt();

                    state._fsp--;

                    adaptor.addChild(root_0, return_stmt118.getTree());

                    }
                    break;
                case 11 :
                    // Objcm.g:275:4: for_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_for_stmt_in_block_internal1272);
                    for_stmt119=for_stmt();

                    state._fsp--;

                    adaptor.addChild(root_0, for_stmt119.getTree());

                    }
                    break;
                case 12 :
                    // Objcm.g:276:4: while_stmt_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_while_stmt_wrapper_in_block_internal1277);
                    while_stmt_wrapper120=while_stmt_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, while_stmt_wrapper120.getTree());

                    }
                    break;
                case 13 :
                    // Objcm.g:277:4: single_operators
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_single_operators_in_block_internal1282);
                    single_operators121=single_operators();

                    state._fsp--;

                    adaptor.addChild(root_0, single_operators121.getTree());

                    }
                    break;
                case 14 :
                    // Objcm.g:278:4: struct_variable SEMICOLON
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_struct_variable_in_block_internal1287);
                    struct_variable122=struct_variable();

                    state._fsp--;

                    adaptor.addChild(root_0, struct_variable122.getTree());

                    SEMICOLON123=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_block_internal1289); 
                    SEMICOLON123_tree = 
                    (Object)adaptor.create(SEMICOLON123)
                    ;
                    adaptor.addChild(root_0, SEMICOLON123_tree);


                    }
                    break;
                case 15 :
                    // Objcm.g:279:4: enum_variable SEMICOLON
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_enum_variable_in_block_internal1294);
                    enum_variable124=enum_variable();

                    state._fsp--;

                    adaptor.addChild(root_0, enum_variable124.getTree());

                    SEMICOLON125=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_block_internal1296); 
                    SEMICOLON125_tree = 
                    (Object)adaptor.create(SEMICOLON125)
                    ;
                    adaptor.addChild(root_0, SEMICOLON125_tree);


                    }
                    break;
                case 16 :
                    // Objcm.g:280:4: typeof_started SEMICOLON
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_typeof_started_in_block_internal1301);
                    typeof_started126=typeof_started();

                    state._fsp--;

                    adaptor.addChild(root_0, typeof_started126.getTree());

                    SEMICOLON127=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_block_internal1303); 
                    SEMICOLON127_tree = 
                    (Object)adaptor.create(SEMICOLON127)
                    ;
                    adaptor.addChild(root_0, SEMICOLON127_tree);


                    }
                    break;
                case 17 :
                    // Objcm.g:281:4: known_type_started SEMICOLON
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_known_type_started_in_block_internal1308);
                    known_type_started128=known_type_started();

                    state._fsp--;

                    adaptor.addChild(root_0, known_type_started128.getTree());

                    SEMICOLON129=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_block_internal1310); 
                    SEMICOLON129_tree = 
                    (Object)adaptor.create(SEMICOLON129)
                    ;
                    adaptor.addChild(root_0, SEMICOLON129_tree);


                    }
                    break;
                case 18 :
                    // Objcm.g:282:4: SEMICOLON
                    {
                    root_0 = (Object)adaptor.nil();


                    SEMICOLON130=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_block_internal1315); 
                    SEMICOLON130_tree = 
                    (Object)adaptor.create(SEMICOLON130)
                    ;
                    adaptor.addChild(root_0, SEMICOLON130_tree);


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_internal"


    public static class known_type_started_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "known_type_started"
    // Objcm.g:285:1: known_type_started : known_types ( ASTERISK )* full_expr2 ;
    public final ObjcmParser.known_type_started_return known_type_started() throws RecognitionException {
        ObjcmParser.known_type_started_return retval = new ObjcmParser.known_type_started_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ASTERISK132=null;
        ObjcmParser.known_types_return known_types131 =null;

        ObjcmParser.full_expr2_return full_expr2133 =null;


        Object ASTERISK132_tree=null;

        try {
            // Objcm.g:286:2: ( known_types ( ASTERISK )* full_expr2 )
            // Objcm.g:286:4: known_types ( ASTERISK )* full_expr2
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_known_types_in_known_type_started1328);
            known_types131=known_types();

            state._fsp--;

            adaptor.addChild(root_0, known_types131.getTree());

            // Objcm.g:286:16: ( ASTERISK )*
            loop31:
            do {
                int alt31=2;
                int LA31_0 = input.LA(1);

                if ( (LA31_0==ASTERISK) ) {
                    alt31=1;
                }


                switch (alt31) {
            	case 1 :
            	    // Objcm.g:286:16: ASTERISK
            	    {
            	    ASTERISK132=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_known_type_started1330); 
            	    ASTERISK132_tree = 
            	    (Object)adaptor.create(ASTERISK132)
            	    ;
            	    adaptor.addChild(root_0, ASTERISK132_tree);


            	    }
            	    break;

            	default :
            	    break loop31;
                }
            } while (true);


            pushFollow(FOLLOW_full_expr2_in_known_type_started1333);
            full_expr2133=full_expr2();

            state._fsp--;

            adaptor.addChild(root_0, full_expr2133.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "known_type_started"


    public static class typeof_started_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typeof_started"
    // Objcm.g:288:1: typeof_started : typeof full_expr_wrapper ;
    public final ObjcmParser.typeof_started_return typeof_started() throws RecognitionException {
        ObjcmParser.typeof_started_return retval = new ObjcmParser.typeof_started_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.typeof_return typeof134 =null;

        ObjcmParser.full_expr_wrapper_return full_expr_wrapper135 =null;



        try {
            // Objcm.g:289:2: ( typeof full_expr_wrapper )
            // Objcm.g:289:4: typeof full_expr_wrapper
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_typeof_in_typeof_started1345);
            typeof134=typeof();

            state._fsp--;

            adaptor.addChild(root_0, typeof134.getTree());

            pushFollow(FOLLOW_full_expr_wrapper_in_typeof_started1347);
            full_expr_wrapper135=full_expr_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, full_expr_wrapper135.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typeof_started"


    public static class struct_variable_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "struct_variable"
    // Objcm.g:292:1: struct_variable : STRUCT_PREFIX full_expr_wrapper ;
    public final ObjcmParser.struct_variable_return struct_variable() throws RecognitionException {
        ObjcmParser.struct_variable_return retval = new ObjcmParser.struct_variable_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STRUCT_PREFIX136=null;
        ObjcmParser.full_expr_wrapper_return full_expr_wrapper137 =null;


        Object STRUCT_PREFIX136_tree=null;

        try {
            // Objcm.g:293:2: ( STRUCT_PREFIX full_expr_wrapper )
            // Objcm.g:293:4: STRUCT_PREFIX full_expr_wrapper
            {
            root_0 = (Object)adaptor.nil();


            STRUCT_PREFIX136=(Token)match(input,STRUCT_PREFIX,FOLLOW_STRUCT_PREFIX_in_struct_variable1360); 
            STRUCT_PREFIX136_tree = 
            (Object)adaptor.create(STRUCT_PREFIX136)
            ;
            adaptor.addChild(root_0, STRUCT_PREFIX136_tree);


            pushFollow(FOLLOW_full_expr_wrapper_in_struct_variable1362);
            full_expr_wrapper137=full_expr_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, full_expr_wrapper137.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "struct_variable"


    public static class enum_variable_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "enum_variable"
    // Objcm.g:295:1: enum_variable : ENUM_PREFIX full_expr_wrapper ;
    public final ObjcmParser.enum_variable_return enum_variable() throws RecognitionException {
        ObjcmParser.enum_variable_return retval = new ObjcmParser.enum_variable_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ENUM_PREFIX138=null;
        ObjcmParser.full_expr_wrapper_return full_expr_wrapper139 =null;


        Object ENUM_PREFIX138_tree=null;

        try {
            // Objcm.g:296:2: ( ENUM_PREFIX full_expr_wrapper )
            // Objcm.g:296:4: ENUM_PREFIX full_expr_wrapper
            {
            root_0 = (Object)adaptor.nil();


            ENUM_PREFIX138=(Token)match(input,ENUM_PREFIX,FOLLOW_ENUM_PREFIX_in_enum_variable1371); 
            ENUM_PREFIX138_tree = 
            (Object)adaptor.create(ENUM_PREFIX138)
            ;
            adaptor.addChild(root_0, ENUM_PREFIX138_tree);


            pushFollow(FOLLOW_full_expr_wrapper_in_enum_variable1373);
            full_expr_wrapper139=full_expr_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, full_expr_wrapper139.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "enum_variable"


    public static class const_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "const_expression"
    // Objcm.g:298:1: const_expression : CONST_PREFIX full_expr_wrapper ;
    public final ObjcmParser.const_expression_return const_expression() throws RecognitionException {
        ObjcmParser.const_expression_return retval = new ObjcmParser.const_expression_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token CONST_PREFIX140=null;
        ObjcmParser.full_expr_wrapper_return full_expr_wrapper141 =null;


        Object CONST_PREFIX140_tree=null;

        try {
            // Objcm.g:299:2: ( CONST_PREFIX full_expr_wrapper )
            // Objcm.g:299:4: CONST_PREFIX full_expr_wrapper
            {
            root_0 = (Object)adaptor.nil();


            CONST_PREFIX140=(Token)match(input,CONST_PREFIX,FOLLOW_CONST_PREFIX_in_const_expression1384); 
            CONST_PREFIX140_tree = 
            (Object)adaptor.create(CONST_PREFIX140)
            ;
            adaptor.addChild(root_0, CONST_PREFIX140_tree);


            pushFollow(FOLLOW_full_expr_wrapper_in_const_expression1386);
            full_expr_wrapper141=full_expr_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, full_expr_wrapper141.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "const_expression"


    public static class throw_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "throw_stmt"
    // Objcm.g:301:1: throw_stmt : '@throw' SEMICOLON ;
    public final ObjcmParser.throw_stmt_return throw_stmt() throws RecognitionException {
        ObjcmParser.throw_stmt_return retval = new ObjcmParser.throw_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal142=null;
        Token SEMICOLON143=null;

        Object string_literal142_tree=null;
        Object SEMICOLON143_tree=null;

        try {
            // Objcm.g:302:2: ( '@throw' SEMICOLON )
            // Objcm.g:302:4: '@throw' SEMICOLON
            {
            root_0 = (Object)adaptor.nil();


            string_literal142=(Token)match(input,163,FOLLOW_163_in_throw_stmt1395); 
            string_literal142_tree = 
            (Object)adaptor.create(string_literal142)
            ;
            adaptor.addChild(root_0, string_literal142_tree);


            SEMICOLON143=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_throw_stmt1398); 
            SEMICOLON143_tree = 
            (Object)adaptor.create(SEMICOLON143)
            ;
            adaptor.addChild(root_0, SEMICOLON143_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "throw_stmt"


    public static class try_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "try_stmt"
    // Objcm.g:305:1: try_stmt : '@try' block ( catch_stmt )* ( '@finally' block )? ;
    public final ObjcmParser.try_stmt_return try_stmt() throws RecognitionException {
        ObjcmParser.try_stmt_return retval = new ObjcmParser.try_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal144=null;
        Token string_literal147=null;
        ObjcmParser.block_return block145 =null;

        ObjcmParser.catch_stmt_return catch_stmt146 =null;

        ObjcmParser.block_return block148 =null;


        Object string_literal144_tree=null;
        Object string_literal147_tree=null;

        try {
            // Objcm.g:305:9: ( '@try' block ( catch_stmt )* ( '@finally' block )? )
            // Objcm.g:305:11: '@try' block ( catch_stmt )* ( '@finally' block )?
            {
            root_0 = (Object)adaptor.nil();


            string_literal144=(Token)match(input,164,FOLLOW_164_in_try_stmt1409); 
            string_literal144_tree = 
            (Object)adaptor.create(string_literal144)
            ;
            adaptor.addChild(root_0, string_literal144_tree);


            pushFollow(FOLLOW_block_in_try_stmt1412);
            block145=block();

            state._fsp--;

            adaptor.addChild(root_0, block145.getTree());

            // Objcm.g:305:26: ( catch_stmt )*
            loop32:
            do {
                int alt32=2;
                int LA32_0 = input.LA(1);

                if ( (LA32_0==153) ) {
                    alt32=1;
                }


                switch (alt32) {
            	case 1 :
            	    // Objcm.g:305:26: catch_stmt
            	    {
            	    pushFollow(FOLLOW_catch_stmt_in_try_stmt1415);
            	    catch_stmt146=catch_stmt();

            	    state._fsp--;

            	    adaptor.addChild(root_0, catch_stmt146.getTree());

            	    }
            	    break;

            	default :
            	    break loop32;
                }
            } while (true);


            // Objcm.g:305:38: ( '@finally' block )?
            int alt33=2;
            int LA33_0 = input.LA(1);

            if ( (LA33_0==156) ) {
                alt33=1;
            }
            switch (alt33) {
                case 1 :
                    // Objcm.g:305:39: '@finally' block
                    {
                    string_literal147=(Token)match(input,156,FOLLOW_156_in_try_stmt1419); 
                    string_literal147_tree = 
                    (Object)adaptor.create(string_literal147)
                    ;
                    adaptor.addChild(root_0, string_literal147_tree);


                    pushFollow(FOLLOW_block_in_try_stmt1422);
                    block148=block();

                    state._fsp--;

                    adaptor.addChild(root_0, block148.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "try_stmt"


    public static class catch_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "catch_stmt"
    // Objcm.g:308:1: catch_stmt : '@catch' L_BR ID ( ASTERISK )* ID R_BR block ;
    public final ObjcmParser.catch_stmt_return catch_stmt() throws RecognitionException {
        ObjcmParser.catch_stmt_return retval = new ObjcmParser.catch_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal149=null;
        Token L_BR150=null;
        Token ID151=null;
        Token ASTERISK152=null;
        Token ID153=null;
        Token R_BR154=null;
        ObjcmParser.block_return block155 =null;


        Object string_literal149_tree=null;
        Object L_BR150_tree=null;
        Object ID151_tree=null;
        Object ASTERISK152_tree=null;
        Object ID153_tree=null;
        Object R_BR154_tree=null;

        try {
            // Objcm.g:309:2: ( '@catch' L_BR ID ( ASTERISK )* ID R_BR block )
            // Objcm.g:309:4: '@catch' L_BR ID ( ASTERISK )* ID R_BR block
            {
            root_0 = (Object)adaptor.nil();


            string_literal149=(Token)match(input,153,FOLLOW_153_in_catch_stmt1436); 
            string_literal149_tree = 
            (Object)adaptor.create(string_literal149)
            ;
            adaptor.addChild(root_0, string_literal149_tree);


            L_BR150=(Token)match(input,L_BR,FOLLOW_L_BR_in_catch_stmt1439); 
            L_BR150_tree = 
            (Object)adaptor.create(L_BR150)
            ;
            adaptor.addChild(root_0, L_BR150_tree);


            ID151=(Token)match(input,ID,FOLLOW_ID_in_catch_stmt1442); 
            ID151_tree = 
            (Object)adaptor.create(ID151)
            ;
            adaptor.addChild(root_0, ID151_tree);


            // Objcm.g:309:24: ( ASTERISK )*
            loop34:
            do {
                int alt34=2;
                int LA34_0 = input.LA(1);

                if ( (LA34_0==ASTERISK) ) {
                    alt34=1;
                }


                switch (alt34) {
            	case 1 :
            	    // Objcm.g:309:24: ASTERISK
            	    {
            	    ASTERISK152=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_catch_stmt1445); 
            	    ASTERISK152_tree = 
            	    (Object)adaptor.create(ASTERISK152)
            	    ;
            	    adaptor.addChild(root_0, ASTERISK152_tree);


            	    }
            	    break;

            	default :
            	    break loop34;
                }
            } while (true);


            ID153=(Token)match(input,ID,FOLLOW_ID_in_catch_stmt1448); 
            ID153_tree = 
            (Object)adaptor.create(ID153)
            ;
            adaptor.addChild(root_0, ID153_tree);


            R_BR154=(Token)match(input,R_BR,FOLLOW_R_BR_in_catch_stmt1451); 
            R_BR154_tree = 
            (Object)adaptor.create(R_BR154)
            ;
            adaptor.addChild(root_0, R_BR154_tree);


            pushFollow(FOLLOW_block_in_catch_stmt1454);
            block155=block();

            state._fsp--;

            adaptor.addChild(root_0, block155.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "catch_stmt"


    public static class switch_stmt_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "switch_stmt_wrapper"
    // Objcm.g:312:1: switch_stmt_wrapper : switch_stmt -> ^( SWITCH switch_stmt ) ;
    public final ObjcmParser.switch_stmt_wrapper_return switch_stmt_wrapper() throws RecognitionException {
        ObjcmParser.switch_stmt_wrapper_return retval = new ObjcmParser.switch_stmt_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.switch_stmt_return switch_stmt156 =null;


        RewriteRuleSubtreeStream stream_switch_stmt=new RewriteRuleSubtreeStream(adaptor,"rule switch_stmt");
        try {
            // Objcm.g:313:2: ( switch_stmt -> ^( SWITCH switch_stmt ) )
            // Objcm.g:313:4: switch_stmt
            {
            pushFollow(FOLLOW_switch_stmt_in_switch_stmt_wrapper1467);
            switch_stmt156=switch_stmt();

            state._fsp--;

            stream_switch_stmt.add(switch_stmt156.getTree());

            // AST REWRITE
            // elements: switch_stmt
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 313:16: -> ^( SWITCH switch_stmt )
            {
                // Objcm.g:313:19: ^( SWITCH switch_stmt )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SWITCH, "SWITCH")
                , root_1);

                adaptor.addChild(root_1, stream_switch_stmt.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "switch_stmt_wrapper"


    public static class switch_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "switch_stmt"
    // Objcm.g:315:1: switch_stmt : 'switch' L_BR switch_expr R_BR switch_body_wrapper ;
    public final ObjcmParser.switch_stmt_return switch_stmt() throws RecognitionException {
        ObjcmParser.switch_stmt_return retval = new ObjcmParser.switch_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal157=null;
        Token L_BR158=null;
        Token R_BR160=null;
        ObjcmParser.switch_expr_return switch_expr159 =null;

        ObjcmParser.switch_body_wrapper_return switch_body_wrapper161 =null;


        Object string_literal157_tree=null;
        Object L_BR158_tree=null;
        Object R_BR160_tree=null;

        try {
            // Objcm.g:316:2: ( 'switch' L_BR switch_expr R_BR switch_body_wrapper )
            // Objcm.g:316:4: 'switch' L_BR switch_expr R_BR switch_body_wrapper
            {
            root_0 = (Object)adaptor.nil();


            string_literal157=(Token)match(input,180,FOLLOW_180_in_switch_stmt1484); 
            string_literal157_tree = 
            (Object)adaptor.create(string_literal157)
            ;
            adaptor.addChild(root_0, string_literal157_tree);


            L_BR158=(Token)match(input,L_BR,FOLLOW_L_BR_in_switch_stmt1487); 
            L_BR158_tree = 
            (Object)adaptor.create(L_BR158)
            ;
            adaptor.addChild(root_0, L_BR158_tree);


            pushFollow(FOLLOW_switch_expr_in_switch_stmt1490);
            switch_expr159=switch_expr();

            state._fsp--;

            adaptor.addChild(root_0, switch_expr159.getTree());

            R_BR160=(Token)match(input,R_BR,FOLLOW_R_BR_in_switch_stmt1492); 
            R_BR160_tree = 
            (Object)adaptor.create(R_BR160)
            ;
            adaptor.addChild(root_0, R_BR160_tree);


            pushFollow(FOLLOW_switch_body_wrapper_in_switch_stmt1498);
            switch_body_wrapper161=switch_body_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, switch_body_wrapper161.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "switch_stmt"


    public static class switch_body_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "switch_body_wrapper"
    // Objcm.g:320:1: switch_body_wrapper : L_FBR switch_body R_FBR -> ^( SWITCH_BODY switch_body ) ;
    public final ObjcmParser.switch_body_wrapper_return switch_body_wrapper() throws RecognitionException {
        ObjcmParser.switch_body_wrapper_return retval = new ObjcmParser.switch_body_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_FBR162=null;
        Token R_FBR164=null;
        ObjcmParser.switch_body_return switch_body163 =null;


        Object L_FBR162_tree=null;
        Object R_FBR164_tree=null;
        RewriteRuleTokenStream stream_R_FBR=new RewriteRuleTokenStream(adaptor,"token R_FBR");
        RewriteRuleTokenStream stream_L_FBR=new RewriteRuleTokenStream(adaptor,"token L_FBR");
        RewriteRuleSubtreeStream stream_switch_body=new RewriteRuleSubtreeStream(adaptor,"rule switch_body");
        try {
            // Objcm.g:321:2: ( L_FBR switch_body R_FBR -> ^( SWITCH_BODY switch_body ) )
            // Objcm.g:321:4: L_FBR switch_body R_FBR
            {
            L_FBR162=(Token)match(input,L_FBR,FOLLOW_L_FBR_in_switch_body_wrapper1511);  
            stream_L_FBR.add(L_FBR162);


            pushFollow(FOLLOW_switch_body_in_switch_body_wrapper1513);
            switch_body163=switch_body();

            state._fsp--;

            stream_switch_body.add(switch_body163.getTree());

            R_FBR164=(Token)match(input,R_FBR,FOLLOW_R_FBR_in_switch_body_wrapper1515);  
            stream_R_FBR.add(R_FBR164);


            // AST REWRITE
            // elements: switch_body
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 321:28: -> ^( SWITCH_BODY switch_body )
            {
                // Objcm.g:321:31: ^( SWITCH_BODY switch_body )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SWITCH_BODY, "SWITCH_BODY")
                , root_1);

                adaptor.addChild(root_1, stream_switch_body.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "switch_body_wrapper"


    public static class switch_body_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "switch_body"
    // Objcm.g:323:1: switch_body : ( block_internal_full )* ( switch_internal )* ;
    public final ObjcmParser.switch_body_return switch_body() throws RecognitionException {
        ObjcmParser.switch_body_return retval = new ObjcmParser.switch_body_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.block_internal_full_return block_internal_full165 =null;

        ObjcmParser.switch_internal_return switch_internal166 =null;



        try {
            // Objcm.g:324:2: ( ( block_internal_full )* ( switch_internal )* )
            // Objcm.g:324:4: ( block_internal_full )* ( switch_internal )*
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:324:4: ( block_internal_full )*
            loop35:
            do {
                int alt35=2;
                int LA35_0 = input.LA(1);

                if ( (LA35_0==ASTERISK||LA35_0==BREAK_WORD||LA35_0==CONST_PREFIX||LA35_0==ENUM_PREFIX||LA35_0==ID||LA35_0==L_AND||LA35_0==L_BR||LA35_0==L_KBR||LA35_0==L_MINUS||LA35_0==L_MINUS_MINUS||LA35_0==L_NOT||LA35_0==L_PLUS||LA35_0==L_PLUS_PLUS||LA35_0==L_TILDA||LA35_0==NUMBER||LA35_0==SEMICOLON||(LA35_0 >= SINGLE_OP && LA35_0 <= SIZEOF)||LA35_0==STATIC_PREFIX||(LA35_0 >= STRING_LITERAL && LA35_0 <= STRING_LITERAL3)||LA35_0==STRUCT_PREFIX||LA35_0==VOID||LA35_0==154||LA35_0==161||(LA35_0 >= 163 && LA35_0 <= 165)||LA35_0==167||(LA35_0 >= 171 && LA35_0 <= 172)||(LA35_0 >= 174 && LA35_0 <= 176)||(LA35_0 >= 178 && LA35_0 <= 180)||(LA35_0 >= 183 && LA35_0 <= 184)) ) {
                    alt35=1;
                }


                switch (alt35) {
            	case 1 :
            	    // Objcm.g:324:4: block_internal_full
            	    {
            	    pushFollow(FOLLOW_block_internal_full_in_switch_body1534);
            	    block_internal_full165=block_internal_full();

            	    state._fsp--;

            	    adaptor.addChild(root_0, block_internal_full165.getTree());

            	    }
            	    break;

            	default :
            	    break loop35;
                }
            } while (true);


            // Objcm.g:325:3: ( switch_internal )*
            loop36:
            do {
                int alt36=2;
                int LA36_0 = input.LA(1);

                if ( (LA36_0==168||LA36_0==170) ) {
                    alt36=1;
                }


                switch (alt36) {
            	case 1 :
            	    // Objcm.g:325:3: switch_internal
            	    {
            	    pushFollow(FOLLOW_switch_internal_in_switch_body1539);
            	    switch_internal166=switch_internal();

            	    state._fsp--;

            	    adaptor.addChild(root_0, switch_internal166.getTree());

            	    }
            	    break;

            	default :
            	    break loop36;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "switch_body"


    public static class switch_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "switch_expr"
    // Objcm.g:328:1: switch_expr : classical_expr_wrp -> ^( SWITCH_EXPRESSION classical_expr_wrp ) ;
    public final ObjcmParser.switch_expr_return switch_expr() throws RecognitionException {
        ObjcmParser.switch_expr_return retval = new ObjcmParser.switch_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp167 =null;


        RewriteRuleSubtreeStream stream_classical_expr_wrp=new RewriteRuleSubtreeStream(adaptor,"rule classical_expr_wrp");
        try {
            // Objcm.g:329:2: ( classical_expr_wrp -> ^( SWITCH_EXPRESSION classical_expr_wrp ) )
            // Objcm.g:329:4: classical_expr_wrp
            {
            pushFollow(FOLLOW_classical_expr_wrp_in_switch_expr1552);
            classical_expr_wrp167=classical_expr_wrp();

            state._fsp--;

            stream_classical_expr_wrp.add(classical_expr_wrp167.getTree());

            // AST REWRITE
            // elements: classical_expr_wrp
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 329:23: -> ^( SWITCH_EXPRESSION classical_expr_wrp )
            {
                // Objcm.g:329:26: ^( SWITCH_EXPRESSION classical_expr_wrp )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SWITCH_EXPRESSION, "SWITCH_EXPRESSION")
                , root_1);

                adaptor.addChild(root_1, stream_classical_expr_wrp.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "switch_expr"


    public static class switch_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "switch_internal"
    // Objcm.g:331:1: switch_internal : ( case_stmt_wrapper | default_stmt_wrapper );
    public final ObjcmParser.switch_internal_return switch_internal() throws RecognitionException {
        ObjcmParser.switch_internal_return retval = new ObjcmParser.switch_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.case_stmt_wrapper_return case_stmt_wrapper168 =null;

        ObjcmParser.default_stmt_wrapper_return default_stmt_wrapper169 =null;



        try {
            // Objcm.g:332:2: ( case_stmt_wrapper | default_stmt_wrapper )
            int alt37=2;
            int LA37_0 = input.LA(1);

            if ( (LA37_0==168) ) {
                alt37=1;
            }
            else if ( (LA37_0==170) ) {
                alt37=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 37, 0, input);

                throw nvae;

            }
            switch (alt37) {
                case 1 :
                    // Objcm.g:332:4: case_stmt_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_case_stmt_wrapper_in_switch_internal1569);
                    case_stmt_wrapper168=case_stmt_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, case_stmt_wrapper168.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:333:5: default_stmt_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_default_stmt_wrapper_in_switch_internal1575);
                    default_stmt_wrapper169=default_stmt_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, default_stmt_wrapper169.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "switch_internal"


    public static class case_stmt_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "case_stmt_wrapper"
    // Objcm.g:335:1: case_stmt_wrapper : case_stmt -> ^( CASE_STMT case_stmt ) ;
    public final ObjcmParser.case_stmt_wrapper_return case_stmt_wrapper() throws RecognitionException {
        ObjcmParser.case_stmt_wrapper_return retval = new ObjcmParser.case_stmt_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.case_stmt_return case_stmt170 =null;


        RewriteRuleSubtreeStream stream_case_stmt=new RewriteRuleSubtreeStream(adaptor,"rule case_stmt");
        try {
            // Objcm.g:336:2: ( case_stmt -> ^( CASE_STMT case_stmt ) )
            // Objcm.g:336:4: case_stmt
            {
            pushFollow(FOLLOW_case_stmt_in_case_stmt_wrapper1584);
            case_stmt170=case_stmt();

            state._fsp--;

            stream_case_stmt.add(case_stmt170.getTree());

            // AST REWRITE
            // elements: case_stmt
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 336:14: -> ^( CASE_STMT case_stmt )
            {
                // Objcm.g:336:17: ^( CASE_STMT case_stmt )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CASE_STMT, "CASE_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_case_stmt.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "case_stmt_wrapper"


    public static class case_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "case_stmt"
    // Objcm.g:338:1: case_stmt : 'case' case_expr_wrapper COLON ( case_body_wrapper )? ;
    public final ObjcmParser.case_stmt_return case_stmt() throws RecognitionException {
        ObjcmParser.case_stmt_return retval = new ObjcmParser.case_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal171=null;
        Token COLON173=null;
        ObjcmParser.case_expr_wrapper_return case_expr_wrapper172 =null;

        ObjcmParser.case_body_wrapper_return case_body_wrapper174 =null;


        Object string_literal171_tree=null;
        Object COLON173_tree=null;

        try {
            // Objcm.g:339:2: ( 'case' case_expr_wrapper COLON ( case_body_wrapper )? )
            // Objcm.g:339:4: 'case' case_expr_wrapper COLON ( case_body_wrapper )?
            {
            root_0 = (Object)adaptor.nil();


            string_literal171=(Token)match(input,168,FOLLOW_168_in_case_stmt1601); 
            string_literal171_tree = 
            (Object)adaptor.create(string_literal171)
            ;
            adaptor.addChild(root_0, string_literal171_tree);


            pushFollow(FOLLOW_case_expr_wrapper_in_case_stmt1604);
            case_expr_wrapper172=case_expr_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, case_expr_wrapper172.getTree());

            COLON173=(Token)match(input,COLON,FOLLOW_COLON_in_case_stmt1607); 
            COLON173_tree = 
            (Object)adaptor.create(COLON173)
            ;
            adaptor.addChild(root_0, COLON173_tree);


            // Objcm.g:340:3: ( case_body_wrapper )?
            int alt38=2;
            int LA38_0 = input.LA(1);

            if ( (LA38_0==ASTERISK||LA38_0==BREAK_WORD||LA38_0==CONST_PREFIX||LA38_0==ENUM_PREFIX||LA38_0==ID||LA38_0==L_AND||LA38_0==L_BR||(LA38_0 >= L_FBR && LA38_0 <= L_KBR)||LA38_0==L_MINUS||LA38_0==L_MINUS_MINUS||LA38_0==L_NOT||LA38_0==L_PLUS||LA38_0==L_PLUS_PLUS||LA38_0==L_TILDA||LA38_0==NUMBER||LA38_0==SEMICOLON||(LA38_0 >= SINGLE_OP && LA38_0 <= SIZEOF)||LA38_0==STATIC_PREFIX||(LA38_0 >= STRING_LITERAL && LA38_0 <= STRING_LITERAL3)||LA38_0==STRUCT_PREFIX||LA38_0==VOID||LA38_0==154||LA38_0==161||(LA38_0 >= 163 && LA38_0 <= 165)||LA38_0==167||(LA38_0 >= 171 && LA38_0 <= 172)||(LA38_0 >= 174 && LA38_0 <= 176)||(LA38_0 >= 178 && LA38_0 <= 180)||(LA38_0 >= 183 && LA38_0 <= 184)) ) {
                alt38=1;
            }
            switch (alt38) {
                case 1 :
                    // Objcm.g:340:3: case_body_wrapper
                    {
                    pushFollow(FOLLOW_case_body_wrapper_in_case_stmt1612);
                    case_body_wrapper174=case_body_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, case_body_wrapper174.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "case_stmt"


    public static class case_body_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "case_body_wrapper"
    // Objcm.g:343:1: case_body_wrapper : case_body -> ^( CASE_BODY case_body ) ;
    public final ObjcmParser.case_body_wrapper_return case_body_wrapper() throws RecognitionException {
        ObjcmParser.case_body_wrapper_return retval = new ObjcmParser.case_body_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.case_body_return case_body175 =null;


        RewriteRuleSubtreeStream stream_case_body=new RewriteRuleSubtreeStream(adaptor,"rule case_body");
        try {
            // Objcm.g:344:2: ( case_body -> ^( CASE_BODY case_body ) )
            // Objcm.g:344:4: case_body
            {
            pushFollow(FOLLOW_case_body_in_case_body_wrapper1626);
            case_body175=case_body();

            state._fsp--;

            stream_case_body.add(case_body175.getTree());

            // AST REWRITE
            // elements: case_body
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 344:14: -> ^( CASE_BODY case_body )
            {
                // Objcm.g:344:17: ^( CASE_BODY case_body )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CASE_BODY, "CASE_BODY")
                , root_1);

                adaptor.addChild(root_1, stream_case_body.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "case_body_wrapper"


    public static class case_body_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "case_body"
    // Objcm.g:346:1: case_body : ( block_break | ( block_internal_full )+ );
    public final ObjcmParser.case_body_return case_body() throws RecognitionException {
        ObjcmParser.case_body_return retval = new ObjcmParser.case_body_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.block_break_return block_break176 =null;

        ObjcmParser.block_internal_full_return block_internal_full177 =null;



        try {
            // Objcm.g:347:2: ( block_break | ( block_internal_full )+ )
            int alt40=2;
            int LA40_0 = input.LA(1);

            if ( (LA40_0==L_FBR) ) {
                alt40=1;
            }
            else if ( (LA40_0==ASTERISK||LA40_0==BREAK_WORD||LA40_0==CONST_PREFIX||LA40_0==ENUM_PREFIX||LA40_0==ID||LA40_0==L_AND||LA40_0==L_BR||LA40_0==L_KBR||LA40_0==L_MINUS||LA40_0==L_MINUS_MINUS||LA40_0==L_NOT||LA40_0==L_PLUS||LA40_0==L_PLUS_PLUS||LA40_0==L_TILDA||LA40_0==NUMBER||LA40_0==SEMICOLON||(LA40_0 >= SINGLE_OP && LA40_0 <= SIZEOF)||LA40_0==STATIC_PREFIX||(LA40_0 >= STRING_LITERAL && LA40_0 <= STRING_LITERAL3)||LA40_0==STRUCT_PREFIX||LA40_0==VOID||LA40_0==154||LA40_0==161||(LA40_0 >= 163 && LA40_0 <= 165)||LA40_0==167||(LA40_0 >= 171 && LA40_0 <= 172)||(LA40_0 >= 174 && LA40_0 <= 176)||(LA40_0 >= 178 && LA40_0 <= 180)||(LA40_0 >= 183 && LA40_0 <= 184)) ) {
                alt40=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 40, 0, input);

                throw nvae;

            }
            switch (alt40) {
                case 1 :
                    // Objcm.g:347:4: block_break
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_block_break_in_case_body1645);
                    block_break176=block_break();

                    state._fsp--;

                    adaptor.addChild(root_0, block_break176.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:348:5: ( block_internal_full )+
                    {
                    root_0 = (Object)adaptor.nil();


                    // Objcm.g:348:5: ( block_internal_full )+
                    int cnt39=0;
                    loop39:
                    do {
                        int alt39=2;
                        int LA39_0 = input.LA(1);

                        if ( (LA39_0==ASTERISK||LA39_0==BREAK_WORD||LA39_0==CONST_PREFIX||LA39_0==ENUM_PREFIX||LA39_0==ID||LA39_0==L_AND||LA39_0==L_BR||LA39_0==L_KBR||LA39_0==L_MINUS||LA39_0==L_MINUS_MINUS||LA39_0==L_NOT||LA39_0==L_PLUS||LA39_0==L_PLUS_PLUS||LA39_0==L_TILDA||LA39_0==NUMBER||LA39_0==SEMICOLON||(LA39_0 >= SINGLE_OP && LA39_0 <= SIZEOF)||LA39_0==STATIC_PREFIX||(LA39_0 >= STRING_LITERAL && LA39_0 <= STRING_LITERAL3)||LA39_0==STRUCT_PREFIX||LA39_0==VOID||LA39_0==154||LA39_0==161||(LA39_0 >= 163 && LA39_0 <= 165)||LA39_0==167||(LA39_0 >= 171 && LA39_0 <= 172)||(LA39_0 >= 174 && LA39_0 <= 176)||(LA39_0 >= 178 && LA39_0 <= 180)||(LA39_0 >= 183 && LA39_0 <= 184)) ) {
                            alt39=1;
                        }


                        switch (alt39) {
                    	case 1 :
                    	    // Objcm.g:348:5: block_internal_full
                    	    {
                    	    pushFollow(FOLLOW_block_internal_full_in_case_body1652);
                    	    block_internal_full177=block_internal_full();

                    	    state._fsp--;

                    	    adaptor.addChild(root_0, block_internal_full177.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt39 >= 1 ) break loop39;
                                EarlyExitException eee =
                                    new EarlyExitException(39, input);
                                throw eee;
                        }
                        cnt39++;
                    } while (true);


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "case_body"


    public static class case_expr_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "case_expr_wrapper"
    // Objcm.g:351:1: case_expr_wrapper : case_expr -> ^( CASE_EXPR case_expr ) ;
    public final ObjcmParser.case_expr_wrapper_return case_expr_wrapper() throws RecognitionException {
        ObjcmParser.case_expr_wrapper_return retval = new ObjcmParser.case_expr_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.case_expr_return case_expr178 =null;


        RewriteRuleSubtreeStream stream_case_expr=new RewriteRuleSubtreeStream(adaptor,"rule case_expr");
        try {
            // Objcm.g:352:2: ( case_expr -> ^( CASE_EXPR case_expr ) )
            // Objcm.g:352:4: case_expr
            {
            pushFollow(FOLLOW_case_expr_in_case_expr_wrapper1668);
            case_expr178=case_expr();

            state._fsp--;

            stream_case_expr.add(case_expr178.getTree());

            // AST REWRITE
            // elements: case_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 352:14: -> ^( CASE_EXPR case_expr )
            {
                // Objcm.g:352:17: ^( CASE_EXPR case_expr )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CASE_EXPR, "CASE_EXPR")
                , root_1);

                adaptor.addChild(root_1, stream_case_expr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "case_expr_wrapper"


    public static class case_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "case_expr"
    // Objcm.g:354:1: case_expr : ( const_expr | ID );
    public final ObjcmParser.case_expr_return case_expr() throws RecognitionException {
        ObjcmParser.case_expr_return retval = new ObjcmParser.case_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID180=null;
        ObjcmParser.const_expr_return const_expr179 =null;


        Object ID180_tree=null;

        try {
            // Objcm.g:355:2: ( const_expr | ID )
            int alt41=2;
            int LA41_0 = input.LA(1);

            if ( (LA41_0==NUMBER||(LA41_0 >= STRING_LITERAL && LA41_0 <= STRING_LITERAL3)||LA41_0==165||LA41_0==178) ) {
                alt41=1;
            }
            else if ( (LA41_0==ID) ) {
                alt41=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 41, 0, input);

                throw nvae;

            }
            switch (alt41) {
                case 1 :
                    // Objcm.g:355:4: const_expr
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_const_expr_in_case_expr1690);
                    const_expr179=const_expr();

                    state._fsp--;

                    adaptor.addChild(root_0, const_expr179.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:356:5: ID
                    {
                    root_0 = (Object)adaptor.nil();


                    ID180=(Token)match(input,ID,FOLLOW_ID_in_case_expr1697); 
                    ID180_tree = 
                    (Object)adaptor.create(ID180)
                    ;
                    adaptor.addChild(root_0, ID180_tree);


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "case_expr"


    public static class block_break_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_break"
    // Objcm.g:358:1: block_break : block_case ( single_operators )? ;
    public final ObjcmParser.block_break_return block_break() throws RecognitionException {
        ObjcmParser.block_break_return retval = new ObjcmParser.block_break_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.block_case_return block_case181 =null;

        ObjcmParser.single_operators_return single_operators182 =null;



        try {
            // Objcm.g:359:2: ( block_case ( single_operators )? )
            // Objcm.g:359:4: block_case ( single_operators )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_block_case_in_block_break1708);
            block_case181=block_case();

            state._fsp--;

            adaptor.addChild(root_0, block_case181.getTree());

            // Objcm.g:359:15: ( single_operators )?
            int alt42=2;
            int LA42_0 = input.LA(1);

            if ( (LA42_0==BREAK_WORD||LA42_0==SINGLE_OP) ) {
                alt42=1;
            }
            switch (alt42) {
                case 1 :
                    // Objcm.g:359:15: single_operators
                    {
                    pushFollow(FOLLOW_single_operators_in_block_break1710);
                    single_operators182=single_operators();

                    state._fsp--;

                    adaptor.addChild(root_0, single_operators182.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_break"


    public static class default_stmt_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "default_stmt_wrapper"
    // Objcm.g:362:1: default_stmt_wrapper : default_stmt -> ^( DEFAULT_STMT default_stmt ) ;
    public final ObjcmParser.default_stmt_wrapper_return default_stmt_wrapper() throws RecognitionException {
        ObjcmParser.default_stmt_wrapper_return retval = new ObjcmParser.default_stmt_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.default_stmt_return default_stmt183 =null;


        RewriteRuleSubtreeStream stream_default_stmt=new RewriteRuleSubtreeStream(adaptor,"rule default_stmt");
        try {
            // Objcm.g:363:2: ( default_stmt -> ^( DEFAULT_STMT default_stmt ) )
            // Objcm.g:363:4: default_stmt
            {
            pushFollow(FOLLOW_default_stmt_in_default_stmt_wrapper1722);
            default_stmt183=default_stmt();

            state._fsp--;

            stream_default_stmt.add(default_stmt183.getTree());

            // AST REWRITE
            // elements: default_stmt
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 363:17: -> ^( DEFAULT_STMT default_stmt )
            {
                // Objcm.g:363:20: ^( DEFAULT_STMT default_stmt )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(DEFAULT_STMT, "DEFAULT_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_default_stmt.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "default_stmt_wrapper"


    public static class default_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "default_stmt"
    // Objcm.g:365:1: default_stmt : 'default' COLON ( default_body_wrapper )? ;
    public final ObjcmParser.default_stmt_return default_stmt() throws RecognitionException {
        ObjcmParser.default_stmt_return retval = new ObjcmParser.default_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal184=null;
        Token COLON185=null;
        ObjcmParser.default_body_wrapper_return default_body_wrapper186 =null;


        Object string_literal184_tree=null;
        Object COLON185_tree=null;

        try {
            // Objcm.g:366:2: ( 'default' COLON ( default_body_wrapper )? )
            // Objcm.g:366:4: 'default' COLON ( default_body_wrapper )?
            {
            root_0 = (Object)adaptor.nil();


            string_literal184=(Token)match(input,170,FOLLOW_170_in_default_stmt1739); 
            string_literal184_tree = 
            (Object)adaptor.create(string_literal184)
            ;
            adaptor.addChild(root_0, string_literal184_tree);


            COLON185=(Token)match(input,COLON,FOLLOW_COLON_in_default_stmt1742); 
            COLON185_tree = 
            (Object)adaptor.create(COLON185)
            ;
            adaptor.addChild(root_0, COLON185_tree);


            // Objcm.g:367:3: ( default_body_wrapper )?
            int alt43=2;
            int LA43_0 = input.LA(1);

            if ( (LA43_0==ASTERISK||LA43_0==BREAK_WORD||LA43_0==CONST_PREFIX||LA43_0==ENUM_PREFIX||LA43_0==ID||LA43_0==L_AND||LA43_0==L_BR||(LA43_0 >= L_FBR && LA43_0 <= L_KBR)||LA43_0==L_MINUS||LA43_0==L_MINUS_MINUS||LA43_0==L_NOT||LA43_0==L_PLUS||LA43_0==L_PLUS_PLUS||LA43_0==L_TILDA||LA43_0==NUMBER||LA43_0==SEMICOLON||(LA43_0 >= SINGLE_OP && LA43_0 <= SIZEOF)||LA43_0==STATIC_PREFIX||(LA43_0 >= STRING_LITERAL && LA43_0 <= STRING_LITERAL3)||LA43_0==STRUCT_PREFIX||LA43_0==VOID||LA43_0==154||LA43_0==161||(LA43_0 >= 163 && LA43_0 <= 165)||LA43_0==167||(LA43_0 >= 171 && LA43_0 <= 172)||(LA43_0 >= 174 && LA43_0 <= 176)||(LA43_0 >= 178 && LA43_0 <= 180)||(LA43_0 >= 183 && LA43_0 <= 184)) ) {
                alt43=1;
            }
            switch (alt43) {
                case 1 :
                    // Objcm.g:367:3: default_body_wrapper
                    {
                    pushFollow(FOLLOW_default_body_wrapper_in_default_stmt1747);
                    default_body_wrapper186=default_body_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, default_body_wrapper186.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "default_stmt"


    public static class default_body_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "default_body_wrapper"
    // Objcm.g:370:1: default_body_wrapper : default_body -> ^( DEFAULT_BODY default_body ) ;
    public final ObjcmParser.default_body_wrapper_return default_body_wrapper() throws RecognitionException {
        ObjcmParser.default_body_wrapper_return retval = new ObjcmParser.default_body_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.default_body_return default_body187 =null;


        RewriteRuleSubtreeStream stream_default_body=new RewriteRuleSubtreeStream(adaptor,"rule default_body");
        try {
            // Objcm.g:371:2: ( default_body -> ^( DEFAULT_BODY default_body ) )
            // Objcm.g:371:4: default_body
            {
            pushFollow(FOLLOW_default_body_in_default_body_wrapper1760);
            default_body187=default_body();

            state._fsp--;

            stream_default_body.add(default_body187.getTree());

            // AST REWRITE
            // elements: default_body
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 371:17: -> ^( DEFAULT_BODY default_body )
            {
                // Objcm.g:371:20: ^( DEFAULT_BODY default_body )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(DEFAULT_BODY, "DEFAULT_BODY")
                , root_1);

                adaptor.addChild(root_1, stream_default_body.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "default_body_wrapper"


    public static class default_body_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "default_body"
    // Objcm.g:374:1: default_body : ( block_break | ( block_internal_full )+ );
    public final ObjcmParser.default_body_return default_body() throws RecognitionException {
        ObjcmParser.default_body_return retval = new ObjcmParser.default_body_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.block_break_return block_break188 =null;

        ObjcmParser.block_internal_full_return block_internal_full189 =null;



        try {
            // Objcm.g:375:2: ( block_break | ( block_internal_full )+ )
            int alt45=2;
            int LA45_0 = input.LA(1);

            if ( (LA45_0==L_FBR) ) {
                alt45=1;
            }
            else if ( (LA45_0==ASTERISK||LA45_0==BREAK_WORD||LA45_0==CONST_PREFIX||LA45_0==ENUM_PREFIX||LA45_0==ID||LA45_0==L_AND||LA45_0==L_BR||LA45_0==L_KBR||LA45_0==L_MINUS||LA45_0==L_MINUS_MINUS||LA45_0==L_NOT||LA45_0==L_PLUS||LA45_0==L_PLUS_PLUS||LA45_0==L_TILDA||LA45_0==NUMBER||LA45_0==SEMICOLON||(LA45_0 >= SINGLE_OP && LA45_0 <= SIZEOF)||LA45_0==STATIC_PREFIX||(LA45_0 >= STRING_LITERAL && LA45_0 <= STRING_LITERAL3)||LA45_0==STRUCT_PREFIX||LA45_0==VOID||LA45_0==154||LA45_0==161||(LA45_0 >= 163 && LA45_0 <= 165)||LA45_0==167||(LA45_0 >= 171 && LA45_0 <= 172)||(LA45_0 >= 174 && LA45_0 <= 176)||(LA45_0 >= 178 && LA45_0 <= 180)||(LA45_0 >= 183 && LA45_0 <= 184)) ) {
                alt45=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 45, 0, input);

                throw nvae;

            }
            switch (alt45) {
                case 1 :
                    // Objcm.g:375:4: block_break
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_block_break_in_default_body1780);
                    block_break188=block_break();

                    state._fsp--;

                    adaptor.addChild(root_0, block_break188.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:376:5: ( block_internal_full )+
                    {
                    root_0 = (Object)adaptor.nil();


                    // Objcm.g:376:5: ( block_internal_full )+
                    int cnt44=0;
                    loop44:
                    do {
                        int alt44=2;
                        int LA44_0 = input.LA(1);

                        if ( (LA44_0==ASTERISK||LA44_0==BREAK_WORD||LA44_0==CONST_PREFIX||LA44_0==ENUM_PREFIX||LA44_0==ID||LA44_0==L_AND||LA44_0==L_BR||LA44_0==L_KBR||LA44_0==L_MINUS||LA44_0==L_MINUS_MINUS||LA44_0==L_NOT||LA44_0==L_PLUS||LA44_0==L_PLUS_PLUS||LA44_0==L_TILDA||LA44_0==NUMBER||LA44_0==SEMICOLON||(LA44_0 >= SINGLE_OP && LA44_0 <= SIZEOF)||LA44_0==STATIC_PREFIX||(LA44_0 >= STRING_LITERAL && LA44_0 <= STRING_LITERAL3)||LA44_0==STRUCT_PREFIX||LA44_0==VOID||LA44_0==154||LA44_0==161||(LA44_0 >= 163 && LA44_0 <= 165)||LA44_0==167||(LA44_0 >= 171 && LA44_0 <= 172)||(LA44_0 >= 174 && LA44_0 <= 176)||(LA44_0 >= 178 && LA44_0 <= 180)||(LA44_0 >= 183 && LA44_0 <= 184)) ) {
                            alt44=1;
                        }


                        switch (alt44) {
                    	case 1 :
                    	    // Objcm.g:376:5: block_internal_full
                    	    {
                    	    pushFollow(FOLLOW_block_internal_full_in_default_body1786);
                    	    block_internal_full189=block_internal_full();

                    	    state._fsp--;

                    	    adaptor.addChild(root_0, block_internal_full189.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt44 >= 1 ) break loop44;
                                EarlyExitException eee =
                                    new EarlyExitException(44, input);
                                throw eee;
                        }
                        cnt44++;
                    } while (true);


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "default_body"


    public static class single_operators_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "single_operators"
    // Objcm.g:379:1: single_operators : ( SINGLE_OP | break_wrapper );
    public final ObjcmParser.single_operators_return single_operators() throws RecognitionException {
        ObjcmParser.single_operators_return retval = new ObjcmParser.single_operators_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SINGLE_OP190=null;
        ObjcmParser.break_wrapper_return break_wrapper191 =null;


        Object SINGLE_OP190_tree=null;

        try {
            // Objcm.g:380:2: ( SINGLE_OP | break_wrapper )
            int alt46=2;
            int LA46_0 = input.LA(1);

            if ( (LA46_0==SINGLE_OP) ) {
                alt46=1;
            }
            else if ( (LA46_0==BREAK_WORD) ) {
                alt46=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 46, 0, input);

                throw nvae;

            }
            switch (alt46) {
                case 1 :
                    // Objcm.g:380:4: SINGLE_OP
                    {
                    root_0 = (Object)adaptor.nil();


                    SINGLE_OP190=(Token)match(input,SINGLE_OP,FOLLOW_SINGLE_OP_in_single_operators1801); 
                    SINGLE_OP190_tree = 
                    (Object)adaptor.create(SINGLE_OP190)
                    ;
                    adaptor.addChild(root_0, SINGLE_OP190_tree);


                    }
                    break;
                case 2 :
                    // Objcm.g:381:5: break_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_break_wrapper_in_single_operators1808);
                    break_wrapper191=break_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, break_wrapper191.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "single_operators"


    public static class break_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "break_wrapper"
    // Objcm.g:384:1: break_wrapper : break_stmt -> ^( BREAK break_stmt ) ;
    public final ObjcmParser.break_wrapper_return break_wrapper() throws RecognitionException {
        ObjcmParser.break_wrapper_return retval = new ObjcmParser.break_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.break_stmt_return break_stmt192 =null;


        RewriteRuleSubtreeStream stream_break_stmt=new RewriteRuleSubtreeStream(adaptor,"rule break_stmt");
        try {
            // Objcm.g:385:2: ( break_stmt -> ^( BREAK break_stmt ) )
            // Objcm.g:385:4: break_stmt
            {
            pushFollow(FOLLOW_break_stmt_in_break_wrapper1820);
            break_stmt192=break_stmt();

            state._fsp--;

            stream_break_stmt.add(break_stmt192.getTree());

            // AST REWRITE
            // elements: break_stmt
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 385:15: -> ^( BREAK break_stmt )
            {
                // Objcm.g:385:18: ^( BREAK break_stmt )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(BREAK, "BREAK")
                , root_1);

                adaptor.addChild(root_1, stream_break_stmt.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "break_wrapper"


    public static class break_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "break_stmt"
    // Objcm.g:387:1: break_stmt : BREAK_WORD SEMICOLON ;
    public final ObjcmParser.break_stmt_return break_stmt() throws RecognitionException {
        ObjcmParser.break_stmt_return retval = new ObjcmParser.break_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token BREAK_WORD193=null;
        Token SEMICOLON194=null;

        Object BREAK_WORD193_tree=null;
        Object SEMICOLON194_tree=null;

        try {
            // Objcm.g:388:2: ( BREAK_WORD SEMICOLON )
            // Objcm.g:388:4: BREAK_WORD SEMICOLON
            {
            root_0 = (Object)adaptor.nil();


            BREAK_WORD193=(Token)match(input,BREAK_WORD,FOLLOW_BREAK_WORD_in_break_stmt1838); 
            BREAK_WORD193_tree = 
            (Object)adaptor.create(BREAK_WORD193)
            ;
            adaptor.addChild(root_0, BREAK_WORD193_tree);


            SEMICOLON194=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_break_stmt1841); 
            SEMICOLON194_tree = 
            (Object)adaptor.create(SEMICOLON194)
            ;
            adaptor.addChild(root_0, SEMICOLON194_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "break_stmt"


    public static class do_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "do_stmt"
    // Objcm.g:390:1: do_stmt : 'do' if_stmt_block 'while' L_BR expression R_BR ;
    public final ObjcmParser.do_stmt_return do_stmt() throws RecognitionException {
        ObjcmParser.do_stmt_return retval = new ObjcmParser.do_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal195=null;
        Token string_literal197=null;
        Token L_BR198=null;
        Token R_BR200=null;
        ObjcmParser.if_stmt_block_return if_stmt_block196 =null;

        ObjcmParser.expression_return expression199 =null;


        Object string_literal195_tree=null;
        Object string_literal197_tree=null;
        Object L_BR198_tree=null;
        Object R_BR200_tree=null;

        try {
            // Objcm.g:390:9: ( 'do' if_stmt_block 'while' L_BR expression R_BR )
            // Objcm.g:390:11: 'do' if_stmt_block 'while' L_BR expression R_BR
            {
            root_0 = (Object)adaptor.nil();


            string_literal195=(Token)match(input,171,FOLLOW_171_in_do_stmt1851); 
            string_literal195_tree = 
            (Object)adaptor.create(string_literal195)
            ;
            adaptor.addChild(root_0, string_literal195_tree);


            pushFollow(FOLLOW_if_stmt_block_in_do_stmt1854);
            if_stmt_block196=if_stmt_block();

            state._fsp--;

            adaptor.addChild(root_0, if_stmt_block196.getTree());

            string_literal197=(Token)match(input,184,FOLLOW_184_in_do_stmt1857); 
            string_literal197_tree = 
            (Object)adaptor.create(string_literal197)
            ;
            adaptor.addChild(root_0, string_literal197_tree);


            L_BR198=(Token)match(input,L_BR,FOLLOW_L_BR_in_do_stmt1860); 
            L_BR198_tree = 
            (Object)adaptor.create(L_BR198)
            ;
            adaptor.addChild(root_0, L_BR198_tree);


            pushFollow(FOLLOW_expression_in_do_stmt1863);
            expression199=expression();

            state._fsp--;

            adaptor.addChild(root_0, expression199.getTree());

            R_BR200=(Token)match(input,R_BR,FOLLOW_R_BR_in_do_stmt1865); 
            R_BR200_tree = 
            (Object)adaptor.create(R_BR200)
            ;
            adaptor.addChild(root_0, R_BR200_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "do_stmt"


    public static class while_stmt_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "while_stmt_wrapper"
    // Objcm.g:392:1: while_stmt_wrapper : while_stmt -> ^( WHILE_STMT while_stmt ) ;
    public final ObjcmParser.while_stmt_wrapper_return while_stmt_wrapper() throws RecognitionException {
        ObjcmParser.while_stmt_wrapper_return retval = new ObjcmParser.while_stmt_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.while_stmt_return while_stmt201 =null;


        RewriteRuleSubtreeStream stream_while_stmt=new RewriteRuleSubtreeStream(adaptor,"rule while_stmt");
        try {
            // Objcm.g:393:2: ( while_stmt -> ^( WHILE_STMT while_stmt ) )
            // Objcm.g:393:4: while_stmt
            {
            pushFollow(FOLLOW_while_stmt_in_while_stmt_wrapper1874);
            while_stmt201=while_stmt();

            state._fsp--;

            stream_while_stmt.add(while_stmt201.getTree());

            // AST REWRITE
            // elements: while_stmt
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 393:15: -> ^( WHILE_STMT while_stmt )
            {
                // Objcm.g:393:18: ^( WHILE_STMT while_stmt )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(WHILE_STMT, "WHILE_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_while_stmt.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "while_stmt_wrapper"


    public static class while_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "while_stmt"
    // Objcm.g:396:1: while_stmt : 'while' L_BR while_expr R_BR if_stmt_block_wrapper ;
    public final ObjcmParser.while_stmt_return while_stmt() throws RecognitionException {
        ObjcmParser.while_stmt_return retval = new ObjcmParser.while_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal202=null;
        Token L_BR203=null;
        Token R_BR205=null;
        ObjcmParser.while_expr_return while_expr204 =null;

        ObjcmParser.if_stmt_block_wrapper_return if_stmt_block_wrapper206 =null;


        Object string_literal202_tree=null;
        Object L_BR203_tree=null;
        Object R_BR205_tree=null;

        try {
            // Objcm.g:397:2: ( 'while' L_BR while_expr R_BR if_stmt_block_wrapper )
            // Objcm.g:397:4: 'while' L_BR while_expr R_BR if_stmt_block_wrapper
            {
            root_0 = (Object)adaptor.nil();


            string_literal202=(Token)match(input,184,FOLLOW_184_in_while_stmt1893); 
            string_literal202_tree = 
            (Object)adaptor.create(string_literal202)
            ;
            adaptor.addChild(root_0, string_literal202_tree);


            L_BR203=(Token)match(input,L_BR,FOLLOW_L_BR_in_while_stmt1896); 
            L_BR203_tree = 
            (Object)adaptor.create(L_BR203)
            ;
            adaptor.addChild(root_0, L_BR203_tree);


            pushFollow(FOLLOW_while_expr_in_while_stmt1899);
            while_expr204=while_expr();

            state._fsp--;

            adaptor.addChild(root_0, while_expr204.getTree());

            R_BR205=(Token)match(input,R_BR,FOLLOW_R_BR_in_while_stmt1901); 
            R_BR205_tree = 
            (Object)adaptor.create(R_BR205)
            ;
            adaptor.addChild(root_0, R_BR205_tree);


            pushFollow(FOLLOW_if_stmt_block_wrapper_in_while_stmt1904);
            if_stmt_block_wrapper206=if_stmt_block_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, if_stmt_block_wrapper206.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "while_stmt"


    public static class while_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "while_expr"
    // Objcm.g:399:1: while_expr : classical_expr_wrp -> ^( WHILE_EXPR classical_expr_wrp ) ;
    public final ObjcmParser.while_expr_return while_expr() throws RecognitionException {
        ObjcmParser.while_expr_return retval = new ObjcmParser.while_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp207 =null;


        RewriteRuleSubtreeStream stream_classical_expr_wrp=new RewriteRuleSubtreeStream(adaptor,"rule classical_expr_wrp");
        try {
            // Objcm.g:400:2: ( classical_expr_wrp -> ^( WHILE_EXPR classical_expr_wrp ) )
            // Objcm.g:400:5: classical_expr_wrp
            {
            pushFollow(FOLLOW_classical_expr_wrp_in_while_expr1917);
            classical_expr_wrp207=classical_expr_wrp();

            state._fsp--;

            stream_classical_expr_wrp.add(classical_expr_wrp207.getTree());

            // AST REWRITE
            // elements: classical_expr_wrp
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 400:24: -> ^( WHILE_EXPR classical_expr_wrp )
            {
                // Objcm.g:400:27: ^( WHILE_EXPR classical_expr_wrp )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(WHILE_EXPR, "WHILE_EXPR")
                , root_1);

                adaptor.addChild(root_1, stream_classical_expr_wrp.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "while_expr"


    public static class for_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "for_stmt"
    // Objcm.g:402:1: for_stmt : 'for' L_BR for_stmt_expr R_BR if_stmt_block ;
    public final ObjcmParser.for_stmt_return for_stmt() throws RecognitionException {
        ObjcmParser.for_stmt_return retval = new ObjcmParser.for_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal208=null;
        Token L_BR209=null;
        Token R_BR211=null;
        ObjcmParser.for_stmt_expr_return for_stmt_expr210 =null;

        ObjcmParser.if_stmt_block_return if_stmt_block212 =null;


        Object string_literal208_tree=null;
        Object L_BR209_tree=null;
        Object R_BR211_tree=null;

        try {
            // Objcm.g:402:9: ( 'for' L_BR for_stmt_expr R_BR if_stmt_block )
            // Objcm.g:402:11: 'for' L_BR for_stmt_expr R_BR if_stmt_block
            {
            root_0 = (Object)adaptor.nil();


            string_literal208=(Token)match(input,174,FOLLOW_174_in_for_stmt1934); 
            string_literal208_tree = 
            (Object)adaptor.create(string_literal208)
            ;
            adaptor.addChild(root_0, string_literal208_tree);


            L_BR209=(Token)match(input,L_BR,FOLLOW_L_BR_in_for_stmt1937); 
            L_BR209_tree = 
            (Object)adaptor.create(L_BR209)
            ;
            adaptor.addChild(root_0, L_BR209_tree);


            pushFollow(FOLLOW_for_stmt_expr_in_for_stmt1940);
            for_stmt_expr210=for_stmt_expr();

            state._fsp--;

            adaptor.addChild(root_0, for_stmt_expr210.getTree());

            R_BR211=(Token)match(input,R_BR,FOLLOW_R_BR_in_for_stmt1942); 
            R_BR211_tree = 
            (Object)adaptor.create(R_BR211)
            ;
            adaptor.addChild(root_0, R_BR211_tree);


            pushFollow(FOLLOW_if_stmt_block_in_for_stmt1945);
            if_stmt_block212=if_stmt_block();

            state._fsp--;

            adaptor.addChild(root_0, if_stmt_block212.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "for_stmt"


    public static class for_stmt_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "for_stmt_expr"
    // Objcm.g:405:1: for_stmt_expr : ( full_expr_wrapper ( for_stmt_int1 | ( full_expr2 ( for_stmt_int1 | for_stmt_int2 ) ) | for_stmt_int2 ) | for_stmt_int2 );
    public final ObjcmParser.for_stmt_expr_return for_stmt_expr() throws RecognitionException {
        ObjcmParser.for_stmt_expr_return retval = new ObjcmParser.for_stmt_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.full_expr_wrapper_return full_expr_wrapper213 =null;

        ObjcmParser.for_stmt_int1_return for_stmt_int1214 =null;

        ObjcmParser.full_expr2_return full_expr2215 =null;

        ObjcmParser.for_stmt_int1_return for_stmt_int1216 =null;

        ObjcmParser.for_stmt_int2_return for_stmt_int2217 =null;

        ObjcmParser.for_stmt_int2_return for_stmt_int2218 =null;

        ObjcmParser.for_stmt_int2_return for_stmt_int2219 =null;



        try {
            // Objcm.g:406:2: ( full_expr_wrapper ( for_stmt_int1 | ( full_expr2 ( for_stmt_int1 | for_stmt_int2 ) ) | for_stmt_int2 ) | for_stmt_int2 )
            int alt49=2;
            int LA49_0 = input.LA(1);

            if ( (LA49_0==ASTERISK||LA49_0==ID||LA49_0==L_AND||LA49_0==L_BR||LA49_0==L_KBR||LA49_0==L_MINUS||LA49_0==L_MINUS_MINUS||LA49_0==L_NOT||LA49_0==L_PLUS||LA49_0==L_PLUS_PLUS||LA49_0==L_TILDA||LA49_0==NUMBER||LA49_0==SIZEOF||(LA49_0 >= STRING_LITERAL && LA49_0 <= STRING_LITERAL3)||LA49_0==154||LA49_0==161||LA49_0==165||LA49_0==176||LA49_0==178||LA49_0==183) ) {
                alt49=1;
            }
            else if ( (LA49_0==SEMICOLON) ) {
                alt49=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 49, 0, input);

                throw nvae;

            }
            switch (alt49) {
                case 1 :
                    // Objcm.g:406:4: full_expr_wrapper ( for_stmt_int1 | ( full_expr2 ( for_stmt_int1 | for_stmt_int2 ) ) | for_stmt_int2 )
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_full_expr_wrapper_in_for_stmt_expr1957);
                    full_expr_wrapper213=full_expr_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, full_expr_wrapper213.getTree());

                    // Objcm.g:406:22: ( for_stmt_int1 | ( full_expr2 ( for_stmt_int1 | for_stmt_int2 ) ) | for_stmt_int2 )
                    int alt48=3;
                    alt48 = dfa48.predict(input);
                    switch (alt48) {
                        case 1 :
                            // Objcm.g:406:23: for_stmt_int1
                            {
                            pushFollow(FOLLOW_for_stmt_int1_in_for_stmt_expr1960);
                            for_stmt_int1214=for_stmt_int1();

                            state._fsp--;

                            adaptor.addChild(root_0, for_stmt_int1214.getTree());

                            }
                            break;
                        case 2 :
                            // Objcm.g:406:39: ( full_expr2 ( for_stmt_int1 | for_stmt_int2 ) )
                            {
                            // Objcm.g:406:39: ( full_expr2 ( for_stmt_int1 | for_stmt_int2 ) )
                            // Objcm.g:406:40: full_expr2 ( for_stmt_int1 | for_stmt_int2 )
                            {
                            pushFollow(FOLLOW_full_expr2_in_for_stmt_expr1965);
                            full_expr2215=full_expr2();

                            state._fsp--;

                            adaptor.addChild(root_0, full_expr2215.getTree());

                            // Objcm.g:406:51: ( for_stmt_int1 | for_stmt_int2 )
                            int alt47=2;
                            int LA47_0 = input.LA(1);

                            if ( (LA47_0==176) ) {
                                alt47=1;
                            }
                            else if ( (LA47_0==SEMICOLON) ) {
                                alt47=2;
                            }
                            else {
                                NoViableAltException nvae =
                                    new NoViableAltException("", 47, 0, input);

                                throw nvae;

                            }
                            switch (alt47) {
                                case 1 :
                                    // Objcm.g:406:52: for_stmt_int1
                                    {
                                    pushFollow(FOLLOW_for_stmt_int1_in_for_stmt_expr1968);
                                    for_stmt_int1216=for_stmt_int1();

                                    state._fsp--;

                                    adaptor.addChild(root_0, for_stmt_int1216.getTree());

                                    }
                                    break;
                                case 2 :
                                    // Objcm.g:406:68: for_stmt_int2
                                    {
                                    pushFollow(FOLLOW_for_stmt_int2_in_for_stmt_expr1972);
                                    for_stmt_int2217=for_stmt_int2();

                                    state._fsp--;

                                    adaptor.addChild(root_0, for_stmt_int2217.getTree());

                                    }
                                    break;

                            }


                            }


                            }
                            break;
                        case 3 :
                            // Objcm.g:406:86: for_stmt_int2
                            {
                            pushFollow(FOLLOW_for_stmt_int2_in_for_stmt_expr1978);
                            for_stmt_int2218=for_stmt_int2();

                            state._fsp--;

                            adaptor.addChild(root_0, for_stmt_int2218.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // Objcm.g:407:4: for_stmt_int2
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_for_stmt_int2_in_for_stmt_expr1984);
                    for_stmt_int2219=for_stmt_int2();

                    state._fsp--;

                    adaptor.addChild(root_0, for_stmt_int2219.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "for_stmt_expr"


    public static class for_stmt_int1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "for_stmt_int1"
    // Objcm.g:410:1: for_stmt_int1 : 'in' object_wrapped2 -> ^( FOR_IN_STMT object_wrapped2 ) ;
    public final ObjcmParser.for_stmt_int1_return for_stmt_int1() throws RecognitionException {
        ObjcmParser.for_stmt_int1_return retval = new ObjcmParser.for_stmt_int1_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal220=null;
        ObjcmParser.object_wrapped2_return object_wrapped2221 =null;


        Object string_literal220_tree=null;
        RewriteRuleTokenStream stream_176=new RewriteRuleTokenStream(adaptor,"token 176");
        RewriteRuleSubtreeStream stream_object_wrapped2=new RewriteRuleSubtreeStream(adaptor,"rule object_wrapped2");
        try {
            // Objcm.g:411:2: ( 'in' object_wrapped2 -> ^( FOR_IN_STMT object_wrapped2 ) )
            // Objcm.g:411:4: 'in' object_wrapped2
            {
            string_literal220=(Token)match(input,176,FOLLOW_176_in_for_stmt_int11999);  
            stream_176.add(string_literal220);


            pushFollow(FOLLOW_object_wrapped2_in_for_stmt_int12001);
            object_wrapped2221=object_wrapped2();

            state._fsp--;

            stream_object_wrapped2.add(object_wrapped2221.getTree());

            // AST REWRITE
            // elements: object_wrapped2
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 411:26: -> ^( FOR_IN_STMT object_wrapped2 )
            {
                // Objcm.g:411:29: ^( FOR_IN_STMT object_wrapped2 )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FOR_IN_STMT, "FOR_IN_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_object_wrapped2.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "for_stmt_int1"


    public static class for_stmt_int2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "for_stmt_int2"
    // Objcm.g:413:1: for_stmt_int2 : SEMICOLON ( classical_expr_wrp )? SEMICOLON ( classical_expr_wrp )? ;
    public final ObjcmParser.for_stmt_int2_return for_stmt_int2() throws RecognitionException {
        ObjcmParser.for_stmt_int2_return retval = new ObjcmParser.for_stmt_int2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON222=null;
        Token SEMICOLON224=null;
        ObjcmParser.classical_expr_wrp_return classical_expr_wrp223 =null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp225 =null;


        Object SEMICOLON222_tree=null;
        Object SEMICOLON224_tree=null;

        try {
            // Objcm.g:414:2: ( SEMICOLON ( classical_expr_wrp )? SEMICOLON ( classical_expr_wrp )? )
            // Objcm.g:414:4: SEMICOLON ( classical_expr_wrp )? SEMICOLON ( classical_expr_wrp )?
            {
            root_0 = (Object)adaptor.nil();


            SEMICOLON222=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_for_stmt_int22021); 
            SEMICOLON222_tree = 
            (Object)adaptor.create(SEMICOLON222)
            ;
            adaptor.addChild(root_0, SEMICOLON222_tree);


            // Objcm.g:414:14: ( classical_expr_wrp )?
            int alt50=2;
            int LA50_0 = input.LA(1);

            if ( (LA50_0==ASTERISK||LA50_0==ID||LA50_0==L_AND||LA50_0==L_BR||LA50_0==L_KBR||LA50_0==L_MINUS||LA50_0==L_MINUS_MINUS||LA50_0==L_NOT||LA50_0==L_PLUS||LA50_0==L_PLUS_PLUS||LA50_0==L_TILDA||LA50_0==NUMBER||LA50_0==SIZEOF||(LA50_0 >= STRING_LITERAL && LA50_0 <= STRING_LITERAL3)||LA50_0==154||LA50_0==161||LA50_0==165||LA50_0==176||LA50_0==178||LA50_0==183) ) {
                alt50=1;
            }
            switch (alt50) {
                case 1 :
                    // Objcm.g:414:14: classical_expr_wrp
                    {
                    pushFollow(FOLLOW_classical_expr_wrp_in_for_stmt_int22023);
                    classical_expr_wrp223=classical_expr_wrp();

                    state._fsp--;

                    adaptor.addChild(root_0, classical_expr_wrp223.getTree());

                    }
                    break;

            }


            SEMICOLON224=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_for_stmt_int22026); 
            SEMICOLON224_tree = 
            (Object)adaptor.create(SEMICOLON224)
            ;
            adaptor.addChild(root_0, SEMICOLON224_tree);


            // Objcm.g:414:44: ( classical_expr_wrp )?
            int alt51=2;
            int LA51_0 = input.LA(1);

            if ( (LA51_0==ASTERISK||LA51_0==ID||LA51_0==L_AND||LA51_0==L_BR||LA51_0==L_KBR||LA51_0==L_MINUS||LA51_0==L_MINUS_MINUS||LA51_0==L_NOT||LA51_0==L_PLUS||LA51_0==L_PLUS_PLUS||LA51_0==L_TILDA||LA51_0==NUMBER||LA51_0==SIZEOF||(LA51_0 >= STRING_LITERAL && LA51_0 <= STRING_LITERAL3)||LA51_0==154||LA51_0==161||LA51_0==165||LA51_0==176||LA51_0==178||LA51_0==183) ) {
                alt51=1;
            }
            switch (alt51) {
                case 1 :
                    // Objcm.g:414:44: classical_expr_wrp
                    {
                    pushFollow(FOLLOW_classical_expr_wrp_in_for_stmt_int22028);
                    classical_expr_wrp225=classical_expr_wrp();

                    state._fsp--;

                    adaptor.addChild(root_0, classical_expr_wrp225.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "for_stmt_int2"


    public static class return_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "return_stmt"
    // Objcm.g:421:1: return_stmt : 'return' ( classical_expr_wrp )? SEMICOLON -> ^( RETURN_STMT ( classical_expr_wrp )? SEMICOLON ) ;
    public final ObjcmParser.return_stmt_return return_stmt() throws RecognitionException {
        ObjcmParser.return_stmt_return retval = new ObjcmParser.return_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal226=null;
        Token SEMICOLON228=null;
        ObjcmParser.classical_expr_wrp_return classical_expr_wrp227 =null;


        Object string_literal226_tree=null;
        Object SEMICOLON228_tree=null;
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleTokenStream stream_179=new RewriteRuleTokenStream(adaptor,"token 179");
        RewriteRuleSubtreeStream stream_classical_expr_wrp=new RewriteRuleSubtreeStream(adaptor,"rule classical_expr_wrp");
        try {
            // Objcm.g:422:2: ( 'return' ( classical_expr_wrp )? SEMICOLON -> ^( RETURN_STMT ( classical_expr_wrp )? SEMICOLON ) )
            // Objcm.g:422:4: 'return' ( classical_expr_wrp )? SEMICOLON
            {
            string_literal226=(Token)match(input,179,FOLLOW_179_in_return_stmt2045);  
            stream_179.add(string_literal226);


            // Objcm.g:422:13: ( classical_expr_wrp )?
            int alt52=2;
            int LA52_0 = input.LA(1);

            if ( (LA52_0==ASTERISK||LA52_0==ID||LA52_0==L_AND||LA52_0==L_BR||LA52_0==L_KBR||LA52_0==L_MINUS||LA52_0==L_MINUS_MINUS||LA52_0==L_NOT||LA52_0==L_PLUS||LA52_0==L_PLUS_PLUS||LA52_0==L_TILDA||LA52_0==NUMBER||LA52_0==SIZEOF||(LA52_0 >= STRING_LITERAL && LA52_0 <= STRING_LITERAL3)||LA52_0==154||LA52_0==161||LA52_0==165||LA52_0==176||LA52_0==178||LA52_0==183) ) {
                alt52=1;
            }
            switch (alt52) {
                case 1 :
                    // Objcm.g:422:13: classical_expr_wrp
                    {
                    pushFollow(FOLLOW_classical_expr_wrp_in_return_stmt2047);
                    classical_expr_wrp227=classical_expr_wrp();

                    state._fsp--;

                    stream_classical_expr_wrp.add(classical_expr_wrp227.getTree());

                    }
                    break;

            }


            SEMICOLON228=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_return_stmt2050);  
            stream_SEMICOLON.add(SEMICOLON228);


            // AST REWRITE
            // elements: SEMICOLON, classical_expr_wrp
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 422:43: -> ^( RETURN_STMT ( classical_expr_wrp )? SEMICOLON )
            {
                // Objcm.g:422:46: ^( RETURN_STMT ( classical_expr_wrp )? SEMICOLON )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(RETURN_STMT, "RETURN_STMT")
                , root_1);

                // Objcm.g:422:60: ( classical_expr_wrp )?
                if ( stream_classical_expr_wrp.hasNext() ) {
                    adaptor.addChild(root_1, stream_classical_expr_wrp.nextTree());

                }
                stream_classical_expr_wrp.reset();

                adaptor.addChild(root_1, 
                stream_SEMICOLON.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "return_stmt"


    public static class if_stmt_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "if_stmt_wrapper"
    // Objcm.g:424:1: if_stmt_wrapper : if_stmt -> ^( IF_STMT if_stmt ) ;
    public final ObjcmParser.if_stmt_wrapper_return if_stmt_wrapper() throws RecognitionException {
        ObjcmParser.if_stmt_wrapper_return retval = new ObjcmParser.if_stmt_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.if_stmt_return if_stmt229 =null;


        RewriteRuleSubtreeStream stream_if_stmt=new RewriteRuleSubtreeStream(adaptor,"rule if_stmt");
        try {
            // Objcm.g:425:2: ( if_stmt -> ^( IF_STMT if_stmt ) )
            // Objcm.g:425:4: if_stmt
            {
            pushFollow(FOLLOW_if_stmt_in_if_stmt_wrapper2071);
            if_stmt229=if_stmt();

            state._fsp--;

            stream_if_stmt.add(if_stmt229.getTree());

            // AST REWRITE
            // elements: if_stmt
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 425:12: -> ^( IF_STMT if_stmt )
            {
                // Objcm.g:425:15: ^( IF_STMT if_stmt )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(IF_STMT, "IF_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_if_stmt.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "if_stmt_wrapper"


    public static class if_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "if_stmt"
    // Objcm.g:427:1: if_stmt : 'if' L_BR if_expr R_BR if_stmt_block_wrapper ;
    public final ObjcmParser.if_stmt_return if_stmt() throws RecognitionException {
        ObjcmParser.if_stmt_return retval = new ObjcmParser.if_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal230=null;
        Token L_BR231=null;
        Token R_BR233=null;
        ObjcmParser.if_expr_return if_expr232 =null;

        ObjcmParser.if_stmt_block_wrapper_return if_stmt_block_wrapper234 =null;


        Object string_literal230_tree=null;
        Object L_BR231_tree=null;
        Object R_BR233_tree=null;

        try {
            // Objcm.g:427:9: ( 'if' L_BR if_expr R_BR if_stmt_block_wrapper )
            // Objcm.g:427:11: 'if' L_BR if_expr R_BR if_stmt_block_wrapper
            {
            root_0 = (Object)adaptor.nil();


            string_literal230=(Token)match(input,175,FOLLOW_175_in_if_stmt2087); 
            string_literal230_tree = 
            (Object)adaptor.create(string_literal230)
            ;
            adaptor.addChild(root_0, string_literal230_tree);


            L_BR231=(Token)match(input,L_BR,FOLLOW_L_BR_in_if_stmt2090); 
            L_BR231_tree = 
            (Object)adaptor.create(L_BR231)
            ;
            adaptor.addChild(root_0, L_BR231_tree);


            pushFollow(FOLLOW_if_expr_in_if_stmt2093);
            if_expr232=if_expr();

            state._fsp--;

            adaptor.addChild(root_0, if_expr232.getTree());

            R_BR233=(Token)match(input,R_BR,FOLLOW_R_BR_in_if_stmt2095); 
            R_BR233_tree = 
            (Object)adaptor.create(R_BR233)
            ;
            adaptor.addChild(root_0, R_BR233_tree);


            pushFollow(FOLLOW_if_stmt_block_wrapper_in_if_stmt2098);
            if_stmt_block_wrapper234=if_stmt_block_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, if_stmt_block_wrapper234.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "if_stmt"


    public static class if_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "if_expr"
    // Objcm.g:430:1: if_expr : classical_expr_wrp -> ^( IF_EXPR classical_expr_wrp ) ;
    public final ObjcmParser.if_expr_return if_expr() throws RecognitionException {
        ObjcmParser.if_expr_return retval = new ObjcmParser.if_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp235 =null;


        RewriteRuleSubtreeStream stream_classical_expr_wrp=new RewriteRuleSubtreeStream(adaptor,"rule classical_expr_wrp");
        try {
            // Objcm.g:430:9: ( classical_expr_wrp -> ^( IF_EXPR classical_expr_wrp ) )
            // Objcm.g:430:12: classical_expr_wrp
            {
            pushFollow(FOLLOW_classical_expr_wrp_in_if_expr2111);
            classical_expr_wrp235=classical_expr_wrp();

            state._fsp--;

            stream_classical_expr_wrp.add(classical_expr_wrp235.getTree());

            // AST REWRITE
            // elements: classical_expr_wrp
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 430:31: -> ^( IF_EXPR classical_expr_wrp )
            {
                // Objcm.g:430:34: ^( IF_EXPR classical_expr_wrp )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(IF_EXPR, "IF_EXPR")
                , root_1);

                adaptor.addChild(root_1, stream_classical_expr_wrp.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "if_expr"


    public static class else_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "else_stmt"
    // Objcm.g:432:1: else_stmt : 'else' if_stmt_block ;
    public final ObjcmParser.else_stmt_return else_stmt() throws RecognitionException {
        ObjcmParser.else_stmt_return retval = new ObjcmParser.else_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal236=null;
        ObjcmParser.if_stmt_block_return if_stmt_block237 =null;


        Object string_literal236_tree=null;

        try {
            // Objcm.g:433:2: ( 'else' if_stmt_block )
            // Objcm.g:433:4: 'else' if_stmt_block
            {
            root_0 = (Object)adaptor.nil();


            string_literal236=(Token)match(input,172,FOLLOW_172_in_else_stmt2130); 
            string_literal236_tree = 
            (Object)adaptor.create(string_literal236)
            ;
            adaptor.addChild(root_0, string_literal236_tree);


            pushFollow(FOLLOW_if_stmt_block_in_else_stmt2133);
            if_stmt_block237=if_stmt_block();

            state._fsp--;

            adaptor.addChild(root_0, if_stmt_block237.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "else_stmt"


    public static class if_stmt_block_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "if_stmt_block_wrapper"
    // Objcm.g:435:1: if_stmt_block_wrapper : if_stmt_block -> ^( IF_BLOCK if_stmt_block ) ;
    public final ObjcmParser.if_stmt_block_wrapper_return if_stmt_block_wrapper() throws RecognitionException {
        ObjcmParser.if_stmt_block_wrapper_return retval = new ObjcmParser.if_stmt_block_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.if_stmt_block_return if_stmt_block238 =null;


        RewriteRuleSubtreeStream stream_if_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule if_stmt_block");
        try {
            // Objcm.g:436:2: ( if_stmt_block -> ^( IF_BLOCK if_stmt_block ) )
            // Objcm.g:436:4: if_stmt_block
            {
            pushFollow(FOLLOW_if_stmt_block_in_if_stmt_block_wrapper2142);
            if_stmt_block238=if_stmt_block();

            state._fsp--;

            stream_if_stmt_block.add(if_stmt_block238.getTree());

            // AST REWRITE
            // elements: if_stmt_block
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 436:18: -> ^( IF_BLOCK if_stmt_block )
            {
                // Objcm.g:436:21: ^( IF_BLOCK if_stmt_block )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(IF_BLOCK, "IF_BLOCK")
                , root_1);

                adaptor.addChild(root_1, stream_if_stmt_block.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "if_stmt_block_wrapper"


    public static class if_stmt_block_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "if_stmt_block"
    // Objcm.g:438:1: if_stmt_block : ( block_wrapper | block_internal );
    public final ObjcmParser.if_stmt_block_return if_stmt_block() throws RecognitionException {
        ObjcmParser.if_stmt_block_return retval = new ObjcmParser.if_stmt_block_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.block_wrapper_return block_wrapper239 =null;

        ObjcmParser.block_internal_return block_internal240 =null;



        try {
            // Objcm.g:439:2: ( block_wrapper | block_internal )
            int alt53=2;
            int LA53_0 = input.LA(1);

            if ( (LA53_0==L_FBR) ) {
                alt53=1;
            }
            else if ( (LA53_0==ASTERISK||LA53_0==BREAK_WORD||LA53_0==CONST_PREFIX||LA53_0==ENUM_PREFIX||LA53_0==ID||LA53_0==L_AND||LA53_0==L_BR||LA53_0==L_KBR||LA53_0==L_MINUS||LA53_0==L_MINUS_MINUS||LA53_0==L_NOT||LA53_0==L_PLUS||LA53_0==L_PLUS_PLUS||LA53_0==L_TILDA||LA53_0==NUMBER||LA53_0==SEMICOLON||(LA53_0 >= SINGLE_OP && LA53_0 <= SIZEOF)||LA53_0==STATIC_PREFIX||(LA53_0 >= STRING_LITERAL && LA53_0 <= STRING_LITERAL3)||LA53_0==STRUCT_PREFIX||LA53_0==VOID||LA53_0==154||LA53_0==161||(LA53_0 >= 163 && LA53_0 <= 165)||LA53_0==167||(LA53_0 >= 171 && LA53_0 <= 172)||(LA53_0 >= 174 && LA53_0 <= 176)||(LA53_0 >= 178 && LA53_0 <= 180)||(LA53_0 >= 183 && LA53_0 <= 184)) ) {
                alt53=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 53, 0, input);

                throw nvae;

            }
            switch (alt53) {
                case 1 :
                    // Objcm.g:439:4: block_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_block_wrapper_in_if_stmt_block2159);
                    block_wrapper239=block_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, block_wrapper239.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:440:5: block_internal
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_block_internal_in_if_stmt_block2165);
                    block_internal240=block_internal();

                    state._fsp--;

                    adaptor.addChild(root_0, block_internal240.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "if_stmt_block"


    public static class static_start_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "static_start_wrapper"
    // Objcm.g:443:1: static_start_wrapper : static_start -> ^( STATIC_START static_start ) ;
    public final ObjcmParser.static_start_wrapper_return static_start_wrapper() throws RecognitionException {
        ObjcmParser.static_start_wrapper_return retval = new ObjcmParser.static_start_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.static_start_return static_start241 =null;


        RewriteRuleSubtreeStream stream_static_start=new RewriteRuleSubtreeStream(adaptor,"rule static_start");
        try {
            // Objcm.g:444:2: ( static_start -> ^( STATIC_START static_start ) )
            // Objcm.g:444:4: static_start
            {
            pushFollow(FOLLOW_static_start_in_static_start_wrapper2177);
            static_start241=static_start();

            state._fsp--;

            stream_static_start.add(static_start241.getTree());

            // AST REWRITE
            // elements: static_start
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 444:17: -> ^( STATIC_START static_start )
            {
                // Objcm.g:444:20: ^( STATIC_START static_start )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(STATIC_START, "STATIC_START")
                , root_1);

                adaptor.addChild(root_1, stream_static_start.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "static_start_wrapper"


    public static class static_start_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "static_start"
    // Objcm.g:446:1: static_start : STATIC_PREFIX ( CONST_PREFIX )? ( object_name ( ASTERISK )* )? full_expr2 ;
    public final ObjcmParser.static_start_return static_start() throws RecognitionException {
        ObjcmParser.static_start_return retval = new ObjcmParser.static_start_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STATIC_PREFIX242=null;
        Token CONST_PREFIX243=null;
        Token ASTERISK245=null;
        ObjcmParser.object_name_return object_name244 =null;

        ObjcmParser.full_expr2_return full_expr2246 =null;


        Object STATIC_PREFIX242_tree=null;
        Object CONST_PREFIX243_tree=null;
        Object ASTERISK245_tree=null;

        try {
            // Objcm.g:447:2: ( STATIC_PREFIX ( CONST_PREFIX )? ( object_name ( ASTERISK )* )? full_expr2 )
            // Objcm.g:447:4: STATIC_PREFIX ( CONST_PREFIX )? ( object_name ( ASTERISK )* )? full_expr2
            {
            root_0 = (Object)adaptor.nil();


            STATIC_PREFIX242=(Token)match(input,STATIC_PREFIX,FOLLOW_STATIC_PREFIX_in_static_start2195); 
            STATIC_PREFIX242_tree = 
            (Object)adaptor.create(STATIC_PREFIX242)
            ;
            adaptor.addChild(root_0, STATIC_PREFIX242_tree);


            // Objcm.g:447:18: ( CONST_PREFIX )?
            int alt54=2;
            int LA54_0 = input.LA(1);

            if ( (LA54_0==CONST_PREFIX) ) {
                alt54=1;
            }
            switch (alt54) {
                case 1 :
                    // Objcm.g:447:18: CONST_PREFIX
                    {
                    CONST_PREFIX243=(Token)match(input,CONST_PREFIX,FOLLOW_CONST_PREFIX_in_static_start2197); 
                    CONST_PREFIX243_tree = 
                    (Object)adaptor.create(CONST_PREFIX243)
                    ;
                    adaptor.addChild(root_0, CONST_PREFIX243_tree);


                    }
                    break;

            }


            // Objcm.g:447:32: ( object_name ( ASTERISK )* )?
            int alt56=2;
            alt56 = dfa56.predict(input);
            switch (alt56) {
                case 1 :
                    // Objcm.g:447:33: object_name ( ASTERISK )*
                    {
                    pushFollow(FOLLOW_object_name_in_static_start2201);
                    object_name244=object_name();

                    state._fsp--;

                    adaptor.addChild(root_0, object_name244.getTree());

                    // Objcm.g:447:45: ( ASTERISK )*
                    loop55:
                    do {
                        int alt55=2;
                        int LA55_0 = input.LA(1);

                        if ( (LA55_0==ASTERISK) ) {
                            alt55=1;
                        }


                        switch (alt55) {
                    	case 1 :
                    	    // Objcm.g:447:45: ASTERISK
                    	    {
                    	    ASTERISK245=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_static_start2203); 
                    	    ASTERISK245_tree = 
                    	    (Object)adaptor.create(ASTERISK245)
                    	    ;
                    	    adaptor.addChild(root_0, ASTERISK245_tree);


                    	    }
                    	    break;

                    	default :
                    	    break loop55;
                        }
                    } while (true);


                    }
                    break;

            }


            pushFollow(FOLLOW_full_expr2_in_static_start2208);
            full_expr2246=full_expr2();

            state._fsp--;

            adaptor.addChild(root_0, full_expr2246.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "static_start"


    public static class id_part_end_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "id_part_end"
    // Objcm.g:450:1: id_part_end : ( id_part_end_internal )+ ;
    public final ObjcmParser.id_part_end_return id_part_end() throws RecognitionException {
        ObjcmParser.id_part_end_return retval = new ObjcmParser.id_part_end_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.id_part_end_internal_return id_part_end_internal247 =null;



        try {
            // Objcm.g:451:2: ( ( id_part_end_internal )+ )
            // Objcm.g:451:4: ( id_part_end_internal )+
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:451:4: ( id_part_end_internal )+
            int cnt57=0;
            loop57:
            do {
                int alt57=2;
                int LA57_0 = input.LA(1);

                if ( (LA57_0==DOT||LA57_0==151) ) {
                    alt57=1;
                }


                switch (alt57) {
            	case 1 :
            	    // Objcm.g:451:4: id_part_end_internal
            	    {
            	    pushFollow(FOLLOW_id_part_end_internal_in_id_part_end2220);
            	    id_part_end_internal247=id_part_end_internal();

            	    state._fsp--;

            	    adaptor.addChild(root_0, id_part_end_internal247.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt57 >= 1 ) break loop57;
                        EarlyExitException eee =
                            new EarlyExitException(57, input);
                        throw eee;
                }
                cnt57++;
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "id_part_end"


    public static class id_part_end_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "id_part_end_internal"
    // Objcm.g:454:1: id_part_end_internal : ( DOT | '->' ) id_part -> ^( FIELD_ACCESS id_part ) ;
    public final ObjcmParser.id_part_end_internal_return id_part_end_internal() throws RecognitionException {
        ObjcmParser.id_part_end_internal_return retval = new ObjcmParser.id_part_end_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token DOT248=null;
        Token string_literal249=null;
        ObjcmParser.id_part_return id_part250 =null;


        Object DOT248_tree=null;
        Object string_literal249_tree=null;
        RewriteRuleTokenStream stream_151=new RewriteRuleTokenStream(adaptor,"token 151");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_id_part=new RewriteRuleSubtreeStream(adaptor,"rule id_part");
        try {
            // Objcm.g:455:2: ( ( DOT | '->' ) id_part -> ^( FIELD_ACCESS id_part ) )
            // Objcm.g:455:4: ( DOT | '->' ) id_part
            {
            // Objcm.g:455:4: ( DOT | '->' )
            int alt58=2;
            int LA58_0 = input.LA(1);

            if ( (LA58_0==DOT) ) {
                alt58=1;
            }
            else if ( (LA58_0==151) ) {
                alt58=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 58, 0, input);

                throw nvae;

            }
            switch (alt58) {
                case 1 :
                    // Objcm.g:455:5: DOT
                    {
                    DOT248=(Token)match(input,DOT,FOLLOW_DOT_in_id_part_end_internal2235);  
                    stream_DOT.add(DOT248);


                    }
                    break;
                case 2 :
                    // Objcm.g:455:11: '->'
                    {
                    string_literal249=(Token)match(input,151,FOLLOW_151_in_id_part_end_internal2239);  
                    stream_151.add(string_literal249);


                    }
                    break;

            }


            pushFollow(FOLLOW_id_part_in_id_part_end_internal2242);
            id_part250=id_part();

            state._fsp--;

            stream_id_part.add(id_part250.getTree());

            // AST REWRITE
            // elements: id_part
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 455:25: -> ^( FIELD_ACCESS id_part )
            {
                // Objcm.g:455:28: ^( FIELD_ACCESS id_part )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FIELD_ACCESS, "FIELD_ACCESS")
                , root_1);

                adaptor.addChild(root_1, stream_id_part.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "id_part_end_internal"


    public static class known_types_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "known_types"
    // Objcm.g:458:1: known_types : ( 'unsigned' | VOID );
    public final ObjcmParser.known_types_return known_types() throws RecognitionException {
        ObjcmParser.known_types_return retval = new ObjcmParser.known_types_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set251=null;

        Object set251_tree=null;

        try {
            // Objcm.g:459:2: ( 'unsigned' | VOID )
            // Objcm.g:
            {
            root_0 = (Object)adaptor.nil();


            set251=(Token)input.LT(1);

            if ( input.LA(1)==VOID||input.LA(1)==183 ) {
                input.consume();
                adaptor.addChild(root_0, 
                (Object)adaptor.create(set251)
                );
                state.errorRecovery=false;
            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "known_types"


    public static class id_part_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "id_part"
    // Objcm.g:463:1: id_part : name_internal ( function_brackets_wrapper )? ( index )* ;
    public final ObjcmParser.id_part_return id_part() throws RecognitionException {
        ObjcmParser.id_part_return retval = new ObjcmParser.id_part_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.name_internal_return name_internal252 =null;

        ObjcmParser.function_brackets_wrapper_return function_brackets_wrapper253 =null;

        ObjcmParser.index_return index254 =null;



        try {
            // Objcm.g:463:9: ( name_internal ( function_brackets_wrapper )? ( index )* )
            // Objcm.g:463:12: name_internal ( function_brackets_wrapper )? ( index )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_name_internal_in_id_part2280);
            name_internal252=name_internal();

            state._fsp--;

            adaptor.addChild(root_0, name_internal252.getTree());

            // Objcm.g:463:26: ( function_brackets_wrapper )?
            int alt59=2;
            int LA59_0 = input.LA(1);

            if ( (LA59_0==L_BR) ) {
                alt59=1;
            }
            switch (alt59) {
                case 1 :
                    // Objcm.g:463:26: function_brackets_wrapper
                    {
                    pushFollow(FOLLOW_function_brackets_wrapper_in_id_part2282);
                    function_brackets_wrapper253=function_brackets_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, function_brackets_wrapper253.getTree());

                    }
                    break;

            }


            // Objcm.g:463:53: ( index )*
            loop60:
            do {
                int alt60=2;
                int LA60_0 = input.LA(1);

                if ( (LA60_0==L_KBR) ) {
                    alt60=1;
                }


                switch (alt60) {
            	case 1 :
            	    // Objcm.g:463:53: index
            	    {
            	    pushFollow(FOLLOW_index_in_id_part2285);
            	    index254=index();

            	    state._fsp--;

            	    adaptor.addChild(root_0, index254.getTree());

            	    }
            	    break;

            	default :
            	    break loop60;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "id_part"


    public static class object_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "object_name"
    // Objcm.g:466:1: object_name : id_part ( id_part_end )? ;
    public final ObjcmParser.object_name_return object_name() throws RecognitionException {
        ObjcmParser.object_name_return retval = new ObjcmParser.object_name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.id_part_return id_part255 =null;

        ObjcmParser.id_part_end_return id_part_end256 =null;



        try {
            // Objcm.g:467:2: ( id_part ( id_part_end )? )
            // Objcm.g:467:4: id_part ( id_part_end )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_id_part_in_object_name2298);
            id_part255=id_part();

            state._fsp--;

            adaptor.addChild(root_0, id_part255.getTree());

            // Objcm.g:467:12: ( id_part_end )?
            int alt61=2;
            int LA61_0 = input.LA(1);

            if ( (LA61_0==DOT||LA61_0==151) ) {
                alt61=1;
            }
            switch (alt61) {
                case 1 :
                    // Objcm.g:467:12: id_part_end
                    {
                    pushFollow(FOLLOW_id_part_end_in_object_name2300);
                    id_part_end256=id_part_end();

                    state._fsp--;

                    adaptor.addChild(root_0, id_part_end256.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "object_name"


    public static class view_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "view_stmt"
    // Objcm.g:470:1: view_stmt : ( square_brackets | block_wrapper );
    public final ObjcmParser.view_stmt_return view_stmt() throws RecognitionException {
        ObjcmParser.view_stmt_return retval = new ObjcmParser.view_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.square_brackets_return square_brackets257 =null;

        ObjcmParser.block_wrapper_return block_wrapper258 =null;



        try {
            // Objcm.g:471:2: ( square_brackets | block_wrapper )
            int alt62=2;
            int LA62_0 = input.LA(1);

            if ( (LA62_0==L_KBR) ) {
                alt62=1;
            }
            else if ( (LA62_0==L_FBR) ) {
                alt62=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 62, 0, input);

                throw nvae;

            }
            switch (alt62) {
                case 1 :
                    // Objcm.g:471:5: square_brackets
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_square_brackets_in_view_stmt2315);
                    square_brackets257=square_brackets();

                    state._fsp--;

                    adaptor.addChild(root_0, square_brackets257.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:472:4: block_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_block_wrapper_in_view_stmt2320);
                    block_wrapper258=block_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, block_wrapper258.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "view_stmt"


    public static class method_call_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_call_wrapper"
    // Objcm.g:475:1: method_call_wrapper : L_KBR method_call2 R_KBR -> ^( METHOD_CALL method_call2 ) ;
    public final ObjcmParser.method_call_wrapper_return method_call_wrapper() throws RecognitionException {
        ObjcmParser.method_call_wrapper_return retval = new ObjcmParser.method_call_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_KBR259=null;
        Token R_KBR261=null;
        ObjcmParser.method_call2_return method_call2260 =null;


        Object L_KBR259_tree=null;
        Object R_KBR261_tree=null;
        RewriteRuleTokenStream stream_R_KBR=new RewriteRuleTokenStream(adaptor,"token R_KBR");
        RewriteRuleTokenStream stream_L_KBR=new RewriteRuleTokenStream(adaptor,"token L_KBR");
        RewriteRuleSubtreeStream stream_method_call2=new RewriteRuleSubtreeStream(adaptor,"rule method_call2");
        try {
            // Objcm.g:476:2: ( L_KBR method_call2 R_KBR -> ^( METHOD_CALL method_call2 ) )
            // Objcm.g:476:4: L_KBR method_call2 R_KBR
            {
            L_KBR259=(Token)match(input,L_KBR,FOLLOW_L_KBR_in_method_call_wrapper2334);  
            stream_L_KBR.add(L_KBR259);


            pushFollow(FOLLOW_method_call2_in_method_call_wrapper2336);
            method_call2260=method_call2();

            state._fsp--;

            stream_method_call2.add(method_call2260.getTree());

            R_KBR261=(Token)match(input,R_KBR,FOLLOW_R_KBR_in_method_call_wrapper2338);  
            stream_R_KBR.add(R_KBR261);


            // AST REWRITE
            // elements: method_call2
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 476:29: -> ^( METHOD_CALL method_call2 )
            {
                // Objcm.g:476:32: ^( METHOD_CALL method_call2 )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD_CALL, "METHOD_CALL")
                , root_1);

                adaptor.addChild(root_1, stream_method_call2.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_call_wrapper"


    public static class method_call_wrapper2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_call_wrapper2"
    // Objcm.g:479:1: method_call_wrapper2 : method_call2 -> ^( METHOD_CALL method_call2 ) ;
    public final ObjcmParser.method_call_wrapper2_return method_call_wrapper2() throws RecognitionException {
        ObjcmParser.method_call_wrapper2_return retval = new ObjcmParser.method_call_wrapper2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_call2_return method_call2262 =null;


        RewriteRuleSubtreeStream stream_method_call2=new RewriteRuleSubtreeStream(adaptor,"rule method_call2");
        try {
            // Objcm.g:480:2: ( method_call2 -> ^( METHOD_CALL method_call2 ) )
            // Objcm.g:480:4: method_call2
            {
            pushFollow(FOLLOW_method_call2_in_method_call_wrapper22361);
            method_call2262=method_call2();

            state._fsp--;

            stream_method_call2.add(method_call2262.getTree());

            // AST REWRITE
            // elements: method_call2
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 480:17: -> ^( METHOD_CALL method_call2 )
            {
                // Objcm.g:480:20: ^( METHOD_CALL method_call2 )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD_CALL, "METHOD_CALL")
                , root_1);

                adaptor.addChild(root_1, stream_method_call2.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_call_wrapper2"


    public static class method_call2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_call2"
    // Objcm.g:482:1: method_call2 : object_wrapper method_name ( method_call_message_list_wrapper )? ;
    public final ObjcmParser.method_call2_return method_call2() throws RecognitionException {
        ObjcmParser.method_call2_return retval = new ObjcmParser.method_call2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.object_wrapper_return object_wrapper263 =null;

        ObjcmParser.method_name_return method_name264 =null;

        ObjcmParser.method_call_message_list_wrapper_return method_call_message_list_wrapper265 =null;



        try {
            // Objcm.g:483:2: ( object_wrapper method_name ( method_call_message_list_wrapper )? )
            // Objcm.g:483:4: object_wrapper method_name ( method_call_message_list_wrapper )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_object_wrapper_in_method_call22380);
            object_wrapper263=object_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, object_wrapper263.getTree());

            pushFollow(FOLLOW_method_name_in_method_call22382);
            method_name264=method_name();

            state._fsp--;

            adaptor.addChild(root_0, method_name264.getTree());

            // Objcm.g:483:31: ( method_call_message_list_wrapper )?
            int alt63=2;
            int LA63_0 = input.LA(1);

            if ( (LA63_0==COLON) ) {
                alt63=1;
            }
            switch (alt63) {
                case 1 :
                    // Objcm.g:483:33: method_call_message_list_wrapper
                    {
                    pushFollow(FOLLOW_method_call_message_list_wrapper_in_method_call22386);
                    method_call_message_list_wrapper265=method_call_message_list_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, method_call_message_list_wrapper265.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_call2"


    public static class object_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "object_wrapper"
    // Objcm.g:485:1: object_wrapper : object_wrapper_internal -> ^( OBJECT object_wrapper_internal ) ;
    public final ObjcmParser.object_wrapper_return object_wrapper() throws RecognitionException {
        ObjcmParser.object_wrapper_return retval = new ObjcmParser.object_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.object_wrapper_internal_return object_wrapper_internal266 =null;


        RewriteRuleSubtreeStream stream_object_wrapper_internal=new RewriteRuleSubtreeStream(adaptor,"rule object_wrapper_internal");
        try {
            // Objcm.g:486:2: ( object_wrapper_internal -> ^( OBJECT object_wrapper_internal ) )
            // Objcm.g:486:4: object_wrapper_internal
            {
            pushFollow(FOLLOW_object_wrapper_internal_in_object_wrapper2397);
            object_wrapper_internal266=object_wrapper_internal();

            state._fsp--;

            stream_object_wrapper_internal.add(object_wrapper_internal266.getTree());

            // AST REWRITE
            // elements: object_wrapper_internal
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 486:28: -> ^( OBJECT object_wrapper_internal )
            {
                // Objcm.g:486:31: ^( OBJECT object_wrapper_internal )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(OBJECT, "OBJECT")
                , root_1);

                adaptor.addChild(root_1, stream_object_wrapper_internal.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "object_wrapper"


    public static class object_wrapper_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "object_wrapper_internal"
    // Objcm.g:488:1: object_wrapper_internal : ( L_BR object_name ( generic )? ( ASTERISK )* R_BR ( object_name | method_call_wrapper ) | object_name | method_call_wrapper | STRING_LITERAL );
    public final ObjcmParser.object_wrapper_internal_return object_wrapper_internal() throws RecognitionException {
        ObjcmParser.object_wrapper_internal_return retval = new ObjcmParser.object_wrapper_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_BR267=null;
        Token ASTERISK270=null;
        Token R_BR271=null;
        Token STRING_LITERAL276=null;
        ObjcmParser.object_name_return object_name268 =null;

        ObjcmParser.generic_return generic269 =null;

        ObjcmParser.object_name_return object_name272 =null;

        ObjcmParser.method_call_wrapper_return method_call_wrapper273 =null;

        ObjcmParser.object_name_return object_name274 =null;

        ObjcmParser.method_call_wrapper_return method_call_wrapper275 =null;


        Object L_BR267_tree=null;
        Object ASTERISK270_tree=null;
        Object R_BR271_tree=null;
        Object STRING_LITERAL276_tree=null;

        try {
            // Objcm.g:489:2: ( L_BR object_name ( generic )? ( ASTERISK )* R_BR ( object_name | method_call_wrapper ) | object_name | method_call_wrapper | STRING_LITERAL )
            int alt67=4;
            switch ( input.LA(1) ) {
            case L_BR:
                {
                alt67=1;
                }
                break;
            case ID:
            case 176:
                {
                alt67=2;
                }
                break;
            case L_KBR:
                {
                alt67=3;
                }
                break;
            case STRING_LITERAL:
                {
                alt67=4;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 67, 0, input);

                throw nvae;

            }

            switch (alt67) {
                case 1 :
                    // Objcm.g:489:4: L_BR object_name ( generic )? ( ASTERISK )* R_BR ( object_name | method_call_wrapper )
                    {
                    root_0 = (Object)adaptor.nil();


                    L_BR267=(Token)match(input,L_BR,FOLLOW_L_BR_in_object_wrapper_internal2415); 
                    L_BR267_tree = 
                    (Object)adaptor.create(L_BR267)
                    ;
                    adaptor.addChild(root_0, L_BR267_tree);


                    pushFollow(FOLLOW_object_name_in_object_wrapper_internal2417);
                    object_name268=object_name();

                    state._fsp--;

                    adaptor.addChild(root_0, object_name268.getTree());

                    // Objcm.g:489:21: ( generic )?
                    int alt64=2;
                    int LA64_0 = input.LA(1);

                    if ( (LA64_0==L_LESS) ) {
                        alt64=1;
                    }
                    switch (alt64) {
                        case 1 :
                            // Objcm.g:489:21: generic
                            {
                            pushFollow(FOLLOW_generic_in_object_wrapper_internal2419);
                            generic269=generic();

                            state._fsp--;

                            adaptor.addChild(root_0, generic269.getTree());

                            }
                            break;

                    }


                    // Objcm.g:489:30: ( ASTERISK )*
                    loop65:
                    do {
                        int alt65=2;
                        int LA65_0 = input.LA(1);

                        if ( (LA65_0==ASTERISK) ) {
                            alt65=1;
                        }


                        switch (alt65) {
                    	case 1 :
                    	    // Objcm.g:489:30: ASTERISK
                    	    {
                    	    ASTERISK270=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_object_wrapper_internal2422); 
                    	    ASTERISK270_tree = 
                    	    (Object)adaptor.create(ASTERISK270)
                    	    ;
                    	    adaptor.addChild(root_0, ASTERISK270_tree);


                    	    }
                    	    break;

                    	default :
                    	    break loop65;
                        }
                    } while (true);


                    R_BR271=(Token)match(input,R_BR,FOLLOW_R_BR_in_object_wrapper_internal2425); 
                    R_BR271_tree = 
                    (Object)adaptor.create(R_BR271)
                    ;
                    adaptor.addChild(root_0, R_BR271_tree);


                    // Objcm.g:489:45: ( object_name | method_call_wrapper )
                    int alt66=2;
                    int LA66_0 = input.LA(1);

                    if ( (LA66_0==ID||LA66_0==176) ) {
                        alt66=1;
                    }
                    else if ( (LA66_0==L_KBR) ) {
                        alt66=2;
                    }
                    else {
                        NoViableAltException nvae =
                            new NoViableAltException("", 66, 0, input);

                        throw nvae;

                    }
                    switch (alt66) {
                        case 1 :
                            // Objcm.g:489:46: object_name
                            {
                            pushFollow(FOLLOW_object_name_in_object_wrapper_internal2428);
                            object_name272=object_name();

                            state._fsp--;

                            adaptor.addChild(root_0, object_name272.getTree());

                            }
                            break;
                        case 2 :
                            // Objcm.g:489:60: method_call_wrapper
                            {
                            pushFollow(FOLLOW_method_call_wrapper_in_object_wrapper_internal2432);
                            method_call_wrapper273=method_call_wrapper();

                            state._fsp--;

                            adaptor.addChild(root_0, method_call_wrapper273.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // Objcm.g:490:4: object_name
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_object_name_in_object_wrapper_internal2438);
                    object_name274=object_name();

                    state._fsp--;

                    adaptor.addChild(root_0, object_name274.getTree());

                    }
                    break;
                case 3 :
                    // Objcm.g:491:4: method_call_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_method_call_wrapper_in_object_wrapper_internal2443);
                    method_call_wrapper275=method_call_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, method_call_wrapper275.getTree());

                    }
                    break;
                case 4 :
                    // Objcm.g:492:4: STRING_LITERAL
                    {
                    root_0 = (Object)adaptor.nil();


                    STRING_LITERAL276=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_object_wrapper_internal2448); 
                    STRING_LITERAL276_tree = 
                    (Object)adaptor.create(STRING_LITERAL276)
                    ;
                    adaptor.addChild(root_0, STRING_LITERAL276_tree);


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "object_wrapper_internal"


    public static class method_message3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_message3"
    // Objcm.g:495:1: method_message3 : classical_expr_wrp -> ^( MESSAGE classical_expr_wrp ) ;
    public final ObjcmParser.method_message3_return method_message3() throws RecognitionException {
        ObjcmParser.method_message3_return retval = new ObjcmParser.method_message3_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp277 =null;


        RewriteRuleSubtreeStream stream_classical_expr_wrp=new RewriteRuleSubtreeStream(adaptor,"rule classical_expr_wrp");
        try {
            // Objcm.g:496:2: ( classical_expr_wrp -> ^( MESSAGE classical_expr_wrp ) )
            // Objcm.g:496:4: classical_expr_wrp
            {
            pushFollow(FOLLOW_classical_expr_wrp_in_method_message32460);
            classical_expr_wrp277=classical_expr_wrp();

            state._fsp--;

            stream_classical_expr_wrp.add(classical_expr_wrp277.getTree());

            // AST REWRITE
            // elements: classical_expr_wrp
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 496:23: -> ^( MESSAGE classical_expr_wrp )
            {
                // Objcm.g:496:26: ^( MESSAGE classical_expr_wrp )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(MESSAGE, "MESSAGE")
                , root_1);

                adaptor.addChild(root_1, stream_classical_expr_wrp.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_message3"


    public static class type_convertion_start_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_convertion_start"
    // Objcm.g:498:1: type_convertion_start : L_BR ID ( generic )? -> ^( TYPE_CONVERTION_MAY_BE ID ( generic )? ) ;
    public final ObjcmParser.type_convertion_start_return type_convertion_start() throws RecognitionException {
        ObjcmParser.type_convertion_start_return retval = new ObjcmParser.type_convertion_start_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_BR278=null;
        Token ID279=null;
        ObjcmParser.generic_return generic280 =null;


        Object L_BR278_tree=null;
        Object ID279_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleTokenStream stream_L_BR=new RewriteRuleTokenStream(adaptor,"token L_BR");
        RewriteRuleSubtreeStream stream_generic=new RewriteRuleSubtreeStream(adaptor,"rule generic");
        try {
            // Objcm.g:499:2: ( L_BR ID ( generic )? -> ^( TYPE_CONVERTION_MAY_BE ID ( generic )? ) )
            // Objcm.g:499:4: L_BR ID ( generic )?
            {
            L_BR278=(Token)match(input,L_BR,FOLLOW_L_BR_in_type_convertion_start2477);  
            stream_L_BR.add(L_BR278);


            ID279=(Token)match(input,ID,FOLLOW_ID_in_type_convertion_start2480);  
            stream_ID.add(ID279);


            // Objcm.g:499:13: ( generic )?
            int alt68=2;
            int LA68_0 = input.LA(1);

            if ( (LA68_0==L_LESS) ) {
                alt68=1;
            }
            switch (alt68) {
                case 1 :
                    // Objcm.g:499:13: generic
                    {
                    pushFollow(FOLLOW_generic_in_type_convertion_start2482);
                    generic280=generic();

                    state._fsp--;

                    stream_generic.add(generic280.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: ID, generic
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 499:23: -> ^( TYPE_CONVERTION_MAY_BE ID ( generic )? )
            {
                // Objcm.g:499:26: ^( TYPE_CONVERTION_MAY_BE ID ( generic )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TYPE_CONVERTION_MAY_BE, "TYPE_CONVERTION_MAY_BE")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                // Objcm.g:499:54: ( generic )?
                if ( stream_generic.hasNext() ) {
                    adaptor.addChild(root_1, stream_generic.nextTree());

                }
                stream_generic.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_convertion_start"


    public static class type_convertion_end_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_convertion_end"
    // Objcm.g:501:1: type_convertion_end : ( ASTERISK )* R_BR -> ^( TYPE_CONVERTION_TRUE ) ;
    public final ObjcmParser.type_convertion_end_return type_convertion_end() throws RecognitionException {
        ObjcmParser.type_convertion_end_return retval = new ObjcmParser.type_convertion_end_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ASTERISK281=null;
        Token R_BR282=null;

        Object ASTERISK281_tree=null;
        Object R_BR282_tree=null;
        RewriteRuleTokenStream stream_R_BR=new RewriteRuleTokenStream(adaptor,"token R_BR");
        RewriteRuleTokenStream stream_ASTERISK=new RewriteRuleTokenStream(adaptor,"token ASTERISK");

        try {
            // Objcm.g:502:2: ( ( ASTERISK )* R_BR -> ^( TYPE_CONVERTION_TRUE ) )
            // Objcm.g:502:4: ( ASTERISK )* R_BR
            {
            // Objcm.g:502:4: ( ASTERISK )*
            loop69:
            do {
                int alt69=2;
                int LA69_0 = input.LA(1);

                if ( (LA69_0==ASTERISK) ) {
                    alt69=1;
                }


                switch (alt69) {
            	case 1 :
            	    // Objcm.g:502:4: ASTERISK
            	    {
            	    ASTERISK281=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_type_convertion_end2505);  
            	    stream_ASTERISK.add(ASTERISK281);


            	    }
            	    break;

            	default :
            	    break loop69;
                }
            } while (true);


            R_BR282=(Token)match(input,R_BR,FOLLOW_R_BR_in_type_convertion_end2508);  
            stream_R_BR.add(R_BR282);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 502:20: -> ^( TYPE_CONVERTION_TRUE )
            {
                // Objcm.g:502:23: ^( TYPE_CONVERTION_TRUE )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TYPE_CONVERTION_TRUE, "TYPE_CONVERTION_TRUE")
                , root_1);

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_convertion_end"


    public static class type_convertion_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_convertion"
    // Objcm.g:504:1: type_convertion : L_BR ( 'const' )? ( 'unsigned' )? type_internal ( ASTERISK )* R_BR -> ^( TYPE_CONVERTION type_internal ) ;
    public final ObjcmParser.type_convertion_return type_convertion() throws RecognitionException {
        ObjcmParser.type_convertion_return retval = new ObjcmParser.type_convertion_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_BR283=null;
        Token string_literal284=null;
        Token string_literal285=null;
        Token ASTERISK287=null;
        Token R_BR288=null;
        ObjcmParser.type_internal_return type_internal286 =null;


        Object L_BR283_tree=null;
        Object string_literal284_tree=null;
        Object string_literal285_tree=null;
        Object ASTERISK287_tree=null;
        Object R_BR288_tree=null;
        RewriteRuleTokenStream stream_183=new RewriteRuleTokenStream(adaptor,"token 183");
        RewriteRuleTokenStream stream_R_BR=new RewriteRuleTokenStream(adaptor,"token R_BR");
        RewriteRuleTokenStream stream_L_BR=new RewriteRuleTokenStream(adaptor,"token L_BR");
        RewriteRuleTokenStream stream_ASTERISK=new RewriteRuleTokenStream(adaptor,"token ASTERISK");
        RewriteRuleTokenStream stream_CONST_PREFIX=new RewriteRuleTokenStream(adaptor,"token CONST_PREFIX");
        RewriteRuleSubtreeStream stream_type_internal=new RewriteRuleSubtreeStream(adaptor,"rule type_internal");
        try {
            // Objcm.g:505:2: ( L_BR ( 'const' )? ( 'unsigned' )? type_internal ( ASTERISK )* R_BR -> ^( TYPE_CONVERTION type_internal ) )
            // Objcm.g:505:4: L_BR ( 'const' )? ( 'unsigned' )? type_internal ( ASTERISK )* R_BR
            {
            L_BR283=(Token)match(input,L_BR,FOLLOW_L_BR_in_type_convertion2525);  
            stream_L_BR.add(L_BR283);


            // Objcm.g:505:9: ( 'const' )?
            int alt70=2;
            int LA70_0 = input.LA(1);

            if ( (LA70_0==CONST_PREFIX) ) {
                alt70=1;
            }
            switch (alt70) {
                case 1 :
                    // Objcm.g:505:9: 'const'
                    {
                    string_literal284=(Token)match(input,CONST_PREFIX,FOLLOW_CONST_PREFIX_in_type_convertion2527);  
                    stream_CONST_PREFIX.add(string_literal284);


                    }
                    break;

            }


            // Objcm.g:505:18: ( 'unsigned' )?
            int alt71=2;
            int LA71_0 = input.LA(1);

            if ( (LA71_0==183) ) {
                alt71=1;
            }
            switch (alt71) {
                case 1 :
                    // Objcm.g:505:18: 'unsigned'
                    {
                    string_literal285=(Token)match(input,183,FOLLOW_183_in_type_convertion2530);  
                    stream_183.add(string_literal285);


                    }
                    break;

            }


            pushFollow(FOLLOW_type_internal_in_type_convertion2533);
            type_internal286=type_internal();

            state._fsp--;

            stream_type_internal.add(type_internal286.getTree());

            // Objcm.g:505:45: ( ASTERISK )*
            loop72:
            do {
                int alt72=2;
                int LA72_0 = input.LA(1);

                if ( (LA72_0==ASTERISK) ) {
                    alt72=1;
                }


                switch (alt72) {
            	case 1 :
            	    // Objcm.g:505:45: ASTERISK
            	    {
            	    ASTERISK287=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_type_convertion2536);  
            	    stream_ASTERISK.add(ASTERISK287);


            	    }
            	    break;

            	default :
            	    break loop72;
                }
            } while (true);


            R_BR288=(Token)match(input,R_BR,FOLLOW_R_BR_in_type_convertion2539);  
            stream_R_BR.add(R_BR288);


            // AST REWRITE
            // elements: type_internal
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 505:61: -> ^( TYPE_CONVERTION type_internal )
            {
                // Objcm.g:505:64: ^( TYPE_CONVERTION type_internal )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TYPE_CONVERTION, "TYPE_CONVERTION")
                , root_1);

                adaptor.addChild(root_1, stream_type_internal.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_convertion"


    public static class method_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_name"
    // Objcm.g:507:1: method_name : ID -> ^( METHOD_NAME ID ) ;
    public final ObjcmParser.method_name_return method_name() throws RecognitionException {
        ObjcmParser.method_name_return retval = new ObjcmParser.method_name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID289=null;

        Object ID289_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // Objcm.g:508:2: ( ID -> ^( METHOD_NAME ID ) )
            // Objcm.g:508:4: ID
            {
            ID289=(Token)match(input,ID,FOLLOW_ID_in_method_name2557);  
            stream_ID.add(ID289);


            // AST REWRITE
            // elements: ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 508:7: -> ^( METHOD_NAME ID )
            {
                // Objcm.g:508:10: ^( METHOD_NAME ID )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD_NAME, "METHOD_NAME")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_name"


    public static class method_call_message_list_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_call_message_list_wrapper"
    // Objcm.g:510:1: method_call_message_list_wrapper : method_call_message_list -> ^( MSG_LIST method_call_message_list ) ;
    public final ObjcmParser.method_call_message_list_wrapper_return method_call_message_list_wrapper() throws RecognitionException {
        ObjcmParser.method_call_message_list_wrapper_return retval = new ObjcmParser.method_call_message_list_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_call_message_list_return method_call_message_list290 =null;


        RewriteRuleSubtreeStream stream_method_call_message_list=new RewriteRuleSubtreeStream(adaptor,"rule method_call_message_list");
        try {
            // Objcm.g:511:2: ( method_call_message_list -> ^( MSG_LIST method_call_message_list ) )
            // Objcm.g:511:4: method_call_message_list
            {
            pushFollow(FOLLOW_method_call_message_list_in_method_call_message_list_wrapper2574);
            method_call_message_list290=method_call_message_list();

            state._fsp--;

            stream_method_call_message_list.add(method_call_message_list290.getTree());

            // AST REWRITE
            // elements: method_call_message_list
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 511:29: -> ^( MSG_LIST method_call_message_list )
            {
                // Objcm.g:511:32: ^( MSG_LIST method_call_message_list )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(MSG_LIST, "MSG_LIST")
                , root_1);

                adaptor.addChild(root_1, stream_method_call_message_list.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_call_message_list_wrapper"


    public static class method_call_message_list_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_call_message_list"
    // Objcm.g:513:1: method_call_message_list : method_call_message_first_wrapper ( method_call_message_wrapper )* ;
    public final ObjcmParser.method_call_message_list_return method_call_message_list() throws RecognitionException {
        ObjcmParser.method_call_message_list_return retval = new ObjcmParser.method_call_message_list_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_call_message_first_wrapper_return method_call_message_first_wrapper291 =null;

        ObjcmParser.method_call_message_wrapper_return method_call_message_wrapper292 =null;



        try {
            // Objcm.g:514:2: ( method_call_message_first_wrapper ( method_call_message_wrapper )* )
            // Objcm.g:514:4: method_call_message_first_wrapper ( method_call_message_wrapper )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_method_call_message_first_wrapper_in_method_call_message_list2591);
            method_call_message_first_wrapper291=method_call_message_first_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, method_call_message_first_wrapper291.getTree());

            // Objcm.g:514:38: ( method_call_message_wrapper )*
            loop73:
            do {
                int alt73=2;
                int LA73_0 = input.LA(1);

                if ( (LA73_0==COLON||LA73_0==ID) ) {
                    alt73=1;
                }


                switch (alt73) {
            	case 1 :
            	    // Objcm.g:514:38: method_call_message_wrapper
            	    {
            	    pushFollow(FOLLOW_method_call_message_wrapper_in_method_call_message_list2593);
            	    method_call_message_wrapper292=method_call_message_wrapper();

            	    state._fsp--;

            	    adaptor.addChild(root_0, method_call_message_wrapper292.getTree());

            	    }
            	    break;

            	default :
            	    break loop73;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_call_message_list"


    public static class method_call_message_first_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_call_message_first_wrapper"
    // Objcm.g:516:1: method_call_message_first_wrapper : method_call_message_first -> ^( METHOD_MSG method_call_message_first ) ;
    public final ObjcmParser.method_call_message_first_wrapper_return method_call_message_first_wrapper() throws RecognitionException {
        ObjcmParser.method_call_message_first_wrapper_return retval = new ObjcmParser.method_call_message_first_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_call_message_first_return method_call_message_first293 =null;


        RewriteRuleSubtreeStream stream_method_call_message_first=new RewriteRuleSubtreeStream(adaptor,"rule method_call_message_first");
        try {
            // Objcm.g:517:2: ( method_call_message_first -> ^( METHOD_MSG method_call_message_first ) )
            // Objcm.g:517:4: method_call_message_first
            {
            pushFollow(FOLLOW_method_call_message_first_in_method_call_message_first_wrapper2604);
            method_call_message_first293=method_call_message_first();

            state._fsp--;

            stream_method_call_message_first.add(method_call_message_first293.getTree());

            // AST REWRITE
            // elements: method_call_message_first
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 517:30: -> ^( METHOD_MSG method_call_message_first )
            {
                // Objcm.g:517:33: ^( METHOD_MSG method_call_message_first )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD_MSG, "METHOD_MSG")
                , root_1);

                adaptor.addChild(root_1, stream_method_call_message_first.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_call_message_first_wrapper"


    public static class method_call_message_first_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_call_message_first"
    // Objcm.g:519:1: method_call_message_first : COLON message ;
    public final ObjcmParser.method_call_message_first_return method_call_message_first() throws RecognitionException {
        ObjcmParser.method_call_message_first_return retval = new ObjcmParser.method_call_message_first_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COLON294=null;
        ObjcmParser.message_return message295 =null;


        Object COLON294_tree=null;

        try {
            // Objcm.g:520:2: ( COLON message )
            // Objcm.g:520:4: COLON message
            {
            root_0 = (Object)adaptor.nil();


            COLON294=(Token)match(input,COLON,FOLLOW_COLON_in_method_call_message_first2621); 
            COLON294_tree = 
            (Object)adaptor.create(COLON294)
            ;
            adaptor.addChild(root_0, COLON294_tree);


            pushFollow(FOLLOW_message_in_method_call_message_first2624);
            message295=message();

            state._fsp--;

            adaptor.addChild(root_0, message295.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_call_message_first"


    public static class method_call_message_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_call_message_wrapper"
    // Objcm.g:522:1: method_call_message_wrapper : method_call_message -> ^( METHOD_MSG method_call_message ) ;
    public final ObjcmParser.method_call_message_wrapper_return method_call_message_wrapper() throws RecognitionException {
        ObjcmParser.method_call_message_wrapper_return retval = new ObjcmParser.method_call_message_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_call_message_return method_call_message296 =null;


        RewriteRuleSubtreeStream stream_method_call_message=new RewriteRuleSubtreeStream(adaptor,"rule method_call_message");
        try {
            // Objcm.g:523:2: ( method_call_message -> ^( METHOD_MSG method_call_message ) )
            // Objcm.g:523:4: method_call_message
            {
            pushFollow(FOLLOW_method_call_message_in_method_call_message_wrapper2634);
            method_call_message296=method_call_message();

            state._fsp--;

            stream_method_call_message.add(method_call_message296.getTree());

            // AST REWRITE
            // elements: method_call_message
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 523:24: -> ^( METHOD_MSG method_call_message )
            {
                // Objcm.g:523:27: ^( METHOD_MSG method_call_message )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD_MSG, "METHOD_MSG")
                , root_1);

                adaptor.addChild(root_1, stream_method_call_message.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_call_message_wrapper"


    public static class method_call_message_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_call_message"
    // Objcm.g:525:1: method_call_message : ( prefix | incomplete_prefix ) message ;
    public final ObjcmParser.method_call_message_return method_call_message() throws RecognitionException {
        ObjcmParser.method_call_message_return retval = new ObjcmParser.method_call_message_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.prefix_return prefix297 =null;

        ObjcmParser.incomplete_prefix_return incomplete_prefix298 =null;

        ObjcmParser.message_return message299 =null;



        try {
            // Objcm.g:526:2: ( ( prefix | incomplete_prefix ) message )
            // Objcm.g:526:4: ( prefix | incomplete_prefix ) message
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:526:4: ( prefix | incomplete_prefix )
            int alt74=2;
            int LA74_0 = input.LA(1);

            if ( (LA74_0==ID) ) {
                alt74=1;
            }
            else if ( (LA74_0==COLON) ) {
                alt74=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 74, 0, input);

                throw nvae;

            }
            switch (alt74) {
                case 1 :
                    // Objcm.g:526:5: prefix
                    {
                    pushFollow(FOLLOW_prefix_in_method_call_message2653);
                    prefix297=prefix();

                    state._fsp--;

                    adaptor.addChild(root_0, prefix297.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:526:14: incomplete_prefix
                    {
                    pushFollow(FOLLOW_incomplete_prefix_in_method_call_message2657);
                    incomplete_prefix298=incomplete_prefix();

                    state._fsp--;

                    adaptor.addChild(root_0, incomplete_prefix298.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_message_in_method_call_message2661);
            message299=message();

            state._fsp--;

            adaptor.addChild(root_0, message299.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_call_message"


    public static class message_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "message"
    // Objcm.g:528:1: message : msg_expr ( COMMA msg_expr )* -> ^( MESSAGE msg_expr ( COMMA msg_expr )* ) ;
    public final ObjcmParser.message_return message() throws RecognitionException {
        ObjcmParser.message_return retval = new ObjcmParser.message_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA301=null;
        ObjcmParser.msg_expr_return msg_expr300 =null;

        ObjcmParser.msg_expr_return msg_expr302 =null;


        Object COMMA301_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_msg_expr=new RewriteRuleSubtreeStream(adaptor,"rule msg_expr");
        try {
            // Objcm.g:528:9: ( msg_expr ( COMMA msg_expr )* -> ^( MESSAGE msg_expr ( COMMA msg_expr )* ) )
            // Objcm.g:528:11: msg_expr ( COMMA msg_expr )*
            {
            pushFollow(FOLLOW_msg_expr_in_message2670);
            msg_expr300=msg_expr();

            state._fsp--;

            stream_msg_expr.add(msg_expr300.getTree());

            // Objcm.g:528:20: ( COMMA msg_expr )*
            loop75:
            do {
                int alt75=2;
                int LA75_0 = input.LA(1);

                if ( (LA75_0==COMMA) ) {
                    alt75=1;
                }


                switch (alt75) {
            	case 1 :
            	    // Objcm.g:528:21: COMMA msg_expr
            	    {
            	    COMMA301=(Token)match(input,COMMA,FOLLOW_COMMA_in_message2673);  
            	    stream_COMMA.add(COMMA301);


            	    pushFollow(FOLLOW_msg_expr_in_message2675);
            	    msg_expr302=msg_expr();

            	    state._fsp--;

            	    stream_msg_expr.add(msg_expr302.getTree());

            	    }
            	    break;

            	default :
            	    break loop75;
                }
            } while (true);


            // AST REWRITE
            // elements: msg_expr, COMMA, msg_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 528:38: -> ^( MESSAGE msg_expr ( COMMA msg_expr )* )
            {
                // Objcm.g:528:41: ^( MESSAGE msg_expr ( COMMA msg_expr )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(MESSAGE, "MESSAGE")
                , root_1);

                adaptor.addChild(root_1, stream_msg_expr.nextTree());

                // Objcm.g:528:60: ( COMMA msg_expr )*
                while ( stream_msg_expr.hasNext()||stream_COMMA.hasNext() ) {
                    adaptor.addChild(root_1, 
                    stream_COMMA.nextNode()
                    );

                    adaptor.addChild(root_1, stream_msg_expr.nextTree());

                }
                stream_msg_expr.reset();
                stream_COMMA.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "message"


    public static class msg_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "msg_expr"
    // Objcm.g:532:1: msg_expr : classical_expr_wrp ;
    public final ObjcmParser.msg_expr_return msg_expr() throws RecognitionException {
        ObjcmParser.msg_expr_return retval = new ObjcmParser.msg_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp303 =null;



        try {
            // Objcm.g:533:2: ( classical_expr_wrp )
            // Objcm.g:533:5: classical_expr_wrp
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_classical_expr_wrp_in_msg_expr2709);
            classical_expr_wrp303=classical_expr_wrp();

            state._fsp--;

            adaptor.addChild(root_0, classical_expr_wrp303.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "msg_expr"


    public static class expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expression"
    // Objcm.g:540:1: expression : ( classical_expr_wrp | struct_init );
    public final ObjcmParser.expression_return expression() throws RecognitionException {
        ObjcmParser.expression_return retval = new ObjcmParser.expression_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp304 =null;

        ObjcmParser.struct_init_return struct_init305 =null;



        try {
            // Objcm.g:541:2: ( classical_expr_wrp | struct_init )
            int alt76=2;
            alt76 = dfa76.predict(input);
            switch (alt76) {
                case 1 :
                    // Objcm.g:541:4: classical_expr_wrp
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_classical_expr_wrp_in_expression2725);
                    classical_expr_wrp304=classical_expr_wrp();

                    state._fsp--;

                    adaptor.addChild(root_0, classical_expr_wrp304.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:542:4: struct_init
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_struct_init_in_expression2730);
                    struct_init305=struct_init();

                    state._fsp--;

                    adaptor.addChild(root_0, struct_init305.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expression"


    public static class full_expr_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "full_expr_wrapper"
    // Objcm.g:545:1: full_expr_wrapper : full_expr -> ^( EXPR_FULL full_expr ) ;
    public final ObjcmParser.full_expr_wrapper_return full_expr_wrapper() throws RecognitionException {
        ObjcmParser.full_expr_wrapper_return retval = new ObjcmParser.full_expr_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.full_expr_return full_expr306 =null;


        RewriteRuleSubtreeStream stream_full_expr=new RewriteRuleSubtreeStream(adaptor,"rule full_expr");
        try {
            // Objcm.g:546:2: ( full_expr -> ^( EXPR_FULL full_expr ) )
            // Objcm.g:546:4: full_expr
            {
            pushFollow(FOLLOW_full_expr_in_full_expr_wrapper2741);
            full_expr306=full_expr();

            state._fsp--;

            stream_full_expr.add(full_expr306.getTree());

            // AST REWRITE
            // elements: full_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 546:14: -> ^( EXPR_FULL full_expr )
            {
                // Objcm.g:546:17: ^( EXPR_FULL full_expr )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_FULL, "EXPR_FULL")
                , root_1);

                adaptor.addChild(root_1, stream_full_expr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "full_expr_wrapper"


    public static class full_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "full_expr"
    // Objcm.g:548:1: full_expr : classical_expr_wrp ( COMMA classical_expr_wrp )* ;
    public final ObjcmParser.full_expr_return full_expr() throws RecognitionException {
        ObjcmParser.full_expr_return retval = new ObjcmParser.full_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA308=null;
        ObjcmParser.classical_expr_wrp_return classical_expr_wrp307 =null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp309 =null;


        Object COMMA308_tree=null;

        try {
            // Objcm.g:549:2: ( classical_expr_wrp ( COMMA classical_expr_wrp )* )
            // Objcm.g:549:4: classical_expr_wrp ( COMMA classical_expr_wrp )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_classical_expr_wrp_in_full_expr2758);
            classical_expr_wrp307=classical_expr_wrp();

            state._fsp--;

            adaptor.addChild(root_0, classical_expr_wrp307.getTree());

            // Objcm.g:549:23: ( COMMA classical_expr_wrp )*
            loop77:
            do {
                int alt77=2;
                int LA77_0 = input.LA(1);

                if ( (LA77_0==COMMA) ) {
                    alt77=1;
                }


                switch (alt77) {
            	case 1 :
            	    // Objcm.g:549:24: COMMA classical_expr_wrp
            	    {
            	    COMMA308=(Token)match(input,COMMA,FOLLOW_COMMA_in_full_expr2761); 
            	    COMMA308_tree = 
            	    (Object)adaptor.create(COMMA308)
            	    ;
            	    adaptor.addChild(root_0, COMMA308_tree);


            	    pushFollow(FOLLOW_classical_expr_wrp_in_full_expr2763);
            	    classical_expr_wrp309=classical_expr_wrp();

            	    state._fsp--;

            	    adaptor.addChild(root_0, classical_expr_wrp309.getTree());

            	    }
            	    break;

            	default :
            	    break loop77;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "full_expr"


    public static class full_expr2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "full_expr2"
    // Objcm.g:551:1: full_expr2 : classical_expr_wrp2 ( COMMA classical_expr_wrp2 )* ;
    public final ObjcmParser.full_expr2_return full_expr2() throws RecognitionException {
        ObjcmParser.full_expr2_return retval = new ObjcmParser.full_expr2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA311=null;
        ObjcmParser.classical_expr_wrp2_return classical_expr_wrp2310 =null;

        ObjcmParser.classical_expr_wrp2_return classical_expr_wrp2312 =null;


        Object COMMA311_tree=null;

        try {
            // Objcm.g:552:2: ( classical_expr_wrp2 ( COMMA classical_expr_wrp2 )* )
            // Objcm.g:552:4: classical_expr_wrp2 ( COMMA classical_expr_wrp2 )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_classical_expr_wrp2_in_full_expr22774);
            classical_expr_wrp2310=classical_expr_wrp2();

            state._fsp--;

            adaptor.addChild(root_0, classical_expr_wrp2310.getTree());

            // Objcm.g:552:24: ( COMMA classical_expr_wrp2 )*
            loop78:
            do {
                int alt78=2;
                int LA78_0 = input.LA(1);

                if ( (LA78_0==COMMA) ) {
                    alt78=1;
                }


                switch (alt78) {
            	case 1 :
            	    // Objcm.g:552:25: COMMA classical_expr_wrp2
            	    {
            	    COMMA311=(Token)match(input,COMMA,FOLLOW_COMMA_in_full_expr22777); 
            	    COMMA311_tree = 
            	    (Object)adaptor.create(COMMA311)
            	    ;
            	    adaptor.addChild(root_0, COMMA311_tree);


            	    pushFollow(FOLLOW_classical_expr_wrp2_in_full_expr22779);
            	    classical_expr_wrp2312=classical_expr_wrp2();

            	    state._fsp--;

            	    adaptor.addChild(root_0, classical_expr_wrp2312.getTree());

            	    }
            	    break;

            	default :
            	    break loop78;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "full_expr2"


    public static class expr_assign_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_assign_wrapper"
    // Objcm.g:554:1: expr_assign_wrapper : expr_assign -> ^( EXPR_ASSIGN expr_assign ) ;
    public final ObjcmParser.expr_assign_wrapper_return expr_assign_wrapper() throws RecognitionException {
        ObjcmParser.expr_assign_wrapper_return retval = new ObjcmParser.expr_assign_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_assign_return expr_assign313 =null;


        RewriteRuleSubtreeStream stream_expr_assign=new RewriteRuleSubtreeStream(adaptor,"rule expr_assign");
        try {
            // Objcm.g:555:2: ( expr_assign -> ^( EXPR_ASSIGN expr_assign ) )
            // Objcm.g:555:4: expr_assign
            {
            pushFollow(FOLLOW_expr_assign_in_expr_assign_wrapper2790);
            expr_assign313=expr_assign();

            state._fsp--;

            stream_expr_assign.add(expr_assign313.getTree());

            // AST REWRITE
            // elements: expr_assign
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 555:16: -> ^( EXPR_ASSIGN expr_assign )
            {
                // Objcm.g:555:19: ^( EXPR_ASSIGN expr_assign )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_ASSIGN, "EXPR_ASSIGN")
                , root_1);

                adaptor.addChild(root_1, stream_expr_assign.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_assign_wrapper"


    public static class expr_assign_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_assign"
    // Objcm.g:557:1: expr_assign : assign ( classical_expr_wrp | array_init | ( func_pointer2 ( method_call_wrapper )? ) ) ;
    public final ObjcmParser.expr_assign_return expr_assign() throws RecognitionException {
        ObjcmParser.expr_assign_return retval = new ObjcmParser.expr_assign_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.assign_return assign314 =null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp315 =null;

        ObjcmParser.array_init_return array_init316 =null;

        ObjcmParser.func_pointer2_return func_pointer2317 =null;

        ObjcmParser.method_call_wrapper_return method_call_wrapper318 =null;



        try {
            // Objcm.g:558:2: ( assign ( classical_expr_wrp | array_init | ( func_pointer2 ( method_call_wrapper )? ) ) )
            // Objcm.g:558:4: assign ( classical_expr_wrp | array_init | ( func_pointer2 ( method_call_wrapper )? ) )
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_assign_in_expr_assign2809);
            assign314=assign();

            state._fsp--;

            adaptor.addChild(root_0, assign314.getTree());

            // Objcm.g:558:11: ( classical_expr_wrp | array_init | ( func_pointer2 ( method_call_wrapper )? ) )
            int alt80=3;
            alt80 = dfa80.predict(input);
            switch (alt80) {
                case 1 :
                    // Objcm.g:558:12: classical_expr_wrp
                    {
                    pushFollow(FOLLOW_classical_expr_wrp_in_expr_assign2812);
                    classical_expr_wrp315=classical_expr_wrp();

                    state._fsp--;

                    adaptor.addChild(root_0, classical_expr_wrp315.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:558:33: array_init
                    {
                    pushFollow(FOLLOW_array_init_in_expr_assign2816);
                    array_init316=array_init();

                    state._fsp--;

                    adaptor.addChild(root_0, array_init316.getTree());

                    }
                    break;
                case 3 :
                    // Objcm.g:558:46: ( func_pointer2 ( method_call_wrapper )? )
                    {
                    // Objcm.g:558:46: ( func_pointer2 ( method_call_wrapper )? )
                    // Objcm.g:558:47: func_pointer2 ( method_call_wrapper )?
                    {
                    pushFollow(FOLLOW_func_pointer2_in_expr_assign2821);
                    func_pointer2317=func_pointer2();

                    state._fsp--;

                    adaptor.addChild(root_0, func_pointer2317.getTree());

                    // Objcm.g:558:61: ( method_call_wrapper )?
                    int alt79=2;
                    int LA79_0 = input.LA(1);

                    if ( (LA79_0==L_KBR) ) {
                        alt79=1;
                    }
                    switch (alt79) {
                        case 1 :
                            // Objcm.g:558:61: method_call_wrapper
                            {
                            pushFollow(FOLLOW_method_call_wrapper_in_expr_assign2823);
                            method_call_wrapper318=method_call_wrapper();

                            state._fsp--;

                            adaptor.addChild(root_0, method_call_wrapper318.getTree());

                            }
                            break;

                    }


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_assign"


    public static class array_init_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "array_init"
    // Objcm.g:560:1: array_init : L_FBR ( classical_expr_wrp3 ( COMMA classical_expr_wrp3 )* )? R_FBR ;
    public final ObjcmParser.array_init_return array_init() throws RecognitionException {
        ObjcmParser.array_init_return retval = new ObjcmParser.array_init_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_FBR319=null;
        Token COMMA321=null;
        Token R_FBR323=null;
        ObjcmParser.classical_expr_wrp3_return classical_expr_wrp3320 =null;

        ObjcmParser.classical_expr_wrp3_return classical_expr_wrp3322 =null;


        Object L_FBR319_tree=null;
        Object COMMA321_tree=null;
        Object R_FBR323_tree=null;

        try {
            // Objcm.g:561:2: ( L_FBR ( classical_expr_wrp3 ( COMMA classical_expr_wrp3 )* )? R_FBR )
            // Objcm.g:561:4: L_FBR ( classical_expr_wrp3 ( COMMA classical_expr_wrp3 )* )? R_FBR
            {
            root_0 = (Object)adaptor.nil();


            L_FBR319=(Token)match(input,L_FBR,FOLLOW_L_FBR_in_array_init2836); 
            L_FBR319_tree = 
            (Object)adaptor.create(L_FBR319)
            ;
            adaptor.addChild(root_0, L_FBR319_tree);


            // Objcm.g:561:10: ( classical_expr_wrp3 ( COMMA classical_expr_wrp3 )* )?
            int alt82=2;
            int LA82_0 = input.LA(1);

            if ( (LA82_0==ASTERISK||LA82_0==ID||LA82_0==L_AND||LA82_0==L_BR||(LA82_0 >= L_FBR && LA82_0 <= L_KBR)||LA82_0==L_MINUS||LA82_0==L_MINUS_MINUS||LA82_0==L_NOT||LA82_0==L_PLUS||LA82_0==L_PLUS_PLUS||LA82_0==L_TILDA||LA82_0==NUMBER||LA82_0==SIZEOF||(LA82_0 >= STRING_LITERAL && LA82_0 <= STRING_LITERAL3)||LA82_0==154||LA82_0==161||LA82_0==165||LA82_0==176||LA82_0==178||LA82_0==183) ) {
                alt82=1;
            }
            switch (alt82) {
                case 1 :
                    // Objcm.g:561:11: classical_expr_wrp3 ( COMMA classical_expr_wrp3 )*
                    {
                    pushFollow(FOLLOW_classical_expr_wrp3_in_array_init2839);
                    classical_expr_wrp3320=classical_expr_wrp3();

                    state._fsp--;

                    adaptor.addChild(root_0, classical_expr_wrp3320.getTree());

                    // Objcm.g:561:31: ( COMMA classical_expr_wrp3 )*
                    loop81:
                    do {
                        int alt81=2;
                        int LA81_0 = input.LA(1);

                        if ( (LA81_0==COMMA) ) {
                            alt81=1;
                        }


                        switch (alt81) {
                    	case 1 :
                    	    // Objcm.g:561:32: COMMA classical_expr_wrp3
                    	    {
                    	    COMMA321=(Token)match(input,COMMA,FOLLOW_COMMA_in_array_init2842); 
                    	    COMMA321_tree = 
                    	    (Object)adaptor.create(COMMA321)
                    	    ;
                    	    adaptor.addChild(root_0, COMMA321_tree);


                    	    pushFollow(FOLLOW_classical_expr_wrp3_in_array_init2844);
                    	    classical_expr_wrp3322=classical_expr_wrp3();

                    	    state._fsp--;

                    	    adaptor.addChild(root_0, classical_expr_wrp3322.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop81;
                        }
                    } while (true);


                    }
                    break;

            }


            R_FBR323=(Token)match(input,R_FBR,FOLLOW_R_FBR_in_array_init2850); 
            R_FBR323_tree = 
            (Object)adaptor.create(R_FBR323)
            ;
            adaptor.addChild(root_0, R_FBR323_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "array_init"


    public static class classical_expr_wrp3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classical_expr_wrp3"
    // Objcm.g:564:1: classical_expr_wrp3 : ( array_init | classical_expr_wrp );
    public final ObjcmParser.classical_expr_wrp3_return classical_expr_wrp3() throws RecognitionException {
        ObjcmParser.classical_expr_wrp3_return retval = new ObjcmParser.classical_expr_wrp3_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.array_init_return array_init324 =null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp325 =null;



        try {
            // Objcm.g:565:2: ( array_init | classical_expr_wrp )
            int alt83=2;
            int LA83_0 = input.LA(1);

            if ( (LA83_0==L_FBR) ) {
                alt83=1;
            }
            else if ( (LA83_0==ASTERISK||LA83_0==ID||LA83_0==L_AND||LA83_0==L_BR||LA83_0==L_KBR||LA83_0==L_MINUS||LA83_0==L_MINUS_MINUS||LA83_0==L_NOT||LA83_0==L_PLUS||LA83_0==L_PLUS_PLUS||LA83_0==L_TILDA||LA83_0==NUMBER||LA83_0==SIZEOF||(LA83_0 >= STRING_LITERAL && LA83_0 <= STRING_LITERAL3)||LA83_0==154||LA83_0==161||LA83_0==165||LA83_0==176||LA83_0==178||LA83_0==183) ) {
                alt83=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 83, 0, input);

                throw nvae;

            }
            switch (alt83) {
                case 1 :
                    // Objcm.g:565:4: array_init
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_array_init_in_classical_expr_wrp32862);
                    array_init324=array_init();

                    state._fsp--;

                    adaptor.addChild(root_0, array_init324.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:566:4: classical_expr_wrp
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_classical_expr_wrp_in_classical_expr_wrp32868);
                    classical_expr_wrp325=classical_expr_wrp();

                    state._fsp--;

                    adaptor.addChild(root_0, classical_expr_wrp325.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classical_expr_wrp3"


    public static class classical_expr_wrp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classical_expr_wrp"
    // Objcm.g:569:1: classical_expr_wrp : classical_expr -> ^( CLASSICAL_EXPR classical_expr ) ;
    public final ObjcmParser.classical_expr_wrp_return classical_expr_wrp() throws RecognitionException {
        ObjcmParser.classical_expr_wrp_return retval = new ObjcmParser.classical_expr_wrp_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.classical_expr_return classical_expr326 =null;


        RewriteRuleSubtreeStream stream_classical_expr=new RewriteRuleSubtreeStream(adaptor,"rule classical_expr");
        try {
            // Objcm.g:570:2: ( classical_expr -> ^( CLASSICAL_EXPR classical_expr ) )
            // Objcm.g:570:4: classical_expr
            {
            pushFollow(FOLLOW_classical_expr_in_classical_expr_wrp2881);
            classical_expr326=classical_expr();

            state._fsp--;

            stream_classical_expr.add(classical_expr326.getTree());

            // AST REWRITE
            // elements: classical_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 570:19: -> ^( CLASSICAL_EXPR classical_expr )
            {
                // Objcm.g:570:22: ^( CLASSICAL_EXPR classical_expr )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CLASSICAL_EXPR, "CLASSICAL_EXPR")
                , root_1);

                adaptor.addChild(root_1, stream_classical_expr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classical_expr_wrp"


    public static class classical_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classical_expr"
    // Objcm.g:572:1: classical_expr : simple_expr_wrapper ( expr_question_wrapper | expr_assign_wrapper )? ;
    public final ObjcmParser.classical_expr_return classical_expr() throws RecognitionException {
        ObjcmParser.classical_expr_return retval = new ObjcmParser.classical_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.simple_expr_wrapper_return simple_expr_wrapper327 =null;

        ObjcmParser.expr_question_wrapper_return expr_question_wrapper328 =null;

        ObjcmParser.expr_assign_wrapper_return expr_assign_wrapper329 =null;



        try {
            // Objcm.g:573:2: ( simple_expr_wrapper ( expr_question_wrapper | expr_assign_wrapper )? )
            // Objcm.g:573:4: simple_expr_wrapper ( expr_question_wrapper | expr_assign_wrapper )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_simple_expr_wrapper_in_classical_expr2898);
            simple_expr_wrapper327=simple_expr_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, simple_expr_wrapper327.getTree());

            // Objcm.g:573:24: ( expr_question_wrapper | expr_assign_wrapper )?
            int alt84=3;
            int LA84_0 = input.LA(1);

            if ( (LA84_0==L_QUESTION) ) {
                alt84=1;
            }
            else if ( (LA84_0==L_AND_EQ||(LA84_0 >= L_DIV_EQ && LA84_0 <= L_EQ)||LA84_0==L_LEFT_EQ||LA84_0==L_MINUS_EQ||LA84_0==L_MULT_EQ||LA84_0==L_OR_EQ||LA84_0==L_PERC_EQ||LA84_0==L_PLUS_EQ||LA84_0==L_RIGHT_EQ||LA84_0==L_XOR_EQ) ) {
                alt84=2;
            }
            switch (alt84) {
                case 1 :
                    // Objcm.g:573:25: expr_question_wrapper
                    {
                    pushFollow(FOLLOW_expr_question_wrapper_in_classical_expr2901);
                    expr_question_wrapper328=expr_question_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, expr_question_wrapper328.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:573:49: expr_assign_wrapper
                    {
                    pushFollow(FOLLOW_expr_assign_wrapper_in_classical_expr2905);
                    expr_assign_wrapper329=expr_assign_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, expr_assign_wrapper329.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classical_expr"


    public static class classical_expr_wrp2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classical_expr_wrp2"
    // Objcm.g:575:1: classical_expr_wrp2 : classical_expr2 -> ^( CLASSICAL_EXPR_2 classical_expr2 ) ;
    public final ObjcmParser.classical_expr_wrp2_return classical_expr_wrp2() throws RecognitionException {
        ObjcmParser.classical_expr_wrp2_return retval = new ObjcmParser.classical_expr_wrp2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.classical_expr2_return classical_expr2330 =null;


        RewriteRuleSubtreeStream stream_classical_expr2=new RewriteRuleSubtreeStream(adaptor,"rule classical_expr2");
        try {
            // Objcm.g:576:2: ( classical_expr2 -> ^( CLASSICAL_EXPR_2 classical_expr2 ) )
            // Objcm.g:576:4: classical_expr2
            {
            pushFollow(FOLLOW_classical_expr2_in_classical_expr_wrp22917);
            classical_expr2330=classical_expr2();

            state._fsp--;

            stream_classical_expr2.add(classical_expr2330.getTree());

            // AST REWRITE
            // elements: classical_expr2
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 576:20: -> ^( CLASSICAL_EXPR_2 classical_expr2 )
            {
                // Objcm.g:576:23: ^( CLASSICAL_EXPR_2 classical_expr2 )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CLASSICAL_EXPR_2, "CLASSICAL_EXPR_2")
                , root_1);

                adaptor.addChild(root_1, stream_classical_expr2.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classical_expr_wrp2"


    public static class classical_expr2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classical_expr2"
    // Objcm.g:578:1: classical_expr2 : ( object_name | func_pointer1 ) ( expr_assign_wrapper )? ;
    public final ObjcmParser.classical_expr2_return classical_expr2() throws RecognitionException {
        ObjcmParser.classical_expr2_return retval = new ObjcmParser.classical_expr2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.object_name_return object_name331 =null;

        ObjcmParser.func_pointer1_return func_pointer1332 =null;

        ObjcmParser.expr_assign_wrapper_return expr_assign_wrapper333 =null;



        try {
            // Objcm.g:579:2: ( ( object_name | func_pointer1 ) ( expr_assign_wrapper )? )
            // Objcm.g:579:4: ( object_name | func_pointer1 ) ( expr_assign_wrapper )?
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:579:4: ( object_name | func_pointer1 )
            int alt85=2;
            alt85 = dfa85.predict(input);
            switch (alt85) {
                case 1 :
                    // Objcm.g:579:5: object_name
                    {
                    pushFollow(FOLLOW_object_name_in_classical_expr22935);
                    object_name331=object_name();

                    state._fsp--;

                    adaptor.addChild(root_0, object_name331.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:579:19: func_pointer1
                    {
                    pushFollow(FOLLOW_func_pointer1_in_classical_expr22939);
                    func_pointer1332=func_pointer1();

                    state._fsp--;

                    adaptor.addChild(root_0, func_pointer1332.getTree());

                    }
                    break;

            }


            // Objcm.g:579:34: ( expr_assign_wrapper )?
            int alt86=2;
            int LA86_0 = input.LA(1);

            if ( (LA86_0==L_AND_EQ||(LA86_0 >= L_DIV_EQ && LA86_0 <= L_EQ)||LA86_0==L_LEFT_EQ||LA86_0==L_MINUS_EQ||LA86_0==L_MULT_EQ||LA86_0==L_OR_EQ||LA86_0==L_PERC_EQ||LA86_0==L_PLUS_EQ||LA86_0==L_RIGHT_EQ||LA86_0==L_XOR_EQ) ) {
                alt86=1;
            }
            switch (alt86) {
                case 1 :
                    // Objcm.g:579:34: expr_assign_wrapper
                    {
                    pushFollow(FOLLOW_expr_assign_wrapper_in_classical_expr22942);
                    expr_assign_wrapper333=expr_assign_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, expr_assign_wrapper333.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classical_expr2"


    public static class expr_question_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_question_wrapper"
    // Objcm.g:581:1: expr_question_wrapper : expr_question -> ^( EXPR_QUESTION expr_question ) ;
    public final ObjcmParser.expr_question_wrapper_return expr_question_wrapper() throws RecognitionException {
        ObjcmParser.expr_question_wrapper_return retval = new ObjcmParser.expr_question_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_question_return expr_question334 =null;


        RewriteRuleSubtreeStream stream_expr_question=new RewriteRuleSubtreeStream(adaptor,"rule expr_question");
        try {
            // Objcm.g:582:2: ( expr_question -> ^( EXPR_QUESTION expr_question ) )
            // Objcm.g:582:4: expr_question
            {
            pushFollow(FOLLOW_expr_question_in_expr_question_wrapper2952);
            expr_question334=expr_question();

            state._fsp--;

            stream_expr_question.add(expr_question334.getTree());

            // AST REWRITE
            // elements: expr_question
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 582:18: -> ^( EXPR_QUESTION expr_question )
            {
                // Objcm.g:582:21: ^( EXPR_QUESTION expr_question )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_QUESTION, "EXPR_QUESTION")
                , root_1);

                adaptor.addChild(root_1, stream_expr_question.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_question_wrapper"


    public static class expr_question_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_question"
    // Objcm.g:584:1: expr_question : L_QUESTION classical_expr_wrp COLON classical_expr_wrp ;
    public final ObjcmParser.expr_question_return expr_question() throws RecognitionException {
        ObjcmParser.expr_question_return retval = new ObjcmParser.expr_question_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_QUESTION335=null;
        Token COLON337=null;
        ObjcmParser.classical_expr_wrp_return classical_expr_wrp336 =null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp338 =null;


        Object L_QUESTION335_tree=null;
        Object COLON337_tree=null;

        try {
            // Objcm.g:585:2: ( L_QUESTION classical_expr_wrp COLON classical_expr_wrp )
            // Objcm.g:585:4: L_QUESTION classical_expr_wrp COLON classical_expr_wrp
            {
            root_0 = (Object)adaptor.nil();


            L_QUESTION335=(Token)match(input,L_QUESTION,FOLLOW_L_QUESTION_in_expr_question2969); 
            L_QUESTION335_tree = 
            (Object)adaptor.create(L_QUESTION335)
            ;
            adaptor.addChild(root_0, L_QUESTION335_tree);


            pushFollow(FOLLOW_classical_expr_wrp_in_expr_question2971);
            classical_expr_wrp336=classical_expr_wrp();

            state._fsp--;

            adaptor.addChild(root_0, classical_expr_wrp336.getTree());

            COLON337=(Token)match(input,COLON,FOLLOW_COLON_in_expr_question2973); 
            COLON337_tree = 
            (Object)adaptor.create(COLON337)
            ;
            adaptor.addChild(root_0, COLON337_tree);


            pushFollow(FOLLOW_classical_expr_wrp_in_expr_question2975);
            classical_expr_wrp338=classical_expr_wrp();

            state._fsp--;

            adaptor.addChild(root_0, classical_expr_wrp338.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_question"


    public static class assign_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "assign"
    // Objcm.g:587:1: assign : ( L_EQ | L_PLUS_EQ | L_MINUS_EQ | L_MULT_EQ | L_DIV_EQ | L_PERC_EQ | L_LEFT_EQ | L_RIGHT_EQ | L_AND_EQ | L_XOR_EQ | L_OR_EQ );
    public final ObjcmParser.assign_return assign() throws RecognitionException {
        ObjcmParser.assign_return retval = new ObjcmParser.assign_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set339=null;

        Object set339_tree=null;

        try {
            // Objcm.g:588:2: ( L_EQ | L_PLUS_EQ | L_MINUS_EQ | L_MULT_EQ | L_DIV_EQ | L_PERC_EQ | L_LEFT_EQ | L_RIGHT_EQ | L_AND_EQ | L_XOR_EQ | L_OR_EQ )
            // Objcm.g:
            {
            root_0 = (Object)adaptor.nil();


            set339=(Token)input.LT(1);

            if ( input.LA(1)==L_AND_EQ||(input.LA(1) >= L_DIV_EQ && input.LA(1) <= L_EQ)||input.LA(1)==L_LEFT_EQ||input.LA(1)==L_MINUS_EQ||input.LA(1)==L_MULT_EQ||input.LA(1)==L_OR_EQ||input.LA(1)==L_PERC_EQ||input.LA(1)==L_PLUS_EQ||input.LA(1)==L_RIGHT_EQ||input.LA(1)==L_XOR_EQ ) {
                input.consume();
                adaptor.addChild(root_0, 
                (Object)adaptor.create(set339)
                );
                state.errorRecovery=false;
            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "assign"


    public static class simple_expr_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "simple_expr_wrapper"
    // Objcm.g:592:1: simple_expr_wrapper : simple_expr -> ^( SIMPLE_EXPR simple_expr ) ;
    public final ObjcmParser.simple_expr_wrapper_return simple_expr_wrapper() throws RecognitionException {
        ObjcmParser.simple_expr_wrapper_return retval = new ObjcmParser.simple_expr_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.simple_expr_return simple_expr340 =null;


        RewriteRuleSubtreeStream stream_simple_expr=new RewriteRuleSubtreeStream(adaptor,"rule simple_expr");
        try {
            // Objcm.g:593:2: ( simple_expr -> ^( SIMPLE_EXPR simple_expr ) )
            // Objcm.g:593:4: simple_expr
            {
            pushFollow(FOLLOW_simple_expr_in_simple_expr_wrapper3040);
            simple_expr340=simple_expr();

            state._fsp--;

            stream_simple_expr.add(simple_expr340.getTree());

            // AST REWRITE
            // elements: simple_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 593:16: -> ^( SIMPLE_EXPR simple_expr )
            {
                // Objcm.g:593:19: ^( SIMPLE_EXPR simple_expr )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SIMPLE_EXPR, "SIMPLE_EXPR")
                , root_1);

                adaptor.addChild(root_1, stream_simple_expr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "simple_expr_wrapper"


    public static class simple_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "simple_expr"
    // Objcm.g:595:1: simple_expr : expr_or_or -> ^( EXPR_OR_OR expr_or_or ) ;
    public final ObjcmParser.simple_expr_return simple_expr() throws RecognitionException {
        ObjcmParser.simple_expr_return retval = new ObjcmParser.simple_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_or_or_return expr_or_or341 =null;


        RewriteRuleSubtreeStream stream_expr_or_or=new RewriteRuleSubtreeStream(adaptor,"rule expr_or_or");
        try {
            // Objcm.g:596:2: ( expr_or_or -> ^( EXPR_OR_OR expr_or_or ) )
            // Objcm.g:596:4: expr_or_or
            {
            pushFollow(FOLLOW_expr_or_or_in_simple_expr3058);
            expr_or_or341=expr_or_or();

            state._fsp--;

            stream_expr_or_or.add(expr_or_or341.getTree());

            // AST REWRITE
            // elements: expr_or_or
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 596:15: -> ^( EXPR_OR_OR expr_or_or )
            {
                // Objcm.g:596:18: ^( EXPR_OR_OR expr_or_or )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_OR_OR, "EXPR_OR_OR")
                , root_1);

                adaptor.addChild(root_1, stream_expr_or_or.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "simple_expr"


    public static class expr_or_or_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_or_or"
    // Objcm.g:598:1: expr_or_or : expr_and_and_wrapper ( L_OR_OR classical_expr_wrp )* ;
    public final ObjcmParser.expr_or_or_return expr_or_or() throws RecognitionException {
        ObjcmParser.expr_or_or_return retval = new ObjcmParser.expr_or_or_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_OR_OR343=null;
        ObjcmParser.expr_and_and_wrapper_return expr_and_and_wrapper342 =null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp344 =null;


        Object L_OR_OR343_tree=null;

        try {
            // Objcm.g:599:2: ( expr_and_and_wrapper ( L_OR_OR classical_expr_wrp )* )
            // Objcm.g:599:4: expr_and_and_wrapper ( L_OR_OR classical_expr_wrp )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_expr_and_and_wrapper_in_expr_or_or3075);
            expr_and_and_wrapper342=expr_and_and_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, expr_and_and_wrapper342.getTree());

            // Objcm.g:599:25: ( L_OR_OR classical_expr_wrp )*
            loop87:
            do {
                int alt87=2;
                int LA87_0 = input.LA(1);

                if ( (LA87_0==L_OR_OR) ) {
                    alt87=1;
                }


                switch (alt87) {
            	case 1 :
            	    // Objcm.g:599:26: L_OR_OR classical_expr_wrp
            	    {
            	    L_OR_OR343=(Token)match(input,L_OR_OR,FOLLOW_L_OR_OR_in_expr_or_or3078); 
            	    L_OR_OR343_tree = 
            	    (Object)adaptor.create(L_OR_OR343)
            	    ;
            	    adaptor.addChild(root_0, L_OR_OR343_tree);


            	    pushFollow(FOLLOW_classical_expr_wrp_in_expr_or_or3080);
            	    classical_expr_wrp344=classical_expr_wrp();

            	    state._fsp--;

            	    adaptor.addChild(root_0, classical_expr_wrp344.getTree());

            	    }
            	    break;

            	default :
            	    break loop87;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_or_or"


    public static class expr_and_and_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_and_and_wrapper"
    // Objcm.g:601:1: expr_and_and_wrapper : expr_and_and -> ^( EXPR_AND_AND expr_and_and ) ;
    public final ObjcmParser.expr_and_and_wrapper_return expr_and_and_wrapper() throws RecognitionException {
        ObjcmParser.expr_and_and_wrapper_return retval = new ObjcmParser.expr_and_and_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_and_and_return expr_and_and345 =null;


        RewriteRuleSubtreeStream stream_expr_and_and=new RewriteRuleSubtreeStream(adaptor,"rule expr_and_and");
        try {
            // Objcm.g:602:2: ( expr_and_and -> ^( EXPR_AND_AND expr_and_and ) )
            // Objcm.g:602:4: expr_and_and
            {
            pushFollow(FOLLOW_expr_and_and_in_expr_and_and_wrapper3091);
            expr_and_and345=expr_and_and();

            state._fsp--;

            stream_expr_and_and.add(expr_and_and345.getTree());

            // AST REWRITE
            // elements: expr_and_and
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 602:17: -> ^( EXPR_AND_AND expr_and_and )
            {
                // Objcm.g:602:20: ^( EXPR_AND_AND expr_and_and )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_AND_AND, "EXPR_AND_AND")
                , root_1);

                adaptor.addChild(root_1, stream_expr_and_and.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_and_and_wrapper"


    public static class expr_and_and_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_and_and"
    // Objcm.g:604:1: expr_and_and : expr_or_wrapper ( L_AND_AND classical_expr_wrp )* ;
    public final ObjcmParser.expr_and_and_return expr_and_and() throws RecognitionException {
        ObjcmParser.expr_and_and_return retval = new ObjcmParser.expr_and_and_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_AND_AND347=null;
        ObjcmParser.expr_or_wrapper_return expr_or_wrapper346 =null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp348 =null;


        Object L_AND_AND347_tree=null;

        try {
            // Objcm.g:605:2: ( expr_or_wrapper ( L_AND_AND classical_expr_wrp )* )
            // Objcm.g:605:4: expr_or_wrapper ( L_AND_AND classical_expr_wrp )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_expr_or_wrapper_in_expr_and_and3108);
            expr_or_wrapper346=expr_or_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, expr_or_wrapper346.getTree());

            // Objcm.g:605:20: ( L_AND_AND classical_expr_wrp )*
            loop88:
            do {
                int alt88=2;
                int LA88_0 = input.LA(1);

                if ( (LA88_0==L_AND_AND) ) {
                    alt88=1;
                }


                switch (alt88) {
            	case 1 :
            	    // Objcm.g:605:21: L_AND_AND classical_expr_wrp
            	    {
            	    L_AND_AND347=(Token)match(input,L_AND_AND,FOLLOW_L_AND_AND_in_expr_and_and3111); 
            	    L_AND_AND347_tree = 
            	    (Object)adaptor.create(L_AND_AND347)
            	    ;
            	    adaptor.addChild(root_0, L_AND_AND347_tree);


            	    pushFollow(FOLLOW_classical_expr_wrp_in_expr_and_and3113);
            	    classical_expr_wrp348=classical_expr_wrp();

            	    state._fsp--;

            	    adaptor.addChild(root_0, classical_expr_wrp348.getTree());

            	    }
            	    break;

            	default :
            	    break loop88;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_and_and"


    public static class expr_or_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_or_wrapper"
    // Objcm.g:607:1: expr_or_wrapper : expr_or -> ^( EXPR_OR expr_or ) ;
    public final ObjcmParser.expr_or_wrapper_return expr_or_wrapper() throws RecognitionException {
        ObjcmParser.expr_or_wrapper_return retval = new ObjcmParser.expr_or_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_or_return expr_or349 =null;


        RewriteRuleSubtreeStream stream_expr_or=new RewriteRuleSubtreeStream(adaptor,"rule expr_or");
        try {
            // Objcm.g:608:2: ( expr_or -> ^( EXPR_OR expr_or ) )
            // Objcm.g:608:4: expr_or
            {
            pushFollow(FOLLOW_expr_or_in_expr_or_wrapper3124);
            expr_or349=expr_or();

            state._fsp--;

            stream_expr_or.add(expr_or349.getTree());

            // AST REWRITE
            // elements: expr_or
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 608:12: -> ^( EXPR_OR expr_or )
            {
                // Objcm.g:608:15: ^( EXPR_OR expr_or )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_OR, "EXPR_OR")
                , root_1);

                adaptor.addChild(root_1, stream_expr_or.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_or_wrapper"


    public static class expr_or_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_or"
    // Objcm.g:610:1: expr_or : expr_xor_wrapper ( L_OR classical_expr_wrp )* ;
    public final ObjcmParser.expr_or_return expr_or() throws RecognitionException {
        ObjcmParser.expr_or_return retval = new ObjcmParser.expr_or_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_OR351=null;
        ObjcmParser.expr_xor_wrapper_return expr_xor_wrapper350 =null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp352 =null;


        Object L_OR351_tree=null;

        try {
            // Objcm.g:611:2: ( expr_xor_wrapper ( L_OR classical_expr_wrp )* )
            // Objcm.g:611:4: expr_xor_wrapper ( L_OR classical_expr_wrp )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_expr_xor_wrapper_in_expr_or3142);
            expr_xor_wrapper350=expr_xor_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, expr_xor_wrapper350.getTree());

            // Objcm.g:611:21: ( L_OR classical_expr_wrp )*
            loop89:
            do {
                int alt89=2;
                int LA89_0 = input.LA(1);

                if ( (LA89_0==L_OR) ) {
                    alt89=1;
                }


                switch (alt89) {
            	case 1 :
            	    // Objcm.g:611:22: L_OR classical_expr_wrp
            	    {
            	    L_OR351=(Token)match(input,L_OR,FOLLOW_L_OR_in_expr_or3145); 
            	    L_OR351_tree = 
            	    (Object)adaptor.create(L_OR351)
            	    ;
            	    adaptor.addChild(root_0, L_OR351_tree);


            	    pushFollow(FOLLOW_classical_expr_wrp_in_expr_or3147);
            	    classical_expr_wrp352=classical_expr_wrp();

            	    state._fsp--;

            	    adaptor.addChild(root_0, classical_expr_wrp352.getTree());

            	    }
            	    break;

            	default :
            	    break loop89;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_or"


    public static class expr_xor_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_xor_wrapper"
    // Objcm.g:613:1: expr_xor_wrapper : expr_xor -> ^( EXPR_XOR expr_xor ) ;
    public final ObjcmParser.expr_xor_wrapper_return expr_xor_wrapper() throws RecognitionException {
        ObjcmParser.expr_xor_wrapper_return retval = new ObjcmParser.expr_xor_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_xor_return expr_xor353 =null;


        RewriteRuleSubtreeStream stream_expr_xor=new RewriteRuleSubtreeStream(adaptor,"rule expr_xor");
        try {
            // Objcm.g:614:2: ( expr_xor -> ^( EXPR_XOR expr_xor ) )
            // Objcm.g:614:4: expr_xor
            {
            pushFollow(FOLLOW_expr_xor_in_expr_xor_wrapper3158);
            expr_xor353=expr_xor();

            state._fsp--;

            stream_expr_xor.add(expr_xor353.getTree());

            // AST REWRITE
            // elements: expr_xor
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 614:13: -> ^( EXPR_XOR expr_xor )
            {
                // Objcm.g:614:16: ^( EXPR_XOR expr_xor )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_XOR, "EXPR_XOR")
                , root_1);

                adaptor.addChild(root_1, stream_expr_xor.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_xor_wrapper"


    public static class expr_xor_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_xor"
    // Objcm.g:616:1: expr_xor : expr_and_wrapper ( L_XOR classical_expr_wrp )* ;
    public final ObjcmParser.expr_xor_return expr_xor() throws RecognitionException {
        ObjcmParser.expr_xor_return retval = new ObjcmParser.expr_xor_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_XOR355=null;
        ObjcmParser.expr_and_wrapper_return expr_and_wrapper354 =null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp356 =null;


        Object L_XOR355_tree=null;

        try {
            // Objcm.g:617:2: ( expr_and_wrapper ( L_XOR classical_expr_wrp )* )
            // Objcm.g:617:4: expr_and_wrapper ( L_XOR classical_expr_wrp )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_expr_and_wrapper_in_expr_xor3175);
            expr_and_wrapper354=expr_and_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, expr_and_wrapper354.getTree());

            // Objcm.g:617:21: ( L_XOR classical_expr_wrp )*
            loop90:
            do {
                int alt90=2;
                int LA90_0 = input.LA(1);

                if ( (LA90_0==L_XOR) ) {
                    alt90=1;
                }


                switch (alt90) {
            	case 1 :
            	    // Objcm.g:617:22: L_XOR classical_expr_wrp
            	    {
            	    L_XOR355=(Token)match(input,L_XOR,FOLLOW_L_XOR_in_expr_xor3178); 
            	    L_XOR355_tree = 
            	    (Object)adaptor.create(L_XOR355)
            	    ;
            	    adaptor.addChild(root_0, L_XOR355_tree);


            	    pushFollow(FOLLOW_classical_expr_wrp_in_expr_xor3180);
            	    classical_expr_wrp356=classical_expr_wrp();

            	    state._fsp--;

            	    adaptor.addChild(root_0, classical_expr_wrp356.getTree());

            	    }
            	    break;

            	default :
            	    break loop90;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_xor"


    public static class expr_and_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_and_wrapper"
    // Objcm.g:619:1: expr_and_wrapper : expr_and -> ^( EXPR_AND expr_and ) ;
    public final ObjcmParser.expr_and_wrapper_return expr_and_wrapper() throws RecognitionException {
        ObjcmParser.expr_and_wrapper_return retval = new ObjcmParser.expr_and_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_and_return expr_and357 =null;


        RewriteRuleSubtreeStream stream_expr_and=new RewriteRuleSubtreeStream(adaptor,"rule expr_and");
        try {
            // Objcm.g:620:2: ( expr_and -> ^( EXPR_AND expr_and ) )
            // Objcm.g:620:4: expr_and
            {
            pushFollow(FOLLOW_expr_and_in_expr_and_wrapper3192);
            expr_and357=expr_and();

            state._fsp--;

            stream_expr_and.add(expr_and357.getTree());

            // AST REWRITE
            // elements: expr_and
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 620:13: -> ^( EXPR_AND expr_and )
            {
                // Objcm.g:620:16: ^( EXPR_AND expr_and )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_AND, "EXPR_AND")
                , root_1);

                adaptor.addChild(root_1, stream_expr_and.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_and_wrapper"


    public static class expr_and_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_and"
    // Objcm.g:622:1: expr_and : expr_eq_wrapper ( L_AND classical_expr_wrp )* ;
    public final ObjcmParser.expr_and_return expr_and() throws RecognitionException {
        ObjcmParser.expr_and_return retval = new ObjcmParser.expr_and_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_AND359=null;
        ObjcmParser.expr_eq_wrapper_return expr_eq_wrapper358 =null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp360 =null;


        Object L_AND359_tree=null;

        try {
            // Objcm.g:623:2: ( expr_eq_wrapper ( L_AND classical_expr_wrp )* )
            // Objcm.g:623:4: expr_eq_wrapper ( L_AND classical_expr_wrp )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_expr_eq_wrapper_in_expr_and3210);
            expr_eq_wrapper358=expr_eq_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, expr_eq_wrapper358.getTree());

            // Objcm.g:623:20: ( L_AND classical_expr_wrp )*
            loop91:
            do {
                int alt91=2;
                int LA91_0 = input.LA(1);

                if ( (LA91_0==L_AND) ) {
                    alt91=1;
                }


                switch (alt91) {
            	case 1 :
            	    // Objcm.g:623:21: L_AND classical_expr_wrp
            	    {
            	    L_AND359=(Token)match(input,L_AND,FOLLOW_L_AND_in_expr_and3213); 
            	    L_AND359_tree = 
            	    (Object)adaptor.create(L_AND359)
            	    ;
            	    adaptor.addChild(root_0, L_AND359_tree);


            	    pushFollow(FOLLOW_classical_expr_wrp_in_expr_and3215);
            	    classical_expr_wrp360=classical_expr_wrp();

            	    state._fsp--;

            	    adaptor.addChild(root_0, classical_expr_wrp360.getTree());

            	    }
            	    break;

            	default :
            	    break loop91;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_and"


    public static class expr_eq_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_eq_wrapper"
    // Objcm.g:625:1: expr_eq_wrapper : expr_eq -> ^( EXPR_EQ expr_eq ) ;
    public final ObjcmParser.expr_eq_wrapper_return expr_eq_wrapper() throws RecognitionException {
        ObjcmParser.expr_eq_wrapper_return retval = new ObjcmParser.expr_eq_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_eq_return expr_eq361 =null;


        RewriteRuleSubtreeStream stream_expr_eq=new RewriteRuleSubtreeStream(adaptor,"rule expr_eq");
        try {
            // Objcm.g:626:2: ( expr_eq -> ^( EXPR_EQ expr_eq ) )
            // Objcm.g:626:4: expr_eq
            {
            pushFollow(FOLLOW_expr_eq_in_expr_eq_wrapper3227);
            expr_eq361=expr_eq();

            state._fsp--;

            stream_expr_eq.add(expr_eq361.getTree());

            // AST REWRITE
            // elements: expr_eq
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 626:12: -> ^( EXPR_EQ expr_eq )
            {
                // Objcm.g:626:15: ^( EXPR_EQ expr_eq )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_EQ, "EXPR_EQ")
                , root_1);

                adaptor.addChild(root_1, stream_expr_eq.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_eq_wrapper"


    public static class expr_eq_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_eq"
    // Objcm.g:628:1: expr_eq : expr_cond_wrapper ( ( L_EQ_EQ | L_NEQ ) classical_expr_wrp )* ;
    public final ObjcmParser.expr_eq_return expr_eq() throws RecognitionException {
        ObjcmParser.expr_eq_return retval = new ObjcmParser.expr_eq_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set363=null;
        ObjcmParser.expr_cond_wrapper_return expr_cond_wrapper362 =null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp364 =null;


        Object set363_tree=null;

        try {
            // Objcm.g:629:2: ( expr_cond_wrapper ( ( L_EQ_EQ | L_NEQ ) classical_expr_wrp )* )
            // Objcm.g:629:4: expr_cond_wrapper ( ( L_EQ_EQ | L_NEQ ) classical_expr_wrp )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_expr_cond_wrapper_in_expr_eq3245);
            expr_cond_wrapper362=expr_cond_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, expr_cond_wrapper362.getTree());

            // Objcm.g:629:22: ( ( L_EQ_EQ | L_NEQ ) classical_expr_wrp )*
            loop92:
            do {
                int alt92=2;
                int LA92_0 = input.LA(1);

                if ( (LA92_0==L_EQ_EQ||LA92_0==L_NEQ) ) {
                    alt92=1;
                }


                switch (alt92) {
            	case 1 :
            	    // Objcm.g:629:23: ( L_EQ_EQ | L_NEQ ) classical_expr_wrp
            	    {
            	    set363=(Token)input.LT(1);

            	    if ( input.LA(1)==L_EQ_EQ||input.LA(1)==L_NEQ ) {
            	        input.consume();
            	        adaptor.addChild(root_0, 
            	        (Object)adaptor.create(set363)
            	        );
            	        state.errorRecovery=false;
            	    }
            	    else {
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    pushFollow(FOLLOW_classical_expr_wrp_in_expr_eq3256);
            	    classical_expr_wrp364=classical_expr_wrp();

            	    state._fsp--;

            	    adaptor.addChild(root_0, classical_expr_wrp364.getTree());

            	    }
            	    break;

            	default :
            	    break loop92;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_eq"


    public static class expr_cond_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_cond_wrapper"
    // Objcm.g:631:1: expr_cond_wrapper : expr_cond -> ^( EXPR_COND expr_cond ) ;
    public final ObjcmParser.expr_cond_wrapper_return expr_cond_wrapper() throws RecognitionException {
        ObjcmParser.expr_cond_wrapper_return retval = new ObjcmParser.expr_cond_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_cond_return expr_cond365 =null;


        RewriteRuleSubtreeStream stream_expr_cond=new RewriteRuleSubtreeStream(adaptor,"rule expr_cond");
        try {
            // Objcm.g:632:2: ( expr_cond -> ^( EXPR_COND expr_cond ) )
            // Objcm.g:632:4: expr_cond
            {
            pushFollow(FOLLOW_expr_cond_in_expr_cond_wrapper3267);
            expr_cond365=expr_cond();

            state._fsp--;

            stream_expr_cond.add(expr_cond365.getTree());

            // AST REWRITE
            // elements: expr_cond
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 632:14: -> ^( EXPR_COND expr_cond )
            {
                // Objcm.g:632:17: ^( EXPR_COND expr_cond )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_COND, "EXPR_COND")
                , root_1);

                adaptor.addChild(root_1, stream_expr_cond.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_cond_wrapper"


    public static class expr_cond_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_cond"
    // Objcm.g:634:1: expr_cond : expr_mov_wrapper ( ( L_LESS | L_MORE | L_LESS_EQ | L_MORE_EQ ) classical_expr_wrp )* ;
    public final ObjcmParser.expr_cond_return expr_cond() throws RecognitionException {
        ObjcmParser.expr_cond_return retval = new ObjcmParser.expr_cond_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set367=null;
        ObjcmParser.expr_mov_wrapper_return expr_mov_wrapper366 =null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp368 =null;


        Object set367_tree=null;

        try {
            // Objcm.g:635:2: ( expr_mov_wrapper ( ( L_LESS | L_MORE | L_LESS_EQ | L_MORE_EQ ) classical_expr_wrp )* )
            // Objcm.g:635:4: expr_mov_wrapper ( ( L_LESS | L_MORE | L_LESS_EQ | L_MORE_EQ ) classical_expr_wrp )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_expr_mov_wrapper_in_expr_cond3284);
            expr_mov_wrapper366=expr_mov_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, expr_mov_wrapper366.getTree());

            // Objcm.g:635:21: ( ( L_LESS | L_MORE | L_LESS_EQ | L_MORE_EQ ) classical_expr_wrp )*
            loop93:
            do {
                int alt93=2;
                int LA93_0 = input.LA(1);

                if ( ((LA93_0 >= L_LESS && LA93_0 <= L_LESS_EQ)||(LA93_0 >= L_MORE && LA93_0 <= L_MORE_EQ)) ) {
                    alt93=1;
                }


                switch (alt93) {
            	case 1 :
            	    // Objcm.g:635:22: ( L_LESS | L_MORE | L_LESS_EQ | L_MORE_EQ ) classical_expr_wrp
            	    {
            	    set367=(Token)input.LT(1);

            	    if ( (input.LA(1) >= L_LESS && input.LA(1) <= L_LESS_EQ)||(input.LA(1) >= L_MORE && input.LA(1) <= L_MORE_EQ) ) {
            	        input.consume();
            	        adaptor.addChild(root_0, 
            	        (Object)adaptor.create(set367)
            	        );
            	        state.errorRecovery=false;
            	    }
            	    else {
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    pushFollow(FOLLOW_classical_expr_wrp_in_expr_cond3303);
            	    classical_expr_wrp368=classical_expr_wrp();

            	    state._fsp--;

            	    adaptor.addChild(root_0, classical_expr_wrp368.getTree());

            	    }
            	    break;

            	default :
            	    break loop93;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_cond"


    public static class expr_mov_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_mov_wrapper"
    // Objcm.g:637:1: expr_mov_wrapper : expr_mov -> ^( EXPR_MOV expr_mov ) ;
    public final ObjcmParser.expr_mov_wrapper_return expr_mov_wrapper() throws RecognitionException {
        ObjcmParser.expr_mov_wrapper_return retval = new ObjcmParser.expr_mov_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_mov_return expr_mov369 =null;


        RewriteRuleSubtreeStream stream_expr_mov=new RewriteRuleSubtreeStream(adaptor,"rule expr_mov");
        try {
            // Objcm.g:638:2: ( expr_mov -> ^( EXPR_MOV expr_mov ) )
            // Objcm.g:638:4: expr_mov
            {
            pushFollow(FOLLOW_expr_mov_in_expr_mov_wrapper3314);
            expr_mov369=expr_mov();

            state._fsp--;

            stream_expr_mov.add(expr_mov369.getTree());

            // AST REWRITE
            // elements: expr_mov
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 638:13: -> ^( EXPR_MOV expr_mov )
            {
                // Objcm.g:638:16: ^( EXPR_MOV expr_mov )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_MOV, "EXPR_MOV")
                , root_1);

                adaptor.addChild(root_1, stream_expr_mov.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_mov_wrapper"


    public static class expr_mov_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_mov"
    // Objcm.g:640:1: expr_mov : expr_add_wrapper ( ( L_LEFT | L_RIGHT ) classical_expr_wrp )* ;
    public final ObjcmParser.expr_mov_return expr_mov() throws RecognitionException {
        ObjcmParser.expr_mov_return retval = new ObjcmParser.expr_mov_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set371=null;
        ObjcmParser.expr_add_wrapper_return expr_add_wrapper370 =null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp372 =null;


        Object set371_tree=null;

        try {
            // Objcm.g:641:2: ( expr_add_wrapper ( ( L_LEFT | L_RIGHT ) classical_expr_wrp )* )
            // Objcm.g:641:4: expr_add_wrapper ( ( L_LEFT | L_RIGHT ) classical_expr_wrp )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_expr_add_wrapper_in_expr_mov3332);
            expr_add_wrapper370=expr_add_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, expr_add_wrapper370.getTree());

            // Objcm.g:641:21: ( ( L_LEFT | L_RIGHT ) classical_expr_wrp )*
            loop94:
            do {
                int alt94=2;
                int LA94_0 = input.LA(1);

                if ( (LA94_0==L_LEFT||LA94_0==L_RIGHT) ) {
                    alt94=1;
                }


                switch (alt94) {
            	case 1 :
            	    // Objcm.g:641:22: ( L_LEFT | L_RIGHT ) classical_expr_wrp
            	    {
            	    set371=(Token)input.LT(1);

            	    if ( input.LA(1)==L_LEFT||input.LA(1)==L_RIGHT ) {
            	        input.consume();
            	        adaptor.addChild(root_0, 
            	        (Object)adaptor.create(set371)
            	        );
            	        state.errorRecovery=false;
            	    }
            	    else {
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    pushFollow(FOLLOW_classical_expr_wrp_in_expr_mov3343);
            	    classical_expr_wrp372=classical_expr_wrp();

            	    state._fsp--;

            	    adaptor.addChild(root_0, classical_expr_wrp372.getTree());

            	    }
            	    break;

            	default :
            	    break loop94;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_mov"


    public static class expr_add_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_add_wrapper"
    // Objcm.g:643:1: expr_add_wrapper : expr_add -> ^( EXPR_ADD expr_add ) ;
    public final ObjcmParser.expr_add_wrapper_return expr_add_wrapper() throws RecognitionException {
        ObjcmParser.expr_add_wrapper_return retval = new ObjcmParser.expr_add_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_add_return expr_add373 =null;


        RewriteRuleSubtreeStream stream_expr_add=new RewriteRuleSubtreeStream(adaptor,"rule expr_add");
        try {
            // Objcm.g:644:2: ( expr_add -> ^( EXPR_ADD expr_add ) )
            // Objcm.g:644:4: expr_add
            {
            pushFollow(FOLLOW_expr_add_in_expr_add_wrapper3355);
            expr_add373=expr_add();

            state._fsp--;

            stream_expr_add.add(expr_add373.getTree());

            // AST REWRITE
            // elements: expr_add
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 644:13: -> ^( EXPR_ADD expr_add )
            {
                // Objcm.g:644:16: ^( EXPR_ADD expr_add )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_ADD, "EXPR_ADD")
                , root_1);

                adaptor.addChild(root_1, stream_expr_add.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_add_wrapper"


    public static class expr_add_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_add"
    // Objcm.g:646:1: expr_add : expr_mult_wrapper ( ( L_PLUS | L_MINUS ) classical_expr_wrp )* ;
    public final ObjcmParser.expr_add_return expr_add() throws RecognitionException {
        ObjcmParser.expr_add_return retval = new ObjcmParser.expr_add_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set375=null;
        ObjcmParser.expr_mult_wrapper_return expr_mult_wrapper374 =null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp376 =null;


        Object set375_tree=null;

        try {
            // Objcm.g:647:2: ( expr_mult_wrapper ( ( L_PLUS | L_MINUS ) classical_expr_wrp )* )
            // Objcm.g:647:4: expr_mult_wrapper ( ( L_PLUS | L_MINUS ) classical_expr_wrp )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_expr_mult_wrapper_in_expr_add3372);
            expr_mult_wrapper374=expr_mult_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, expr_mult_wrapper374.getTree());

            // Objcm.g:647:22: ( ( L_PLUS | L_MINUS ) classical_expr_wrp )*
            loop95:
            do {
                int alt95=2;
                int LA95_0 = input.LA(1);

                if ( (LA95_0==L_MINUS||LA95_0==L_PLUS) ) {
                    alt95=1;
                }


                switch (alt95) {
            	case 1 :
            	    // Objcm.g:647:23: ( L_PLUS | L_MINUS ) classical_expr_wrp
            	    {
            	    set375=(Token)input.LT(1);

            	    if ( input.LA(1)==L_MINUS||input.LA(1)==L_PLUS ) {
            	        input.consume();
            	        adaptor.addChild(root_0, 
            	        (Object)adaptor.create(set375)
            	        );
            	        state.errorRecovery=false;
            	    }
            	    else {
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    pushFollow(FOLLOW_classical_expr_wrp_in_expr_add3383);
            	    classical_expr_wrp376=classical_expr_wrp();

            	    state._fsp--;

            	    adaptor.addChild(root_0, classical_expr_wrp376.getTree());

            	    }
            	    break;

            	default :
            	    break loop95;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_add"


    public static class expr_mult_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_mult_wrapper"
    // Objcm.g:649:1: expr_mult_wrapper : expr_mult -> ^( EXPR_MULT expr_mult ) ;
    public final ObjcmParser.expr_mult_wrapper_return expr_mult_wrapper() throws RecognitionException {
        ObjcmParser.expr_mult_wrapper_return retval = new ObjcmParser.expr_mult_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_mult_return expr_mult377 =null;


        RewriteRuleSubtreeStream stream_expr_mult=new RewriteRuleSubtreeStream(adaptor,"rule expr_mult");
        try {
            // Objcm.g:650:2: ( expr_mult -> ^( EXPR_MULT expr_mult ) )
            // Objcm.g:650:4: expr_mult
            {
            pushFollow(FOLLOW_expr_mult_in_expr_mult_wrapper3394);
            expr_mult377=expr_mult();

            state._fsp--;

            stream_expr_mult.add(expr_mult377.getTree());

            // AST REWRITE
            // elements: expr_mult
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 650:14: -> ^( EXPR_MULT expr_mult )
            {
                // Objcm.g:650:17: ^( EXPR_MULT expr_mult )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_MULT, "EXPR_MULT")
                , root_1);

                adaptor.addChild(root_1, stream_expr_mult.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_mult_wrapper"


    public static class expr_mult_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_mult"
    // Objcm.g:652:1: expr_mult : expr_type_wrapper ( ( ASTERISK | L_DIV | L_PERC ) classical_expr_wrp )* ;
    public final ObjcmParser.expr_mult_return expr_mult() throws RecognitionException {
        ObjcmParser.expr_mult_return retval = new ObjcmParser.expr_mult_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set379=null;
        ObjcmParser.expr_type_wrapper_return expr_type_wrapper378 =null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp380 =null;


        Object set379_tree=null;

        try {
            // Objcm.g:653:2: ( expr_type_wrapper ( ( ASTERISK | L_DIV | L_PERC ) classical_expr_wrp )* )
            // Objcm.g:653:4: expr_type_wrapper ( ( ASTERISK | L_DIV | L_PERC ) classical_expr_wrp )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_expr_type_wrapper_in_expr_mult3411);
            expr_type_wrapper378=expr_type_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, expr_type_wrapper378.getTree());

            // Objcm.g:653:22: ( ( ASTERISK | L_DIV | L_PERC ) classical_expr_wrp )*
            loop96:
            do {
                int alt96=2;
                int LA96_0 = input.LA(1);

                if ( (LA96_0==ASTERISK||LA96_0==L_DIV||LA96_0==L_PERC) ) {
                    alt96=1;
                }


                switch (alt96) {
            	case 1 :
            	    // Objcm.g:653:23: ( ASTERISK | L_DIV | L_PERC ) classical_expr_wrp
            	    {
            	    set379=(Token)input.LT(1);

            	    if ( input.LA(1)==ASTERISK||input.LA(1)==L_DIV||input.LA(1)==L_PERC ) {
            	        input.consume();
            	        adaptor.addChild(root_0, 
            	        (Object)adaptor.create(set379)
            	        );
            	        state.errorRecovery=false;
            	    }
            	    else {
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    pushFollow(FOLLOW_classical_expr_wrp_in_expr_mult3426);
            	    classical_expr_wrp380=classical_expr_wrp();

            	    state._fsp--;

            	    adaptor.addChild(root_0, classical_expr_wrp380.getTree());

            	    }
            	    break;

            	default :
            	    break loop96;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_mult"


    public static class expr_type_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_type_wrapper"
    // Objcm.g:655:1: expr_type_wrapper : expr_type -> ^( EXPR_TYPE expr_type ) ;
    public final ObjcmParser.expr_type_wrapper_return expr_type_wrapper() throws RecognitionException {
        ObjcmParser.expr_type_wrapper_return retval = new ObjcmParser.expr_type_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_type_return expr_type381 =null;


        RewriteRuleSubtreeStream stream_expr_type=new RewriteRuleSubtreeStream(adaptor,"rule expr_type");
        try {
            // Objcm.g:656:2: ( expr_type -> ^( EXPR_TYPE expr_type ) )
            // Objcm.g:656:4: expr_type
            {
            pushFollow(FOLLOW_expr_type_in_expr_type_wrapper3438);
            expr_type381=expr_type();

            state._fsp--;

            stream_expr_type.add(expr_type381.getTree());

            // AST REWRITE
            // elements: expr_type
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 656:14: -> ^( EXPR_TYPE expr_type )
            {
                // Objcm.g:656:17: ^( EXPR_TYPE expr_type )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_TYPE, "EXPR_TYPE")
                , root_1);

                adaptor.addChild(root_1, stream_expr_type.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_type_wrapper"


    public static class expr_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_type"
    // Objcm.g:658:1: expr_type : ( type_convertion )? expr_unname ;
    public final ObjcmParser.expr_type_return expr_type() throws RecognitionException {
        ObjcmParser.expr_type_return retval = new ObjcmParser.expr_type_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.type_convertion_return type_convertion382 =null;

        ObjcmParser.expr_unname_return expr_unname383 =null;



        try {
            // Objcm.g:659:2: ( ( type_convertion )? expr_unname )
            // Objcm.g:659:4: ( type_convertion )? expr_unname
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:659:4: ( type_convertion )?
            int alt97=2;
            alt97 = dfa97.predict(input);
            switch (alt97) {
                case 1 :
                    // Objcm.g:659:4: type_convertion
                    {
                    pushFollow(FOLLOW_type_convertion_in_expr_type3455);
                    type_convertion382=type_convertion();

                    state._fsp--;

                    adaptor.addChild(root_0, type_convertion382.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_expr_unname_in_expr_type3458);
            expr_unname383=expr_unname();

            state._fsp--;

            adaptor.addChild(root_0, expr_unname383.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_type"


    public static class expr_unname_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_unname"
    // Objcm.g:661:1: expr_unname : ( ASTERISK ( type_convertion )? )? expr_addr ;
    public final ObjcmParser.expr_unname_return expr_unname() throws RecognitionException {
        ObjcmParser.expr_unname_return retval = new ObjcmParser.expr_unname_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ASTERISK384=null;
        ObjcmParser.type_convertion_return type_convertion385 =null;

        ObjcmParser.expr_addr_return expr_addr386 =null;


        Object ASTERISK384_tree=null;

        try {
            // Objcm.g:662:2: ( ( ASTERISK ( type_convertion )? )? expr_addr )
            // Objcm.g:662:4: ( ASTERISK ( type_convertion )? )? expr_addr
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:662:4: ( ASTERISK ( type_convertion )? )?
            int alt99=2;
            int LA99_0 = input.LA(1);

            if ( (LA99_0==ASTERISK) ) {
                alt99=1;
            }
            switch (alt99) {
                case 1 :
                    // Objcm.g:662:5: ASTERISK ( type_convertion )?
                    {
                    ASTERISK384=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_expr_unname3469); 
                    ASTERISK384_tree = 
                    (Object)adaptor.create(ASTERISK384)
                    ;
                    adaptor.addChild(root_0, ASTERISK384_tree);


                    // Objcm.g:662:14: ( type_convertion )?
                    int alt98=2;
                    alt98 = dfa98.predict(input);
                    switch (alt98) {
                        case 1 :
                            // Objcm.g:662:14: type_convertion
                            {
                            pushFollow(FOLLOW_type_convertion_in_expr_unname3471);
                            type_convertion385=type_convertion();

                            state._fsp--;

                            adaptor.addChild(root_0, type_convertion385.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }


            pushFollow(FOLLOW_expr_addr_in_expr_unname3476);
            expr_addr386=expr_addr();

            state._fsp--;

            adaptor.addChild(root_0, expr_addr386.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_unname"


    public static class expr_addr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_addr"
    // Objcm.g:664:1: expr_addr : ( L_AND )? expr_sign ;
    public final ObjcmParser.expr_addr_return expr_addr() throws RecognitionException {
        ObjcmParser.expr_addr_return retval = new ObjcmParser.expr_addr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_AND387=null;
        ObjcmParser.expr_sign_return expr_sign388 =null;


        Object L_AND387_tree=null;

        try {
            // Objcm.g:665:2: ( ( L_AND )? expr_sign )
            // Objcm.g:665:4: ( L_AND )? expr_sign
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:665:4: ( L_AND )?
            int alt100=2;
            int LA100_0 = input.LA(1);

            if ( (LA100_0==L_AND) ) {
                alt100=1;
            }
            switch (alt100) {
                case 1 :
                    // Objcm.g:665:4: L_AND
                    {
                    L_AND387=(Token)match(input,L_AND,FOLLOW_L_AND_in_expr_addr3486); 
                    L_AND387_tree = 
                    (Object)adaptor.create(L_AND387)
                    ;
                    adaptor.addChild(root_0, L_AND387_tree);


                    }
                    break;

            }


            pushFollow(FOLLOW_expr_sign_in_expr_addr3489);
            expr_sign388=expr_sign();

            state._fsp--;

            adaptor.addChild(root_0, expr_sign388.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_addr"


    public static class expr_sign_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_sign"
    // Objcm.g:667:1: expr_sign : ( L_MINUS | L_PLUS )? expr_not_wrapper ;
    public final ObjcmParser.expr_sign_return expr_sign() throws RecognitionException {
        ObjcmParser.expr_sign_return retval = new ObjcmParser.expr_sign_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set389=null;
        ObjcmParser.expr_not_wrapper_return expr_not_wrapper390 =null;


        Object set389_tree=null;

        try {
            // Objcm.g:668:2: ( ( L_MINUS | L_PLUS )? expr_not_wrapper )
            // Objcm.g:668:4: ( L_MINUS | L_PLUS )? expr_not_wrapper
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:668:4: ( L_MINUS | L_PLUS )?
            int alt101=2;
            int LA101_0 = input.LA(1);

            if ( (LA101_0==L_MINUS||LA101_0==L_PLUS) ) {
                alt101=1;
            }
            switch (alt101) {
                case 1 :
                    // Objcm.g:
                    {
                    set389=(Token)input.LT(1);

                    if ( input.LA(1)==L_MINUS||input.LA(1)==L_PLUS ) {
                        input.consume();
                        adaptor.addChild(root_0, 
                        (Object)adaptor.create(set389)
                        );
                        state.errorRecovery=false;
                    }
                    else {
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    }
                    break;

            }


            pushFollow(FOLLOW_expr_not_wrapper_in_expr_sign3508);
            expr_not_wrapper390=expr_not_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, expr_not_wrapper390.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_sign"


    public static class expr_not_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_not_wrapper"
    // Objcm.g:670:1: expr_not_wrapper : expr_not -> ^( EXPR_NOT expr_not ) ;
    public final ObjcmParser.expr_not_wrapper_return expr_not_wrapper() throws RecognitionException {
        ObjcmParser.expr_not_wrapper_return retval = new ObjcmParser.expr_not_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_not_return expr_not391 =null;


        RewriteRuleSubtreeStream stream_expr_not=new RewriteRuleSubtreeStream(adaptor,"rule expr_not");
        try {
            // Objcm.g:671:2: ( expr_not -> ^( EXPR_NOT expr_not ) )
            // Objcm.g:671:4: expr_not
            {
            pushFollow(FOLLOW_expr_not_in_expr_not_wrapper3518);
            expr_not391=expr_not();

            state._fsp--;

            stream_expr_not.add(expr_not391.getTree());

            // AST REWRITE
            // elements: expr_not
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 671:13: -> ^( EXPR_NOT expr_not )
            {
                // Objcm.g:671:16: ^( EXPR_NOT expr_not )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_NOT, "EXPR_NOT")
                , root_1);

                adaptor.addChild(root_1, stream_expr_not.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_not_wrapper"


    public static class expr_not_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_not"
    // Objcm.g:673:1: expr_not : ( L_NOT )? expr_not2 ;
    public final ObjcmParser.expr_not_return expr_not() throws RecognitionException {
        ObjcmParser.expr_not_return retval = new ObjcmParser.expr_not_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_NOT392=null;
        ObjcmParser.expr_not2_return expr_not2393 =null;


        Object L_NOT392_tree=null;

        try {
            // Objcm.g:674:2: ( ( L_NOT )? expr_not2 )
            // Objcm.g:674:4: ( L_NOT )? expr_not2
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:674:4: ( L_NOT )?
            int alt102=2;
            int LA102_0 = input.LA(1);

            if ( (LA102_0==L_NOT) ) {
                alt102=1;
            }
            switch (alt102) {
                case 1 :
                    // Objcm.g:674:4: L_NOT
                    {
                    L_NOT392=(Token)match(input,L_NOT,FOLLOW_L_NOT_in_expr_not3537); 
                    L_NOT392_tree = 
                    (Object)adaptor.create(L_NOT392)
                    ;
                    adaptor.addChild(root_0, L_NOT392_tree);


                    }
                    break;

            }


            pushFollow(FOLLOW_expr_not2_in_expr_not3540);
            expr_not2393=expr_not2();

            state._fsp--;

            adaptor.addChild(root_0, expr_not2393.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_not"


    public static class expr_not2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_not2"
    // Objcm.g:676:1: expr_not2 : ( L_TILDA )? expr_size_of ;
    public final ObjcmParser.expr_not2_return expr_not2() throws RecognitionException {
        ObjcmParser.expr_not2_return retval = new ObjcmParser.expr_not2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_TILDA394=null;
        ObjcmParser.expr_size_of_return expr_size_of395 =null;


        Object L_TILDA394_tree=null;

        try {
            // Objcm.g:677:2: ( ( L_TILDA )? expr_size_of )
            // Objcm.g:677:4: ( L_TILDA )? expr_size_of
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:677:4: ( L_TILDA )?
            int alt103=2;
            int LA103_0 = input.LA(1);

            if ( (LA103_0==L_TILDA) ) {
                alt103=1;
            }
            switch (alt103) {
                case 1 :
                    // Objcm.g:677:4: L_TILDA
                    {
                    L_TILDA394=(Token)match(input,L_TILDA,FOLLOW_L_TILDA_in_expr_not23549); 
                    L_TILDA394_tree = 
                    (Object)adaptor.create(L_TILDA394)
                    ;
                    adaptor.addChild(root_0, L_TILDA394_tree);


                    }
                    break;

            }


            pushFollow(FOLLOW_expr_size_of_in_expr_not23552);
            expr_size_of395=expr_size_of();

            state._fsp--;

            adaptor.addChild(root_0, expr_size_of395.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_not2"


    public static class expr_size_of_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_size_of"
    // Objcm.g:679:1: expr_size_of : ( SIZEOF )? expr_xcrement ;
    public final ObjcmParser.expr_size_of_return expr_size_of() throws RecognitionException {
        ObjcmParser.expr_size_of_return retval = new ObjcmParser.expr_size_of_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SIZEOF396=null;
        ObjcmParser.expr_xcrement_return expr_xcrement397 =null;


        Object SIZEOF396_tree=null;

        try {
            // Objcm.g:680:2: ( ( SIZEOF )? expr_xcrement )
            // Objcm.g:680:4: ( SIZEOF )? expr_xcrement
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:680:4: ( SIZEOF )?
            int alt104=2;
            int LA104_0 = input.LA(1);

            if ( (LA104_0==SIZEOF) ) {
                alt104=1;
            }
            switch (alt104) {
                case 1 :
                    // Objcm.g:680:4: SIZEOF
                    {
                    SIZEOF396=(Token)match(input,SIZEOF,FOLLOW_SIZEOF_in_expr_size_of3562); 
                    SIZEOF396_tree = 
                    (Object)adaptor.create(SIZEOF396)
                    ;
                    adaptor.addChild(root_0, SIZEOF396_tree);


                    }
                    break;

            }


            pushFollow(FOLLOW_expr_xcrement_in_expr_size_of3565);
            expr_xcrement397=expr_xcrement();

            state._fsp--;

            adaptor.addChild(root_0, expr_xcrement397.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_size_of"


    public static class expr_xcrement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_xcrement"
    // Objcm.g:682:1: expr_xcrement : ( L_PLUS_PLUS | L_MINUS_MINUS )? object_wrapped1 ;
    public final ObjcmParser.expr_xcrement_return expr_xcrement() throws RecognitionException {
        ObjcmParser.expr_xcrement_return retval = new ObjcmParser.expr_xcrement_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set398=null;
        ObjcmParser.object_wrapped1_return object_wrapped1399 =null;


        Object set398_tree=null;

        try {
            // Objcm.g:683:2: ( ( L_PLUS_PLUS | L_MINUS_MINUS )? object_wrapped1 )
            // Objcm.g:683:4: ( L_PLUS_PLUS | L_MINUS_MINUS )? object_wrapped1
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:683:4: ( L_PLUS_PLUS | L_MINUS_MINUS )?
            int alt105=2;
            int LA105_0 = input.LA(1);

            if ( (LA105_0==L_MINUS_MINUS||LA105_0==L_PLUS_PLUS) ) {
                alt105=1;
            }
            switch (alt105) {
                case 1 :
                    // Objcm.g:
                    {
                    set398=(Token)input.LT(1);

                    if ( input.LA(1)==L_MINUS_MINUS||input.LA(1)==L_PLUS_PLUS ) {
                        input.consume();
                        adaptor.addChild(root_0, 
                        (Object)adaptor.create(set398)
                        );
                        state.errorRecovery=false;
                    }
                    else {
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    }
                    break;

            }


            pushFollow(FOLLOW_object_wrapped1_in_expr_xcrement3584);
            object_wrapped1399=object_wrapped1();

            state._fsp--;

            adaptor.addChild(root_0, object_wrapped1399.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_xcrement"


    public static class object_wrapped1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "object_wrapped1"
    // Objcm.g:685:1: object_wrapped1 : object_wrapped2 ( L_PLUS_PLUS | L_MINUS_MINUS )? ;
    public final ObjcmParser.object_wrapped1_return object_wrapped1() throws RecognitionException {
        ObjcmParser.object_wrapped1_return retval = new ObjcmParser.object_wrapped1_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set401=null;
        ObjcmParser.object_wrapped2_return object_wrapped2400 =null;


        Object set401_tree=null;

        try {
            // Objcm.g:686:2: ( object_wrapped2 ( L_PLUS_PLUS | L_MINUS_MINUS )? )
            // Objcm.g:686:4: object_wrapped2 ( L_PLUS_PLUS | L_MINUS_MINUS )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_object_wrapped2_in_object_wrapped13594);
            object_wrapped2400=object_wrapped2();

            state._fsp--;

            adaptor.addChild(root_0, object_wrapped2400.getTree());

            // Objcm.g:686:20: ( L_PLUS_PLUS | L_MINUS_MINUS )?
            int alt106=2;
            int LA106_0 = input.LA(1);

            if ( (LA106_0==L_MINUS_MINUS||LA106_0==L_PLUS_PLUS) ) {
                alt106=1;
            }
            switch (alt106) {
                case 1 :
                    // Objcm.g:
                    {
                    set401=(Token)input.LT(1);

                    if ( input.LA(1)==L_MINUS_MINUS||input.LA(1)==L_PLUS_PLUS ) {
                        input.consume();
                        adaptor.addChild(root_0, 
                        (Object)adaptor.create(set401)
                        );
                        state.errorRecovery=false;
                    }
                    else {
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "object_wrapped1"


    public static class object_wrapped2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "object_wrapped2"
    // Objcm.g:689:1: object_wrapped2 : ( ( 'unsigned' )? object_name ( generic )? | method_call_wrapper ( id_part_end )? | L_BR classical_expr_wrp R_BR ( id_part_end )? | const_expr | a_started );
    public final ObjcmParser.object_wrapped2_return object_wrapped2() throws RecognitionException {
        ObjcmParser.object_wrapped2_return retval = new ObjcmParser.object_wrapped2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal402=null;
        Token L_BR407=null;
        Token R_BR409=null;
        ObjcmParser.object_name_return object_name403 =null;

        ObjcmParser.generic_return generic404 =null;

        ObjcmParser.method_call_wrapper_return method_call_wrapper405 =null;

        ObjcmParser.id_part_end_return id_part_end406 =null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp408 =null;

        ObjcmParser.id_part_end_return id_part_end410 =null;

        ObjcmParser.const_expr_return const_expr411 =null;

        ObjcmParser.a_started_return a_started412 =null;


        Object string_literal402_tree=null;
        Object L_BR407_tree=null;
        Object R_BR409_tree=null;

        try {
            // Objcm.g:690:2: ( ( 'unsigned' )? object_name ( generic )? | method_call_wrapper ( id_part_end )? | L_BR classical_expr_wrp R_BR ( id_part_end )? | const_expr | a_started )
            int alt111=5;
            switch ( input.LA(1) ) {
            case ID:
            case 176:
            case 183:
                {
                alt111=1;
                }
                break;
            case L_KBR:
                {
                alt111=2;
                }
                break;
            case L_BR:
                {
                alt111=3;
                }
                break;
            case NUMBER:
            case STRING_LITERAL:
            case STRING_LITERAL2:
            case STRING_LITERAL3:
            case 165:
            case 178:
                {
                alt111=4;
                }
                break;
            case 154:
            case 161:
                {
                alt111=5;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 111, 0, input);

                throw nvae;

            }

            switch (alt111) {
                case 1 :
                    // Objcm.g:690:5: ( 'unsigned' )? object_name ( generic )?
                    {
                    root_0 = (Object)adaptor.nil();


                    // Objcm.g:690:5: ( 'unsigned' )?
                    int alt107=2;
                    int LA107_0 = input.LA(1);

                    if ( (LA107_0==183) ) {
                        alt107=1;
                    }
                    switch (alt107) {
                        case 1 :
                            // Objcm.g:690:5: 'unsigned'
                            {
                            string_literal402=(Token)match(input,183,FOLLOW_183_in_object_wrapped23615); 
                            string_literal402_tree = 
                            (Object)adaptor.create(string_literal402)
                            ;
                            adaptor.addChild(root_0, string_literal402_tree);


                            }
                            break;

                    }


                    pushFollow(FOLLOW_object_name_in_object_wrapped23618);
                    object_name403=object_name();

                    state._fsp--;

                    adaptor.addChild(root_0, object_name403.getTree());

                    // Objcm.g:690:29: ( generic )?
                    int alt108=2;
                    alt108 = dfa108.predict(input);
                    switch (alt108) {
                        case 1 :
                            // Objcm.g:690:29: generic
                            {
                            pushFollow(FOLLOW_generic_in_object_wrapped23620);
                            generic404=generic();

                            state._fsp--;

                            adaptor.addChild(root_0, generic404.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // Objcm.g:691:4: method_call_wrapper ( id_part_end )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_method_call_wrapper_in_object_wrapped23626);
                    method_call_wrapper405=method_call_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, method_call_wrapper405.getTree());

                    // Objcm.g:691:24: ( id_part_end )?
                    int alt109=2;
                    int LA109_0 = input.LA(1);

                    if ( (LA109_0==DOT||LA109_0==151) ) {
                        alt109=1;
                    }
                    switch (alt109) {
                        case 1 :
                            // Objcm.g:691:24: id_part_end
                            {
                            pushFollow(FOLLOW_id_part_end_in_object_wrapped23628);
                            id_part_end406=id_part_end();

                            state._fsp--;

                            adaptor.addChild(root_0, id_part_end406.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // Objcm.g:692:4: L_BR classical_expr_wrp R_BR ( id_part_end )?
                    {
                    root_0 = (Object)adaptor.nil();


                    L_BR407=(Token)match(input,L_BR,FOLLOW_L_BR_in_object_wrapped23634); 
                    L_BR407_tree = 
                    (Object)adaptor.create(L_BR407)
                    ;
                    adaptor.addChild(root_0, L_BR407_tree);


                    pushFollow(FOLLOW_classical_expr_wrp_in_object_wrapped23636);
                    classical_expr_wrp408=classical_expr_wrp();

                    state._fsp--;

                    adaptor.addChild(root_0, classical_expr_wrp408.getTree());

                    R_BR409=(Token)match(input,R_BR,FOLLOW_R_BR_in_object_wrapped23638); 
                    R_BR409_tree = 
                    (Object)adaptor.create(R_BR409)
                    ;
                    adaptor.addChild(root_0, R_BR409_tree);


                    // Objcm.g:692:33: ( id_part_end )?
                    int alt110=2;
                    int LA110_0 = input.LA(1);

                    if ( (LA110_0==DOT||LA110_0==151) ) {
                        alt110=1;
                    }
                    switch (alt110) {
                        case 1 :
                            // Objcm.g:692:33: id_part_end
                            {
                            pushFollow(FOLLOW_id_part_end_in_object_wrapped23640);
                            id_part_end410=id_part_end();

                            state._fsp--;

                            adaptor.addChild(root_0, id_part_end410.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 4 :
                    // Objcm.g:693:4: const_expr
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_const_expr_in_object_wrapped23646);
                    const_expr411=const_expr();

                    state._fsp--;

                    adaptor.addChild(root_0, const_expr411.getTree());

                    }
                    break;
                case 5 :
                    // Objcm.g:694:4: a_started
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_a_started_in_object_wrapped23651);
                    a_started412=a_started();

                    state._fsp--;

                    adaptor.addChild(root_0, a_started412.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "object_wrapped2"


    public static class function_brackets_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "function_brackets_wrapper"
    // Objcm.g:697:1: function_brackets_wrapper : function_brackets -> ^( FUNCTION function_brackets ) ;
    public final ObjcmParser.function_brackets_wrapper_return function_brackets_wrapper() throws RecognitionException {
        ObjcmParser.function_brackets_wrapper_return retval = new ObjcmParser.function_brackets_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.function_brackets_return function_brackets413 =null;


        RewriteRuleSubtreeStream stream_function_brackets=new RewriteRuleSubtreeStream(adaptor,"rule function_brackets");
        try {
            // Objcm.g:698:2: ( function_brackets -> ^( FUNCTION function_brackets ) )
            // Objcm.g:698:4: function_brackets
            {
            pushFollow(FOLLOW_function_brackets_in_function_brackets_wrapper3663);
            function_brackets413=function_brackets();

            state._fsp--;

            stream_function_brackets.add(function_brackets413.getTree());

            // AST REWRITE
            // elements: function_brackets
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 698:22: -> ^( FUNCTION function_brackets )
            {
                // Objcm.g:698:25: ^( FUNCTION function_brackets )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FUNCTION, "FUNCTION")
                , root_1);

                adaptor.addChild(root_1, stream_function_brackets.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "function_brackets_wrapper"


    public static class function_brackets_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "function_brackets"
    // Objcm.g:700:1: function_brackets : L_BR ( classical_expr_wrp ( COMMA classical_expr_wrp )* )? R_BR ;
    public final ObjcmParser.function_brackets_return function_brackets() throws RecognitionException {
        ObjcmParser.function_brackets_return retval = new ObjcmParser.function_brackets_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_BR414=null;
        Token COMMA416=null;
        Token R_BR418=null;
        ObjcmParser.classical_expr_wrp_return classical_expr_wrp415 =null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp417 =null;


        Object L_BR414_tree=null;
        Object COMMA416_tree=null;
        Object R_BR418_tree=null;

        try {
            // Objcm.g:701:2: ( L_BR ( classical_expr_wrp ( COMMA classical_expr_wrp )* )? R_BR )
            // Objcm.g:701:4: L_BR ( classical_expr_wrp ( COMMA classical_expr_wrp )* )? R_BR
            {
            root_0 = (Object)adaptor.nil();


            L_BR414=(Token)match(input,L_BR,FOLLOW_L_BR_in_function_brackets3682); 
            L_BR414_tree = 
            (Object)adaptor.create(L_BR414)
            ;
            adaptor.addChild(root_0, L_BR414_tree);


            // Objcm.g:701:9: ( classical_expr_wrp ( COMMA classical_expr_wrp )* )?
            int alt113=2;
            int LA113_0 = input.LA(1);

            if ( (LA113_0==ASTERISK||LA113_0==ID||LA113_0==L_AND||LA113_0==L_BR||LA113_0==L_KBR||LA113_0==L_MINUS||LA113_0==L_MINUS_MINUS||LA113_0==L_NOT||LA113_0==L_PLUS||LA113_0==L_PLUS_PLUS||LA113_0==L_TILDA||LA113_0==NUMBER||LA113_0==SIZEOF||(LA113_0 >= STRING_LITERAL && LA113_0 <= STRING_LITERAL3)||LA113_0==154||LA113_0==161||LA113_0==165||LA113_0==176||LA113_0==178||LA113_0==183) ) {
                alt113=1;
            }
            switch (alt113) {
                case 1 :
                    // Objcm.g:701:10: classical_expr_wrp ( COMMA classical_expr_wrp )*
                    {
                    pushFollow(FOLLOW_classical_expr_wrp_in_function_brackets3685);
                    classical_expr_wrp415=classical_expr_wrp();

                    state._fsp--;

                    adaptor.addChild(root_0, classical_expr_wrp415.getTree());

                    // Objcm.g:701:29: ( COMMA classical_expr_wrp )*
                    loop112:
                    do {
                        int alt112=2;
                        int LA112_0 = input.LA(1);

                        if ( (LA112_0==COMMA) ) {
                            alt112=1;
                        }


                        switch (alt112) {
                    	case 1 :
                    	    // Objcm.g:701:30: COMMA classical_expr_wrp
                    	    {
                    	    COMMA416=(Token)match(input,COMMA,FOLLOW_COMMA_in_function_brackets3688); 
                    	    COMMA416_tree = 
                    	    (Object)adaptor.create(COMMA416)
                    	    ;
                    	    adaptor.addChild(root_0, COMMA416_tree);


                    	    pushFollow(FOLLOW_classical_expr_wrp_in_function_brackets3690);
                    	    classical_expr_wrp417=classical_expr_wrp();

                    	    state._fsp--;

                    	    adaptor.addChild(root_0, classical_expr_wrp417.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop112;
                        }
                    } while (true);


                    }
                    break;

            }


            R_BR418=(Token)match(input,R_BR,FOLLOW_R_BR_in_function_brackets3696); 
            R_BR418_tree = 
            (Object)adaptor.create(R_BR418)
            ;
            adaptor.addChild(root_0, R_BR418_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "function_brackets"


    public static class index_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "index"
    // Objcm.g:703:1: index : L_KBR ( classical_expr_wrp )? R_KBR ;
    public final ObjcmParser.index_return index() throws RecognitionException {
        ObjcmParser.index_return retval = new ObjcmParser.index_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_KBR419=null;
        Token R_KBR421=null;
        ObjcmParser.classical_expr_wrp_return classical_expr_wrp420 =null;


        Object L_KBR419_tree=null;
        Object R_KBR421_tree=null;

        try {
            // Objcm.g:703:7: ( L_KBR ( classical_expr_wrp )? R_KBR )
            // Objcm.g:703:9: L_KBR ( classical_expr_wrp )? R_KBR
            {
            root_0 = (Object)adaptor.nil();


            L_KBR419=(Token)match(input,L_KBR,FOLLOW_L_KBR_in_index3706); 
            L_KBR419_tree = 
            (Object)adaptor.create(L_KBR419)
            ;
            adaptor.addChild(root_0, L_KBR419_tree);


            // Objcm.g:703:15: ( classical_expr_wrp )?
            int alt114=2;
            int LA114_0 = input.LA(1);

            if ( (LA114_0==ASTERISK||LA114_0==ID||LA114_0==L_AND||LA114_0==L_BR||LA114_0==L_KBR||LA114_0==L_MINUS||LA114_0==L_MINUS_MINUS||LA114_0==L_NOT||LA114_0==L_PLUS||LA114_0==L_PLUS_PLUS||LA114_0==L_TILDA||LA114_0==NUMBER||LA114_0==SIZEOF||(LA114_0 >= STRING_LITERAL && LA114_0 <= STRING_LITERAL3)||LA114_0==154||LA114_0==161||LA114_0==165||LA114_0==176||LA114_0==178||LA114_0==183) ) {
                alt114=1;
            }
            switch (alt114) {
                case 1 :
                    // Objcm.g:703:15: classical_expr_wrp
                    {
                    pushFollow(FOLLOW_classical_expr_wrp_in_index3708);
                    classical_expr_wrp420=classical_expr_wrp();

                    state._fsp--;

                    adaptor.addChild(root_0, classical_expr_wrp420.getTree());

                    }
                    break;

            }


            R_KBR421=(Token)match(input,R_KBR,FOLLOW_R_KBR_in_index3711); 
            R_KBR421_tree = 
            (Object)adaptor.create(R_KBR421)
            ;
            adaptor.addChild(root_0, R_KBR421_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "index"


    public static class struct_init_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "struct_init"
    // Objcm.g:705:1: struct_init : L_BR ( STRUCT_PREFIX )? ID R_BR L_FBR struct_init_line ( COMMA struct_init_line )* R_FBR ;
    public final ObjcmParser.struct_init_return struct_init() throws RecognitionException {
        ObjcmParser.struct_init_return retval = new ObjcmParser.struct_init_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_BR422=null;
        Token STRUCT_PREFIX423=null;
        Token ID424=null;
        Token R_BR425=null;
        Token L_FBR426=null;
        Token COMMA428=null;
        Token R_FBR430=null;
        ObjcmParser.struct_init_line_return struct_init_line427 =null;

        ObjcmParser.struct_init_line_return struct_init_line429 =null;


        Object L_BR422_tree=null;
        Object STRUCT_PREFIX423_tree=null;
        Object ID424_tree=null;
        Object R_BR425_tree=null;
        Object L_FBR426_tree=null;
        Object COMMA428_tree=null;
        Object R_FBR430_tree=null;

        try {
            // Objcm.g:706:2: ( L_BR ( STRUCT_PREFIX )? ID R_BR L_FBR struct_init_line ( COMMA struct_init_line )* R_FBR )
            // Objcm.g:706:4: L_BR ( STRUCT_PREFIX )? ID R_BR L_FBR struct_init_line ( COMMA struct_init_line )* R_FBR
            {
            root_0 = (Object)adaptor.nil();


            L_BR422=(Token)match(input,L_BR,FOLLOW_L_BR_in_struct_init3721); 
            L_BR422_tree = 
            (Object)adaptor.create(L_BR422)
            ;
            adaptor.addChild(root_0, L_BR422_tree);


            // Objcm.g:706:10: ( STRUCT_PREFIX )?
            int alt115=2;
            int LA115_0 = input.LA(1);

            if ( (LA115_0==STRUCT_PREFIX) ) {
                alt115=1;
            }
            switch (alt115) {
                case 1 :
                    // Objcm.g:706:10: STRUCT_PREFIX
                    {
                    STRUCT_PREFIX423=(Token)match(input,STRUCT_PREFIX,FOLLOW_STRUCT_PREFIX_in_struct_init3724); 
                    STRUCT_PREFIX423_tree = 
                    (Object)adaptor.create(STRUCT_PREFIX423)
                    ;
                    adaptor.addChild(root_0, STRUCT_PREFIX423_tree);


                    }
                    break;

            }


            ID424=(Token)match(input,ID,FOLLOW_ID_in_struct_init3727); 
            ID424_tree = 
            (Object)adaptor.create(ID424)
            ;
            adaptor.addChild(root_0, ID424_tree);


            R_BR425=(Token)match(input,R_BR,FOLLOW_R_BR_in_struct_init3730); 
            R_BR425_tree = 
            (Object)adaptor.create(R_BR425)
            ;
            adaptor.addChild(root_0, R_BR425_tree);


            L_FBR426=(Token)match(input,L_FBR,FOLLOW_L_FBR_in_struct_init3733); 
            L_FBR426_tree = 
            (Object)adaptor.create(L_FBR426)
            ;
            adaptor.addChild(root_0, L_FBR426_tree);


            pushFollow(FOLLOW_struct_init_line_in_struct_init3739);
            struct_init_line427=struct_init_line();

            state._fsp--;

            adaptor.addChild(root_0, struct_init_line427.getTree());

            // Objcm.g:707:21: ( COMMA struct_init_line )*
            loop116:
            do {
                int alt116=2;
                int LA116_0 = input.LA(1);

                if ( (LA116_0==COMMA) ) {
                    alt116=1;
                }


                switch (alt116) {
            	case 1 :
            	    // Objcm.g:707:22: COMMA struct_init_line
            	    {
            	    COMMA428=(Token)match(input,COMMA,FOLLOW_COMMA_in_struct_init3742); 
            	    COMMA428_tree = 
            	    (Object)adaptor.create(COMMA428)
            	    ;
            	    adaptor.addChild(root_0, COMMA428_tree);


            	    pushFollow(FOLLOW_struct_init_line_in_struct_init3745);
            	    struct_init_line429=struct_init_line();

            	    state._fsp--;

            	    adaptor.addChild(root_0, struct_init_line429.getTree());

            	    }
            	    break;

            	default :
            	    break loop116;
                }
            } while (true);


            R_FBR430=(Token)match(input,R_FBR,FOLLOW_R_FBR_in_struct_init3751); 
            R_FBR430_tree = 
            (Object)adaptor.create(R_FBR430)
            ;
            adaptor.addChild(root_0, R_FBR430_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "struct_init"


    public static class struct_init2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "struct_init2"
    // Objcm.g:711:1: struct_init2 : L_FBR struct_init_line ( COMMA struct_init_line )* R_FBR ;
    public final ObjcmParser.struct_init2_return struct_init2() throws RecognitionException {
        ObjcmParser.struct_init2_return retval = new ObjcmParser.struct_init2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_FBR431=null;
        Token COMMA433=null;
        Token R_FBR435=null;
        ObjcmParser.struct_init_line_return struct_init_line432 =null;

        ObjcmParser.struct_init_line_return struct_init_line434 =null;


        Object L_FBR431_tree=null;
        Object COMMA433_tree=null;
        Object R_FBR435_tree=null;

        try {
            // Objcm.g:712:2: ( L_FBR struct_init_line ( COMMA struct_init_line )* R_FBR )
            // Objcm.g:712:4: L_FBR struct_init_line ( COMMA struct_init_line )* R_FBR
            {
            root_0 = (Object)adaptor.nil();


            L_FBR431=(Token)match(input,L_FBR,FOLLOW_L_FBR_in_struct_init23765); 
            L_FBR431_tree = 
            (Object)adaptor.create(L_FBR431)
            ;
            adaptor.addChild(root_0, L_FBR431_tree);


            pushFollow(FOLLOW_struct_init_line_in_struct_init23771);
            struct_init_line432=struct_init_line();

            state._fsp--;

            adaptor.addChild(root_0, struct_init_line432.getTree());

            // Objcm.g:713:21: ( COMMA struct_init_line )*
            loop117:
            do {
                int alt117=2;
                int LA117_0 = input.LA(1);

                if ( (LA117_0==COMMA) ) {
                    alt117=1;
                }


                switch (alt117) {
            	case 1 :
            	    // Objcm.g:713:22: COMMA struct_init_line
            	    {
            	    COMMA433=(Token)match(input,COMMA,FOLLOW_COMMA_in_struct_init23774); 
            	    COMMA433_tree = 
            	    (Object)adaptor.create(COMMA433)
            	    ;
            	    adaptor.addChild(root_0, COMMA433_tree);


            	    pushFollow(FOLLOW_struct_init_line_in_struct_init23777);
            	    struct_init_line434=struct_init_line();

            	    state._fsp--;

            	    adaptor.addChild(root_0, struct_init_line434.getTree());

            	    }
            	    break;

            	default :
            	    break loop117;
                }
            } while (true);


            R_FBR435=(Token)match(input,R_FBR,FOLLOW_R_FBR_in_struct_init23783); 
            R_FBR435_tree = 
            (Object)adaptor.create(R_FBR435)
            ;
            adaptor.addChild(root_0, R_FBR435_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "struct_init2"


    public static class struct_init_line_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "struct_init_line"
    // Objcm.g:717:1: struct_init_line : ( struct_init_var | struct_init_expression );
    public final ObjcmParser.struct_init_line_return struct_init_line() throws RecognitionException {
        ObjcmParser.struct_init_line_return retval = new ObjcmParser.struct_init_line_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.struct_init_var_return struct_init_var436 =null;

        ObjcmParser.struct_init_expression_return struct_init_expression437 =null;



        try {
            // Objcm.g:718:2: ( struct_init_var | struct_init_expression )
            int alt118=2;
            int LA118_0 = input.LA(1);

            if ( (LA118_0==DOT) ) {
                alt118=1;
            }
            else if ( (LA118_0==ASTERISK||LA118_0==ID||LA118_0==L_AND||LA118_0==L_BR||LA118_0==L_KBR||LA118_0==L_MINUS||LA118_0==L_MINUS_MINUS||LA118_0==L_NOT||LA118_0==L_PLUS||LA118_0==L_PLUS_PLUS||LA118_0==L_TILDA||LA118_0==NUMBER||LA118_0==SIZEOF||(LA118_0 >= STRING_LITERAL && LA118_0 <= STRING_LITERAL3)||LA118_0==154||LA118_0==161||LA118_0==165||LA118_0==176||LA118_0==178||LA118_0==183) ) {
                alt118=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 118, 0, input);

                throw nvae;

            }
            switch (alt118) {
                case 1 :
                    // Objcm.g:718:4: struct_init_var
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_struct_init_var_in_struct_init_line3796);
                    struct_init_var436=struct_init_var();

                    state._fsp--;

                    adaptor.addChild(root_0, struct_init_var436.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:719:4: struct_init_expression
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_struct_init_expression_in_struct_init_line3801);
                    struct_init_expression437=struct_init_expression();

                    state._fsp--;

                    adaptor.addChild(root_0, struct_init_expression437.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "struct_init_line"


    public static class struct_init_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "struct_init_expression"
    // Objcm.g:722:1: struct_init_expression : classical_expr_wrp ;
    public final ObjcmParser.struct_init_expression_return struct_init_expression() throws RecognitionException {
        ObjcmParser.struct_init_expression_return retval = new ObjcmParser.struct_init_expression_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp438 =null;



        try {
            // Objcm.g:723:2: ( classical_expr_wrp )
            // Objcm.g:723:4: classical_expr_wrp
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_classical_expr_wrp_in_struct_init_expression3814);
            classical_expr_wrp438=classical_expr_wrp();

            state._fsp--;

            adaptor.addChild(root_0, classical_expr_wrp438.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "struct_init_expression"


    public static class struct_init_method_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "struct_init_method"
    // Objcm.g:725:1: struct_init_method : classical_expr_wrp ;
    public final ObjcmParser.struct_init_method_return struct_init_method() throws RecognitionException {
        ObjcmParser.struct_init_method_return retval = new ObjcmParser.struct_init_method_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp439 =null;



        try {
            // Objcm.g:726:2: ( classical_expr_wrp )
            // Objcm.g:726:4: classical_expr_wrp
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_classical_expr_wrp_in_struct_init_method3825);
            classical_expr_wrp439=classical_expr_wrp();

            state._fsp--;

            adaptor.addChild(root_0, classical_expr_wrp439.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "struct_init_method"


    public static class struct_init_var_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "struct_init_var"
    // Objcm.g:728:1: struct_init_var : ( DOT id_part )+ L_EQ ( in_q_brackets | expression ) ;
    public final ObjcmParser.struct_init_var_return struct_init_var() throws RecognitionException {
        ObjcmParser.struct_init_var_return retval = new ObjcmParser.struct_init_var_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token DOT440=null;
        Token L_EQ442=null;
        ObjcmParser.id_part_return id_part441 =null;

        ObjcmParser.in_q_brackets_return in_q_brackets443 =null;

        ObjcmParser.expression_return expression444 =null;


        Object DOT440_tree=null;
        Object L_EQ442_tree=null;

        try {
            // Objcm.g:729:2: ( ( DOT id_part )+ L_EQ ( in_q_brackets | expression ) )
            // Objcm.g:729:4: ( DOT id_part )+ L_EQ ( in_q_brackets | expression )
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:729:4: ( DOT id_part )+
            int cnt119=0;
            loop119:
            do {
                int alt119=2;
                int LA119_0 = input.LA(1);

                if ( (LA119_0==DOT) ) {
                    alt119=1;
                }


                switch (alt119) {
            	case 1 :
            	    // Objcm.g:729:5: DOT id_part
            	    {
            	    DOT440=(Token)match(input,DOT,FOLLOW_DOT_in_struct_init_var3837); 
            	    DOT440_tree = 
            	    (Object)adaptor.create(DOT440)
            	    ;
            	    adaptor.addChild(root_0, DOT440_tree);


            	    pushFollow(FOLLOW_id_part_in_struct_init_var3839);
            	    id_part441=id_part();

            	    state._fsp--;

            	    adaptor.addChild(root_0, id_part441.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt119 >= 1 ) break loop119;
                        EarlyExitException eee =
                            new EarlyExitException(119, input);
                        throw eee;
                }
                cnt119++;
            } while (true);


            L_EQ442=(Token)match(input,L_EQ,FOLLOW_L_EQ_in_struct_init_var3844); 
            L_EQ442_tree = 
            (Object)adaptor.create(L_EQ442)
            ;
            adaptor.addChild(root_0, L_EQ442_tree);


            // Objcm.g:729:26: ( in_q_brackets | expression )
            int alt120=2;
            int LA120_0 = input.LA(1);

            if ( (LA120_0==L_FBR) ) {
                alt120=1;
            }
            else if ( (LA120_0==ASTERISK||LA120_0==ID||LA120_0==L_AND||LA120_0==L_BR||LA120_0==L_KBR||LA120_0==L_MINUS||LA120_0==L_MINUS_MINUS||LA120_0==L_NOT||LA120_0==L_PLUS||LA120_0==L_PLUS_PLUS||LA120_0==L_TILDA||LA120_0==NUMBER||LA120_0==SIZEOF||(LA120_0 >= STRING_LITERAL && LA120_0 <= STRING_LITERAL3)||LA120_0==154||LA120_0==161||LA120_0==165||LA120_0==176||LA120_0==178||LA120_0==183) ) {
                alt120=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 120, 0, input);

                throw nvae;

            }
            switch (alt120) {
                case 1 :
                    // Objcm.g:729:27: in_q_brackets
                    {
                    pushFollow(FOLLOW_in_q_brackets_in_struct_init_var3848);
                    in_q_brackets443=in_q_brackets();

                    state._fsp--;

                    adaptor.addChild(root_0, in_q_brackets443.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:729:43: expression
                    {
                    pushFollow(FOLLOW_expression_in_struct_init_var3852);
                    expression444=expression();

                    state._fsp--;

                    adaptor.addChild(root_0, expression444.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "struct_init_var"


    public static class a_started_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "a_started"
    // Objcm.g:731:1: a_started : ( a_selector_wrapper | a_encode_wrapper );
    public final ObjcmParser.a_started_return a_started() throws RecognitionException {
        ObjcmParser.a_started_return retval = new ObjcmParser.a_started_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.a_selector_wrapper_return a_selector_wrapper445 =null;

        ObjcmParser.a_encode_wrapper_return a_encode_wrapper446 =null;



        try {
            // Objcm.g:732:2: ( a_selector_wrapper | a_encode_wrapper )
            int alt121=2;
            int LA121_0 = input.LA(1);

            if ( (LA121_0==161) ) {
                alt121=1;
            }
            else if ( (LA121_0==154) ) {
                alt121=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 121, 0, input);

                throw nvae;

            }
            switch (alt121) {
                case 1 :
                    // Objcm.g:732:4: a_selector_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_a_selector_wrapper_in_a_started3864);
                    a_selector_wrapper445=a_selector_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, a_selector_wrapper445.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:733:4: a_encode_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_a_encode_wrapper_in_a_started3869);
                    a_encode_wrapper446=a_encode_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, a_encode_wrapper446.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "a_started"


    public static class typeof_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typeof"
    // Objcm.g:736:1: typeof : '__typeof__' L_BR ID R_BR ;
    public final ObjcmParser.typeof_return typeof() throws RecognitionException {
        ObjcmParser.typeof_return retval = new ObjcmParser.typeof_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal447=null;
        Token L_BR448=null;
        Token ID449=null;
        Token R_BR450=null;

        Object string_literal447_tree=null;
        Object L_BR448_tree=null;
        Object ID449_tree=null;
        Object R_BR450_tree=null;

        try {
            // Objcm.g:736:8: ( '__typeof__' L_BR ID R_BR )
            // Objcm.g:736:10: '__typeof__' L_BR ID R_BR
            {
            root_0 = (Object)adaptor.nil();


            string_literal447=(Token)match(input,167,FOLLOW_167_in_typeof3879); 
            string_literal447_tree = 
            (Object)adaptor.create(string_literal447)
            ;
            adaptor.addChild(root_0, string_literal447_tree);


            L_BR448=(Token)match(input,L_BR,FOLLOW_L_BR_in_typeof3882); 
            L_BR448_tree = 
            (Object)adaptor.create(L_BR448)
            ;
            adaptor.addChild(root_0, L_BR448_tree);


            ID449=(Token)match(input,ID,FOLLOW_ID_in_typeof3885); 
            ID449_tree = 
            (Object)adaptor.create(ID449)
            ;
            adaptor.addChild(root_0, ID449_tree);


            R_BR450=(Token)match(input,R_BR,FOLLOW_R_BR_in_typeof3888); 
            R_BR450_tree = 
            (Object)adaptor.create(R_BR450)
            ;
            adaptor.addChild(root_0, R_BR450_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typeof"


    public static class a_selector_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "a_selector_wrapper"
    // Objcm.g:738:1: a_selector_wrapper : a_selector -> ^( SELECTOR a_selector ) ;
    public final ObjcmParser.a_selector_wrapper_return a_selector_wrapper() throws RecognitionException {
        ObjcmParser.a_selector_wrapper_return retval = new ObjcmParser.a_selector_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.a_selector_return a_selector451 =null;


        RewriteRuleSubtreeStream stream_a_selector=new RewriteRuleSubtreeStream(adaptor,"rule a_selector");
        try {
            // Objcm.g:739:2: ( a_selector -> ^( SELECTOR a_selector ) )
            // Objcm.g:739:4: a_selector
            {
            pushFollow(FOLLOW_a_selector_in_a_selector_wrapper3899);
            a_selector451=a_selector();

            state._fsp--;

            stream_a_selector.add(a_selector451.getTree());

            // AST REWRITE
            // elements: a_selector
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 739:15: -> ^( SELECTOR a_selector )
            {
                // Objcm.g:739:18: ^( SELECTOR a_selector )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SELECTOR, "SELECTOR")
                , root_1);

                adaptor.addChild(root_1, stream_a_selector.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "a_selector_wrapper"


    public static class a_selector_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "a_selector"
    // Objcm.g:741:1: a_selector : '@selector' L_BR a_selector_value_wrapper R_BR ;
    public final ObjcmParser.a_selector_return a_selector() throws RecognitionException {
        ObjcmParser.a_selector_return retval = new ObjcmParser.a_selector_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal452=null;
        Token L_BR453=null;
        Token R_BR455=null;
        ObjcmParser.a_selector_value_wrapper_return a_selector_value_wrapper454 =null;


        Object string_literal452_tree=null;
        Object L_BR453_tree=null;
        Object R_BR455_tree=null;

        try {
            // Objcm.g:741:11: ( '@selector' L_BR a_selector_value_wrapper R_BR )
            // Objcm.g:741:13: '@selector' L_BR a_selector_value_wrapper R_BR
            {
            root_0 = (Object)adaptor.nil();


            string_literal452=(Token)match(input,161,FOLLOW_161_in_a_selector3916); 
            string_literal452_tree = 
            (Object)adaptor.create(string_literal452)
            ;
            adaptor.addChild(root_0, string_literal452_tree);


            L_BR453=(Token)match(input,L_BR,FOLLOW_L_BR_in_a_selector3918); 
            L_BR453_tree = 
            (Object)adaptor.create(L_BR453)
            ;
            adaptor.addChild(root_0, L_BR453_tree);


            pushFollow(FOLLOW_a_selector_value_wrapper_in_a_selector3920);
            a_selector_value_wrapper454=a_selector_value_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, a_selector_value_wrapper454.getTree());

            R_BR455=(Token)match(input,R_BR,FOLLOW_R_BR_in_a_selector3922); 
            R_BR455_tree = 
            (Object)adaptor.create(R_BR455)
            ;
            adaptor.addChild(root_0, R_BR455_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "a_selector"


    public static class a_encode_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "a_encode_wrapper"
    // Objcm.g:743:1: a_encode_wrapper : a_encode -> ^( ENCODE a_encode ) ;
    public final ObjcmParser.a_encode_wrapper_return a_encode_wrapper() throws RecognitionException {
        ObjcmParser.a_encode_wrapper_return retval = new ObjcmParser.a_encode_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.a_encode_return a_encode456 =null;


        RewriteRuleSubtreeStream stream_a_encode=new RewriteRuleSubtreeStream(adaptor,"rule a_encode");
        try {
            // Objcm.g:744:2: ( a_encode -> ^( ENCODE a_encode ) )
            // Objcm.g:744:4: a_encode
            {
            pushFollow(FOLLOW_a_encode_in_a_encode_wrapper3932);
            a_encode456=a_encode();

            state._fsp--;

            stream_a_encode.add(a_encode456.getTree());

            // AST REWRITE
            // elements: a_encode
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 744:13: -> ^( ENCODE a_encode )
            {
                // Objcm.g:744:16: ^( ENCODE a_encode )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(ENCODE, "ENCODE")
                , root_1);

                adaptor.addChild(root_1, stream_a_encode.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "a_encode_wrapper"


    public static class a_selector_value_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "a_selector_value_wrapper"
    // Objcm.g:746:1: a_selector_value_wrapper : a_selector_value -> ^( SELECTOR_VALUE a_selector_value ) ;
    public final ObjcmParser.a_selector_value_wrapper_return a_selector_value_wrapper() throws RecognitionException {
        ObjcmParser.a_selector_value_wrapper_return retval = new ObjcmParser.a_selector_value_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.a_selector_value_return a_selector_value457 =null;


        RewriteRuleSubtreeStream stream_a_selector_value=new RewriteRuleSubtreeStream(adaptor,"rule a_selector_value");
        try {
            // Objcm.g:747:2: ( a_selector_value -> ^( SELECTOR_VALUE a_selector_value ) )
            // Objcm.g:747:4: a_selector_value
            {
            pushFollow(FOLLOW_a_selector_value_in_a_selector_value_wrapper3949);
            a_selector_value457=a_selector_value();

            state._fsp--;

            stream_a_selector_value.add(a_selector_value457.getTree());

            // AST REWRITE
            // elements: a_selector_value
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 747:21: -> ^( SELECTOR_VALUE a_selector_value )
            {
                // Objcm.g:747:24: ^( SELECTOR_VALUE a_selector_value )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SELECTOR_VALUE, "SELECTOR_VALUE")
                , root_1);

                adaptor.addChild(root_1, stream_a_selector_value.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "a_selector_value_wrapper"


    public static class a_selector_value_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "a_selector_value"
    // Objcm.g:749:1: a_selector_value : ID ( COLON ( ID COLON )* )? ;
    public final ObjcmParser.a_selector_value_return a_selector_value() throws RecognitionException {
        ObjcmParser.a_selector_value_return retval = new ObjcmParser.a_selector_value_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID458=null;
        Token COLON459=null;
        Token ID460=null;
        Token COLON461=null;

        Object ID458_tree=null;
        Object COLON459_tree=null;
        Object ID460_tree=null;
        Object COLON461_tree=null;

        try {
            // Objcm.g:750:2: ( ID ( COLON ( ID COLON )* )? )
            // Objcm.g:750:5: ID ( COLON ( ID COLON )* )?
            {
            root_0 = (Object)adaptor.nil();


            ID458=(Token)match(input,ID,FOLLOW_ID_in_a_selector_value3968); 
            ID458_tree = 
            (Object)adaptor.create(ID458)
            ;
            adaptor.addChild(root_0, ID458_tree);


            // Objcm.g:750:9: ( COLON ( ID COLON )* )?
            int alt123=2;
            int LA123_0 = input.LA(1);

            if ( (LA123_0==COLON) ) {
                alt123=1;
            }
            switch (alt123) {
                case 1 :
                    // Objcm.g:750:10: COLON ( ID COLON )*
                    {
                    COLON459=(Token)match(input,COLON,FOLLOW_COLON_in_a_selector_value3972); 
                    COLON459_tree = 
                    (Object)adaptor.create(COLON459)
                    ;
                    adaptor.addChild(root_0, COLON459_tree);


                    // Objcm.g:750:17: ( ID COLON )*
                    loop122:
                    do {
                        int alt122=2;
                        int LA122_0 = input.LA(1);

                        if ( (LA122_0==ID) ) {
                            alt122=1;
                        }


                        switch (alt122) {
                    	case 1 :
                    	    // Objcm.g:750:18: ID COLON
                    	    {
                    	    ID460=(Token)match(input,ID,FOLLOW_ID_in_a_selector_value3976); 
                    	    ID460_tree = 
                    	    (Object)adaptor.create(ID460)
                    	    ;
                    	    adaptor.addChild(root_0, ID460_tree);


                    	    COLON461=(Token)match(input,COLON,FOLLOW_COLON_in_a_selector_value3979); 
                    	    COLON461_tree = 
                    	    (Object)adaptor.create(COLON461)
                    	    ;
                    	    adaptor.addChild(root_0, COLON461_tree);


                    	    }
                    	    break;

                    	default :
                    	    break loop122;
                        }
                    } while (true);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "a_selector_value"


    public static class a_encode_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "a_encode"
    // Objcm.g:752:1: a_encode : '@encode' L_BR (~ ( R_BR ) )+ R_BR ;
    public final ObjcmParser.a_encode_return a_encode() throws RecognitionException {
        ObjcmParser.a_encode_return retval = new ObjcmParser.a_encode_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal462=null;
        Token L_BR463=null;
        Token set464=null;
        Token R_BR465=null;

        Object string_literal462_tree=null;
        Object L_BR463_tree=null;
        Object set464_tree=null;
        Object R_BR465_tree=null;

        try {
            // Objcm.g:752:9: ( '@encode' L_BR (~ ( R_BR ) )+ R_BR )
            // Objcm.g:752:11: '@encode' L_BR (~ ( R_BR ) )+ R_BR
            {
            root_0 = (Object)adaptor.nil();


            string_literal462=(Token)match(input,154,FOLLOW_154_in_a_encode3990); 
            string_literal462_tree = 
            (Object)adaptor.create(string_literal462)
            ;
            adaptor.addChild(root_0, string_literal462_tree);


            L_BR463=(Token)match(input,L_BR,FOLLOW_L_BR_in_a_encode3992); 
            L_BR463_tree = 
            (Object)adaptor.create(L_BR463)
            ;
            adaptor.addChild(root_0, L_BR463_tree);


            // Objcm.g:752:26: (~ ( R_BR ) )+
            int cnt124=0;
            loop124:
            do {
                int alt124=2;
                int LA124_0 = input.LA(1);

                if ( ((LA124_0 >= ASTERISK && LA124_0 <= RETURN_STMT)||(LA124_0 >= R_FBR && LA124_0 <= 184)) ) {
                    alt124=1;
                }


                switch (alt124) {
            	case 1 :
            	    // Objcm.g:
            	    {
            	    set464=(Token)input.LT(1);

            	    if ( (input.LA(1) >= ASTERISK && input.LA(1) <= RETURN_STMT)||(input.LA(1) >= R_FBR && input.LA(1) <= 184) ) {
            	        input.consume();
            	        adaptor.addChild(root_0, 
            	        (Object)adaptor.create(set464)
            	        );
            	        state.errorRecovery=false;
            	    }
            	    else {
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt124 >= 1 ) break loop124;
                        EarlyExitException eee =
                            new EarlyExitException(124, input);
                        throw eee;
                }
                cnt124++;
            } while (true);


            R_BR465=(Token)match(input,R_BR,FOLLOW_R_BR_in_a_encode4000); 
            R_BR465_tree = 
            (Object)adaptor.create(R_BR465)
            ;
            adaptor.addChild(root_0, R_BR465_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "a_encode"


    public static class const_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "const_expr"
    // Objcm.g:754:1: const_expr : ( NUMBER | STRING_LITERAL | STRING_LITERAL2 | STRING_LITERAL3 | null_stmt );
    public final ObjcmParser.const_expr_return const_expr() throws RecognitionException {
        ObjcmParser.const_expr_return retval = new ObjcmParser.const_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token NUMBER466=null;
        Token STRING_LITERAL467=null;
        Token STRING_LITERAL2468=null;
        Token STRING_LITERAL3469=null;
        ObjcmParser.null_stmt_return null_stmt470 =null;


        Object NUMBER466_tree=null;
        Object STRING_LITERAL467_tree=null;
        Object STRING_LITERAL2468_tree=null;
        Object STRING_LITERAL3469_tree=null;

        try {
            // Objcm.g:755:2: ( NUMBER | STRING_LITERAL | STRING_LITERAL2 | STRING_LITERAL3 | null_stmt )
            int alt125=5;
            switch ( input.LA(1) ) {
            case NUMBER:
                {
                alt125=1;
                }
                break;
            case STRING_LITERAL:
                {
                alt125=2;
                }
                break;
            case STRING_LITERAL2:
                {
                alt125=3;
                }
                break;
            case STRING_LITERAL3:
                {
                alt125=4;
                }
                break;
            case 165:
            case 178:
                {
                alt125=5;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 125, 0, input);

                throw nvae;

            }

            switch (alt125) {
                case 1 :
                    // Objcm.g:755:5: NUMBER
                    {
                    root_0 = (Object)adaptor.nil();


                    NUMBER466=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_const_expr4011); 
                    NUMBER466_tree = 
                    (Object)adaptor.create(NUMBER466)
                    ;
                    adaptor.addChild(root_0, NUMBER466_tree);


                    }
                    break;
                case 2 :
                    // Objcm.g:755:14: STRING_LITERAL
                    {
                    root_0 = (Object)adaptor.nil();


                    STRING_LITERAL467=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_const_expr4015); 
                    STRING_LITERAL467_tree = 
                    (Object)adaptor.create(STRING_LITERAL467)
                    ;
                    adaptor.addChild(root_0, STRING_LITERAL467_tree);


                    }
                    break;
                case 3 :
                    // Objcm.g:755:31: STRING_LITERAL2
                    {
                    root_0 = (Object)adaptor.nil();


                    STRING_LITERAL2468=(Token)match(input,STRING_LITERAL2,FOLLOW_STRING_LITERAL2_in_const_expr4019); 
                    STRING_LITERAL2468_tree = 
                    (Object)adaptor.create(STRING_LITERAL2468)
                    ;
                    adaptor.addChild(root_0, STRING_LITERAL2468_tree);


                    }
                    break;
                case 4 :
                    // Objcm.g:755:49: STRING_LITERAL3
                    {
                    root_0 = (Object)adaptor.nil();


                    STRING_LITERAL3469=(Token)match(input,STRING_LITERAL3,FOLLOW_STRING_LITERAL3_in_const_expr4023); 
                    STRING_LITERAL3469_tree = 
                    (Object)adaptor.create(STRING_LITERAL3469)
                    ;
                    adaptor.addChild(root_0, STRING_LITERAL3469_tree);


                    }
                    break;
                case 5 :
                    // Objcm.g:755:67: null_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_null_stmt_in_const_expr4027);
                    null_stmt470=null_stmt();

                    state._fsp--;

                    adaptor.addChild(root_0, null_stmt470.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "const_expr"


    public static class string_literal3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "string_literal3"
    // Objcm.g:757:1: string_literal3 : STRING_LITERAL3 ;
    public final ObjcmParser.string_literal3_return string_literal3() throws RecognitionException {
        ObjcmParser.string_literal3_return retval = new ObjcmParser.string_literal3_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STRING_LITERAL3471=null;

        Object STRING_LITERAL3471_tree=null;

        try {
            // Objcm.g:758:2: ( STRING_LITERAL3 )
            // Objcm.g:758:4: STRING_LITERAL3
            {
            root_0 = (Object)adaptor.nil();


            STRING_LITERAL3471=(Token)match(input,STRING_LITERAL3,FOLLOW_STRING_LITERAL3_in_string_literal34037); 
            STRING_LITERAL3471_tree = 
            (Object)adaptor.create(STRING_LITERAL3471)
            ;
            adaptor.addChild(root_0, STRING_LITERAL3471_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "string_literal3"


    public static class method_brackets_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_brackets"
    // Objcm.g:760:1: method_brackets : L_BR ( expression ( COMMA classical_expr_wrp )* )? R_BR ;
    public final ObjcmParser.method_brackets_return method_brackets() throws RecognitionException {
        ObjcmParser.method_brackets_return retval = new ObjcmParser.method_brackets_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_BR472=null;
        Token COMMA474=null;
        Token R_BR476=null;
        ObjcmParser.expression_return expression473 =null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp475 =null;


        Object L_BR472_tree=null;
        Object COMMA474_tree=null;
        Object R_BR476_tree=null;

        try {
            // Objcm.g:761:2: ( L_BR ( expression ( COMMA classical_expr_wrp )* )? R_BR )
            // Objcm.g:761:4: L_BR ( expression ( COMMA classical_expr_wrp )* )? R_BR
            {
            root_0 = (Object)adaptor.nil();


            L_BR472=(Token)match(input,L_BR,FOLLOW_L_BR_in_method_brackets4047); 
            L_BR472_tree = 
            (Object)adaptor.create(L_BR472)
            ;
            adaptor.addChild(root_0, L_BR472_tree);


            // Objcm.g:761:10: ( expression ( COMMA classical_expr_wrp )* )?
            int alt127=2;
            int LA127_0 = input.LA(1);

            if ( (LA127_0==ASTERISK||LA127_0==ID||LA127_0==L_AND||LA127_0==L_BR||LA127_0==L_KBR||LA127_0==L_MINUS||LA127_0==L_MINUS_MINUS||LA127_0==L_NOT||LA127_0==L_PLUS||LA127_0==L_PLUS_PLUS||LA127_0==L_TILDA||LA127_0==NUMBER||LA127_0==SIZEOF||(LA127_0 >= STRING_LITERAL && LA127_0 <= STRING_LITERAL3)||LA127_0==154||LA127_0==161||LA127_0==165||LA127_0==176||LA127_0==178||LA127_0==183) ) {
                alt127=1;
            }
            switch (alt127) {
                case 1 :
                    // Objcm.g:761:11: expression ( COMMA classical_expr_wrp )*
                    {
                    pushFollow(FOLLOW_expression_in_method_brackets4051);
                    expression473=expression();

                    state._fsp--;

                    adaptor.addChild(root_0, expression473.getTree());

                    // Objcm.g:761:23: ( COMMA classical_expr_wrp )*
                    loop126:
                    do {
                        int alt126=2;
                        int LA126_0 = input.LA(1);

                        if ( (LA126_0==COMMA) ) {
                            alt126=1;
                        }


                        switch (alt126) {
                    	case 1 :
                    	    // Objcm.g:761:24: COMMA classical_expr_wrp
                    	    {
                    	    COMMA474=(Token)match(input,COMMA,FOLLOW_COMMA_in_method_brackets4055); 
                    	    COMMA474_tree = 
                    	    (Object)adaptor.create(COMMA474)
                    	    ;
                    	    adaptor.addChild(root_0, COMMA474_tree);


                    	    pushFollow(FOLLOW_classical_expr_wrp_in_method_brackets4058);
                    	    classical_expr_wrp475=classical_expr_wrp();

                    	    state._fsp--;

                    	    adaptor.addChild(root_0, classical_expr_wrp475.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop126;
                        }
                    } while (true);


                    }
                    break;

            }


            R_BR476=(Token)match(input,R_BR,FOLLOW_R_BR_in_method_brackets4064); 
            R_BR476_tree = 
            (Object)adaptor.create(R_BR476)
            ;
            adaptor.addChild(root_0, R_BR476_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_brackets"


    public static class func_pointer1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "func_pointer1"
    // Objcm.g:763:1: func_pointer1 : type_internal ( ASTERISK )? L_BR ( ASTERISK )? type_internal R_BR ( func_pointer_params )? ;
    public final ObjcmParser.func_pointer1_return func_pointer1() throws RecognitionException {
        ObjcmParser.func_pointer1_return retval = new ObjcmParser.func_pointer1_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ASTERISK478=null;
        Token L_BR479=null;
        Token ASTERISK480=null;
        Token R_BR482=null;
        ObjcmParser.type_internal_return type_internal477 =null;

        ObjcmParser.type_internal_return type_internal481 =null;

        ObjcmParser.func_pointer_params_return func_pointer_params483 =null;


        Object ASTERISK478_tree=null;
        Object L_BR479_tree=null;
        Object ASTERISK480_tree=null;
        Object R_BR482_tree=null;

        try {
            // Objcm.g:764:2: ( type_internal ( ASTERISK )? L_BR ( ASTERISK )? type_internal R_BR ( func_pointer_params )? )
            // Objcm.g:764:4: type_internal ( ASTERISK )? L_BR ( ASTERISK )? type_internal R_BR ( func_pointer_params )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_type_internal_in_func_pointer14074);
            type_internal477=type_internal();

            state._fsp--;

            adaptor.addChild(root_0, type_internal477.getTree());

            // Objcm.g:764:19: ( ASTERISK )?
            int alt128=2;
            int LA128_0 = input.LA(1);

            if ( (LA128_0==ASTERISK) ) {
                alt128=1;
            }
            switch (alt128) {
                case 1 :
                    // Objcm.g:764:19: ASTERISK
                    {
                    ASTERISK478=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_func_pointer14077); 
                    ASTERISK478_tree = 
                    (Object)adaptor.create(ASTERISK478)
                    ;
                    adaptor.addChild(root_0, ASTERISK478_tree);


                    }
                    break;

            }


            L_BR479=(Token)match(input,L_BR,FOLLOW_L_BR_in_func_pointer14080); 
            L_BR479_tree = 
            (Object)adaptor.create(L_BR479)
            ;
            adaptor.addChild(root_0, L_BR479_tree);


            // Objcm.g:764:34: ( ASTERISK )?
            int alt129=2;
            int LA129_0 = input.LA(1);

            if ( (LA129_0==ASTERISK) ) {
                alt129=1;
            }
            switch (alt129) {
                case 1 :
                    // Objcm.g:764:34: ASTERISK
                    {
                    ASTERISK480=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_func_pointer14082); 
                    ASTERISK480_tree = 
                    (Object)adaptor.create(ASTERISK480)
                    ;
                    adaptor.addChild(root_0, ASTERISK480_tree);


                    }
                    break;

            }


            pushFollow(FOLLOW_type_internal_in_func_pointer14085);
            type_internal481=type_internal();

            state._fsp--;

            adaptor.addChild(root_0, type_internal481.getTree());

            R_BR482=(Token)match(input,R_BR,FOLLOW_R_BR_in_func_pointer14088); 
            R_BR482_tree = 
            (Object)adaptor.create(R_BR482)
            ;
            adaptor.addChild(root_0, R_BR482_tree);


            // Objcm.g:764:65: ( func_pointer_params )?
            int alt130=2;
            int LA130_0 = input.LA(1);

            if ( (LA130_0==L_BR) ) {
                alt130=1;
            }
            switch (alt130) {
                case 1 :
                    // Objcm.g:764:65: func_pointer_params
                    {
                    pushFollow(FOLLOW_func_pointer_params_in_func_pointer14091);
                    func_pointer_params483=func_pointer_params();

                    state._fsp--;

                    adaptor.addChild(root_0, func_pointer_params483.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "func_pointer1"


    public static class func_pointer2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "func_pointer2"
    // Objcm.g:767:1: func_pointer2 : L_BR type_internal L_BR ASTERISK R_BR func_pointer_params R_BR ;
    public final ObjcmParser.func_pointer2_return func_pointer2() throws RecognitionException {
        ObjcmParser.func_pointer2_return retval = new ObjcmParser.func_pointer2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_BR484=null;
        Token L_BR486=null;
        Token ASTERISK487=null;
        Token R_BR488=null;
        Token R_BR490=null;
        ObjcmParser.type_internal_return type_internal485 =null;

        ObjcmParser.func_pointer_params_return func_pointer_params489 =null;


        Object L_BR484_tree=null;
        Object L_BR486_tree=null;
        Object ASTERISK487_tree=null;
        Object R_BR488_tree=null;
        Object R_BR490_tree=null;

        try {
            // Objcm.g:768:2: ( L_BR type_internal L_BR ASTERISK R_BR func_pointer_params R_BR )
            // Objcm.g:768:4: L_BR type_internal L_BR ASTERISK R_BR func_pointer_params R_BR
            {
            root_0 = (Object)adaptor.nil();


            L_BR484=(Token)match(input,L_BR,FOLLOW_L_BR_in_func_pointer24104); 
            L_BR484_tree = 
            (Object)adaptor.create(L_BR484)
            ;
            adaptor.addChild(root_0, L_BR484_tree);


            pushFollow(FOLLOW_type_internal_in_func_pointer24107);
            type_internal485=type_internal();

            state._fsp--;

            adaptor.addChild(root_0, type_internal485.getTree());

            L_BR486=(Token)match(input,L_BR,FOLLOW_L_BR_in_func_pointer24109); 
            L_BR486_tree = 
            (Object)adaptor.create(L_BR486)
            ;
            adaptor.addChild(root_0, L_BR486_tree);


            ASTERISK487=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_func_pointer24112); 
            ASTERISK487_tree = 
            (Object)adaptor.create(ASTERISK487)
            ;
            adaptor.addChild(root_0, ASTERISK487_tree);


            R_BR488=(Token)match(input,R_BR,FOLLOW_R_BR_in_func_pointer24115); 
            R_BR488_tree = 
            (Object)adaptor.create(R_BR488)
            ;
            adaptor.addChild(root_0, R_BR488_tree);


            pushFollow(FOLLOW_func_pointer_params_in_func_pointer24118);
            func_pointer_params489=func_pointer_params();

            state._fsp--;

            adaptor.addChild(root_0, func_pointer_params489.getTree());

            R_BR490=(Token)match(input,R_BR,FOLLOW_R_BR_in_func_pointer24121); 
            R_BR490_tree = 
            (Object)adaptor.create(R_BR490)
            ;
            adaptor.addChild(root_0, R_BR490_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "func_pointer2"


    public static class func_pointer_params_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "func_pointer_params"
    // Objcm.g:771:1: func_pointer_params : L_BR ID ( ASTERISK )* ( COMMA ID ( ASTERISK )* )* R_BR ;
    public final ObjcmParser.func_pointer_params_return func_pointer_params() throws RecognitionException {
        ObjcmParser.func_pointer_params_return retval = new ObjcmParser.func_pointer_params_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_BR491=null;
        Token ID492=null;
        Token ASTERISK493=null;
        Token COMMA494=null;
        Token ID495=null;
        Token ASTERISK496=null;
        Token R_BR497=null;

        Object L_BR491_tree=null;
        Object ID492_tree=null;
        Object ASTERISK493_tree=null;
        Object COMMA494_tree=null;
        Object ID495_tree=null;
        Object ASTERISK496_tree=null;
        Object R_BR497_tree=null;

        try {
            // Objcm.g:772:2: ( L_BR ID ( ASTERISK )* ( COMMA ID ( ASTERISK )* )* R_BR )
            // Objcm.g:772:4: L_BR ID ( ASTERISK )* ( COMMA ID ( ASTERISK )* )* R_BR
            {
            root_0 = (Object)adaptor.nil();


            L_BR491=(Token)match(input,L_BR,FOLLOW_L_BR_in_func_pointer_params4134); 
            L_BR491_tree = 
            (Object)adaptor.create(L_BR491)
            ;
            adaptor.addChild(root_0, L_BR491_tree);


            ID492=(Token)match(input,ID,FOLLOW_ID_in_func_pointer_params4137); 
            ID492_tree = 
            (Object)adaptor.create(ID492)
            ;
            adaptor.addChild(root_0, ID492_tree);


            // Objcm.g:772:14: ( ASTERISK )*
            loop131:
            do {
                int alt131=2;
                int LA131_0 = input.LA(1);

                if ( (LA131_0==ASTERISK) ) {
                    alt131=1;
                }


                switch (alt131) {
            	case 1 :
            	    // Objcm.g:772:14: ASTERISK
            	    {
            	    ASTERISK493=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_func_pointer_params4140); 
            	    ASTERISK493_tree = 
            	    (Object)adaptor.create(ASTERISK493)
            	    ;
            	    adaptor.addChild(root_0, ASTERISK493_tree);


            	    }
            	    break;

            	default :
            	    break loop131;
                }
            } while (true);


            // Objcm.g:772:24: ( COMMA ID ( ASTERISK )* )*
            loop133:
            do {
                int alt133=2;
                int LA133_0 = input.LA(1);

                if ( (LA133_0==COMMA) ) {
                    alt133=1;
                }


                switch (alt133) {
            	case 1 :
            	    // Objcm.g:772:25: COMMA ID ( ASTERISK )*
            	    {
            	    COMMA494=(Token)match(input,COMMA,FOLLOW_COMMA_in_func_pointer_params4144); 
            	    COMMA494_tree = 
            	    (Object)adaptor.create(COMMA494)
            	    ;
            	    adaptor.addChild(root_0, COMMA494_tree);


            	    ID495=(Token)match(input,ID,FOLLOW_ID_in_func_pointer_params4147); 
            	    ID495_tree = 
            	    (Object)adaptor.create(ID495)
            	    ;
            	    adaptor.addChild(root_0, ID495_tree);


            	    // Objcm.g:772:36: ( ASTERISK )*
            	    loop132:
            	    do {
            	        int alt132=2;
            	        int LA132_0 = input.LA(1);

            	        if ( (LA132_0==ASTERISK) ) {
            	            alt132=1;
            	        }


            	        switch (alt132) {
            	    	case 1 :
            	    	    // Objcm.g:772:36: ASTERISK
            	    	    {
            	    	    ASTERISK496=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_func_pointer_params4150); 
            	    	    ASTERISK496_tree = 
            	    	    (Object)adaptor.create(ASTERISK496)
            	    	    ;
            	    	    adaptor.addChild(root_0, ASTERISK496_tree);


            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop132;
            	        }
            	    } while (true);


            	    }
            	    break;

            	default :
            	    break loop133;
                }
            } while (true);


            R_BR497=(Token)match(input,R_BR,FOLLOW_R_BR_in_func_pointer_params4155); 
            R_BR497_tree = 
            (Object)adaptor.create(R_BR497)
            ;
            adaptor.addChild(root_0, R_BR497_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "func_pointer_params"


    public static class in_brackets_end1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "in_brackets_end1"
    // Objcm.g:774:1: in_brackets_end1 : ( L_BR expression R_BR | method_start ( index_brackets )? | ( L_PLUS_PLUS | L_MINUS_MINUS ) method_start | const_expr );
    public final ObjcmParser.in_brackets_end1_return in_brackets_end1() throws RecognitionException {
        ObjcmParser.in_brackets_end1_return retval = new ObjcmParser.in_brackets_end1_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_BR498=null;
        Token R_BR500=null;
        Token set503=null;
        ObjcmParser.expression_return expression499 =null;

        ObjcmParser.method_start_return method_start501 =null;

        ObjcmParser.index_brackets_return index_brackets502 =null;

        ObjcmParser.method_start_return method_start504 =null;

        ObjcmParser.const_expr_return const_expr505 =null;


        Object L_BR498_tree=null;
        Object R_BR500_tree=null;
        Object set503_tree=null;

        try {
            // Objcm.g:775:2: ( L_BR expression R_BR | method_start ( index_brackets )? | ( L_PLUS_PLUS | L_MINUS_MINUS ) method_start | const_expr )
            int alt135=4;
            switch ( input.LA(1) ) {
            case L_BR:
                {
                alt135=1;
                }
                break;
            case ID:
                {
                alt135=2;
                }
                break;
            case L_MINUS_MINUS:
            case L_PLUS_PLUS:
                {
                alt135=3;
                }
                break;
            case NUMBER:
            case STRING_LITERAL:
            case STRING_LITERAL2:
            case STRING_LITERAL3:
            case 165:
            case 178:
                {
                alt135=4;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 135, 0, input);

                throw nvae;

            }

            switch (alt135) {
                case 1 :
                    // Objcm.g:775:4: L_BR expression R_BR
                    {
                    root_0 = (Object)adaptor.nil();


                    L_BR498=(Token)match(input,L_BR,FOLLOW_L_BR_in_in_brackets_end14165); 
                    L_BR498_tree = 
                    (Object)adaptor.create(L_BR498)
                    ;
                    adaptor.addChild(root_0, L_BR498_tree);


                    pushFollow(FOLLOW_expression_in_in_brackets_end14168);
                    expression499=expression();

                    state._fsp--;

                    adaptor.addChild(root_0, expression499.getTree());

                    R_BR500=(Token)match(input,R_BR,FOLLOW_R_BR_in_in_brackets_end14171); 
                    R_BR500_tree = 
                    (Object)adaptor.create(R_BR500)
                    ;
                    adaptor.addChild(root_0, R_BR500_tree);


                    }
                    break;
                case 2 :
                    // Objcm.g:776:4: method_start ( index_brackets )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_method_start_in_in_brackets_end14176);
                    method_start501=method_start();

                    state._fsp--;

                    adaptor.addChild(root_0, method_start501.getTree());

                    // Objcm.g:776:17: ( index_brackets )?
                    int alt134=2;
                    int LA134_0 = input.LA(1);

                    if ( (LA134_0==L_KBR) ) {
                        alt134=1;
                    }
                    switch (alt134) {
                        case 1 :
                            // Objcm.g:776:17: index_brackets
                            {
                            pushFollow(FOLLOW_index_brackets_in_in_brackets_end14178);
                            index_brackets502=index_brackets();

                            state._fsp--;

                            adaptor.addChild(root_0, index_brackets502.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // Objcm.g:777:4: ( L_PLUS_PLUS | L_MINUS_MINUS ) method_start
                    {
                    root_0 = (Object)adaptor.nil();


                    set503=(Token)input.LT(1);

                    if ( input.LA(1)==L_MINUS_MINUS||input.LA(1)==L_PLUS_PLUS ) {
                        input.consume();
                        adaptor.addChild(root_0, 
                        (Object)adaptor.create(set503)
                        );
                        state.errorRecovery=false;
                    }
                    else {
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    pushFollow(FOLLOW_method_start_in_in_brackets_end14192);
                    method_start504=method_start();

                    state._fsp--;

                    adaptor.addChild(root_0, method_start504.getTree());

                    }
                    break;
                case 4 :
                    // Objcm.g:778:4: const_expr
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_const_expr_in_in_brackets_end14197);
                    const_expr505=const_expr();

                    state._fsp--;

                    adaptor.addChild(root_0, const_expr505.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "in_brackets_end1"


    public static class in_brackets_end2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "in_brackets_end2"
    // Objcm.g:781:1: in_brackets_end2 : ( L_BR expression R_BR | const_expr );
    public final ObjcmParser.in_brackets_end2_return in_brackets_end2() throws RecognitionException {
        ObjcmParser.in_brackets_end2_return retval = new ObjcmParser.in_brackets_end2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_BR506=null;
        Token R_BR508=null;
        ObjcmParser.expression_return expression507 =null;

        ObjcmParser.const_expr_return const_expr509 =null;


        Object L_BR506_tree=null;
        Object R_BR508_tree=null;

        try {
            // Objcm.g:782:2: ( L_BR expression R_BR | const_expr )
            int alt136=2;
            int LA136_0 = input.LA(1);

            if ( (LA136_0==L_BR) ) {
                alt136=1;
            }
            else if ( (LA136_0==NUMBER||(LA136_0 >= STRING_LITERAL && LA136_0 <= STRING_LITERAL3)||LA136_0==165||LA136_0==178) ) {
                alt136=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 136, 0, input);

                throw nvae;

            }
            switch (alt136) {
                case 1 :
                    // Objcm.g:782:4: L_BR expression R_BR
                    {
                    root_0 = (Object)adaptor.nil();


                    L_BR506=(Token)match(input,L_BR,FOLLOW_L_BR_in_in_brackets_end24209); 
                    L_BR506_tree = 
                    (Object)adaptor.create(L_BR506)
                    ;
                    adaptor.addChild(root_0, L_BR506_tree);


                    pushFollow(FOLLOW_expression_in_in_brackets_end24212);
                    expression507=expression();

                    state._fsp--;

                    adaptor.addChild(root_0, expression507.getTree());

                    R_BR508=(Token)match(input,R_BR,FOLLOW_R_BR_in_in_brackets_end24215); 
                    R_BR508_tree = 
                    (Object)adaptor.create(R_BR508)
                    ;
                    adaptor.addChild(root_0, R_BR508_tree);


                    }
                    break;
                case 2 :
                    // Objcm.g:783:4: const_expr
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_const_expr_in_in_brackets_end24220);
                    const_expr509=const_expr();

                    state._fsp--;

                    adaptor.addChild(root_0, const_expr509.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "in_brackets_end2"


    public static class method_start_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_start"
    // Objcm.g:786:1: method_start : ID ( method_brackets )? ;
    public final ObjcmParser.method_start_return method_start() throws RecognitionException {
        ObjcmParser.method_start_return retval = new ObjcmParser.method_start_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID510=null;
        ObjcmParser.method_brackets_return method_brackets511 =null;


        Object ID510_tree=null;

        try {
            // Objcm.g:787:2: ( ID ( method_brackets )? )
            // Objcm.g:787:4: ID ( method_brackets )?
            {
            root_0 = (Object)adaptor.nil();


            ID510=(Token)match(input,ID,FOLLOW_ID_in_method_start4233); 
            ID510_tree = 
            (Object)adaptor.create(ID510)
            ;
            adaptor.addChild(root_0, ID510_tree);


            // Objcm.g:787:7: ( method_brackets )?
            int alt137=2;
            int LA137_0 = input.LA(1);

            if ( (LA137_0==L_BR) ) {
                alt137=1;
            }
            switch (alt137) {
                case 1 :
                    // Objcm.g:787:7: method_brackets
                    {
                    pushFollow(FOLLOW_method_brackets_in_method_start4235);
                    method_brackets511=method_brackets();

                    state._fsp--;

                    adaptor.addChild(root_0, method_brackets511.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_start"


    public static class in_q_brackets_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "in_q_brackets"
    // Objcm.g:789:1: in_q_brackets : L_FBR q_brackets_source R_FBR ;
    public final ObjcmParser.in_q_brackets_return in_q_brackets() throws RecognitionException {
        ObjcmParser.in_q_brackets_return retval = new ObjcmParser.in_q_brackets_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_FBR512=null;
        Token R_FBR514=null;
        ObjcmParser.q_brackets_source_return q_brackets_source513 =null;


        Object L_FBR512_tree=null;
        Object R_FBR514_tree=null;

        try {
            // Objcm.g:790:2: ( L_FBR q_brackets_source R_FBR )
            // Objcm.g:790:4: L_FBR q_brackets_source R_FBR
            {
            root_0 = (Object)adaptor.nil();


            L_FBR512=(Token)match(input,L_FBR,FOLLOW_L_FBR_in_in_q_brackets4246); 
            L_FBR512_tree = 
            (Object)adaptor.create(L_FBR512)
            ;
            adaptor.addChild(root_0, L_FBR512_tree);


            pushFollow(FOLLOW_q_brackets_source_in_in_q_brackets4249);
            q_brackets_source513=q_brackets_source();

            state._fsp--;

            adaptor.addChild(root_0, q_brackets_source513.getTree());

            R_FBR514=(Token)match(input,R_FBR,FOLLOW_R_FBR_in_in_q_brackets4251); 
            R_FBR514_tree = 
            (Object)adaptor.create(R_FBR514)
            ;
            adaptor.addChild(root_0, R_FBR514_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "in_q_brackets"


    public static class q_brackets_source_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "q_brackets_source"
    // Objcm.g:793:1: q_brackets_source : ( q_source | q_br_source );
    public final ObjcmParser.q_brackets_source_return q_brackets_source() throws RecognitionException {
        ObjcmParser.q_brackets_source_return retval = new ObjcmParser.q_brackets_source_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.q_source_return q_source515 =null;

        ObjcmParser.q_br_source_return q_br_source516 =null;



        try {
            // Objcm.g:794:2: ( q_source | q_br_source )
            int alt138=2;
            int LA138_0 = input.LA(1);

            if ( (LA138_0==ASTERISK||LA138_0==ID||LA138_0==L_AND||LA138_0==L_BR||LA138_0==L_KBR||LA138_0==L_MINUS||LA138_0==L_MINUS_MINUS||LA138_0==L_NOT||LA138_0==L_PLUS||LA138_0==L_PLUS_PLUS||LA138_0==L_TILDA||LA138_0==NUMBER||LA138_0==R_FBR||LA138_0==SIZEOF||(LA138_0 >= STRING_LITERAL && LA138_0 <= STRING_LITERAL3)||LA138_0==154||LA138_0==161||LA138_0==165||LA138_0==176||LA138_0==178||LA138_0==183) ) {
                alt138=1;
            }
            else if ( (LA138_0==L_FBR) ) {
                alt138=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 138, 0, input);

                throw nvae;

            }
            switch (alt138) {
                case 1 :
                    // Objcm.g:794:4: q_source
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_q_source_in_q_brackets_source4263);
                    q_source515=q_source();

                    state._fsp--;

                    adaptor.addChild(root_0, q_source515.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:795:4: q_br_source
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_q_br_source_in_q_brackets_source4268);
                    q_br_source516=q_br_source();

                    state._fsp--;

                    adaptor.addChild(root_0, q_br_source516.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "q_brackets_source"


    public static class q_br_source_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "q_br_source"
    // Objcm.g:798:1: q_br_source : in_q_brackets ( COMMA in_q_brackets )* ( COMMA )? ;
    public final ObjcmParser.q_br_source_return q_br_source() throws RecognitionException {
        ObjcmParser.q_br_source_return retval = new ObjcmParser.q_br_source_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA518=null;
        Token COMMA520=null;
        ObjcmParser.in_q_brackets_return in_q_brackets517 =null;

        ObjcmParser.in_q_brackets_return in_q_brackets519 =null;


        Object COMMA518_tree=null;
        Object COMMA520_tree=null;

        try {
            // Objcm.g:799:2: ( in_q_brackets ( COMMA in_q_brackets )* ( COMMA )? )
            // Objcm.g:799:4: in_q_brackets ( COMMA in_q_brackets )* ( COMMA )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_in_q_brackets_in_q_br_source4281);
            in_q_brackets517=in_q_brackets();

            state._fsp--;

            adaptor.addChild(root_0, in_q_brackets517.getTree());

            // Objcm.g:799:19: ( COMMA in_q_brackets )*
            loop139:
            do {
                int alt139=2;
                int LA139_0 = input.LA(1);

                if ( (LA139_0==COMMA) ) {
                    int LA139_1 = input.LA(2);

                    if ( (LA139_1==L_FBR) ) {
                        alt139=1;
                    }


                }


                switch (alt139) {
            	case 1 :
            	    // Objcm.g:799:20: COMMA in_q_brackets
            	    {
            	    COMMA518=(Token)match(input,COMMA,FOLLOW_COMMA_in_q_br_source4285); 
            	    COMMA518_tree = 
            	    (Object)adaptor.create(COMMA518)
            	    ;
            	    adaptor.addChild(root_0, COMMA518_tree);


            	    pushFollow(FOLLOW_in_q_brackets_in_q_br_source4288);
            	    in_q_brackets519=in_q_brackets();

            	    state._fsp--;

            	    adaptor.addChild(root_0, in_q_brackets519.getTree());

            	    }
            	    break;

            	default :
            	    break loop139;
                }
            } while (true);


            // Objcm.g:799:43: ( COMMA )?
            int alt140=2;
            int LA140_0 = input.LA(1);

            if ( (LA140_0==COMMA) ) {
                alt140=1;
            }
            switch (alt140) {
                case 1 :
                    // Objcm.g:799:43: COMMA
                    {
                    COMMA520=(Token)match(input,COMMA,FOLLOW_COMMA_in_q_br_source4292); 
                    COMMA520_tree = 
                    (Object)adaptor.create(COMMA520)
                    ;
                    adaptor.addChild(root_0, COMMA520_tree);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "q_br_source"


    public static class q_source_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "q_source"
    // Objcm.g:802:1: q_source : ( expression ( COMMA expression )* )? ;
    public final ObjcmParser.q_source_return q_source() throws RecognitionException {
        ObjcmParser.q_source_return retval = new ObjcmParser.q_source_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA522=null;
        ObjcmParser.expression_return expression521 =null;

        ObjcmParser.expression_return expression523 =null;


        Object COMMA522_tree=null;

        try {
            // Objcm.g:802:9: ( ( expression ( COMMA expression )* )? )
            // Objcm.g:802:11: ( expression ( COMMA expression )* )?
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:802:11: ( expression ( COMMA expression )* )?
            int alt142=2;
            int LA142_0 = input.LA(1);

            if ( (LA142_0==ASTERISK||LA142_0==ID||LA142_0==L_AND||LA142_0==L_BR||LA142_0==L_KBR||LA142_0==L_MINUS||LA142_0==L_MINUS_MINUS||LA142_0==L_NOT||LA142_0==L_PLUS||LA142_0==L_PLUS_PLUS||LA142_0==L_TILDA||LA142_0==NUMBER||LA142_0==SIZEOF||(LA142_0 >= STRING_LITERAL && LA142_0 <= STRING_LITERAL3)||LA142_0==154||LA142_0==161||LA142_0==165||LA142_0==176||LA142_0==178||LA142_0==183) ) {
                alt142=1;
            }
            switch (alt142) {
                case 1 :
                    // Objcm.g:802:12: expression ( COMMA expression )*
                    {
                    pushFollow(FOLLOW_expression_in_q_source4304);
                    expression521=expression();

                    state._fsp--;

                    adaptor.addChild(root_0, expression521.getTree());

                    // Objcm.g:802:24: ( COMMA expression )*
                    loop141:
                    do {
                        int alt141=2;
                        int LA141_0 = input.LA(1);

                        if ( (LA141_0==COMMA) ) {
                            alt141=1;
                        }


                        switch (alt141) {
                    	case 1 :
                    	    // Objcm.g:802:25: COMMA expression
                    	    {
                    	    COMMA522=(Token)match(input,COMMA,FOLLOW_COMMA_in_q_source4308); 
                    	    COMMA522_tree = 
                    	    (Object)adaptor.create(COMMA522)
                    	    ;
                    	    adaptor.addChild(root_0, COMMA522_tree);


                    	    pushFollow(FOLLOW_expression_in_q_source4311);
                    	    expression523=expression();

                    	    state._fsp--;

                    	    adaptor.addChild(root_0, expression523.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop141;
                        }
                    } while (true);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "q_source"


    public static class simple_method_call_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "simple_method_call"
    // Objcm.g:805:1: simple_method_call : ID ( method_brackets )? ;
    public final ObjcmParser.simple_method_call_return simple_method_call() throws RecognitionException {
        ObjcmParser.simple_method_call_return retval = new ObjcmParser.simple_method_call_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID524=null;
        ObjcmParser.method_brackets_return method_brackets525 =null;


        Object ID524_tree=null;

        try {
            // Objcm.g:806:2: ( ID ( method_brackets )? )
            // Objcm.g:806:4: ID ( method_brackets )?
            {
            root_0 = (Object)adaptor.nil();


            ID524=(Token)match(input,ID,FOLLOW_ID_in_simple_method_call4328); 
            ID524_tree = 
            (Object)adaptor.create(ID524)
            ;
            adaptor.addChild(root_0, ID524_tree);


            // Objcm.g:806:7: ( method_brackets )?
            int alt143=2;
            int LA143_0 = input.LA(1);

            if ( (LA143_0==L_BR) ) {
                alt143=1;
            }
            switch (alt143) {
                case 1 :
                    // Objcm.g:806:7: method_brackets
                    {
                    pushFollow(FOLLOW_method_brackets_in_simple_method_call4330);
                    method_brackets525=method_brackets();

                    state._fsp--;

                    adaptor.addChild(root_0, method_brackets525.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "simple_method_call"


    public static class type_in_brackets_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_in_brackets"
    // Objcm.g:808:1: type_in_brackets : ( CONST_PREFIX )? ID ( generic )? ( ASTERISK )* R_BR in_brackets_end1 ;
    public final ObjcmParser.type_in_brackets_return type_in_brackets() throws RecognitionException {
        ObjcmParser.type_in_brackets_return retval = new ObjcmParser.type_in_brackets_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token CONST_PREFIX526=null;
        Token ID527=null;
        Token ASTERISK529=null;
        Token R_BR530=null;
        ObjcmParser.generic_return generic528 =null;

        ObjcmParser.in_brackets_end1_return in_brackets_end1531 =null;


        Object CONST_PREFIX526_tree=null;
        Object ID527_tree=null;
        Object ASTERISK529_tree=null;
        Object R_BR530_tree=null;

        try {
            // Objcm.g:809:2: ( ( CONST_PREFIX )? ID ( generic )? ( ASTERISK )* R_BR in_brackets_end1 )
            // Objcm.g:809:4: ( CONST_PREFIX )? ID ( generic )? ( ASTERISK )* R_BR in_brackets_end1
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:809:4: ( CONST_PREFIX )?
            int alt144=2;
            int LA144_0 = input.LA(1);

            if ( (LA144_0==CONST_PREFIX) ) {
                alt144=1;
            }
            switch (alt144) {
                case 1 :
                    // Objcm.g:809:4: CONST_PREFIX
                    {
                    CONST_PREFIX526=(Token)match(input,CONST_PREFIX,FOLLOW_CONST_PREFIX_in_type_in_brackets4342); 
                    CONST_PREFIX526_tree = 
                    (Object)adaptor.create(CONST_PREFIX526)
                    ;
                    adaptor.addChild(root_0, CONST_PREFIX526_tree);


                    }
                    break;

            }


            ID527=(Token)match(input,ID,FOLLOW_ID_in_type_in_brackets4345); 
            ID527_tree = 
            (Object)adaptor.create(ID527)
            ;
            adaptor.addChild(root_0, ID527_tree);


            // Objcm.g:809:21: ( generic )?
            int alt145=2;
            int LA145_0 = input.LA(1);

            if ( (LA145_0==L_LESS) ) {
                alt145=1;
            }
            switch (alt145) {
                case 1 :
                    // Objcm.g:809:21: generic
                    {
                    pushFollow(FOLLOW_generic_in_type_in_brackets4347);
                    generic528=generic();

                    state._fsp--;

                    adaptor.addChild(root_0, generic528.getTree());

                    }
                    break;

            }


            // Objcm.g:809:30: ( ASTERISK )*
            loop146:
            do {
                int alt146=2;
                int LA146_0 = input.LA(1);

                if ( (LA146_0==ASTERISK) ) {
                    alt146=1;
                }


                switch (alt146) {
            	case 1 :
            	    // Objcm.g:809:30: ASTERISK
            	    {
            	    ASTERISK529=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_type_in_brackets4350); 
            	    ASTERISK529_tree = 
            	    (Object)adaptor.create(ASTERISK529)
            	    ;
            	    adaptor.addChild(root_0, ASTERISK529_tree);


            	    }
            	    break;

            	default :
            	    break loop146;
                }
            } while (true);


            R_BR530=(Token)match(input,R_BR,FOLLOW_R_BR_in_type_in_brackets4353); 
            R_BR530_tree = 
            (Object)adaptor.create(R_BR530)
            ;
            adaptor.addChild(root_0, R_BR530_tree);


            pushFollow(FOLLOW_in_brackets_end1_in_type_in_brackets4356);
            in_brackets_end1531=in_brackets_end1();

            state._fsp--;

            adaptor.addChild(root_0, in_brackets_end1531.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_in_brackets"


    public static class square_brackets_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "square_brackets"
    // Objcm.g:812:1: square_brackets : L_KBR method_call_wrapper2 R_KBR ;
    public final ObjcmParser.square_brackets_return square_brackets() throws RecognitionException {
        ObjcmParser.square_brackets_return retval = new ObjcmParser.square_brackets_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_KBR532=null;
        Token R_KBR534=null;
        ObjcmParser.method_call_wrapper2_return method_call_wrapper2533 =null;


        Object L_KBR532_tree=null;
        Object R_KBR534_tree=null;

        try {
            // Objcm.g:813:2: ( L_KBR method_call_wrapper2 R_KBR )
            // Objcm.g:814:2: L_KBR method_call_wrapper2 R_KBR
            {
            root_0 = (Object)adaptor.nil();


            L_KBR532=(Token)match(input,L_KBR,FOLLOW_L_KBR_in_square_brackets4372); 
            L_KBR532_tree = 
            (Object)adaptor.create(L_KBR532)
            ;
            adaptor.addChild(root_0, L_KBR532_tree);


            pushFollow(FOLLOW_method_call_wrapper2_in_square_brackets4375);
            method_call_wrapper2533=method_call_wrapper2();

            state._fsp--;

            adaptor.addChild(root_0, method_call_wrapper2533.getTree());

            R_KBR534=(Token)match(input,R_KBR,FOLLOW_R_KBR_in_square_brackets4377); 
            R_KBR534_tree = 
            (Object)adaptor.create(R_KBR534)
            ;
            adaptor.addChild(root_0, R_KBR534_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "square_brackets"


    public static class index_brackets_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "index_brackets"
    // Objcm.g:816:1: index_brackets : L_KBR classical_expr_wrp R_KBR ;
    public final ObjcmParser.index_brackets_return index_brackets() throws RecognitionException {
        ObjcmParser.index_brackets_return retval = new ObjcmParser.index_brackets_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_KBR535=null;
        Token R_KBR537=null;
        ObjcmParser.classical_expr_wrp_return classical_expr_wrp536 =null;


        Object L_KBR535_tree=null;
        Object R_KBR537_tree=null;

        try {
            // Objcm.g:817:2: ( L_KBR classical_expr_wrp R_KBR )
            // Objcm.g:817:4: L_KBR classical_expr_wrp R_KBR
            {
            root_0 = (Object)adaptor.nil();


            L_KBR535=(Token)match(input,L_KBR,FOLLOW_L_KBR_in_index_brackets4388); 
            L_KBR535_tree = 
            (Object)adaptor.create(L_KBR535)
            ;
            adaptor.addChild(root_0, L_KBR535_tree);


            pushFollow(FOLLOW_classical_expr_wrp_in_index_brackets4391);
            classical_expr_wrp536=classical_expr_wrp();

            state._fsp--;

            adaptor.addChild(root_0, classical_expr_wrp536.getTree());

            R_KBR537=(Token)match(input,R_KBR,FOLLOW_R_KBR_in_index_brackets4393); 
            R_KBR537_tree = 
            (Object)adaptor.create(R_KBR537)
            ;
            adaptor.addChild(root_0, R_KBR537_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "index_brackets"


    public static class interface_declaration_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "interface_declaration_wrapper"
    // Objcm.g:824:1: interface_declaration_wrapper : interface_declaration -> ^( INTERFACE interface_declaration ) ;
    public final ObjcmParser.interface_declaration_wrapper_return interface_declaration_wrapper() throws RecognitionException {
        ObjcmParser.interface_declaration_wrapper_return retval = new ObjcmParser.interface_declaration_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.interface_declaration_return interface_declaration538 =null;


        RewriteRuleSubtreeStream stream_interface_declaration=new RewriteRuleSubtreeStream(adaptor,"rule interface_declaration");
        try {
            // Objcm.g:825:2: ( interface_declaration -> ^( INTERFACE interface_declaration ) )
            // Objcm.g:825:4: interface_declaration
            {
            pushFollow(FOLLOW_interface_declaration_in_interface_declaration_wrapper4407);
            interface_declaration538=interface_declaration();

            state._fsp--;

            stream_interface_declaration.add(interface_declaration538.getTree());

            // AST REWRITE
            // elements: interface_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 825:26: -> ^( INTERFACE interface_declaration )
            {
                // Objcm.g:825:29: ^( INTERFACE interface_declaration )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(INTERFACE, "INTERFACE")
                , root_1);

                adaptor.addChild(root_1, stream_interface_declaration.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_declaration_wrapper"


    public static class interface_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "interface_declaration"
    // Objcm.g:827:1: interface_declaration : '@interface' name ( interface_category )? ( super_class )? ( annotated_block | interface_methods )+ '@end' ;
    public final ObjcmParser.interface_declaration_return interface_declaration() throws RecognitionException {
        ObjcmParser.interface_declaration_return retval = new ObjcmParser.interface_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal539=null;
        Token string_literal545=null;
        ObjcmParser.name_return name540 =null;

        ObjcmParser.interface_category_return interface_category541 =null;

        ObjcmParser.super_class_return super_class542 =null;

        ObjcmParser.annotated_block_return annotated_block543 =null;

        ObjcmParser.interface_methods_return interface_methods544 =null;


        Object string_literal539_tree=null;
        Object string_literal545_tree=null;

        try {
            // Objcm.g:828:2: ( '@interface' name ( interface_category )? ( super_class )? ( annotated_block | interface_methods )+ '@end' )
            // Objcm.g:828:4: '@interface' name ( interface_category )? ( super_class )? ( annotated_block | interface_methods )+ '@end'
            {
            root_0 = (Object)adaptor.nil();


            string_literal539=(Token)match(input,158,FOLLOW_158_in_interface_declaration4425); 
            string_literal539_tree = 
            (Object)adaptor.create(string_literal539)
            ;
            adaptor.addChild(root_0, string_literal539_tree);


            pushFollow(FOLLOW_name_in_interface_declaration4428);
            name540=name();

            state._fsp--;

            adaptor.addChild(root_0, name540.getTree());

            // Objcm.g:828:24: ( interface_category )?
            int alt147=2;
            int LA147_0 = input.LA(1);

            if ( (LA147_0==L_BR) ) {
                alt147=1;
            }
            switch (alt147) {
                case 1 :
                    // Objcm.g:828:24: interface_category
                    {
                    pushFollow(FOLLOW_interface_category_in_interface_declaration4431);
                    interface_category541=interface_category();

                    state._fsp--;

                    adaptor.addChild(root_0, interface_category541.getTree());

                    }
                    break;

            }


            // Objcm.g:828:44: ( super_class )?
            int alt148=2;
            int LA148_0 = input.LA(1);

            if ( (LA148_0==COLON) ) {
                alt148=1;
            }
            switch (alt148) {
                case 1 :
                    // Objcm.g:828:45: super_class
                    {
                    pushFollow(FOLLOW_super_class_in_interface_declaration4435);
                    super_class542=super_class();

                    state._fsp--;

                    adaptor.addChild(root_0, super_class542.getTree());

                    }
                    break;

            }


            // Objcm.g:829:3: ( annotated_block | interface_methods )+
            int cnt149=0;
            loop149:
            do {
                int alt149=3;
                int LA149_0 = input.LA(1);

                if ( (LA149_0==L_FBR) ) {
                    alt149=1;
                }
                else if ( (LA149_0==ENUM_PREFIX||LA149_0==L_MINUS||LA149_0==L_PLUS) ) {
                    alt149=2;
                }


                switch (alt149) {
            	case 1 :
            	    // Objcm.g:829:4: annotated_block
            	    {
            	    pushFollow(FOLLOW_annotated_block_in_interface_declaration4442);
            	    annotated_block543=annotated_block();

            	    state._fsp--;

            	    adaptor.addChild(root_0, annotated_block543.getTree());

            	    }
            	    break;
            	case 2 :
            	    // Objcm.g:829:22: interface_methods
            	    {
            	    pushFollow(FOLLOW_interface_methods_in_interface_declaration4446);
            	    interface_methods544=interface_methods();

            	    state._fsp--;

            	    adaptor.addChild(root_0, interface_methods544.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt149 >= 1 ) break loop149;
                        EarlyExitException eee =
                            new EarlyExitException(149, input);
                        throw eee;
                }
                cnt149++;
            } while (true);


            string_literal545=(Token)match(input,155,FOLLOW_155_in_interface_declaration4455); 
            string_literal545_tree = 
            (Object)adaptor.create(string_literal545)
            ;
            adaptor.addChild(root_0, string_literal545_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_declaration"


    public static class annotated_block_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "annotated_block"
    // Objcm.g:833:1: annotated_block : L_FBR ( annotated_block_internal )* R_FBR ;
    public final ObjcmParser.annotated_block_return annotated_block() throws RecognitionException {
        ObjcmParser.annotated_block_return retval = new ObjcmParser.annotated_block_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_FBR546=null;
        Token R_FBR548=null;
        ObjcmParser.annotated_block_internal_return annotated_block_internal547 =null;


        Object L_FBR546_tree=null;
        Object R_FBR548_tree=null;

        try {
            // Objcm.g:834:2: ( L_FBR ( annotated_block_internal )* R_FBR )
            // Objcm.g:834:4: L_FBR ( annotated_block_internal )* R_FBR
            {
            root_0 = (Object)adaptor.nil();


            L_FBR546=(Token)match(input,L_FBR,FOLLOW_L_FBR_in_annotated_block4466); 
            L_FBR546_tree = 
            (Object)adaptor.create(L_FBR546)
            ;
            adaptor.addChild(root_0, L_FBR546_tree);


            // Objcm.g:835:3: ( annotated_block_internal )*
            loop150:
            do {
                int alt150=2;
                int LA150_0 = input.LA(1);

                if ( (LA150_0==ID||LA150_0==VOID||(LA150_0 >= 159 && LA150_0 <= 160)||LA150_0==182) ) {
                    alt150=1;
                }


                switch (alt150) {
            	case 1 :
            	    // Objcm.g:835:3: annotated_block_internal
            	    {
            	    pushFollow(FOLLOW_annotated_block_internal_in_annotated_block4471);
            	    annotated_block_internal547=annotated_block_internal();

            	    state._fsp--;

            	    adaptor.addChild(root_0, annotated_block_internal547.getTree());

            	    }
            	    break;

            	default :
            	    break loop150;
                }
            } while (true);


            R_FBR548=(Token)match(input,R_FBR,FOLLOW_R_FBR_in_annotated_block4476); 
            R_FBR548_tree = 
            (Object)adaptor.create(R_FBR548)
            ;
            adaptor.addChild(root_0, R_FBR548_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "annotated_block"


    public static class annotated_block_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "annotated_block_internal"
    // Objcm.g:839:1: annotated_block_internal : ( block_annotation | public_block_internal );
    public final ObjcmParser.annotated_block_internal_return annotated_block_internal() throws RecognitionException {
        ObjcmParser.annotated_block_internal_return retval = new ObjcmParser.annotated_block_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.block_annotation_return block_annotation549 =null;

        ObjcmParser.public_block_internal_return public_block_internal550 =null;



        try {
            // Objcm.g:840:2: ( block_annotation | public_block_internal )
            int alt151=2;
            int LA151_0 = input.LA(1);

            if ( ((LA151_0 >= 159 && LA151_0 <= 160)) ) {
                alt151=1;
            }
            else if ( (LA151_0==ID||LA151_0==VOID||LA151_0==182) ) {
                alt151=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 151, 0, input);

                throw nvae;

            }
            switch (alt151) {
                case 1 :
                    // Objcm.g:840:4: block_annotation
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_block_annotation_in_annotated_block_internal4489);
                    block_annotation549=block_annotation();

                    state._fsp--;

                    adaptor.addChild(root_0, block_annotation549.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:841:5: public_block_internal
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_public_block_internal_in_annotated_block_internal4496);
                    public_block_internal550=public_block_internal();

                    state._fsp--;

                    adaptor.addChild(root_0, public_block_internal550.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "annotated_block_internal"


    public static class block_annotation_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_annotation"
    // Objcm.g:844:1: block_annotation : ( '@public' | '@private' );
    public final ObjcmParser.block_annotation_return block_annotation() throws RecognitionException {
        ObjcmParser.block_annotation_return retval = new ObjcmParser.block_annotation_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set551=null;

        Object set551_tree=null;

        try {
            // Objcm.g:845:2: ( '@public' | '@private' )
            // Objcm.g:
            {
            root_0 = (Object)adaptor.nil();


            set551=(Token)input.LT(1);

            if ( (input.LA(1) >= 159 && input.LA(1) <= 160) ) {
                input.consume();
                adaptor.addChild(root_0, 
                (Object)adaptor.create(set551)
                );
                state.errorRecovery=false;
            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_annotation"


    public static class public_block_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "public_block_internal"
    // Objcm.g:849:1: public_block_internal : ( simple_field_declaration | union_declaration );
    public final ObjcmParser.public_block_internal_return public_block_internal() throws RecognitionException {
        ObjcmParser.public_block_internal_return retval = new ObjcmParser.public_block_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.simple_field_declaration_return simple_field_declaration552 =null;

        ObjcmParser.union_declaration_return union_declaration553 =null;



        try {
            // Objcm.g:850:2: ( simple_field_declaration | union_declaration )
            int alt152=2;
            int LA152_0 = input.LA(1);

            if ( (LA152_0==ID||LA152_0==VOID) ) {
                alt152=1;
            }
            else if ( (LA152_0==182) ) {
                alt152=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 152, 0, input);

                throw nvae;

            }
            switch (alt152) {
                case 1 :
                    // Objcm.g:850:4: simple_field_declaration
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_simple_field_declaration_in_public_block_internal4531);
                    simple_field_declaration552=simple_field_declaration();

                    state._fsp--;

                    adaptor.addChild(root_0, simple_field_declaration552.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:851:4: union_declaration
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_union_declaration_in_public_block_internal4536);
                    union_declaration553=union_declaration();

                    state._fsp--;

                    adaptor.addChild(root_0, union_declaration553.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "public_block_internal"


    public static class simple_field_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "simple_field_declaration"
    // Objcm.g:854:1: simple_field_declaration : field_type name SEMICOLON ;
    public final ObjcmParser.simple_field_declaration_return simple_field_declaration() throws RecognitionException {
        ObjcmParser.simple_field_declaration_return retval = new ObjcmParser.simple_field_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON556=null;
        ObjcmParser.field_type_return field_type554 =null;

        ObjcmParser.name_return name555 =null;


        Object SEMICOLON556_tree=null;

        try {
            // Objcm.g:855:2: ( field_type name SEMICOLON )
            // Objcm.g:855:4: field_type name SEMICOLON
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_field_type_in_simple_field_declaration4548);
            field_type554=field_type();

            state._fsp--;

            adaptor.addChild(root_0, field_type554.getTree());

            pushFollow(FOLLOW_name_in_simple_field_declaration4550);
            name555=name();

            state._fsp--;

            adaptor.addChild(root_0, name555.getTree());

            SEMICOLON556=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_simple_field_declaration4553); 
            SEMICOLON556_tree = 
            (Object)adaptor.create(SEMICOLON556)
            ;
            adaptor.addChild(root_0, SEMICOLON556_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "simple_field_declaration"


    public static class union_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "union_declaration"
    // Objcm.g:858:1: union_declaration : 'union' L_FBR ( simple_field_declaration )+ R_FBR ID SEMICOLON ;
    public final ObjcmParser.union_declaration_return union_declaration() throws RecognitionException {
        ObjcmParser.union_declaration_return retval = new ObjcmParser.union_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal557=null;
        Token L_FBR558=null;
        Token R_FBR560=null;
        Token ID561=null;
        Token SEMICOLON562=null;
        ObjcmParser.simple_field_declaration_return simple_field_declaration559 =null;


        Object string_literal557_tree=null;
        Object L_FBR558_tree=null;
        Object R_FBR560_tree=null;
        Object ID561_tree=null;
        Object SEMICOLON562_tree=null;

        try {
            // Objcm.g:859:2: ( 'union' L_FBR ( simple_field_declaration )+ R_FBR ID SEMICOLON )
            // Objcm.g:859:4: 'union' L_FBR ( simple_field_declaration )+ R_FBR ID SEMICOLON
            {
            root_0 = (Object)adaptor.nil();


            string_literal557=(Token)match(input,182,FOLLOW_182_in_union_declaration4566); 
            string_literal557_tree = 
            (Object)adaptor.create(string_literal557)
            ;
            adaptor.addChild(root_0, string_literal557_tree);


            L_FBR558=(Token)match(input,L_FBR,FOLLOW_L_FBR_in_union_declaration4569); 
            L_FBR558_tree = 
            (Object)adaptor.create(L_FBR558)
            ;
            adaptor.addChild(root_0, L_FBR558_tree);


            // Objcm.g:860:4: ( simple_field_declaration )+
            int cnt153=0;
            loop153:
            do {
                int alt153=2;
                int LA153_0 = input.LA(1);

                if ( (LA153_0==ID||LA153_0==VOID) ) {
                    alt153=1;
                }


                switch (alt153) {
            	case 1 :
            	    // Objcm.g:860:4: simple_field_declaration
            	    {
            	    pushFollow(FOLLOW_simple_field_declaration_in_union_declaration4575);
            	    simple_field_declaration559=simple_field_declaration();

            	    state._fsp--;

            	    adaptor.addChild(root_0, simple_field_declaration559.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt153 >= 1 ) break loop153;
                        EarlyExitException eee =
                            new EarlyExitException(153, input);
                        throw eee;
                }
                cnt153++;
            } while (true);


            R_FBR560=(Token)match(input,R_FBR,FOLLOW_R_FBR_in_union_declaration4580); 
            R_FBR560_tree = 
            (Object)adaptor.create(R_FBR560)
            ;
            adaptor.addChild(root_0, R_FBR560_tree);


            ID561=(Token)match(input,ID,FOLLOW_ID_in_union_declaration4583); 
            ID561_tree = 
            (Object)adaptor.create(ID561)
            ;
            adaptor.addChild(root_0, ID561_tree);


            SEMICOLON562=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_union_declaration4586); 
            SEMICOLON562_tree = 
            (Object)adaptor.create(SEMICOLON562)
            ;
            adaptor.addChild(root_0, SEMICOLON562_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "union_declaration"


    public static class super_class_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "super_class"
    // Objcm.g:864:1: super_class : COLON ID -> ^( SUPER_CLASS ID ) ;
    public final ObjcmParser.super_class_return super_class() throws RecognitionException {
        ObjcmParser.super_class_return retval = new ObjcmParser.super_class_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COLON563=null;
        Token ID564=null;

        Object COLON563_tree=null;
        Object ID564_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // Objcm.g:865:2: ( COLON ID -> ^( SUPER_CLASS ID ) )
            // Objcm.g:865:4: COLON ID
            {
            COLON563=(Token)match(input,COLON,FOLLOW_COLON_in_super_class4600);  
            stream_COLON.add(COLON563);


            ID564=(Token)match(input,ID,FOLLOW_ID_in_super_class4603);  
            stream_ID.add(ID564);


            // AST REWRITE
            // elements: ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 865:15: -> ^( SUPER_CLASS ID )
            {
                // Objcm.g:865:18: ^( SUPER_CLASS ID )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SUPER_CLASS, "SUPER_CLASS")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "super_class"


    public static class interface_category_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "interface_category"
    // Objcm.g:867:1: interface_category : L_BR ID R_BR -> ^( CATEGORY L_BR ID R_BR ) ;
    public final ObjcmParser.interface_category_return interface_category() throws RecognitionException {
        ObjcmParser.interface_category_return retval = new ObjcmParser.interface_category_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_BR565=null;
        Token ID566=null;
        Token R_BR567=null;

        Object L_BR565_tree=null;
        Object ID566_tree=null;
        Object R_BR567_tree=null;
        RewriteRuleTokenStream stream_R_BR=new RewriteRuleTokenStream(adaptor,"token R_BR");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleTokenStream stream_L_BR=new RewriteRuleTokenStream(adaptor,"token L_BR");

        try {
            // Objcm.g:868:2: ( L_BR ID R_BR -> ^( CATEGORY L_BR ID R_BR ) )
            // Objcm.g:868:4: L_BR ID R_BR
            {
            L_BR565=(Token)match(input,L_BR,FOLLOW_L_BR_in_interface_category4623);  
            stream_L_BR.add(L_BR565);


            ID566=(Token)match(input,ID,FOLLOW_ID_in_interface_category4626);  
            stream_ID.add(ID566);


            R_BR567=(Token)match(input,R_BR,FOLLOW_R_BR_in_interface_category4629);  
            stream_R_BR.add(R_BR567);


            // AST REWRITE
            // elements: ID, L_BR, R_BR
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 868:19: -> ^( CATEGORY L_BR ID R_BR )
            {
                // Objcm.g:868:22: ^( CATEGORY L_BR ID R_BR )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CATEGORY, "CATEGORY")
                , root_1);

                adaptor.addChild(root_1, 
                stream_L_BR.nextNode()
                );

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                adaptor.addChild(root_1, 
                stream_R_BR.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_category"


    public static class interface_methods_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "interface_methods"
    // Objcm.g:870:1: interface_methods : ( enum_declaration | interface_method )+ ;
    public final ObjcmParser.interface_methods_return interface_methods() throws RecognitionException {
        ObjcmParser.interface_methods_return retval = new ObjcmParser.interface_methods_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.enum_declaration_return enum_declaration568 =null;

        ObjcmParser.interface_method_return interface_method569 =null;



        try {
            // Objcm.g:871:2: ( ( enum_declaration | interface_method )+ )
            // Objcm.g:871:4: ( enum_declaration | interface_method )+
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:871:4: ( enum_declaration | interface_method )+
            int cnt154=0;
            loop154:
            do {
                int alt154=3;
                int LA154_0 = input.LA(1);

                if ( (LA154_0==ENUM_PREFIX) ) {
                    alt154=1;
                }
                else if ( (LA154_0==L_MINUS||LA154_0==L_PLUS) ) {
                    alt154=2;
                }


                switch (alt154) {
            	case 1 :
            	    // Objcm.g:871:5: enum_declaration
            	    {
            	    pushFollow(FOLLOW_enum_declaration_in_interface_methods4658);
            	    enum_declaration568=enum_declaration();

            	    state._fsp--;

            	    adaptor.addChild(root_0, enum_declaration568.getTree());

            	    }
            	    break;
            	case 2 :
            	    // Objcm.g:871:24: interface_method
            	    {
            	    pushFollow(FOLLOW_interface_method_in_interface_methods4662);
            	    interface_method569=interface_method();

            	    state._fsp--;

            	    adaptor.addChild(root_0, interface_method569.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt154 >= 1 ) break loop154;
                        EarlyExitException eee =
                            new EarlyExitException(154, input);
                        throw eee;
                }
                cnt154++;
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_methods"


    public static class interface_method_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "interface_method"
    // Objcm.g:873:1: interface_method : method_header -> ^( METHOD method_header ) ;
    public final ObjcmParser.interface_method_return interface_method() throws RecognitionException {
        ObjcmParser.interface_method_return retval = new ObjcmParser.interface_method_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_header_return method_header570 =null;


        RewriteRuleSubtreeStream stream_method_header=new RewriteRuleSubtreeStream(adaptor,"rule method_header");
        try {
            // Objcm.g:874:2: ( method_header -> ^( METHOD method_header ) )
            // Objcm.g:874:4: method_header
            {
            pushFollow(FOLLOW_method_header_in_interface_method4674);
            method_header570=method_header();

            state._fsp--;

            stream_method_header.add(method_header570.getTree());

            // AST REWRITE
            // elements: method_header
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 874:18: -> ^( METHOD method_header )
            {
                // Objcm.g:874:21: ^( METHOD method_header )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD, "METHOD")
                , root_1);

                adaptor.addChild(root_1, stream_method_header.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_method"


    public static class method_header_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_header"
    // Objcm.g:876:1: method_header : method_header_body ( SEMICOLON )? ;
    public final ObjcmParser.method_header_return method_header() throws RecognitionException {
        ObjcmParser.method_header_return retval = new ObjcmParser.method_header_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON572=null;
        ObjcmParser.method_header_body_return method_header_body571 =null;


        Object SEMICOLON572_tree=null;

        try {
            // Objcm.g:877:2: ( method_header_body ( SEMICOLON )? )
            // Objcm.g:877:4: method_header_body ( SEMICOLON )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_method_header_body_in_method_header4693);
            method_header_body571=method_header_body();

            state._fsp--;

            adaptor.addChild(root_0, method_header_body571.getTree());

            // Objcm.g:877:23: ( SEMICOLON )?
            int alt155=2;
            int LA155_0 = input.LA(1);

            if ( (LA155_0==SEMICOLON) ) {
                alt155=1;
            }
            switch (alt155) {
                case 1 :
                    // Objcm.g:877:23: SEMICOLON
                    {
                    SEMICOLON572=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_method_header4695); 
                    SEMICOLON572_tree = 
                    (Object)adaptor.create(SEMICOLON572)
                    ;
                    adaptor.addChild(root_0, SEMICOLON572_tree);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_header"


    public static class method_header_body_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_header_body"
    // Objcm.g:879:1: method_header_body : method_modifier_wrapper method_type name ( method_params )? ( va_args_wrapper )? ;
    public final ObjcmParser.method_header_body_return method_header_body() throws RecognitionException {
        ObjcmParser.method_header_body_return retval = new ObjcmParser.method_header_body_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_modifier_wrapper_return method_modifier_wrapper573 =null;

        ObjcmParser.method_type_return method_type574 =null;

        ObjcmParser.name_return name575 =null;

        ObjcmParser.method_params_return method_params576 =null;

        ObjcmParser.va_args_wrapper_return va_args_wrapper577 =null;



        try {
            // Objcm.g:880:2: ( method_modifier_wrapper method_type name ( method_params )? ( va_args_wrapper )? )
            // Objcm.g:880:4: method_modifier_wrapper method_type name ( method_params )? ( va_args_wrapper )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_method_modifier_wrapper_in_method_header_body4705);
            method_modifier_wrapper573=method_modifier_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, method_modifier_wrapper573.getTree());

            pushFollow(FOLLOW_method_type_in_method_header_body4708);
            method_type574=method_type();

            state._fsp--;

            adaptor.addChild(root_0, method_type574.getTree());

            pushFollow(FOLLOW_name_in_method_header_body4711);
            name575=name();

            state._fsp--;

            adaptor.addChild(root_0, name575.getTree());

            // Objcm.g:880:48: ( method_params )?
            int alt156=2;
            int LA156_0 = input.LA(1);

            if ( (LA156_0==COLON||LA156_0==ID||LA156_0==L_BR||LA156_0==176) ) {
                alt156=1;
            }
            switch (alt156) {
                case 1 :
                    // Objcm.g:880:48: method_params
                    {
                    pushFollow(FOLLOW_method_params_in_method_header_body4714);
                    method_params576=method_params();

                    state._fsp--;

                    adaptor.addChild(root_0, method_params576.getTree());

                    }
                    break;

            }


            // Objcm.g:880:63: ( va_args_wrapper )?
            int alt157=2;
            int LA157_0 = input.LA(1);

            if ( (LA157_0==COMMA) ) {
                alt157=1;
            }
            switch (alt157) {
                case 1 :
                    // Objcm.g:880:63: va_args_wrapper
                    {
                    pushFollow(FOLLOW_va_args_wrapper_in_method_header_body4717);
                    va_args_wrapper577=va_args_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, va_args_wrapper577.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_header_body"


    public static class va_args_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "va_args_wrapper"
    // Objcm.g:882:1: va_args_wrapper : va_args -> ^( VA_ARGS va_args ) ;
    public final ObjcmParser.va_args_wrapper_return va_args_wrapper() throws RecognitionException {
        ObjcmParser.va_args_wrapper_return retval = new ObjcmParser.va_args_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.va_args_return va_args578 =null;


        RewriteRuleSubtreeStream stream_va_args=new RewriteRuleSubtreeStream(adaptor,"rule va_args");
        try {
            // Objcm.g:883:2: ( va_args -> ^( VA_ARGS va_args ) )
            // Objcm.g:883:4: va_args
            {
            pushFollow(FOLLOW_va_args_in_va_args_wrapper4727);
            va_args578=va_args();

            state._fsp--;

            stream_va_args.add(va_args578.getTree());

            // AST REWRITE
            // elements: va_args
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 883:12: -> ^( VA_ARGS va_args )
            {
                // Objcm.g:883:15: ^( VA_ARGS va_args )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(VA_ARGS, "VA_ARGS")
                , root_1);

                adaptor.addChild(root_1, stream_va_args.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "va_args_wrapper"


    public static class va_args_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "va_args"
    // Objcm.g:885:1: va_args : COMMA '...' ( SEMICOLON )? ;
    public final ObjcmParser.va_args_return va_args() throws RecognitionException {
        ObjcmParser.va_args_return retval = new ObjcmParser.va_args_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA579=null;
        Token string_literal580=null;
        Token SEMICOLON581=null;

        Object COMMA579_tree=null;
        Object string_literal580_tree=null;
        Object SEMICOLON581_tree=null;

        try {
            // Objcm.g:885:9: ( COMMA '...' ( SEMICOLON )? )
            // Objcm.g:885:11: COMMA '...' ( SEMICOLON )?
            {
            root_0 = (Object)adaptor.nil();


            COMMA579=(Token)match(input,COMMA,FOLLOW_COMMA_in_va_args4744); 
            COMMA579_tree = 
            (Object)adaptor.create(COMMA579)
            ;
            adaptor.addChild(root_0, COMMA579_tree);


            string_literal580=(Token)match(input,152,FOLLOW_152_in_va_args4747); 
            string_literal580_tree = 
            (Object)adaptor.create(string_literal580)
            ;
            adaptor.addChild(root_0, string_literal580_tree);


            // Objcm.g:885:25: ( SEMICOLON )?
            int alt158=2;
            int LA158_0 = input.LA(1);

            if ( (LA158_0==SEMICOLON) ) {
                alt158=1;
            }
            switch (alt158) {
                case 1 :
                    // Objcm.g:885:25: SEMICOLON
                    {
                    SEMICOLON581=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_va_args4750); 
                    SEMICOLON581_tree = 
                    (Object)adaptor.create(SEMICOLON581)
                    ;
                    adaptor.addChild(root_0, SEMICOLON581_tree);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "va_args"


    public static class method_header_body2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_header_body2"
    // Objcm.g:887:1: method_header_body2 : method_type name ( method_params2 )? ;
    public final ObjcmParser.method_header_body2_return method_header_body2() throws RecognitionException {
        ObjcmParser.method_header_body2_return retval = new ObjcmParser.method_header_body2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_type_return method_type582 =null;

        ObjcmParser.name_return name583 =null;

        ObjcmParser.method_params2_return method_params2584 =null;



        try {
            // Objcm.g:888:2: ( method_type name ( method_params2 )? )
            // Objcm.g:888:4: method_type name ( method_params2 )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_method_type_in_method_header_body24761);
            method_type582=method_type();

            state._fsp--;

            adaptor.addChild(root_0, method_type582.getTree());

            pushFollow(FOLLOW_name_in_method_header_body24763);
            name583=name();

            state._fsp--;

            adaptor.addChild(root_0, name583.getTree());

            // Objcm.g:888:22: ( method_params2 )?
            int alt159=2;
            int LA159_0 = input.LA(1);

            if ( (LA159_0==L_BR) ) {
                alt159=1;
            }
            switch (alt159) {
                case 1 :
                    // Objcm.g:888:22: method_params2
                    {
                    pushFollow(FOLLOW_method_params2_in_method_header_body24766);
                    method_params2584=method_params2();

                    state._fsp--;

                    adaptor.addChild(root_0, method_params2584.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_header_body2"


    public static class method_header_body3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_header_body3"
    // Objcm.g:890:1: method_header_body3 : method_params2 ;
    public final ObjcmParser.method_header_body3_return method_header_body3() throws RecognitionException {
        ObjcmParser.method_header_body3_return retval = new ObjcmParser.method_header_body3_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_params2_return method_params2585 =null;



        try {
            // Objcm.g:891:2: ( method_params2 )
            // Objcm.g:891:4: method_params2
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_method_params2_in_method_header_body34776);
            method_params2585=method_params2();

            state._fsp--;

            adaptor.addChild(root_0, method_params2585.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_header_body3"


    public static class method_modifier_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_modifier_wrapper"
    // Objcm.g:893:1: method_modifier_wrapper : method_modifier -> ^( MODIFIER method_modifier ) ;
    public final ObjcmParser.method_modifier_wrapper_return method_modifier_wrapper() throws RecognitionException {
        ObjcmParser.method_modifier_wrapper_return retval = new ObjcmParser.method_modifier_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_modifier_return method_modifier586 =null;


        RewriteRuleSubtreeStream stream_method_modifier=new RewriteRuleSubtreeStream(adaptor,"rule method_modifier");
        try {
            // Objcm.g:894:2: ( method_modifier -> ^( MODIFIER method_modifier ) )
            // Objcm.g:894:4: method_modifier
            {
            pushFollow(FOLLOW_method_modifier_in_method_modifier_wrapper4785);
            method_modifier586=method_modifier();

            state._fsp--;

            stream_method_modifier.add(method_modifier586.getTree());

            // AST REWRITE
            // elements: method_modifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 894:20: -> ^( MODIFIER method_modifier )
            {
                // Objcm.g:894:23: ^( MODIFIER method_modifier )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(MODIFIER, "MODIFIER")
                , root_1);

                adaptor.addChild(root_1, stream_method_modifier.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_modifier_wrapper"


    public static class method_modifier_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_modifier"
    // Objcm.g:896:1: method_modifier : ( '+' | '-' );
    public final ObjcmParser.method_modifier_return method_modifier() throws RecognitionException {
        ObjcmParser.method_modifier_return retval = new ObjcmParser.method_modifier_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set587=null;

        Object set587_tree=null;

        try {
            // Objcm.g:897:2: ( '+' | '-' )
            // Objcm.g:
            {
            root_0 = (Object)adaptor.nil();


            set587=(Token)input.LT(1);

            if ( input.LA(1)==L_MINUS||input.LA(1)==L_PLUS ) {
                input.consume();
                adaptor.addChild(root_0, 
                (Object)adaptor.create(set587)
                );
                state.errorRecovery=false;
            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_modifier"


    public static class method_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_type"
    // Objcm.g:899:1: method_type : ( L_BR ( STRUCT_PREFIX )? type_internal ( generic )? ( ASTERISK )* R_BR -> ^( TYPE type_internal ) | L_BR ( CONST_PREFIX )? ( known_types )? ( ID )* ( generic )? ( ASTERISK )* R_BR -> ^( TYPE ( ID )+ ) );
    public final ObjcmParser.method_type_return method_type() throws RecognitionException {
        ObjcmParser.method_type_return retval = new ObjcmParser.method_type_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_BR588=null;
        Token STRUCT_PREFIX589=null;
        Token ASTERISK592=null;
        Token R_BR593=null;
        Token L_BR594=null;
        Token CONST_PREFIX595=null;
        Token ID597=null;
        Token ASTERISK599=null;
        Token R_BR600=null;
        ObjcmParser.type_internal_return type_internal590 =null;

        ObjcmParser.generic_return generic591 =null;

        ObjcmParser.known_types_return known_types596 =null;

        ObjcmParser.generic_return generic598 =null;


        Object L_BR588_tree=null;
        Object STRUCT_PREFIX589_tree=null;
        Object ASTERISK592_tree=null;
        Object R_BR593_tree=null;
        Object L_BR594_tree=null;
        Object CONST_PREFIX595_tree=null;
        Object ID597_tree=null;
        Object ASTERISK599_tree=null;
        Object R_BR600_tree=null;
        RewriteRuleTokenStream stream_R_BR=new RewriteRuleTokenStream(adaptor,"token R_BR");
        RewriteRuleTokenStream stream_STRUCT_PREFIX=new RewriteRuleTokenStream(adaptor,"token STRUCT_PREFIX");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleTokenStream stream_L_BR=new RewriteRuleTokenStream(adaptor,"token L_BR");
        RewriteRuleTokenStream stream_ASTERISK=new RewriteRuleTokenStream(adaptor,"token ASTERISK");
        RewriteRuleTokenStream stream_CONST_PREFIX=new RewriteRuleTokenStream(adaptor,"token CONST_PREFIX");
        RewriteRuleSubtreeStream stream_generic=new RewriteRuleSubtreeStream(adaptor,"rule generic");
        RewriteRuleSubtreeStream stream_type_internal=new RewriteRuleSubtreeStream(adaptor,"rule type_internal");
        RewriteRuleSubtreeStream stream_known_types=new RewriteRuleSubtreeStream(adaptor,"rule known_types");
        try {
            // Objcm.g:900:2: ( L_BR ( STRUCT_PREFIX )? type_internal ( generic )? ( ASTERISK )* R_BR -> ^( TYPE type_internal ) | L_BR ( CONST_PREFIX )? ( known_types )? ( ID )* ( generic )? ( ASTERISK )* R_BR -> ^( TYPE ( ID )+ ) )
            int alt168=2;
            int LA168_0 = input.LA(1);

            if ( (LA168_0==L_BR) ) {
                switch ( input.LA(2) ) {
                case STRUCT_PREFIX:
                    {
                    alt168=1;
                    }
                    break;
                case VOID:
                    {
                    switch ( input.LA(3) ) {
                    case L_KBR:
                        {
                        alt168=1;
                        }
                        break;
                    case L_LESS:
                        {
                        int LA168_11 = input.LA(4);

                        if ( (LA168_11==ID) ) {
                            alt168=1;
                        }
                        else {
                            NoViableAltException nvae =
                                new NoViableAltException("", 168, 11, input);

                            throw nvae;

                        }
                        }
                        break;
                    case ASTERISK:
                        {
                        int LA168_12 = input.LA(4);

                        if ( (LA168_12==R_BR) ) {
                            alt168=1;
                        }
                        else if ( (LA168_12==ASTERISK) ) {
                            alt168=1;
                        }
                        else {
                            NoViableAltException nvae =
                                new NoViableAltException("", 168, 12, input);

                            throw nvae;

                        }
                        }
                        break;
                    case R_BR:
                        {
                        alt168=1;
                        }
                        break;
                    case ID:
                        {
                        alt168=2;
                        }
                        break;
                    default:
                        NoViableAltException nvae =
                            new NoViableAltException("", 168, 3, input);

                        throw nvae;

                    }

                    }
                    break;
                case ASTERISK:
                case CONST_PREFIX:
                case L_LESS:
                case R_BR:
                case 183:
                    {
                    alt168=2;
                    }
                    break;
                case ID:
                    {
                    switch ( input.LA(3) ) {
                    case L_KBR:
                        {
                        alt168=1;
                        }
                        break;
                    case L_LESS:
                        {
                        int LA168_16 = input.LA(4);

                        if ( (LA168_16==ID) ) {
                            alt168=1;
                        }
                        else {
                            NoViableAltException nvae =
                                new NoViableAltException("", 168, 16, input);

                            throw nvae;

                        }
                        }
                        break;
                    case ASTERISK:
                        {
                        int LA168_17 = input.LA(4);

                        if ( (LA168_17==R_BR) ) {
                            alt168=1;
                        }
                        else if ( (LA168_17==ASTERISK) ) {
                            alt168=1;
                        }
                        else {
                            NoViableAltException nvae =
                                new NoViableAltException("", 168, 17, input);

                            throw nvae;

                        }
                        }
                        break;
                    case R_BR:
                        {
                        alt168=1;
                        }
                        break;
                    case ID:
                        {
                        alt168=2;
                        }
                        break;
                    default:
                        NoViableAltException nvae =
                            new NoViableAltException("", 168, 5, input);

                        throw nvae;

                    }

                    }
                    break;
                default:
                    NoViableAltException nvae =
                        new NoViableAltException("", 168, 1, input);

                    throw nvae;

                }

            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 168, 0, input);

                throw nvae;

            }
            switch (alt168) {
                case 1 :
                    // Objcm.g:900:4: L_BR ( STRUCT_PREFIX )? type_internal ( generic )? ( ASTERISK )* R_BR
                    {
                    L_BR588=(Token)match(input,L_BR,FOLLOW_L_BR_in_method_type4817);  
                    stream_L_BR.add(L_BR588);


                    // Objcm.g:900:10: ( STRUCT_PREFIX )?
                    int alt160=2;
                    int LA160_0 = input.LA(1);

                    if ( (LA160_0==STRUCT_PREFIX) ) {
                        alt160=1;
                    }
                    switch (alt160) {
                        case 1 :
                            // Objcm.g:900:10: STRUCT_PREFIX
                            {
                            STRUCT_PREFIX589=(Token)match(input,STRUCT_PREFIX,FOLLOW_STRUCT_PREFIX_in_method_type4820);  
                            stream_STRUCT_PREFIX.add(STRUCT_PREFIX589);


                            }
                            break;

                    }


                    pushFollow(FOLLOW_type_internal_in_method_type4823);
                    type_internal590=type_internal();

                    state._fsp--;

                    stream_type_internal.add(type_internal590.getTree());

                    // Objcm.g:900:40: ( generic )?
                    int alt161=2;
                    int LA161_0 = input.LA(1);

                    if ( (LA161_0==L_LESS) ) {
                        alt161=1;
                    }
                    switch (alt161) {
                        case 1 :
                            // Objcm.g:900:40: generic
                            {
                            pushFollow(FOLLOW_generic_in_method_type4826);
                            generic591=generic();

                            state._fsp--;

                            stream_generic.add(generic591.getTree());

                            }
                            break;

                    }


                    // Objcm.g:900:49: ( ASTERISK )*
                    loop162:
                    do {
                        int alt162=2;
                        int LA162_0 = input.LA(1);

                        if ( (LA162_0==ASTERISK) ) {
                            alt162=1;
                        }


                        switch (alt162) {
                    	case 1 :
                    	    // Objcm.g:900:49: ASTERISK
                    	    {
                    	    ASTERISK592=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_method_type4829);  
                    	    stream_ASTERISK.add(ASTERISK592);


                    	    }
                    	    break;

                    	default :
                    	    break loop162;
                        }
                    } while (true);


                    R_BR593=(Token)match(input,R_BR,FOLLOW_R_BR_in_method_type4832);  
                    stream_R_BR.add(R_BR593);


                    // AST REWRITE
                    // elements: type_internal
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 900:64: -> ^( TYPE type_internal )
                    {
                        // Objcm.g:900:67: ^( TYPE type_internal )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(TYPE, "TYPE")
                        , root_1);

                        adaptor.addChild(root_1, stream_type_internal.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 2 :
                    // Objcm.g:901:5: L_BR ( CONST_PREFIX )? ( known_types )? ( ID )* ( generic )? ( ASTERISK )* R_BR
                    {
                    L_BR594=(Token)match(input,L_BR,FOLLOW_L_BR_in_method_type4846);  
                    stream_L_BR.add(L_BR594);


                    // Objcm.g:901:11: ( CONST_PREFIX )?
                    int alt163=2;
                    int LA163_0 = input.LA(1);

                    if ( (LA163_0==CONST_PREFIX) ) {
                        alt163=1;
                    }
                    switch (alt163) {
                        case 1 :
                            // Objcm.g:901:11: CONST_PREFIX
                            {
                            CONST_PREFIX595=(Token)match(input,CONST_PREFIX,FOLLOW_CONST_PREFIX_in_method_type4849);  
                            stream_CONST_PREFIX.add(CONST_PREFIX595);


                            }
                            break;

                    }


                    // Objcm.g:901:25: ( known_types )?
                    int alt164=2;
                    int LA164_0 = input.LA(1);

                    if ( (LA164_0==VOID||LA164_0==183) ) {
                        alt164=1;
                    }
                    switch (alt164) {
                        case 1 :
                            // Objcm.g:901:25: known_types
                            {
                            pushFollow(FOLLOW_known_types_in_method_type4852);
                            known_types596=known_types();

                            state._fsp--;

                            stream_known_types.add(known_types596.getTree());

                            }
                            break;

                    }


                    // Objcm.g:901:38: ( ID )*
                    loop165:
                    do {
                        int alt165=2;
                        int LA165_0 = input.LA(1);

                        if ( (LA165_0==ID) ) {
                            alt165=1;
                        }


                        switch (alt165) {
                    	case 1 :
                    	    // Objcm.g:901:38: ID
                    	    {
                    	    ID597=(Token)match(input,ID,FOLLOW_ID_in_method_type4855);  
                    	    stream_ID.add(ID597);


                    	    }
                    	    break;

                    	default :
                    	    break loop165;
                        }
                    } while (true);


                    // Objcm.g:901:42: ( generic )?
                    int alt166=2;
                    int LA166_0 = input.LA(1);

                    if ( (LA166_0==L_LESS) ) {
                        alt166=1;
                    }
                    switch (alt166) {
                        case 1 :
                            // Objcm.g:901:42: generic
                            {
                            pushFollow(FOLLOW_generic_in_method_type4858);
                            generic598=generic();

                            state._fsp--;

                            stream_generic.add(generic598.getTree());

                            }
                            break;

                    }


                    // Objcm.g:901:51: ( ASTERISK )*
                    loop167:
                    do {
                        int alt167=2;
                        int LA167_0 = input.LA(1);

                        if ( (LA167_0==ASTERISK) ) {
                            alt167=1;
                        }


                        switch (alt167) {
                    	case 1 :
                    	    // Objcm.g:901:51: ASTERISK
                    	    {
                    	    ASTERISK599=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_method_type4861);  
                    	    stream_ASTERISK.add(ASTERISK599);


                    	    }
                    	    break;

                    	default :
                    	    break loop167;
                        }
                    } while (true);


                    R_BR600=(Token)match(input,R_BR,FOLLOW_R_BR_in_method_type4864);  
                    stream_R_BR.add(R_BR600);


                    // AST REWRITE
                    // elements: ID
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 901:66: -> ^( TYPE ( ID )+ )
                    {
                        // Objcm.g:901:69: ^( TYPE ( ID )+ )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(TYPE, "TYPE")
                        , root_1);

                        if ( !(stream_ID.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_ID.hasNext() ) {
                            adaptor.addChild(root_1, 
                            stream_ID.nextNode()
                            );

                        }
                        stream_ID.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_type"


    public static class type_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_internal"
    // Objcm.g:904:1: type_internal : type_internal1 ( L_KBR R_KBR )? ;
    public final ObjcmParser.type_internal_return type_internal() throws RecognitionException {
        ObjcmParser.type_internal_return retval = new ObjcmParser.type_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_KBR602=null;
        Token R_KBR603=null;
        ObjcmParser.type_internal1_return type_internal1601 =null;


        Object L_KBR602_tree=null;
        Object R_KBR603_tree=null;

        try {
            // Objcm.g:905:2: ( type_internal1 ( L_KBR R_KBR )? )
            // Objcm.g:905:4: type_internal1 ( L_KBR R_KBR )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_type_internal1_in_type_internal4889);
            type_internal1601=type_internal1();

            state._fsp--;

            adaptor.addChild(root_0, type_internal1601.getTree());

            // Objcm.g:905:19: ( L_KBR R_KBR )?
            int alt169=2;
            int LA169_0 = input.LA(1);

            if ( (LA169_0==L_KBR) ) {
                int LA169_1 = input.LA(2);

                if ( (LA169_1==R_KBR) ) {
                    alt169=1;
                }
            }
            switch (alt169) {
                case 1 :
                    // Objcm.g:905:20: L_KBR R_KBR
                    {
                    L_KBR602=(Token)match(input,L_KBR,FOLLOW_L_KBR_in_type_internal4892); 
                    L_KBR602_tree = 
                    (Object)adaptor.create(L_KBR602)
                    ;
                    adaptor.addChild(root_0, L_KBR602_tree);


                    R_KBR603=(Token)match(input,R_KBR,FOLLOW_R_KBR_in_type_internal4895); 
                    R_KBR603_tree = 
                    (Object)adaptor.create(R_KBR603)
                    ;
                    adaptor.addChild(root_0, R_KBR603_tree);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_internal"


    public static class type_internal1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_internal1"
    // Objcm.g:908:1: type_internal1 : ( VOID | ID );
    public final ObjcmParser.type_internal1_return type_internal1() throws RecognitionException {
        ObjcmParser.type_internal1_return retval = new ObjcmParser.type_internal1_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set604=null;

        Object set604_tree=null;

        try {
            // Objcm.g:909:2: ( VOID | ID )
            // Objcm.g:
            {
            root_0 = (Object)adaptor.nil();


            set604=(Token)input.LT(1);

            if ( input.LA(1)==ID||input.LA(1)==VOID ) {
                input.consume();
                adaptor.addChild(root_0, 
                (Object)adaptor.create(set604)
                );
                state.errorRecovery=false;
            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_internal1"


    public static class generic_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "generic"
    // Objcm.g:913:1: generic : L_LESS generic_internal L_MORE -> ^( GENERIC generic_internal ) ;
    public final ObjcmParser.generic_return generic() throws RecognitionException {
        ObjcmParser.generic_return retval = new ObjcmParser.generic_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_LESS605=null;
        Token L_MORE607=null;
        ObjcmParser.generic_internal_return generic_internal606 =null;


        Object L_LESS605_tree=null;
        Object L_MORE607_tree=null;
        RewriteRuleTokenStream stream_L_MORE=new RewriteRuleTokenStream(adaptor,"token L_MORE");
        RewriteRuleTokenStream stream_L_LESS=new RewriteRuleTokenStream(adaptor,"token L_LESS");
        RewriteRuleSubtreeStream stream_generic_internal=new RewriteRuleSubtreeStream(adaptor,"rule generic_internal");
        try {
            // Objcm.g:913:8: ( L_LESS generic_internal L_MORE -> ^( GENERIC generic_internal ) )
            // Objcm.g:913:10: L_LESS generic_internal L_MORE
            {
            L_LESS605=(Token)match(input,L_LESS,FOLLOW_L_LESS_in_generic4928);  
            stream_L_LESS.add(L_LESS605);


            pushFollow(FOLLOW_generic_internal_in_generic4930);
            generic_internal606=generic_internal();

            state._fsp--;

            stream_generic_internal.add(generic_internal606.getTree());

            L_MORE607=(Token)match(input,L_MORE,FOLLOW_L_MORE_in_generic4932);  
            stream_L_MORE.add(L_MORE607);


            // AST REWRITE
            // elements: generic_internal
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 913:41: -> ^( GENERIC generic_internal )
            {
                // Objcm.g:913:44: ^( GENERIC generic_internal )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(GENERIC, "GENERIC")
                , root_1);

                adaptor.addChild(root_1, stream_generic_internal.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "generic"


    public static class generic_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "generic_internal"
    // Objcm.g:915:1: generic_internal : ID ( ASTERISK )* ( COMMA ID ( ASTERISK )* )* ;
    public final ObjcmParser.generic_internal_return generic_internal() throws RecognitionException {
        ObjcmParser.generic_internal_return retval = new ObjcmParser.generic_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID608=null;
        Token ASTERISK609=null;
        Token COMMA610=null;
        Token ID611=null;
        Token ASTERISK612=null;

        Object ID608_tree=null;
        Object ASTERISK609_tree=null;
        Object COMMA610_tree=null;
        Object ID611_tree=null;
        Object ASTERISK612_tree=null;

        try {
            // Objcm.g:916:2: ( ID ( ASTERISK )* ( COMMA ID ( ASTERISK )* )* )
            // Objcm.g:916:5: ID ( ASTERISK )* ( COMMA ID ( ASTERISK )* )*
            {
            root_0 = (Object)adaptor.nil();


            ID608=(Token)match(input,ID,FOLLOW_ID_in_generic_internal4951); 
            ID608_tree = 
            (Object)adaptor.create(ID608)
            ;
            adaptor.addChild(root_0, ID608_tree);


            // Objcm.g:916:9: ( ASTERISK )*
            loop170:
            do {
                int alt170=2;
                int LA170_0 = input.LA(1);

                if ( (LA170_0==ASTERISK) ) {
                    alt170=1;
                }


                switch (alt170) {
            	case 1 :
            	    // Objcm.g:916:9: ASTERISK
            	    {
            	    ASTERISK609=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_generic_internal4954); 
            	    ASTERISK609_tree = 
            	    (Object)adaptor.create(ASTERISK609)
            	    ;
            	    adaptor.addChild(root_0, ASTERISK609_tree);


            	    }
            	    break;

            	default :
            	    break loop170;
                }
            } while (true);


            // Objcm.g:916:19: ( COMMA ID ( ASTERISK )* )*
            loop172:
            do {
                int alt172=2;
                int LA172_0 = input.LA(1);

                if ( (LA172_0==COMMA) ) {
                    alt172=1;
                }


                switch (alt172) {
            	case 1 :
            	    // Objcm.g:916:20: COMMA ID ( ASTERISK )*
            	    {
            	    COMMA610=(Token)match(input,COMMA,FOLLOW_COMMA_in_generic_internal4958); 
            	    COMMA610_tree = 
            	    (Object)adaptor.create(COMMA610)
            	    ;
            	    adaptor.addChild(root_0, COMMA610_tree);


            	    ID611=(Token)match(input,ID,FOLLOW_ID_in_generic_internal4961); 
            	    ID611_tree = 
            	    (Object)adaptor.create(ID611)
            	    ;
            	    adaptor.addChild(root_0, ID611_tree);


            	    // Objcm.g:916:31: ( ASTERISK )*
            	    loop171:
            	    do {
            	        int alt171=2;
            	        int LA171_0 = input.LA(1);

            	        if ( (LA171_0==ASTERISK) ) {
            	            alt171=1;
            	        }


            	        switch (alt171) {
            	    	case 1 :
            	    	    // Objcm.g:916:31: ASTERISK
            	    	    {
            	    	    ASTERISK612=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_generic_internal4964); 
            	    	    ASTERISK612_tree = 
            	    	    (Object)adaptor.create(ASTERISK612)
            	    	    ;
            	    	    adaptor.addChild(root_0, ASTERISK612_tree);


            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop171;
            	        }
            	    } while (true);


            	    }
            	    break;

            	default :
            	    break loop172;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "generic_internal"


    public static class method_params2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_params2"
    // Objcm.g:918:1: method_params2 : L_BR method_param_wrapper2 ( COMMA method_param_wrapper2 )* R_BR ;
    public final ObjcmParser.method_params2_return method_params2() throws RecognitionException {
        ObjcmParser.method_params2_return retval = new ObjcmParser.method_params2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_BR613=null;
        Token COMMA615=null;
        Token R_BR617=null;
        ObjcmParser.method_param_wrapper2_return method_param_wrapper2614 =null;

        ObjcmParser.method_param_wrapper2_return method_param_wrapper2616 =null;


        Object L_BR613_tree=null;
        Object COMMA615_tree=null;
        Object R_BR617_tree=null;

        try {
            // Objcm.g:919:2: ( L_BR method_param_wrapper2 ( COMMA method_param_wrapper2 )* R_BR )
            // Objcm.g:919:4: L_BR method_param_wrapper2 ( COMMA method_param_wrapper2 )* R_BR
            {
            root_0 = (Object)adaptor.nil();


            L_BR613=(Token)match(input,L_BR,FOLLOW_L_BR_in_method_params24976); 
            L_BR613_tree = 
            (Object)adaptor.create(L_BR613)
            ;
            adaptor.addChild(root_0, L_BR613_tree);


            pushFollow(FOLLOW_method_param_wrapper2_in_method_params24979);
            method_param_wrapper2614=method_param_wrapper2();

            state._fsp--;

            adaptor.addChild(root_0, method_param_wrapper2614.getTree());

            // Objcm.g:919:33: ( COMMA method_param_wrapper2 )*
            loop173:
            do {
                int alt173=2;
                int LA173_0 = input.LA(1);

                if ( (LA173_0==COMMA) ) {
                    alt173=1;
                }


                switch (alt173) {
            	case 1 :
            	    // Objcm.g:919:34: COMMA method_param_wrapper2
            	    {
            	    COMMA615=(Token)match(input,COMMA,FOLLOW_COMMA_in_method_params24983); 
            	    COMMA615_tree = 
            	    (Object)adaptor.create(COMMA615)
            	    ;
            	    adaptor.addChild(root_0, COMMA615_tree);


            	    pushFollow(FOLLOW_method_param_wrapper2_in_method_params24986);
            	    method_param_wrapper2616=method_param_wrapper2();

            	    state._fsp--;

            	    adaptor.addChild(root_0, method_param_wrapper2616.getTree());

            	    }
            	    break;

            	default :
            	    break loop173;
                }
            } while (true);


            R_BR617=(Token)match(input,R_BR,FOLLOW_R_BR_in_method_params24990); 
            R_BR617_tree = 
            (Object)adaptor.create(R_BR617)
            ;
            adaptor.addChild(root_0, R_BR617_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_params2"


    public static class method_param_wrapper2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_param_wrapper2"
    // Objcm.g:922:1: method_param_wrapper2 : method_param2 -> ^( PARAM method_param2 ) ;
    public final ObjcmParser.method_param_wrapper2_return method_param_wrapper2() throws RecognitionException {
        ObjcmParser.method_param_wrapper2_return retval = new ObjcmParser.method_param_wrapper2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_param2_return method_param2618 =null;


        RewriteRuleSubtreeStream stream_method_param2=new RewriteRuleSubtreeStream(adaptor,"rule method_param2");
        try {
            // Objcm.g:923:2: ( method_param2 -> ^( PARAM method_param2 ) )
            // Objcm.g:923:4: method_param2
            {
            pushFollow(FOLLOW_method_param2_in_method_param_wrapper25001);
            method_param2618=method_param2();

            state._fsp--;

            stream_method_param2.add(method_param2618.getTree());

            // AST REWRITE
            // elements: method_param2
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 923:18: -> ^( PARAM method_param2 )
            {
                // Objcm.g:923:21: ^( PARAM method_param2 )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PARAM, "PARAM")
                , root_1);

                adaptor.addChild(root_1, stream_method_param2.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_param_wrapper2"


    public static class method_param2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_param2"
    // Objcm.g:925:1: method_param2 : ( CONST_PREFIX )? ( ENUM_PREFIX )? ( STRUCT_PREFIX )? ( 'unsigned' )? field_type ( name )? ( indexed )? ;
    public final ObjcmParser.method_param2_return method_param2() throws RecognitionException {
        ObjcmParser.method_param2_return retval = new ObjcmParser.method_param2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token CONST_PREFIX619=null;
        Token ENUM_PREFIX620=null;
        Token STRUCT_PREFIX621=null;
        Token string_literal622=null;
        ObjcmParser.field_type_return field_type623 =null;

        ObjcmParser.name_return name624 =null;

        ObjcmParser.indexed_return indexed625 =null;


        Object CONST_PREFIX619_tree=null;
        Object ENUM_PREFIX620_tree=null;
        Object STRUCT_PREFIX621_tree=null;
        Object string_literal622_tree=null;

        try {
            // Objcm.g:926:2: ( ( CONST_PREFIX )? ( ENUM_PREFIX )? ( STRUCT_PREFIX )? ( 'unsigned' )? field_type ( name )? ( indexed )? )
            // Objcm.g:926:4: ( CONST_PREFIX )? ( ENUM_PREFIX )? ( STRUCT_PREFIX )? ( 'unsigned' )? field_type ( name )? ( indexed )?
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:926:4: ( CONST_PREFIX )?
            int alt174=2;
            int LA174_0 = input.LA(1);

            if ( (LA174_0==CONST_PREFIX) ) {
                alt174=1;
            }
            switch (alt174) {
                case 1 :
                    // Objcm.g:926:4: CONST_PREFIX
                    {
                    CONST_PREFIX619=(Token)match(input,CONST_PREFIX,FOLLOW_CONST_PREFIX_in_method_param25019); 
                    CONST_PREFIX619_tree = 
                    (Object)adaptor.create(CONST_PREFIX619)
                    ;
                    adaptor.addChild(root_0, CONST_PREFIX619_tree);


                    }
                    break;

            }


            // Objcm.g:926:18: ( ENUM_PREFIX )?
            int alt175=2;
            int LA175_0 = input.LA(1);

            if ( (LA175_0==ENUM_PREFIX) ) {
                alt175=1;
            }
            switch (alt175) {
                case 1 :
                    // Objcm.g:926:18: ENUM_PREFIX
                    {
                    ENUM_PREFIX620=(Token)match(input,ENUM_PREFIX,FOLLOW_ENUM_PREFIX_in_method_param25022); 
                    ENUM_PREFIX620_tree = 
                    (Object)adaptor.create(ENUM_PREFIX620)
                    ;
                    adaptor.addChild(root_0, ENUM_PREFIX620_tree);


                    }
                    break;

            }


            // Objcm.g:926:31: ( STRUCT_PREFIX )?
            int alt176=2;
            int LA176_0 = input.LA(1);

            if ( (LA176_0==STRUCT_PREFIX) ) {
                alt176=1;
            }
            switch (alt176) {
                case 1 :
                    // Objcm.g:926:31: STRUCT_PREFIX
                    {
                    STRUCT_PREFIX621=(Token)match(input,STRUCT_PREFIX,FOLLOW_STRUCT_PREFIX_in_method_param25025); 
                    STRUCT_PREFIX621_tree = 
                    (Object)adaptor.create(STRUCT_PREFIX621)
                    ;
                    adaptor.addChild(root_0, STRUCT_PREFIX621_tree);


                    }
                    break;

            }


            // Objcm.g:926:46: ( 'unsigned' )?
            int alt177=2;
            int LA177_0 = input.LA(1);

            if ( (LA177_0==183) ) {
                alt177=1;
            }
            switch (alt177) {
                case 1 :
                    // Objcm.g:926:46: 'unsigned'
                    {
                    string_literal622=(Token)match(input,183,FOLLOW_183_in_method_param25028); 
                    string_literal622_tree = 
                    (Object)adaptor.create(string_literal622)
                    ;
                    adaptor.addChild(root_0, string_literal622_tree);


                    }
                    break;

            }


            pushFollow(FOLLOW_field_type_in_method_param25031);
            field_type623=field_type();

            state._fsp--;

            adaptor.addChild(root_0, field_type623.getTree());

            // Objcm.g:926:69: ( name )?
            int alt178=2;
            int LA178_0 = input.LA(1);

            if ( (LA178_0==ID||LA178_0==176) ) {
                alt178=1;
            }
            switch (alt178) {
                case 1 :
                    // Objcm.g:926:69: name
                    {
                    pushFollow(FOLLOW_name_in_method_param25033);
                    name624=name();

                    state._fsp--;

                    adaptor.addChild(root_0, name624.getTree());

                    }
                    break;

            }


            // Objcm.g:926:75: ( indexed )?
            int alt179=2;
            int LA179_0 = input.LA(1);

            if ( (LA179_0==L_KBR) ) {
                alt179=1;
            }
            switch (alt179) {
                case 1 :
                    // Objcm.g:926:75: indexed
                    {
                    pushFollow(FOLLOW_indexed_in_method_param25036);
                    indexed625=indexed();

                    state._fsp--;

                    adaptor.addChild(root_0, indexed625.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_param2"


    public static class indexed_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "indexed"
    // Objcm.g:928:1: indexed : L_KBR ( NUMBER )? R_KBR ;
    public final ObjcmParser.indexed_return indexed() throws RecognitionException {
        ObjcmParser.indexed_return retval = new ObjcmParser.indexed_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_KBR626=null;
        Token NUMBER627=null;
        Token R_KBR628=null;

        Object L_KBR626_tree=null;
        Object NUMBER627_tree=null;
        Object R_KBR628_tree=null;

        try {
            // Objcm.g:928:9: ( L_KBR ( NUMBER )? R_KBR )
            // Objcm.g:928:11: L_KBR ( NUMBER )? R_KBR
            {
            root_0 = (Object)adaptor.nil();


            L_KBR626=(Token)match(input,L_KBR,FOLLOW_L_KBR_in_indexed5046); 
            L_KBR626_tree = 
            (Object)adaptor.create(L_KBR626)
            ;
            adaptor.addChild(root_0, L_KBR626_tree);


            // Objcm.g:928:17: ( NUMBER )?
            int alt180=2;
            int LA180_0 = input.LA(1);

            if ( (LA180_0==NUMBER) ) {
                alt180=1;
            }
            switch (alt180) {
                case 1 :
                    // Objcm.g:928:17: NUMBER
                    {
                    NUMBER627=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_indexed5048); 
                    NUMBER627_tree = 
                    (Object)adaptor.create(NUMBER627)
                    ;
                    adaptor.addChild(root_0, NUMBER627_tree);


                    }
                    break;

            }


            R_KBR628=(Token)match(input,R_KBR,FOLLOW_R_KBR_in_indexed5051); 
            R_KBR628_tree = 
            (Object)adaptor.create(R_KBR628)
            ;
            adaptor.addChild(root_0, R_KBR628_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "indexed"


    public static class method_params_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_params"
    // Objcm.g:930:1: method_params : ( method_param )+ -> ( ^( PARAM method_param ) )+ ;
    public final ObjcmParser.method_params_return method_params() throws RecognitionException {
        ObjcmParser.method_params_return retval = new ObjcmParser.method_params_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_param_return method_param629 =null;


        RewriteRuleSubtreeStream stream_method_param=new RewriteRuleSubtreeStream(adaptor,"rule method_param");
        try {
            // Objcm.g:931:2: ( ( method_param )+ -> ( ^( PARAM method_param ) )+ )
            // Objcm.g:931:4: ( method_param )+
            {
            // Objcm.g:931:4: ( method_param )+
            int cnt181=0;
            loop181:
            do {
                int alt181=2;
                int LA181_0 = input.LA(1);

                if ( (LA181_0==COLON||LA181_0==ID||LA181_0==L_BR||LA181_0==176) ) {
                    alt181=1;
                }


                switch (alt181) {
            	case 1 :
            	    // Objcm.g:931:4: method_param
            	    {
            	    pushFollow(FOLLOW_method_param_in_method_params5061);
            	    method_param629=method_param();

            	    state._fsp--;

            	    stream_method_param.add(method_param629.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt181 >= 1 ) break loop181;
                        EarlyExitException eee =
                            new EarlyExitException(181, input);
                        throw eee;
                }
                cnt181++;
            } while (true);


            // AST REWRITE
            // elements: method_param
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 931:18: -> ( ^( PARAM method_param ) )+
            {
                if ( !(stream_method_param.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_method_param.hasNext() ) {
                    // Objcm.g:931:21: ^( PARAM method_param )
                    {
                    Object root_1 = (Object)adaptor.nil();
                    root_1 = (Object)adaptor.becomeRoot(
                    (Object)adaptor.create(PARAM, "PARAM")
                    , root_1);

                    adaptor.addChild(root_1, stream_method_param.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_method_param.reset();

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_params"


    public static class method_param_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_param"
    // Objcm.g:933:1: method_param : ( ( prefix )? | COLON ) ( method_type )? name ;
    public final ObjcmParser.method_param_return method_param() throws RecognitionException {
        ObjcmParser.method_param_return retval = new ObjcmParser.method_param_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COLON631=null;
        ObjcmParser.prefix_return prefix630 =null;

        ObjcmParser.method_type_return method_type632 =null;

        ObjcmParser.name_return name633 =null;


        Object COLON631_tree=null;

        try {
            // Objcm.g:934:2: ( ( ( prefix )? | COLON ) ( method_type )? name )
            // Objcm.g:934:4: ( ( prefix )? | COLON ) ( method_type )? name
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:934:4: ( ( prefix )? | COLON )
            int alt183=2;
            int LA183_0 = input.LA(1);

            if ( (LA183_0==ID||LA183_0==L_BR||LA183_0==176) ) {
                alt183=1;
            }
            else if ( (LA183_0==COLON) ) {
                alt183=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 183, 0, input);

                throw nvae;

            }
            switch (alt183) {
                case 1 :
                    // Objcm.g:934:5: ( prefix )?
                    {
                    // Objcm.g:934:5: ( prefix )?
                    int alt182=2;
                    int LA182_0 = input.LA(1);

                    if ( (LA182_0==ID) ) {
                        int LA182_1 = input.LA(2);

                        if ( (LA182_1==COLON) ) {
                            alt182=1;
                        }
                    }
                    switch (alt182) {
                        case 1 :
                            // Objcm.g:934:5: prefix
                            {
                            pushFollow(FOLLOW_prefix_in_method_param5083);
                            prefix630=prefix();

                            state._fsp--;

                            adaptor.addChild(root_0, prefix630.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // Objcm.g:934:15: COLON
                    {
                    COLON631=(Token)match(input,COLON,FOLLOW_COLON_in_method_param5088); 
                    COLON631_tree = 
                    (Object)adaptor.create(COLON631)
                    ;
                    adaptor.addChild(root_0, COLON631_tree);


                    }
                    break;

            }


            // Objcm.g:934:22: ( method_type )?
            int alt184=2;
            int LA184_0 = input.LA(1);

            if ( (LA184_0==L_BR) ) {
                alt184=1;
            }
            switch (alt184) {
                case 1 :
                    // Objcm.g:934:22: method_type
                    {
                    pushFollow(FOLLOW_method_type_in_method_param5091);
                    method_type632=method_type();

                    state._fsp--;

                    adaptor.addChild(root_0, method_type632.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_name_in_method_param5094);
            name633=name();

            state._fsp--;

            adaptor.addChild(root_0, name633.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_param"


    public static class prefix_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "prefix"
    // Objcm.g:937:1: prefix : ID COLON -> ^( PREFIX ID COLON ) ;
    public final ObjcmParser.prefix_return prefix() throws RecognitionException {
        ObjcmParser.prefix_return retval = new ObjcmParser.prefix_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID634=null;
        Token COLON635=null;

        Object ID634_tree=null;
        Object COLON635_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // Objcm.g:937:8: ( ID COLON -> ^( PREFIX ID COLON ) )
            // Objcm.g:937:10: ID COLON
            {
            ID634=(Token)match(input,ID,FOLLOW_ID_in_prefix5106);  
            stream_ID.add(ID634);


            COLON635=(Token)match(input,COLON,FOLLOW_COLON_in_prefix5108);  
            stream_COLON.add(COLON635);


            // AST REWRITE
            // elements: COLON, ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 937:19: -> ^( PREFIX ID COLON )
            {
                // Objcm.g:937:22: ^( PREFIX ID COLON )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PREFIX, "PREFIX")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                adaptor.addChild(root_1, 
                stream_COLON.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "prefix"


    public static class incomplete_prefix_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "incomplete_prefix"
    // Objcm.g:939:1: incomplete_prefix : COLON -> ^( INCOMPLETE_PREFIX COLON ) ;
    public final ObjcmParser.incomplete_prefix_return incomplete_prefix() throws RecognitionException {
        ObjcmParser.incomplete_prefix_return retval = new ObjcmParser.incomplete_prefix_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COLON636=null;

        Object COLON636_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");

        try {
            // Objcm.g:940:2: ( COLON -> ^( INCOMPLETE_PREFIX COLON ) )
            // Objcm.g:940:4: COLON
            {
            COLON636=(Token)match(input,COLON,FOLLOW_COLON_in_incomplete_prefix5127);  
            stream_COLON.add(COLON636);


            // AST REWRITE
            // elements: COLON
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 940:10: -> ^( INCOMPLETE_PREFIX COLON )
            {
                // Objcm.g:940:13: ^( INCOMPLETE_PREFIX COLON )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(INCOMPLETE_PREFIX, "INCOMPLETE_PREFIX")
                , root_1);

                adaptor.addChild(root_1, 
                stream_COLON.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "incomplete_prefix"


    public static class typedef_struct_declaration_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typedef_struct_declaration_wrapper"
    // Objcm.g:947:1: typedef_struct_declaration_wrapper : typedef_struct_declaration -> ^( TYPEDEF_STRUCT typedef_struct_declaration ) ;
    public final ObjcmParser.typedef_struct_declaration_wrapper_return typedef_struct_declaration_wrapper() throws RecognitionException {
        ObjcmParser.typedef_struct_declaration_wrapper_return retval = new ObjcmParser.typedef_struct_declaration_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.typedef_struct_declaration_return typedef_struct_declaration637 =null;


        RewriteRuleSubtreeStream stream_typedef_struct_declaration=new RewriteRuleSubtreeStream(adaptor,"rule typedef_struct_declaration");
        try {
            // Objcm.g:948:2: ( typedef_struct_declaration -> ^( TYPEDEF_STRUCT typedef_struct_declaration ) )
            // Objcm.g:948:4: typedef_struct_declaration
            {
            pushFollow(FOLLOW_typedef_struct_declaration_in_typedef_struct_declaration_wrapper5149);
            typedef_struct_declaration637=typedef_struct_declaration();

            state._fsp--;

            stream_typedef_struct_declaration.add(typedef_struct_declaration637.getTree());

            // AST REWRITE
            // elements: typedef_struct_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 948:31: -> ^( TYPEDEF_STRUCT typedef_struct_declaration )
            {
                // Objcm.g:948:34: ^( TYPEDEF_STRUCT typedef_struct_declaration )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TYPEDEF_STRUCT, "TYPEDEF_STRUCT")
                , root_1);

                adaptor.addChild(root_1, stream_typedef_struct_declaration.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typedef_struct_declaration_wrapper"


    public static class typedef_struct_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typedef_struct_declaration"
    // Objcm.g:951:1: typedef_struct_declaration : STRUCT_PREFIX ( name )? L_FBR ( typedef_struct_body )+ R_FBR ( name )? ( SEMICOLON )? ;
    public final ObjcmParser.typedef_struct_declaration_return typedef_struct_declaration() throws RecognitionException {
        ObjcmParser.typedef_struct_declaration_return retval = new ObjcmParser.typedef_struct_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STRUCT_PREFIX638=null;
        Token L_FBR640=null;
        Token R_FBR642=null;
        Token SEMICOLON644=null;
        ObjcmParser.name_return name639 =null;

        ObjcmParser.typedef_struct_body_return typedef_struct_body641 =null;

        ObjcmParser.name_return name643 =null;


        Object STRUCT_PREFIX638_tree=null;
        Object L_FBR640_tree=null;
        Object R_FBR642_tree=null;
        Object SEMICOLON644_tree=null;

        try {
            // Objcm.g:952:2: ( STRUCT_PREFIX ( name )? L_FBR ( typedef_struct_body )+ R_FBR ( name )? ( SEMICOLON )? )
            // Objcm.g:952:4: STRUCT_PREFIX ( name )? L_FBR ( typedef_struct_body )+ R_FBR ( name )? ( SEMICOLON )?
            {
            root_0 = (Object)adaptor.nil();


            STRUCT_PREFIX638=(Token)match(input,STRUCT_PREFIX,FOLLOW_STRUCT_PREFIX_in_typedef_struct_declaration5169); 
            STRUCT_PREFIX638_tree = 
            (Object)adaptor.create(STRUCT_PREFIX638)
            ;
            adaptor.addChild(root_0, STRUCT_PREFIX638_tree);


            // Objcm.g:952:18: ( name )?
            int alt185=2;
            int LA185_0 = input.LA(1);

            if ( (LA185_0==ID||LA185_0==176) ) {
                alt185=1;
            }
            switch (alt185) {
                case 1 :
                    // Objcm.g:952:18: name
                    {
                    pushFollow(FOLLOW_name_in_typedef_struct_declaration5171);
                    name639=name();

                    state._fsp--;

                    adaptor.addChild(root_0, name639.getTree());

                    }
                    break;

            }


            L_FBR640=(Token)match(input,L_FBR,FOLLOW_L_FBR_in_typedef_struct_declaration5175); 
            L_FBR640_tree = 
            (Object)adaptor.create(L_FBR640)
            ;
            adaptor.addChild(root_0, L_FBR640_tree);


            // Objcm.g:954:3: ( typedef_struct_body )+
            int cnt186=0;
            loop186:
            do {
                int alt186=2;
                int LA186_0 = input.LA(1);

                if ( (LA186_0==ID||LA186_0==VOID) ) {
                    alt186=1;
                }


                switch (alt186) {
            	case 1 :
            	    // Objcm.g:954:3: typedef_struct_body
            	    {
            	    pushFollow(FOLLOW_typedef_struct_body_in_typedef_struct_declaration5180);
            	    typedef_struct_body641=typedef_struct_body();

            	    state._fsp--;

            	    adaptor.addChild(root_0, typedef_struct_body641.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt186 >= 1 ) break loop186;
                        EarlyExitException eee =
                            new EarlyExitException(186, input);
                        throw eee;
                }
                cnt186++;
            } while (true);


            R_FBR642=(Token)match(input,R_FBR,FOLLOW_R_FBR_in_typedef_struct_declaration5184); 
            R_FBR642_tree = 
            (Object)adaptor.create(R_FBR642)
            ;
            adaptor.addChild(root_0, R_FBR642_tree);


            // Objcm.g:955:9: ( name )?
            int alt187=2;
            int LA187_0 = input.LA(1);

            if ( (LA187_0==ID) ) {
                int LA187_1 = input.LA(2);

                if ( (LA187_1==EOF||LA187_1==CONST_PREFIX||LA187_1==L_MINUS||LA187_1==L_PLUS||LA187_1==SEMICOLON||LA187_1==STATIC_PREFIX||LA187_1==STRUCT_PREFIX||LA187_1==VOID||LA187_1==155||(LA187_1 >= 157 && LA187_1 <= 158)||LA187_1==162||LA187_1==173||LA187_1==181) ) {
                    alt187=1;
                }
                else if ( (LA187_1==ID) ) {
                    int LA187_21 = input.LA(3);

                    if ( (LA187_21==ASTERISK||LA187_21==ID||LA187_21==L_KBR||LA187_21==L_LESS||LA187_21==176) ) {
                        alt187=1;
                    }
                }
            }
            else if ( (LA187_0==176) ) {
                alt187=1;
            }
            switch (alt187) {
                case 1 :
                    // Objcm.g:955:9: name
                    {
                    pushFollow(FOLLOW_name_in_typedef_struct_declaration5187);
                    name643=name();

                    state._fsp--;

                    adaptor.addChild(root_0, name643.getTree());

                    }
                    break;

            }


            // Objcm.g:955:15: ( SEMICOLON )?
            int alt188=2;
            int LA188_0 = input.LA(1);

            if ( (LA188_0==SEMICOLON) ) {
                alt188=1;
            }
            switch (alt188) {
                case 1 :
                    // Objcm.g:955:15: SEMICOLON
                    {
                    SEMICOLON644=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_typedef_struct_declaration5190); 
                    SEMICOLON644_tree = 
                    (Object)adaptor.create(SEMICOLON644)
                    ;
                    adaptor.addChild(root_0, SEMICOLON644_tree);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typedef_struct_declaration"


    public static class typedef_struct_body_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typedef_struct_body"
    // Objcm.g:958:1: typedef_struct_body : typedef_struct_declaration_element_wrapper ;
    public final ObjcmParser.typedef_struct_body_return typedef_struct_body() throws RecognitionException {
        ObjcmParser.typedef_struct_body_return retval = new ObjcmParser.typedef_struct_body_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.typedef_struct_declaration_element_wrapper_return typedef_struct_declaration_element_wrapper645 =null;



        try {
            // Objcm.g:959:2: ( typedef_struct_declaration_element_wrapper )
            // Objcm.g:959:4: typedef_struct_declaration_element_wrapper
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_typedef_struct_declaration_element_wrapper_in_typedef_struct_body5203);
            typedef_struct_declaration_element_wrapper645=typedef_struct_declaration_element_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, typedef_struct_declaration_element_wrapper645.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typedef_struct_body"


    public static class typedef_struct_declaration_element_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typedef_struct_declaration_element_wrapper"
    // Objcm.g:962:1: typedef_struct_declaration_element_wrapper : struct_field -> ^( STRUCT_FIELD struct_field ) ;
    public final ObjcmParser.typedef_struct_declaration_element_wrapper_return typedef_struct_declaration_element_wrapper() throws RecognitionException {
        ObjcmParser.typedef_struct_declaration_element_wrapper_return retval = new ObjcmParser.typedef_struct_declaration_element_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.struct_field_return struct_field646 =null;


        RewriteRuleSubtreeStream stream_struct_field=new RewriteRuleSubtreeStream(adaptor,"rule struct_field");
        try {
            // Objcm.g:963:2: ( struct_field -> ^( STRUCT_FIELD struct_field ) )
            // Objcm.g:963:4: struct_field
            {
            pushFollow(FOLLOW_struct_field_in_typedef_struct_declaration_element_wrapper5215);
            struct_field646=struct_field();

            state._fsp--;

            stream_struct_field.add(struct_field646.getTree());

            // AST REWRITE
            // elements: struct_field
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 963:17: -> ^( STRUCT_FIELD struct_field )
            {
                // Objcm.g:963:20: ^( STRUCT_FIELD struct_field )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(STRUCT_FIELD, "STRUCT_FIELD")
                , root_1);

                adaptor.addChild(root_1, stream_struct_field.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typedef_struct_declaration_element_wrapper"


    public static class struct_field_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "struct_field"
    // Objcm.g:965:1: struct_field : field_type name ( COMMA name )* SEMICOLON ;
    public final ObjcmParser.struct_field_return struct_field() throws RecognitionException {
        ObjcmParser.struct_field_return retval = new ObjcmParser.struct_field_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA649=null;
        Token SEMICOLON651=null;
        ObjcmParser.field_type_return field_type647 =null;

        ObjcmParser.name_return name648 =null;

        ObjcmParser.name_return name650 =null;


        Object COMMA649_tree=null;
        Object SEMICOLON651_tree=null;

        try {
            // Objcm.g:966:2: ( field_type name ( COMMA name )* SEMICOLON )
            // Objcm.g:966:4: field_type name ( COMMA name )* SEMICOLON
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_field_type_in_struct_field5233);
            field_type647=field_type();

            state._fsp--;

            adaptor.addChild(root_0, field_type647.getTree());

            pushFollow(FOLLOW_name_in_struct_field5235);
            name648=name();

            state._fsp--;

            adaptor.addChild(root_0, name648.getTree());

            // Objcm.g:966:21: ( COMMA name )*
            loop189:
            do {
                int alt189=2;
                int LA189_0 = input.LA(1);

                if ( (LA189_0==COMMA) ) {
                    alt189=1;
                }


                switch (alt189) {
            	case 1 :
            	    // Objcm.g:966:22: COMMA name
            	    {
            	    COMMA649=(Token)match(input,COMMA,FOLLOW_COMMA_in_struct_field5239); 
            	    COMMA649_tree = 
            	    (Object)adaptor.create(COMMA649)
            	    ;
            	    adaptor.addChild(root_0, COMMA649_tree);


            	    pushFollow(FOLLOW_name_in_struct_field5242);
            	    name650=name();

            	    state._fsp--;

            	    adaptor.addChild(root_0, name650.getTree());

            	    }
            	    break;

            	default :
            	    break loop189;
                }
            } while (true);


            SEMICOLON651=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_struct_field5246); 
            SEMICOLON651_tree = 
            (Object)adaptor.create(SEMICOLON651)
            ;
            adaptor.addChild(root_0, SEMICOLON651_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "struct_field"


    public static class typedef_declaration_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typedef_declaration_wrapper"
    // Objcm.g:973:1: typedef_declaration_wrapper : typedef_declaration -> ^( TYPEDEF typedef_declaration ) ;
    public final ObjcmParser.typedef_declaration_wrapper_return typedef_declaration_wrapper() throws RecognitionException {
        ObjcmParser.typedef_declaration_wrapper_return retval = new ObjcmParser.typedef_declaration_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.typedef_declaration_return typedef_declaration652 =null;


        RewriteRuleSubtreeStream stream_typedef_declaration=new RewriteRuleSubtreeStream(adaptor,"rule typedef_declaration");
        try {
            // Objcm.g:974:2: ( typedef_declaration -> ^( TYPEDEF typedef_declaration ) )
            // Objcm.g:974:4: typedef_declaration
            {
            pushFollow(FOLLOW_typedef_declaration_in_typedef_declaration_wrapper5262);
            typedef_declaration652=typedef_declaration();

            state._fsp--;

            stream_typedef_declaration.add(typedef_declaration652.getTree());

            // AST REWRITE
            // elements: typedef_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 974:24: -> ^( TYPEDEF typedef_declaration )
            {
                // Objcm.g:974:27: ^( TYPEDEF typedef_declaration )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TYPEDEF, "TYPEDEF")
                , root_1);

                adaptor.addChild(root_1, stream_typedef_declaration.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typedef_declaration_wrapper"


    public static class enum_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "enum_declaration"
    // Objcm.g:977:1: enum_declaration : typedef_declaration -> ^( ENUM typedef_declaration ) ;
    public final ObjcmParser.enum_declaration_return enum_declaration() throws RecognitionException {
        ObjcmParser.enum_declaration_return retval = new ObjcmParser.enum_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.typedef_declaration_return typedef_declaration653 =null;


        RewriteRuleSubtreeStream stream_typedef_declaration=new RewriteRuleSubtreeStream(adaptor,"rule typedef_declaration");
        try {
            // Objcm.g:978:2: ( typedef_declaration -> ^( ENUM typedef_declaration ) )
            // Objcm.g:978:4: typedef_declaration
            {
            pushFollow(FOLLOW_typedef_declaration_in_enum_declaration5282);
            typedef_declaration653=typedef_declaration();

            state._fsp--;

            stream_typedef_declaration.add(typedef_declaration653.getTree());

            // AST REWRITE
            // elements: typedef_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 978:24: -> ^( ENUM typedef_declaration )
            {
                // Objcm.g:978:27: ^( ENUM typedef_declaration )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(ENUM, "ENUM")
                , root_1);

                adaptor.addChild(root_1, stream_typedef_declaration.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "enum_declaration"


    public static class typedef_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typedef_declaration"
    // Objcm.g:980:1: typedef_declaration : ENUM_PREFIX L_FBR typedef_declaration_element_wrapper ( COMMA typedef_declaration_element_wrapper )* R_FBR ( name )? SEMICOLON ;
    public final ObjcmParser.typedef_declaration_return typedef_declaration() throws RecognitionException {
        ObjcmParser.typedef_declaration_return retval = new ObjcmParser.typedef_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ENUM_PREFIX654=null;
        Token L_FBR655=null;
        Token COMMA657=null;
        Token R_FBR659=null;
        Token SEMICOLON661=null;
        ObjcmParser.typedef_declaration_element_wrapper_return typedef_declaration_element_wrapper656 =null;

        ObjcmParser.typedef_declaration_element_wrapper_return typedef_declaration_element_wrapper658 =null;

        ObjcmParser.name_return name660 =null;


        Object ENUM_PREFIX654_tree=null;
        Object L_FBR655_tree=null;
        Object COMMA657_tree=null;
        Object R_FBR659_tree=null;
        Object SEMICOLON661_tree=null;

        try {
            // Objcm.g:981:2: ( ENUM_PREFIX L_FBR typedef_declaration_element_wrapper ( COMMA typedef_declaration_element_wrapper )* R_FBR ( name )? SEMICOLON )
            // Objcm.g:981:5: ENUM_PREFIX L_FBR typedef_declaration_element_wrapper ( COMMA typedef_declaration_element_wrapper )* R_FBR ( name )? SEMICOLON
            {
            root_0 = (Object)adaptor.nil();


            ENUM_PREFIX654=(Token)match(input,ENUM_PREFIX,FOLLOW_ENUM_PREFIX_in_typedef_declaration5302); 
            ENUM_PREFIX654_tree = 
            (Object)adaptor.create(ENUM_PREFIX654)
            ;
            adaptor.addChild(root_0, ENUM_PREFIX654_tree);


            L_FBR655=(Token)match(input,L_FBR,FOLLOW_L_FBR_in_typedef_declaration5304); 
            L_FBR655_tree = 
            (Object)adaptor.create(L_FBR655)
            ;
            adaptor.addChild(root_0, L_FBR655_tree);


            pushFollow(FOLLOW_typedef_declaration_element_wrapper_in_typedef_declaration5307);
            typedef_declaration_element_wrapper656=typedef_declaration_element_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, typedef_declaration_element_wrapper656.getTree());

            // Objcm.g:981:61: ( COMMA typedef_declaration_element_wrapper )*
            loop190:
            do {
                int alt190=2;
                int LA190_0 = input.LA(1);

                if ( (LA190_0==COMMA) ) {
                    alt190=1;
                }


                switch (alt190) {
            	case 1 :
            	    // Objcm.g:981:62: COMMA typedef_declaration_element_wrapper
            	    {
            	    COMMA657=(Token)match(input,COMMA,FOLLOW_COMMA_in_typedef_declaration5311); 
            	    COMMA657_tree = 
            	    (Object)adaptor.create(COMMA657)
            	    ;
            	    adaptor.addChild(root_0, COMMA657_tree);


            	    pushFollow(FOLLOW_typedef_declaration_element_wrapper_in_typedef_declaration5314);
            	    typedef_declaration_element_wrapper658=typedef_declaration_element_wrapper();

            	    state._fsp--;

            	    adaptor.addChild(root_0, typedef_declaration_element_wrapper658.getTree());

            	    }
            	    break;

            	default :
            	    break loop190;
                }
            } while (true);


            R_FBR659=(Token)match(input,R_FBR,FOLLOW_R_FBR_in_typedef_declaration5318); 
            R_FBR659_tree = 
            (Object)adaptor.create(R_FBR659)
            ;
            adaptor.addChild(root_0, R_FBR659_tree);


            // Objcm.g:981:114: ( name )?
            int alt191=2;
            int LA191_0 = input.LA(1);

            if ( (LA191_0==ID||LA191_0==176) ) {
                alt191=1;
            }
            switch (alt191) {
                case 1 :
                    // Objcm.g:981:114: name
                    {
                    pushFollow(FOLLOW_name_in_typedef_declaration5321);
                    name660=name();

                    state._fsp--;

                    adaptor.addChild(root_0, name660.getTree());

                    }
                    break;

            }


            SEMICOLON661=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_typedef_declaration5324); 
            SEMICOLON661_tree = 
            (Object)adaptor.create(SEMICOLON661)
            ;
            adaptor.addChild(root_0, SEMICOLON661_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typedef_declaration"


    public static class typedef_declaration_element_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typedef_declaration_element_wrapper"
    // Objcm.g:983:1: typedef_declaration_element_wrapper : typedef_declaration_element -> ^( TYPEDEF_ELEMENT typedef_declaration_element ) ;
    public final ObjcmParser.typedef_declaration_element_wrapper_return typedef_declaration_element_wrapper() throws RecognitionException {
        ObjcmParser.typedef_declaration_element_wrapper_return retval = new ObjcmParser.typedef_declaration_element_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.typedef_declaration_element_return typedef_declaration_element662 =null;


        RewriteRuleSubtreeStream stream_typedef_declaration_element=new RewriteRuleSubtreeStream(adaptor,"rule typedef_declaration_element");
        try {
            // Objcm.g:984:2: ( typedef_declaration_element -> ^( TYPEDEF_ELEMENT typedef_declaration_element ) )
            // Objcm.g:984:4: typedef_declaration_element
            {
            pushFollow(FOLLOW_typedef_declaration_element_in_typedef_declaration_element_wrapper5334);
            typedef_declaration_element662=typedef_declaration_element();

            state._fsp--;

            stream_typedef_declaration_element.add(typedef_declaration_element662.getTree());

            // AST REWRITE
            // elements: typedef_declaration_element
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 984:32: -> ^( TYPEDEF_ELEMENT typedef_declaration_element )
            {
                // Objcm.g:984:35: ^( TYPEDEF_ELEMENT typedef_declaration_element )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TYPEDEF_ELEMENT, "TYPEDEF_ELEMENT")
                , root_1);

                adaptor.addChild(root_1, stream_typedef_declaration_element.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typedef_declaration_element_wrapper"


    public static class typedef_declaration_element_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typedef_declaration_element"
    // Objcm.g:987:1: typedef_declaration_element : ID ( L_EQ ( ID | NUMBER ) )? ;
    public final ObjcmParser.typedef_declaration_element_return typedef_declaration_element() throws RecognitionException {
        ObjcmParser.typedef_declaration_element_return retval = new ObjcmParser.typedef_declaration_element_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID663=null;
        Token L_EQ664=null;
        Token set665=null;

        Object ID663_tree=null;
        Object L_EQ664_tree=null;
        Object set665_tree=null;

        try {
            // Objcm.g:988:2: ( ID ( L_EQ ( ID | NUMBER ) )? )
            // Objcm.g:988:4: ID ( L_EQ ( ID | NUMBER ) )?
            {
            root_0 = (Object)adaptor.nil();


            ID663=(Token)match(input,ID,FOLLOW_ID_in_typedef_declaration_element5353); 
            ID663_tree = 
            (Object)adaptor.create(ID663)
            ;
            adaptor.addChild(root_0, ID663_tree);


            // Objcm.g:988:8: ( L_EQ ( ID | NUMBER ) )?
            int alt192=2;
            int LA192_0 = input.LA(1);

            if ( (LA192_0==L_EQ) ) {
                alt192=1;
            }
            switch (alt192) {
                case 1 :
                    // Objcm.g:988:9: L_EQ ( ID | NUMBER )
                    {
                    L_EQ664=(Token)match(input,L_EQ,FOLLOW_L_EQ_in_typedef_declaration_element5357); 
                    L_EQ664_tree = 
                    (Object)adaptor.create(L_EQ664)
                    ;
                    adaptor.addChild(root_0, L_EQ664_tree);


                    set665=(Token)input.LT(1);

                    if ( input.LA(1)==ID||input.LA(1)==NUMBER ) {
                        input.consume();
                        adaptor.addChild(root_0, 
                        (Object)adaptor.create(set665)
                        );
                        state.errorRecovery=false;
                    }
                    else {
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typedef_declaration_element"


    public static class field_declaration_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_declaration_wrapper"
    // Objcm.g:995:1: field_declaration_wrapper : field_declaration -> ^( FIELD field_declaration ) ;
    public final ObjcmParser.field_declaration_wrapper_return field_declaration_wrapper() throws RecognitionException {
        ObjcmParser.field_declaration_wrapper_return retval = new ObjcmParser.field_declaration_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.field_declaration_return field_declaration666 =null;


        RewriteRuleSubtreeStream stream_field_declaration=new RewriteRuleSubtreeStream(adaptor,"rule field_declaration");
        try {
            // Objcm.g:996:2: ( field_declaration -> ^( FIELD field_declaration ) )
            // Objcm.g:996:4: field_declaration
            {
            pushFollow(FOLLOW_field_declaration_in_field_declaration_wrapper5381);
            field_declaration666=field_declaration();

            state._fsp--;

            stream_field_declaration.add(field_declaration666.getTree());

            // AST REWRITE
            // elements: field_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 996:22: -> ^( FIELD field_declaration )
            {
                // Objcm.g:996:25: ^( FIELD field_declaration )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FIELD, "FIELD")
                , root_1);

                adaptor.addChild(root_1, stream_field_declaration.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_declaration_wrapper"


    public static class field_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_declaration"
    // Objcm.g:998:1: field_declaration : field_modifier_wrapper field_type name field_declaration_end ;
    public final ObjcmParser.field_declaration_return field_declaration() throws RecognitionException {
        ObjcmParser.field_declaration_return retval = new ObjcmParser.field_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.field_modifier_wrapper_return field_modifier_wrapper667 =null;

        ObjcmParser.field_type_return field_type668 =null;

        ObjcmParser.name_return name669 =null;

        ObjcmParser.field_declaration_end_return field_declaration_end670 =null;



        try {
            // Objcm.g:999:2: ( field_modifier_wrapper field_type name field_declaration_end )
            // Objcm.g:999:4: field_modifier_wrapper field_type name field_declaration_end
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_field_modifier_wrapper_in_field_declaration5398);
            field_modifier_wrapper667=field_modifier_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, field_modifier_wrapper667.getTree());

            pushFollow(FOLLOW_field_type_in_field_declaration5401);
            field_type668=field_type();

            state._fsp--;

            adaptor.addChild(root_0, field_type668.getTree());

            pushFollow(FOLLOW_name_in_field_declaration5403);
            name669=name();

            state._fsp--;

            adaptor.addChild(root_0, name669.getTree());

            pushFollow(FOLLOW_field_declaration_end_in_field_declaration5405);
            field_declaration_end670=field_declaration_end();

            state._fsp--;

            adaptor.addChild(root_0, field_declaration_end670.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_declaration"


    public static class field_declaration_end_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_declaration_end"
    // Objcm.g:1001:1: field_declaration_end : ( value_set )? SEMICOLON ;
    public final ObjcmParser.field_declaration_end_return field_declaration_end() throws RecognitionException {
        ObjcmParser.field_declaration_end_return retval = new ObjcmParser.field_declaration_end_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON672=null;
        ObjcmParser.value_set_return value_set671 =null;


        Object SEMICOLON672_tree=null;

        try {
            // Objcm.g:1002:2: ( ( value_set )? SEMICOLON )
            // Objcm.g:1002:5: ( value_set )? SEMICOLON
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:1002:5: ( value_set )?
            int alt193=2;
            int LA193_0 = input.LA(1);

            if ( (LA193_0==L_EQ) ) {
                alt193=1;
            }
            switch (alt193) {
                case 1 :
                    // Objcm.g:1002:5: value_set
                    {
                    pushFollow(FOLLOW_value_set_in_field_declaration_end5416);
                    value_set671=value_set();

                    state._fsp--;

                    adaptor.addChild(root_0, value_set671.getTree());

                    }
                    break;

            }


            SEMICOLON672=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_field_declaration_end5419); 
            SEMICOLON672_tree = 
            (Object)adaptor.create(SEMICOLON672)
            ;
            adaptor.addChild(root_0, SEMICOLON672_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_declaration_end"


    public static class type_start_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_start_wrapper"
    // Objcm.g:1004:1: type_start_wrapper : type_start -> ^( M_TYPE_START type_start ) ;
    public final ObjcmParser.type_start_wrapper_return type_start_wrapper() throws RecognitionException {
        ObjcmParser.type_start_wrapper_return retval = new ObjcmParser.type_start_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.type_start_return type_start673 =null;


        RewriteRuleSubtreeStream stream_type_start=new RewriteRuleSubtreeStream(adaptor,"rule type_start");
        try {
            // Objcm.g:1005:2: ( type_start -> ^( M_TYPE_START type_start ) )
            // Objcm.g:1005:4: type_start
            {
            pushFollow(FOLLOW_type_start_in_type_start_wrapper5429);
            type_start673=type_start();

            state._fsp--;

            stream_type_start.add(type_start673.getTree());

            // AST REWRITE
            // elements: type_start
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1005:15: -> ^( M_TYPE_START type_start )
            {
                // Objcm.g:1005:18: ^( M_TYPE_START type_start )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(M_TYPE_START, "M_TYPE_START")
                , root_1);

                adaptor.addChild(root_1, stream_type_start.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_start_wrapper"


    public static class type_start_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_start"
    // Objcm.g:1007:1: type_start : ( CONST_PREFIX )? field_type name type_end ;
    public final ObjcmParser.type_start_return type_start() throws RecognitionException {
        ObjcmParser.type_start_return retval = new ObjcmParser.type_start_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token CONST_PREFIX674=null;
        ObjcmParser.field_type_return field_type675 =null;

        ObjcmParser.name_return name676 =null;

        ObjcmParser.type_end_return type_end677 =null;


        Object CONST_PREFIX674_tree=null;

        try {
            // Objcm.g:1008:2: ( ( CONST_PREFIX )? field_type name type_end )
            // Objcm.g:1008:4: ( CONST_PREFIX )? field_type name type_end
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:1008:4: ( CONST_PREFIX )?
            int alt194=2;
            int LA194_0 = input.LA(1);

            if ( (LA194_0==CONST_PREFIX) ) {
                alt194=1;
            }
            switch (alt194) {
                case 1 :
                    // Objcm.g:1008:4: CONST_PREFIX
                    {
                    CONST_PREFIX674=(Token)match(input,CONST_PREFIX,FOLLOW_CONST_PREFIX_in_type_start5446); 
                    CONST_PREFIX674_tree = 
                    (Object)adaptor.create(CONST_PREFIX674)
                    ;
                    adaptor.addChild(root_0, CONST_PREFIX674_tree);


                    }
                    break;

            }


            pushFollow(FOLLOW_field_type_in_type_start5449);
            field_type675=field_type();

            state._fsp--;

            adaptor.addChild(root_0, field_type675.getTree());

            pushFollow(FOLLOW_name_in_type_start5451);
            name676=name();

            state._fsp--;

            adaptor.addChild(root_0, name676.getTree());

            pushFollow(FOLLOW_type_end_in_type_start5453);
            type_end677=type_end();

            state._fsp--;

            adaptor.addChild(root_0, type_end677.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_start"


    public static class type_end_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_end"
    // Objcm.g:1010:1: type_end : ( field_declaration4 -> ^( FIELD field_declaration4 ) | method_declaration4 -> ^( STATIC_METHOD method_declaration4 ) );
    public final ObjcmParser.type_end_return type_end() throws RecognitionException {
        ObjcmParser.type_end_return retval = new ObjcmParser.type_end_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.field_declaration4_return field_declaration4678 =null;

        ObjcmParser.method_declaration4_return method_declaration4679 =null;


        RewriteRuleSubtreeStream stream_field_declaration4=new RewriteRuleSubtreeStream(adaptor,"rule field_declaration4");
        RewriteRuleSubtreeStream stream_method_declaration4=new RewriteRuleSubtreeStream(adaptor,"rule method_declaration4");
        try {
            // Objcm.g:1010:9: ( field_declaration4 -> ^( FIELD field_declaration4 ) | method_declaration4 -> ^( STATIC_METHOD method_declaration4 ) )
            int alt195=2;
            int LA195_0 = input.LA(1);

            if ( (LA195_0==L_EQ||LA195_0==SEMICOLON) ) {
                alt195=1;
            }
            else if ( (LA195_0==L_BR) ) {
                alt195=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 195, 0, input);

                throw nvae;

            }
            switch (alt195) {
                case 1 :
                    // Objcm.g:1010:11: field_declaration4
                    {
                    pushFollow(FOLLOW_field_declaration4_in_type_end5461);
                    field_declaration4678=field_declaration4();

                    state._fsp--;

                    stream_field_declaration4.add(field_declaration4678.getTree());

                    // AST REWRITE
                    // elements: field_declaration4
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1010:30: -> ^( FIELD field_declaration4 )
                    {
                        // Objcm.g:1010:33: ^( FIELD field_declaration4 )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(FIELD, "FIELD")
                        , root_1);

                        adaptor.addChild(root_1, stream_field_declaration4.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 2 :
                    // Objcm.g:1011:4: method_declaration4
                    {
                    pushFollow(FOLLOW_method_declaration4_in_type_end5474);
                    method_declaration4679=method_declaration4();

                    state._fsp--;

                    stream_method_declaration4.add(method_declaration4679.getTree());

                    // AST REWRITE
                    // elements: method_declaration4
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1011:24: -> ^( STATIC_METHOD method_declaration4 )
                    {
                        // Objcm.g:1011:27: ^( STATIC_METHOD method_declaration4 )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(STATIC_METHOD, "STATIC_METHOD")
                        , root_1);

                        adaptor.addChild(root_1, stream_method_declaration4.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_end"


    public static class field_declaration4_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_declaration4"
    // Objcm.g:1014:1: field_declaration4 : ( value_set )? SEMICOLON ;
    public final ObjcmParser.field_declaration4_return field_declaration4() throws RecognitionException {
        ObjcmParser.field_declaration4_return retval = new ObjcmParser.field_declaration4_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON681=null;
        ObjcmParser.value_set_return value_set680 =null;


        Object SEMICOLON681_tree=null;

        try {
            // Objcm.g:1015:2: ( ( value_set )? SEMICOLON )
            // Objcm.g:1015:5: ( value_set )? SEMICOLON
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:1015:5: ( value_set )?
            int alt196=2;
            int LA196_0 = input.LA(1);

            if ( (LA196_0==L_EQ) ) {
                alt196=1;
            }
            switch (alt196) {
                case 1 :
                    // Objcm.g:1015:5: value_set
                    {
                    pushFollow(FOLLOW_value_set_in_field_declaration45496);
                    value_set680=value_set();

                    state._fsp--;

                    adaptor.addChild(root_0, value_set680.getTree());

                    }
                    break;

            }


            SEMICOLON681=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_field_declaration45499); 
            SEMICOLON681_tree = 
            (Object)adaptor.create(SEMICOLON681)
            ;
            adaptor.addChild(root_0, SEMICOLON681_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_declaration4"


    public static class method_declaration4_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_declaration4"
    // Objcm.g:1018:1: method_declaration4 : method_params2 block_wrapper ;
    public final ObjcmParser.method_declaration4_return method_declaration4() throws RecognitionException {
        ObjcmParser.method_declaration4_return retval = new ObjcmParser.method_declaration4_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_params2_return method_params2682 =null;

        ObjcmParser.block_wrapper_return block_wrapper683 =null;



        try {
            // Objcm.g:1019:2: ( method_params2 block_wrapper )
            // Objcm.g:1019:5: method_params2 block_wrapper
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_method_params2_in_method_declaration45512);
            method_params2682=method_params2();

            state._fsp--;

            adaptor.addChild(root_0, method_params2682.getTree());

            pushFollow(FOLLOW_block_wrapper_in_method_declaration45517);
            block_wrapper683=block_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, block_wrapper683.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_declaration4"


    public static class field_modifier_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_modifier_wrapper"
    // Objcm.g:1023:1: field_modifier_wrapper : field_modifier -> ^( MODIFIER field_modifier ) ;
    public final ObjcmParser.field_modifier_wrapper_return field_modifier_wrapper() throws RecognitionException {
        ObjcmParser.field_modifier_wrapper_return retval = new ObjcmParser.field_modifier_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.field_modifier_return field_modifier684 =null;


        RewriteRuleSubtreeStream stream_field_modifier=new RewriteRuleSubtreeStream(adaptor,"rule field_modifier");
        try {
            // Objcm.g:1024:2: ( field_modifier -> ^( MODIFIER field_modifier ) )
            // Objcm.g:1024:4: field_modifier
            {
            pushFollow(FOLLOW_field_modifier_in_field_modifier_wrapper5529);
            field_modifier684=field_modifier();

            state._fsp--;

            stream_field_modifier.add(field_modifier684.getTree());

            // AST REWRITE
            // elements: field_modifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1024:19: -> ^( MODIFIER field_modifier )
            {
                // Objcm.g:1024:22: ^( MODIFIER field_modifier )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(MODIFIER, "MODIFIER")
                , root_1);

                adaptor.addChild(root_1, stream_field_modifier.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_modifier_wrapper"


    public static class field_modifier_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_modifier"
    // Objcm.g:1026:1: field_modifier : 'extern' ;
    public final ObjcmParser.field_modifier_return field_modifier() throws RecognitionException {
        ObjcmParser.field_modifier_return retval = new ObjcmParser.field_modifier_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal685=null;

        Object string_literal685_tree=null;

        try {
            // Objcm.g:1027:2: ( 'extern' )
            // Objcm.g:1027:4: 'extern'
            {
            root_0 = (Object)adaptor.nil();


            string_literal685=(Token)match(input,173,FOLLOW_173_in_field_modifier5547); 
            string_literal685_tree = 
            (Object)adaptor.create(string_literal685)
            ;
            adaptor.addChild(root_0, string_literal685_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_modifier"


    public static class field_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_type"
    // Objcm.g:1030:1: field_type : field_type_internal -> ^( TYPE field_type_internal ) ;
    public final ObjcmParser.field_type_return field_type() throws RecognitionException {
        ObjcmParser.field_type_return retval = new ObjcmParser.field_type_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.field_type_internal_return field_type_internal686 =null;


        RewriteRuleSubtreeStream stream_field_type_internal=new RewriteRuleSubtreeStream(adaptor,"rule field_type_internal");
        try {
            // Objcm.g:1031:2: ( field_type_internal -> ^( TYPE field_type_internal ) )
            // Objcm.g:1031:5: field_type_internal
            {
            pushFollow(FOLLOW_field_type_internal_in_field_type5559);
            field_type_internal686=field_type_internal();

            state._fsp--;

            stream_field_type_internal.add(field_type_internal686.getTree());

            // AST REWRITE
            // elements: field_type_internal
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1031:25: -> ^( TYPE field_type_internal )
            {
                // Objcm.g:1031:28: ^( TYPE field_type_internal )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TYPE, "TYPE")
                , root_1);

                adaptor.addChild(root_1, stream_field_type_internal.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_type"


    public static class field_type_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_type_internal"
    // Objcm.g:1033:1: field_type_internal : type_internal ( generic )? ( ASTERISK )* ;
    public final ObjcmParser.field_type_internal_return field_type_internal() throws RecognitionException {
        ObjcmParser.field_type_internal_return retval = new ObjcmParser.field_type_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ASTERISK689=null;
        ObjcmParser.type_internal_return type_internal687 =null;

        ObjcmParser.generic_return generic688 =null;


        Object ASTERISK689_tree=null;

        try {
            // Objcm.g:1034:2: ( type_internal ( generic )? ( ASTERISK )* )
            // Objcm.g:1034:4: type_internal ( generic )? ( ASTERISK )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_type_internal_in_field_type_internal5578);
            type_internal687=type_internal();

            state._fsp--;

            adaptor.addChild(root_0, type_internal687.getTree());

            // Objcm.g:1034:19: ( generic )?
            int alt197=2;
            int LA197_0 = input.LA(1);

            if ( (LA197_0==L_LESS) ) {
                alt197=1;
            }
            switch (alt197) {
                case 1 :
                    // Objcm.g:1034:19: generic
                    {
                    pushFollow(FOLLOW_generic_in_field_type_internal5581);
                    generic688=generic();

                    state._fsp--;

                    adaptor.addChild(root_0, generic688.getTree());

                    }
                    break;

            }


            // Objcm.g:1034:28: ( ASTERISK )*
            loop198:
            do {
                int alt198=2;
                int LA198_0 = input.LA(1);

                if ( (LA198_0==ASTERISK) ) {
                    alt198=1;
                }


                switch (alt198) {
            	case 1 :
            	    // Objcm.g:1034:28: ASTERISK
            	    {
            	    ASTERISK689=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_field_type_internal5584); 
            	    ASTERISK689_tree = 
            	    (Object)adaptor.create(ASTERISK689)
            	    ;
            	    adaptor.addChild(root_0, ASTERISK689_tree);


            	    }
            	    break;

            	default :
            	    break loop198;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_type_internal"


    public static class name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "name"
    // Objcm.g:1040:1: name : name_internal -> ^( NAME name_internal ) ;
    public final ObjcmParser.name_return name() throws RecognitionException {
        ObjcmParser.name_return retval = new ObjcmParser.name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.name_internal_return name_internal690 =null;


        RewriteRuleSubtreeStream stream_name_internal=new RewriteRuleSubtreeStream(adaptor,"rule name_internal");
        try {
            // Objcm.g:1041:2: ( name_internal -> ^( NAME name_internal ) )
            // Objcm.g:1041:4: name_internal
            {
            pushFollow(FOLLOW_name_internal_in_name5598);
            name_internal690=name_internal();

            state._fsp--;

            stream_name_internal.add(name_internal690.getTree());

            // AST REWRITE
            // elements: name_internal
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1041:18: -> ^( NAME name_internal )
            {
                // Objcm.g:1041:21: ^( NAME name_internal )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(NAME, "NAME")
                , root_1);

                adaptor.addChild(root_1, stream_name_internal.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "name"


    public static class name_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "name_internal"
    // Objcm.g:1044:1: name_internal : ( ID | 'in' );
    public final ObjcmParser.name_internal_return name_internal() throws RecognitionException {
        ObjcmParser.name_internal_return retval = new ObjcmParser.name_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set691=null;

        Object set691_tree=null;

        try {
            // Objcm.g:1045:2: ( ID | 'in' )
            // Objcm.g:
            {
            root_0 = (Object)adaptor.nil();


            set691=(Token)input.LT(1);

            if ( input.LA(1)==ID||input.LA(1)==176 ) {
                input.consume();
                adaptor.addChild(root_0, 
                (Object)adaptor.create(set691)
                );
                state.errorRecovery=false;
            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "name_internal"


    public static class value_set_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "value_set"
    // Objcm.g:1049:1: value_set : L_EQ value -> ^( VALUE value ) ;
    public final ObjcmParser.value_set_return value_set() throws RecognitionException {
        ObjcmParser.value_set_return retval = new ObjcmParser.value_set_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_EQ692=null;
        ObjcmParser.value_return value693 =null;


        Object L_EQ692_tree=null;
        RewriteRuleTokenStream stream_L_EQ=new RewriteRuleTokenStream(adaptor,"token L_EQ");
        RewriteRuleSubtreeStream stream_value=new RewriteRuleSubtreeStream(adaptor,"rule value");
        try {
            // Objcm.g:1050:2: ( L_EQ value -> ^( VALUE value ) )
            // Objcm.g:1050:4: L_EQ value
            {
            L_EQ692=(Token)match(input,L_EQ,FOLLOW_L_EQ_in_value_set5638);  
            stream_L_EQ.add(L_EQ692);


            pushFollow(FOLLOW_value_in_value_set5641);
            value693=value();

            state._fsp--;

            stream_value.add(value693.getTree());

            // AST REWRITE
            // elements: value
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1050:16: -> ^( VALUE value )
            {
                // Objcm.g:1050:19: ^( VALUE value )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(VALUE, "VALUE")
                , root_1);

                adaptor.addChild(root_1, stream_value.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "value_set"


    public static class value_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "value"
    // Objcm.g:1052:1: value : ( ID | string_value | null_stmt | array | NUMBER | struct_init2 );
    public final ObjcmParser.value_return value() throws RecognitionException {
        ObjcmParser.value_return retval = new ObjcmParser.value_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID694=null;
        Token NUMBER698=null;
        ObjcmParser.string_value_return string_value695 =null;

        ObjcmParser.null_stmt_return null_stmt696 =null;

        ObjcmParser.array_return array697 =null;

        ObjcmParser.struct_init2_return struct_init2699 =null;


        Object ID694_tree=null;
        Object NUMBER698_tree=null;

        try {
            // Objcm.g:1052:7: ( ID | string_value | null_stmt | array | NUMBER | struct_init2 )
            int alt199=6;
            alt199 = dfa199.predict(input);
            switch (alt199) {
                case 1 :
                    // Objcm.g:1052:9: ID
                    {
                    root_0 = (Object)adaptor.nil();


                    ID694=(Token)match(input,ID,FOLLOW_ID_in_value5657); 
                    ID694_tree = 
                    (Object)adaptor.create(ID694)
                    ;
                    adaptor.addChild(root_0, ID694_tree);


                    }
                    break;
                case 2 :
                    // Objcm.g:1052:14: string_value
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_string_value_in_value5661);
                    string_value695=string_value();

                    state._fsp--;

                    adaptor.addChild(root_0, string_value695.getTree());

                    }
                    break;
                case 3 :
                    // Objcm.g:1052:29: null_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_null_stmt_in_value5665);
                    null_stmt696=null_stmt();

                    state._fsp--;

                    adaptor.addChild(root_0, null_stmt696.getTree());

                    }
                    break;
                case 4 :
                    // Objcm.g:1052:41: array
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_array_in_value5669);
                    array697=array();

                    state._fsp--;

                    adaptor.addChild(root_0, array697.getTree());

                    }
                    break;
                case 5 :
                    // Objcm.g:1052:49: NUMBER
                    {
                    root_0 = (Object)adaptor.nil();


                    NUMBER698=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_value5673); 
                    NUMBER698_tree = 
                    (Object)adaptor.create(NUMBER698)
                    ;
                    adaptor.addChild(root_0, NUMBER698_tree);


                    }
                    break;
                case 6 :
                    // Objcm.g:1052:58: struct_init2
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_struct_init2_in_value5677);
                    struct_init2699=struct_init2();

                    state._fsp--;

                    adaptor.addChild(root_0, struct_init2699.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "value"


    public static class string_value_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "string_value"
    // Objcm.g:1054:1: string_value : STRING_LITERAL ;
    public final ObjcmParser.string_value_return string_value() throws RecognitionException {
        ObjcmParser.string_value_return retval = new ObjcmParser.string_value_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STRING_LITERAL700=null;

        Object STRING_LITERAL700_tree=null;

        try {
            // Objcm.g:1055:2: ( STRING_LITERAL )
            // Objcm.g:1055:4: STRING_LITERAL
            {
            root_0 = (Object)adaptor.nil();


            STRING_LITERAL700=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_string_value5687); 
            STRING_LITERAL700_tree = 
            (Object)adaptor.create(STRING_LITERAL700)
            ;
            adaptor.addChild(root_0, STRING_LITERAL700_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "string_value"


    public static class null_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "null_stmt"
    // Objcm.g:1057:1: null_stmt : ( 'nil' | 'Nil' );
    public final ObjcmParser.null_stmt_return null_stmt() throws RecognitionException {
        ObjcmParser.null_stmt_return retval = new ObjcmParser.null_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set701=null;

        Object set701_tree=null;

        try {
            // Objcm.g:1057:11: ( 'nil' | 'Nil' )
            // Objcm.g:
            {
            root_0 = (Object)adaptor.nil();


            set701=(Token)input.LT(1);

            if ( input.LA(1)==165||input.LA(1)==178 ) {
                input.consume();
                adaptor.addChild(root_0, 
                (Object)adaptor.create(set701)
                );
                state.errorRecovery=false;
            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "null_stmt"


    public static class array_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "array"
    // Objcm.g:1059:1: array : L_FBR value ( COMMA value )* R_FBR ;
    public final ObjcmParser.array_return array() throws RecognitionException {
        ObjcmParser.array_return retval = new ObjcmParser.array_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_FBR702=null;
        Token COMMA704=null;
        Token R_FBR706=null;
        ObjcmParser.value_return value703 =null;

        ObjcmParser.value_return value705 =null;


        Object L_FBR702_tree=null;
        Object COMMA704_tree=null;
        Object R_FBR706_tree=null;

        try {
            // Objcm.g:1059:7: ( L_FBR value ( COMMA value )* R_FBR )
            // Objcm.g:1059:9: L_FBR value ( COMMA value )* R_FBR
            {
            root_0 = (Object)adaptor.nil();


            L_FBR702=(Token)match(input,L_FBR,FOLLOW_L_FBR_in_array5708); 
            L_FBR702_tree = 
            (Object)adaptor.create(L_FBR702)
            ;
            adaptor.addChild(root_0, L_FBR702_tree);


            pushFollow(FOLLOW_value_in_array5711);
            value703=value();

            state._fsp--;

            adaptor.addChild(root_0, value703.getTree());

            // Objcm.g:1059:23: ( COMMA value )*
            loop200:
            do {
                int alt200=2;
                int LA200_0 = input.LA(1);

                if ( (LA200_0==COMMA) ) {
                    alt200=1;
                }


                switch (alt200) {
            	case 1 :
            	    // Objcm.g:1059:24: COMMA value
            	    {
            	    COMMA704=(Token)match(input,COMMA,FOLLOW_COMMA_in_array5715); 
            	    COMMA704_tree = 
            	    (Object)adaptor.create(COMMA704)
            	    ;
            	    adaptor.addChild(root_0, COMMA704_tree);


            	    pushFollow(FOLLOW_value_in_array5718);
            	    value705=value();

            	    state._fsp--;

            	    adaptor.addChild(root_0, value705.getTree());

            	    }
            	    break;

            	default :
            	    break loop200;
                }
            } while (true);


            R_FBR706=(Token)match(input,R_FBR,FOLLOW_R_FBR_in_array5722); 
            R_FBR706_tree = 
            (Object)adaptor.create(R_FBR706)
            ;
            adaptor.addChild(root_0, R_FBR706_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "array"

    // Delegated rules


    protected DFA30 dfa30 = new DFA30(this);
    protected DFA48 dfa48 = new DFA48(this);
    protected DFA56 dfa56 = new DFA56(this);
    protected DFA76 dfa76 = new DFA76(this);
    protected DFA80 dfa80 = new DFA80(this);
    protected DFA85 dfa85 = new DFA85(this);
    protected DFA97 dfa97 = new DFA97(this);
    protected DFA98 dfa98 = new DFA98(this);
    protected DFA108 dfa108 = new DFA108(this);
    protected DFA199 dfa199 = new DFA199(this);
    static final String DFA30_eotS =
        "\u010c\uffff";
    static final String DFA30_eofS =
        "\u010c\uffff";
    static final String DFA30_minS =
        "\1\4\15\uffff\1\4\26\uffff\1\4\1\uffff\1\4\1\uffff\2\4\2\61\2\uffff"+
        "\1\4\12\uffff\2\4\6\uffff\2\4\2\61\15\uffff\2\4\u00b7\uffff";
    static final String DFA30_maxS =
        "\1\u00b8\15\uffff\1\u00b0\26\uffff\1\u00b0\1\uffff\1\u00b0\1\uffff"+
        "\2\u00b7\2\u00b0\2\uffff\1\u00b7\12\uffff\2\u00b7\6\uffff\2\u00b7"+
        "\2\u00b0\15\uffff\2\u00b7\u00b7\uffff";
    static final String DFA30_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\21\uffff\1\7\1\10\1\11\1\12\1\13"+
        "\1\14\1\15\1\uffff\1\16\1\17\1\20\1\21\1\22\32\uffff\1\6\30\uffff"+
        "\1\6\1\uffff\24\6\1\uffff\26\6\21\uffff\23\6\11\uffff\1\6\10\uffff"+
        "\1\6\1\uffff\73\6\11\uffff\1\6\10\uffff\1\6\1\uffff";
    static final String DFA30_specialS =
        "\u010c\uffff}>";
    static final String[] DFA30_transitionS = {
            "\1\6\2\uffff\1\36\11\uffff\1\5\6\uffff\1\41\30\uffff\1\6\7\uffff"+
            "\1\6\2\uffff\1\6\5\uffff\1\6\4\uffff\1\6\1\uffff\1\6\4\uffff"+
            "\1\6\5\uffff\1\6\1\uffff\1\6\3\uffff\1\6\16\uffff\1\6\15\uffff"+
            "\1\44\2\uffff\1\36\1\6\2\uffff\1\3\1\uffff\3\6\1\uffff\1\40"+
            "\15\uffff\1\43\7\uffff\1\6\6\uffff\1\6\1\uffff\1\2\1\1\1\6\1"+
            "\uffff\1\42\3\uffff\1\4\1\31\1\uffff\1\34\1\30\1\6\1\uffff\1"+
            "\6\1\33\1\32\2\uffff\1\16\1\35",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\43\54\uffff\1\45\140\uffff\1\43\35\uffff\1\47",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\57\12\uffff\1\77\1\73\4\uffff\1\53\33\uffff\1\6\7\uffff"+
            "\2\6\1\72\1\51\1\77\2\72\1\6\1\uffff\1\52\1\6\1\72\3\6\1\72"+
            "\3\6\1\72\1\6\1\uffff\1\6\1\72\1\6\1\77\1\72\1\6\1\72\3\6\1"+
            "\72\1\uffff\1\6\1\72\32\uffff\1\77\32\uffff\1\6\4\uffff\1\54"+
            "\30\uffff\1\6",
            "",
            "\1\77\12\uffff\1\130\1\124\4\uffff\1\104\33\uffff\1\77\7\uffff"+
            "\2\77\1\123\1\102\1\77\2\123\1\77\1\uffff\1\103\1\77\1\123\3"+
            "\77\1\123\3\77\1\123\1\77\1\uffff\1\77\1\123\2\77\1\123\1\77"+
            "\1\123\3\77\1\123\1\uffff\1\77\1\123\32\uffff\1\130\32\uffff"+
            "\1\77\4\uffff\1\105\30\uffff\1\77",
            "",
            "\1\133\54\uffff\1\143\7\uffff\1\134\2\uffff\1\132\5\uffff\1"+
            "\144\4\uffff\1\135\1\uffff\1\141\4\uffff\1\136\5\uffff\1\135"+
            "\1\uffff\1\141\3\uffff\1\137\16\uffff\1\145\10\uffff\1\154\10"+
            "\uffff\1\140\4\uffff\1\146\1\147\1\150\17\uffff\1\43\7\uffff"+
            "\1\153\6\uffff\1\152\3\uffff\1\151\12\uffff\1\155\1\uffff\1"+
            "\151\4\uffff\1\142",
            "\1\161\54\uffff\1\171\7\uffff\1\162\2\uffff\1\160\5\uffff\1"+
            "\172\4\uffff\1\163\1\uffff\1\167\4\uffff\1\164\5\uffff\1\163"+
            "\1\uffff\1\167\3\uffff\1\165\16\uffff\1\173\12\uffff\1\157\6"+
            "\uffff\1\166\4\uffff\1\174\1\175\1\176\27\uffff\1\u0081\6\uffff"+
            "\1\u0080\3\uffff\1\177\12\uffff\1\171\1\uffff\1\177\4\uffff"+
            "\1\170",
            "\1\u0082\176\uffff\1\u0082",
            "\1\u0083\176\uffff\1\u0083",
            "",
            "",
            "\1\130\54\uffff\1\130\7\uffff\1\130\2\uffff\1\u0084\5\uffff"+
            "\1\130\4\uffff\1\130\1\uffff\1\130\4\uffff\1\130\5\uffff\1\130"+
            "\1\uffff\1\130\3\uffff\1\130\16\uffff\1\130\21\uffff\1\130\4"+
            "\uffff\3\130\27\uffff\1\130\6\uffff\1\130\3\uffff\1\130\12\uffff"+
            "\1\130\1\uffff\1\130\4\uffff\1\130",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0097\54\uffff\1\u009f\7\uffff\1\u0098\2\uffff\1\u0096\4"+
            "\uffff\1\u00a8\1\u00a0\4\uffff\1\u0099\1\uffff\1\u009d\4\uffff"+
            "\1\u009a\5\uffff\1\u0099\1\uffff\1\u009d\3\uffff\1\u009b\16"+
            "\uffff\1\u00a1\21\uffff\1\u009c\4\uffff\1\u00a2\1\u00a3\1\u00a4"+
            "\27\uffff\1\u00a7\6\uffff\1\u00a6\3\uffff\1\u00a5\12\uffff\1"+
            "\u009f\1\uffff\1\u00a5\4\uffff\1\u009e",
            "\1\130\54\uffff\1\u00b2\7\uffff\1\130\2\uffff\1\130\5\uffff"+
            "\1\130\4\uffff\1\130\1\uffff\1\130\4\uffff\1\130\5\uffff\1\130"+
            "\1\uffff\1\130\3\uffff\1\130\16\uffff\1\130\21\uffff\1\130\4"+
            "\uffff\3\130\17\uffff\1\43\7\uffff\1\130\6\uffff\1\130\3\uffff"+
            "\1\130\12\uffff\1\u00bb\1\uffff\1\130\4\uffff\1\130",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u00be\54\uffff\1\u00c6\7\uffff\1\u00bf\2\uffff\1\u00bd\5"+
            "\uffff\1\u00c7\4\uffff\1\u00c0\1\uffff\1\u00c4\4\uffff\1\u00c1"+
            "\5\uffff\1\u00c0\1\uffff\1\u00c4\3\uffff\1\u00c2\16\uffff\1"+
            "\u00c8\10\uffff\1\u00cf\10\uffff\1\u00c3\4\uffff\1\u00c9\1\u00ca"+
            "\1\u00cb\27\uffff\1\u00ce\6\uffff\1\u00cd\3\uffff\1\u00cc\12"+
            "\uffff\1\u00c6\1\uffff\1\u00cc\4\uffff\1\u00c5",
            "\1\u00d1\54\uffff\1\u00d9\7\uffff\1\u00d2\2\uffff\1\u00d0\5"+
            "\uffff\1\u00da\4\uffff\1\u00d3\1\uffff\1\u00d7\4\uffff\1\u00d4"+
            "\5\uffff\1\u00d3\1\uffff\1\u00d7\3\uffff\1\u00d5\16\uffff\1"+
            "\u00db\12\uffff\1\u00e2\6\uffff\1\u00d6\4\uffff\1\u00dc\1\u00dd"+
            "\1\u00de\27\uffff\1\u00e1\6\uffff\1\u00e0\3\uffff\1\u00df\12"+
            "\uffff\1\u00d9\1\uffff\1\u00df\4\uffff\1\u00d8",
            "\1\u00e3\176\uffff\1\u00e3",
            "\1\u00e4\176\uffff\1\u00e4",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u00e6\54\uffff\1\u00ee\7\uffff\1\u00e7\2\uffff\1\u00e5\4"+
            "\uffff\1\u00f7\1\u00ef\4\uffff\1\u00e8\1\uffff\1\u00ec\4\uffff"+
            "\1\u00e9\5\uffff\1\u00e8\1\uffff\1\u00ec\3\uffff\1\u00ea\16"+
            "\uffff\1\u00f0\21\uffff\1\u00eb\4\uffff\1\u00f1\1\u00f2\1\u00f3"+
            "\27\uffff\1\u00f6\6\uffff\1\u00f5\3\uffff\1\u00f4\12\uffff\1"+
            "\u00ee\1\uffff\1\u00f4\4\uffff\1\u00ed",
            "\1\130\54\uffff\1\u0101\7\uffff\1\130\2\uffff\1\130\5\uffff"+
            "\1\130\4\uffff\1\130\1\uffff\1\130\4\uffff\1\130\5\uffff\1\130"+
            "\1\uffff\1\130\3\uffff\1\130\16\uffff\1\130\21\uffff\1\130\4"+
            "\uffff\3\130\17\uffff\1\43\7\uffff\1\130\6\uffff\1\130\3\uffff"+
            "\1\130\12\uffff\1\u010a\1\uffff\1\130\4\uffff\1\130",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA30_eot = DFA.unpackEncodedString(DFA30_eotS);
    static final short[] DFA30_eof = DFA.unpackEncodedString(DFA30_eofS);
    static final char[] DFA30_min = DFA.unpackEncodedStringToUnsignedChars(DFA30_minS);
    static final char[] DFA30_max = DFA.unpackEncodedStringToUnsignedChars(DFA30_maxS);
    static final short[] DFA30_accept = DFA.unpackEncodedString(DFA30_acceptS);
    static final short[] DFA30_special = DFA.unpackEncodedString(DFA30_specialS);
    static final short[][] DFA30_transition;

    static {
        int numStates = DFA30_transitionS.length;
        DFA30_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA30_transition[i] = DFA.unpackEncodedString(DFA30_transitionS[i]);
        }
    }

    class DFA30 extends DFA {

        public DFA30(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 30;
            this.eot = DFA30_eot;
            this.eof = DFA30_eof;
            this.min = DFA30_min;
            this.max = DFA30_max;
            this.accept = DFA30_accept;
            this.special = DFA30_special;
            this.transition = DFA30_transition;
        }
        public String getDescription() {
            return "264:1: block_internal : ( try_stmt | throw_stmt | static_start_wrapper SEMICOLON | do_stmt | const_expression SEMICOLON | full_expr_wrapper ( ( ( full_expr2 )? SEMICOLON ) | COLON ) | if_stmt_wrapper | else_stmt | switch_stmt_wrapper | return_stmt | for_stmt | while_stmt_wrapper | single_operators | struct_variable SEMICOLON | enum_variable SEMICOLON | typeof_started SEMICOLON | known_type_started SEMICOLON | SEMICOLON );";
        }
    }
    static final String DFA48_eotS =
        "\u018a\uffff";
    static final String DFA48_eofS =
        "\u018a\uffff";
    static final String DFA48_minS =
        "\1\61\1\20\4\uffff\1\25\2\4\15\uffff\2\4\15\uffff\2\4\1\61\1\4\17"+
        "\uffff\1\4\10\61\1\4\1\61\5\4\2\74\u0140\uffff";
    static final String DFA48_maxS =
        "\1\u00b0\1\u00b7\4\uffff\3\u00b7\15\uffff\2\u00b7\15\uffff\1\u00b7"+
        "\1\u0097\1\u00b0\1\164\17\uffff\10\u00b7\1\u00b0\1\u0097\1\u00b0"+
        "\5\162\2\74\u0140\uffff";
    static final String DFA48_acceptS =
        "\2\uffff\1\2\1\uffff\1\3\1\1\105\uffff\22\1\1\uffff\1\1\10\uffff"+
        "\2\1\1\uffff\1\1\6\uffff\1\1\2\uffff\1\1\21\uffff\4\1\20\uffff\4"+
        "\1\17\uffff\u008b\1\1\uffff\22\1\1\uffff\16\1\1\uffff\16\1\1\uffff"+
        "\16\1\1\uffff\16\1\1\uffff\2\1";
    static final String DFA48_specialS =
        "\u018a\uffff}>";
    static final String[] DFA48_transitionS = {
            "\1\2\105\uffff\1\4\32\uffff\1\2\35\uffff\1\1",
            "\1\2\4\uffff\1\2\33\uffff\1\5\11\uffff\1\2\1\10\1\uffff\2\2"+
            "\2\uffff\1\7\1\uffff\1\2\3\uffff\1\2\3\uffff\1\2\3\uffff\1\2"+
            "\2\uffff\1\2\1\uffff\1\2\3\uffff\1\2\2\uffff\1\2\14\uffff\1"+
            "\5\15\uffff\1\2\10\uffff\3\5\24\uffff\1\2\2\uffff\1\5\6\uffff"+
            "\1\5\3\uffff\1\5\12\uffff\1\6\1\uffff\1\5\4\uffff\1\5",
            "",
            "",
            "",
            "",
            "\1\5\33\uffff\1\2\12\uffff\1\26\5\uffff\1\27\2\uffff\1\5\43"+
            "\uffff\1\2\10\uffff\1\5\15\uffff\3\2\24\uffff\1\5\2\uffff\1"+
            "\2\6\uffff\1\2\3\uffff\1\2\12\uffff\1\2\1\uffff\1\2\4\uffff"+
            "\1\2",
            "\1\2\54\uffff\1\46\7\uffff\1\2\2\uffff\1\45\5\uffff\1\47\4"+
            "\uffff\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3"+
            "\uffff\1\2\16\uffff\1\2\12\uffff\1\2\6\uffff\1\2\4\uffff\1\50"+
            "\2\2\27\uffff\1\2\6\uffff\1\2\3\uffff\1\2\12\uffff\1\46\1\uffff"+
            "\1\2\4\uffff\1\2",
            "\1\71\54\uffff\1\101\7\uffff\1\72\2\uffff\1\70\5\uffff\1\102"+
            "\4\uffff\1\73\1\uffff\1\77\4\uffff\1\74\5\uffff\1\73\1\uffff"+
            "\1\77\3\uffff\1\75\16\uffff\1\103\10\uffff\1\2\10\uffff\1\76"+
            "\4\uffff\1\104\1\105\1\106\27\uffff\1\111\6\uffff\1\110\3\uffff"+
            "\1\107\12\uffff\1\101\1\uffff\1\107\4\uffff\1\100",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\114\54\uffff\1\124\7\uffff\1\115\2\uffff\1\113\5\uffff\1"+
            "\125\4\uffff\1\116\1\uffff\1\122\4\uffff\1\117\5\uffff\1\116"+
            "\1\uffff\1\122\3\uffff\1\120\16\uffff\1\126\10\uffff\1\5\10"+
            "\uffff\1\121\4\uffff\1\127\1\130\1\131\27\uffff\1\134\6\uffff"+
            "\1\133\3\uffff\1\132\12\uffff\1\124\1\uffff\1\132\4\uffff\1"+
            "\123",
            "\1\5\54\uffff\1\147\7\uffff\1\5\2\uffff\1\136\5\uffff\1\150"+
            "\4\uffff\1\5\1\uffff\1\5\4\uffff\1\5\5\uffff\1\5\1\uffff\1\5"+
            "\3\uffff\1\5\16\uffff\1\5\12\uffff\1\5\6\uffff\1\5\4\uffff\1"+
            "\152\2\5\27\uffff\1\5\6\uffff\1\5\3\uffff\1\5\12\uffff\1\147"+
            "\1\uffff\1\5\4\uffff\1\5",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\2\14\uffff\1\2\37\uffff\1\161\7\uffff\1\2\2\uffff\1\2\5"+
            "\uffff\1\2\4\uffff\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1"+
            "\uffff\1\2\3\uffff\1\2\16\uffff\1\2\21\uffff\1\2\4\uffff\3\2"+
            "\17\uffff\1\2\7\uffff\1\2\6\uffff\1\2\3\uffff\1\2\12\uffff\1"+
            "\164\1\uffff\1\2\4\uffff\1\2",
            "\1\2\20\uffff\1\u0088\33\uffff\1\5\7\uffff\3\2\1\u0086\4\2"+
            "\1\uffff\1\u0087\13\2\1\uffff\13\2\1\uffff\2\2\27\uffff\1\2"+
            "\42\uffff\1\u0089",
            "\1\u009b\12\uffff\1\u009a\5\uffff\1\u009c\75\uffff\1\u009d"+
            "\57\uffff\1\u009b",
            "\1\2\54\uffff\1\5\7\uffff\3\2\1\uffff\4\2\2\uffff\13\2\1\uffff"+
            "\13\2\1\uffff\2\2\27\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u00b1\14\uffff\1\u00ad\37\uffff\1\u00af\7\uffff\1\u00b2"+
            "\2\uffff\1\u00b0\5\uffff\1\u00ba\4\uffff\1\u00b3\1\uffff\1\u00b7"+
            "\4\uffff\1\u00b4\5\uffff\1\u00b3\1\uffff\1\u00b7\3\uffff\1\u00b5"+
            "\16\uffff\1\u00bb\21\uffff\1\u00b6\4\uffff\1\u00bc\1\u00bd\1"+
            "\u00be\17\uffff\1\u00b8\7\uffff\1\u00c1\6\uffff\1\u00c0\3\uffff"+
            "\1\u00bf\12\uffff\1\u00b9\1\uffff\1\u00bf\4\uffff\1\u00ae",
            "\1\u00ca\7\uffff\1\u00c3\2\uffff\1\u00c2\5\uffff\1\u00cb\4"+
            "\uffff\1\u00c4\1\uffff\1\u00c8\4\uffff\1\u00c5\5\uffff\1\u00c4"+
            "\1\uffff\1\u00c8\3\uffff\1\u00c6\16\uffff\1\u00cc\21\uffff\1"+
            "\u00c7\4\uffff\1\u00cd\1\u00ce\1\u00cf\27\uffff\1\u00d2\6\uffff"+
            "\1\u00d1\3\uffff\1\u00d0\12\uffff\1\u00ca\1\uffff\1\u00d0\4"+
            "\uffff\1\u00c9",
            "\1\u00d9\12\uffff\1\u00db\5\uffff\1\u00da\4\uffff\1\u00d3\1"+
            "\uffff\1\u00d7\4\uffff\1\u00d4\5\uffff\1\u00d3\1\uffff\1\u00d7"+
            "\3\uffff\1\u00d5\16\uffff\1\u00dc\21\uffff\1\u00d6\4\uffff\1"+
            "\u00dd\1\u00de\1\u00df\27\uffff\1\u00e2\6\uffff\1\u00e1\3\uffff"+
            "\1\u00e0\12\uffff\1\u00d9\1\uffff\1\u00e0\4\uffff\1\u00d8",
            "\1\u00e8\12\uffff\1\u00ea\5\uffff\1\u00e9\6\uffff\1\u00e6\4"+
            "\uffff\1\u00e3\7\uffff\1\u00e6\3\uffff\1\u00e4\16\uffff\1\u00eb"+
            "\21\uffff\1\u00e5\4\uffff\1\u00ec\1\u00ed\1\u00ee\27\uffff\1"+
            "\u00f1\6\uffff\1\u00f0\3\uffff\1\u00ef\12\uffff\1\u00e8\1\uffff"+
            "\1\u00ef\4\uffff\1\u00e7",
            "\1\u00f6\12\uffff\1\u00f8\5\uffff\1\u00f7\6\uffff\1\u00f4\14"+
            "\uffff\1\u00f4\3\uffff\1\u00f2\16\uffff\1\u00f9\21\uffff\1\u00f3"+
            "\4\uffff\1\u00fa\1\u00fb\1\u00fc\27\uffff\1\u00ff\6\uffff\1"+
            "\u00fe\3\uffff\1\u00fd\12\uffff\1\u00f6\1\uffff\1\u00fd\4\uffff"+
            "\1\u00f5",
            "\1\u0103\12\uffff\1\u0105\5\uffff\1\u0104\6\uffff\1\u0101\14"+
            "\uffff\1\u0101\22\uffff\1\u0106\21\uffff\1\u0100\4\uffff\1\u0107"+
            "\1\u0108\1\u0109\27\uffff\1\u010c\6\uffff\1\u010b\3\uffff\1"+
            "\u010a\12\uffff\1\u0103\1\uffff\1\u010a\4\uffff\1\u0102",
            "\1\u010f\12\uffff\1\u0111\5\uffff\1\u0110\6\uffff\1\u010d\14"+
            "\uffff\1\u010d\22\uffff\1\u0112\26\uffff\1\u0113\1\u0114\1\u0115"+
            "\27\uffff\1\u0118\6\uffff\1\u0117\3\uffff\1\u0116\12\uffff\1"+
            "\u010f\1\uffff\1\u0116\4\uffff\1\u010e",
            "\1\u011a\12\uffff\1\u011c\5\uffff\1\u011b\46\uffff\1\u011d"+
            "\26\uffff\1\u011e\1\u011f\1\u0120\27\uffff\1\u0123\6\uffff\1"+
            "\u0122\3\uffff\1\u0121\12\uffff\1\u011a\1\uffff\1\u0121\4\uffff"+
            "\1\u0119",
            "\1\u0124\176\uffff\1\u0124",
            "\1\u012b\13\uffff\1\2\4\uffff\1\u0127\43\uffff\1\u0130\1\u0133"+
            "\1\u0136\1\u0125\1\u012b\2\u0136\1\u012f\1\uffff\1\u0126\1\u012d"+
            "\1\u0136\1\u0129\1\u012e\1\u012c\1\u0136\1\u012a\2\u012e\1\u0136"+
            "\1\u012f\1\uffff\1\u0132\1\u0136\1\u0134\1\u012b\1\u0136\1\u012c"+
            "\1\u0136\1\u012a\1\u0135\1\u012d\1\u0136\1\uffff\1\u0131\1\u0136"+
            "\25\uffff\1\u0137\44\uffff\1\u0128",
            "\1\u013a\12\uffff\1\u0139\5\uffff\1\u013b\75\uffff\1\u013c"+
            "\57\uffff\1\u013a",
            "\1\u013e\13\uffff\1\2\50\uffff\1\u0143\1\u0146\1\u0149\1\uffff"+
            "\1\u013e\2\u0149\1\u0142\2\uffff\1\u0140\1\u0149\2\u0141\1\u013f"+
            "\1\u0149\1\u013d\2\u0141\1\u0149\1\u0142\1\uffff\1\u0145\1\u0149"+
            "\1\u0147\1\u013e\1\u0149\1\u013f\1\u0149\1\u013d\1\u0148\1\u0140"+
            "\1\u0149\1\uffff\1\u0144\1\u0149\25\uffff\1\u014a",
            "\1\u014d\13\uffff\1\2\50\uffff\1\u0152\1\u0155\1\u0158\1\uffff"+
            "\1\u014d\2\u0158\1\u0151\2\uffff\1\u014f\1\u0158\2\u0150\1\u014e"+
            "\1\u0158\1\u014c\2\u0150\1\u0158\1\u0151\1\uffff\1\u0154\1\u0158"+
            "\1\u0156\1\u014d\1\u0158\1\u014e\1\u0158\1\u014c\1\u0157\1\u014f"+
            "\1\u0158\1\uffff\1\u0153\1\u0158\25\uffff\1\u0159",
            "\1\u015c\13\uffff\1\2\50\uffff\1\u0161\1\u0164\1\u0167\1\uffff"+
            "\1\u015c\2\u0167\1\u0160\2\uffff\1\u015e\1\u0167\2\u015f\1\u015d"+
            "\1\u0167\1\u015b\2\u015f\1\u0167\1\u0160\1\uffff\1\u0163\1\u0167"+
            "\1\u0165\1\u015c\1\u0167\1\u015d\1\u0167\1\u015b\1\u0166\1\u015e"+
            "\1\u0167\1\uffff\1\u0162\1\u0167\25\uffff\1\u0168",
            "\1\u016b\13\uffff\1\2\50\uffff\1\u0170\1\u0173\1\u0176\1\uffff"+
            "\1\u016b\2\u0176\1\u016f\2\uffff\1\u016d\1\u0176\2\u016e\1\u016c"+
            "\1\u0176\1\u016a\2\u016e\1\u0176\1\u016f\1\uffff\1\u0172\1\u0176"+
            "\1\u0174\1\u016b\1\u0176\1\u016c\1\u0176\1\u016a\1\u0175\1\u016d"+
            "\1\u0176\1\uffff\1\u0171\1\u0176\25\uffff\1\u0177",
            "\1\u017a\13\uffff\1\2\50\uffff\1\u017f\1\u0182\1\u0185\1\uffff"+
            "\1\u017a\2\u0185\1\u017e\2\uffff\1\u017c\1\u0185\2\u017d\1\u017b"+
            "\1\u0185\1\u0179\2\u017d\1\u0185\1\u017e\1\uffff\1\u0181\1\u0185"+
            "\1\u0183\1\u017a\1\u0185\1\u017b\1\u0185\1\u0179\1\u0184\1\u017c"+
            "\1\u0185\1\uffff\1\u0180\1\u0185\25\uffff\1\u0186",
            "\1\u0188",
            "\1\u0189",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA48_eot = DFA.unpackEncodedString(DFA48_eotS);
    static final short[] DFA48_eof = DFA.unpackEncodedString(DFA48_eofS);
    static final char[] DFA48_min = DFA.unpackEncodedStringToUnsignedChars(DFA48_minS);
    static final char[] DFA48_max = DFA.unpackEncodedStringToUnsignedChars(DFA48_maxS);
    static final short[] DFA48_accept = DFA.unpackEncodedString(DFA48_acceptS);
    static final short[] DFA48_special = DFA.unpackEncodedString(DFA48_specialS);
    static final short[][] DFA48_transition;

    static {
        int numStates = DFA48_transitionS.length;
        DFA48_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA48_transition[i] = DFA.unpackEncodedString(DFA48_transitionS[i]);
        }
    }

    class DFA48 extends DFA {

        public DFA48(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 48;
            this.eot = DFA48_eot;
            this.eof = DFA48_eof;
            this.min = DFA48_min;
            this.max = DFA48_max;
            this.accept = DFA48_accept;
            this.special = DFA48_special;
            this.transition = DFA48_transition;
        }
        public String getDescription() {
            return "406:22: ( for_stmt_int1 | ( full_expr2 ( for_stmt_int1 | for_stmt_int2 ) ) | for_stmt_int2 )";
        }
    }
    static final String DFA56_eotS =
        "\u0444\uffff";
    static final String DFA56_eofS =
        "\u0444\uffff";
    static final String DFA56_minS =
        "\1\61\2\4\1\uffff\2\4\2\61\1\4\6\uffff\2\4\2\61\7\uffff\1\4\10\61"+
        "\1\4\1\61\5\4\2\74\2\4\1\uffff\2\4\10\61\1\4\1\61\5\4\2\74\2\4\5"+
        "\uffff\1\4\10\61\1\4\1\61\5\4\2\74\2\4\10\61\1\4\1\61\5\4\2\74\3"+
        "\4\u03d3\uffff";
    static final String DFA56_maxS =
        "\3\u00b0\1\uffff\2\u00b7\3\u00b0\6\uffff\2\u00b7\2\u00b0\7\uffff"+
        "\10\u00b7\1\u00b0\1\u0097\1\u00b0\5\162\2\74\1\u00b0\1\u0097\1\uffff"+
        "\1\u00b0\10\u00b7\1\u00b0\1\u0097\1\u00b0\5\164\2\74\2\u00b0\5\uffff"+
        "\10\u00b7\1\u00b0\1\u0097\1\u00b0\5\162\2\74\1\u00b0\10\u00b7\1"+
        "\u00b0\1\u0097\1\u00b0\5\164\2\74\3\u00b0\u03d3\uffff";
    static final String DFA56_acceptS =
        "\3\uffff\1\2\5\uffff\1\1\147\uffff\47\1\1\uffff\u00ba\1\7\uffff"+
        "\25\1\1\uffff\2\1\3\uffff\1\1\3\uffff\u00d9\1\4\uffff\2\1\3\uffff"+
        "\2\1\4\uffff\2\1\3\uffff\u00e0\1\7\uffff\u00d9\1\4\uffff\1\1\3\uffff"+
        "\2\1\4\uffff\2\1\3\uffff\2\1\4\uffff\2\1\3\uffff";
    static final String DFA56_specialS =
        "\u0444\uffff}>";
    static final String[] DFA56_transitionS = {
            "\1\1\140\uffff\1\3\35\uffff\1\2",
            "\1\10\13\uffff\1\3\4\uffff\1\6\33\uffff\1\11\11\uffff\1\3\1"+
            "\4\1\uffff\2\3\2\uffff\1\5\1\uffff\1\3\3\uffff\1\3\3\uffff\1"+
            "\3\3\uffff\1\3\2\uffff\1\3\1\uffff\1\3\3\uffff\1\3\2\uffff\1"+
            "\3\32\uffff\1\3\32\uffff\1\11\4\uffff\1\7\30\uffff\1\11",
            "\1\11\13\uffff\1\3\4\uffff\1\21\33\uffff\1\11\11\uffff\1\3"+
            "\1\17\1\uffff\2\3\2\uffff\1\20\1\uffff\1\3\3\uffff\1\3\3\uffff"+
            "\1\3\3\uffff\1\3\2\uffff\1\3\1\uffff\1\3\3\uffff\1\3\2\uffff"+
            "\1\3\32\uffff\1\3\32\uffff\1\11\4\uffff\1\22\30\uffff\1\11",
            "",
            "\1\33\54\uffff\1\43\7\uffff\1\34\2\uffff\1\32\5\uffff\1\44"+
            "\4\uffff\1\35\1\uffff\1\41\4\uffff\1\36\5\uffff\1\35\1\uffff"+
            "\1\41\3\uffff\1\37\16\uffff\1\45\10\uffff\1\54\10\uffff\1\40"+
            "\4\uffff\1\46\1\47\1\50\17\uffff\1\3\7\uffff\1\53\6\uffff\1"+
            "\52\3\uffff\1\51\12\uffff\1\55\1\uffff\1\51\4\uffff\1\42",
            "\1\61\54\uffff\1\71\7\uffff\1\62\2\uffff\1\60\5\uffff\1\72"+
            "\4\uffff\1\63\1\uffff\1\67\4\uffff\1\64\5\uffff\1\63\1\uffff"+
            "\1\67\3\uffff\1\65\16\uffff\1\73\12\uffff\1\57\6\uffff\1\66"+
            "\4\uffff\1\74\1\75\1\76\27\uffff\1\101\6\uffff\1\100\3\uffff"+
            "\1\77\12\uffff\1\71\1\uffff\1\77\4\uffff\1\70",
            "\1\102\176\uffff\1\102",
            "\1\103\176\uffff\1\103",
            "\1\11\54\uffff\1\11\12\uffff\1\3\125\uffff\1\11\35\uffff\1"+
            "\11",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\112\54\uffff\1\122\7\uffff\1\113\2\uffff\1\111\5\uffff\1"+
            "\123\4\uffff\1\114\1\uffff\1\120\4\uffff\1\115\5\uffff\1\114"+
            "\1\uffff\1\120\3\uffff\1\116\16\uffff\1\124\10\uffff\1\133\10"+
            "\uffff\1\117\4\uffff\1\125\1\126\1\127\27\uffff\1\132\6\uffff"+
            "\1\131\3\uffff\1\130\12\uffff\1\122\1\uffff\1\130\4\uffff\1"+
            "\121",
            "\1\135\54\uffff\1\145\7\uffff\1\136\2\uffff\1\134\5\uffff\1"+
            "\146\4\uffff\1\137\1\uffff\1\143\4\uffff\1\140\5\uffff\1\137"+
            "\1\uffff\1\143\3\uffff\1\141\16\uffff\1\147\12\uffff\1\156\6"+
            "\uffff\1\142\4\uffff\1\150\1\151\1\152\27\uffff\1\155\6\uffff"+
            "\1\154\3\uffff\1\153\12\uffff\1\145\1\uffff\1\153\4\uffff\1"+
            "\144",
            "\1\157\176\uffff\1\157",
            "\1\160\176\uffff\1\160",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\165\14\uffff\1\161\37\uffff\1\163\7\uffff\1\166\2\uffff"+
            "\1\164\5\uffff\1\176\4\uffff\1\167\1\uffff\1\173\4\uffff\1\170"+
            "\5\uffff\1\167\1\uffff\1\173\3\uffff\1\171\16\uffff\1\177\21"+
            "\uffff\1\172\4\uffff\1\u0080\1\u0081\1\u0082\17\uffff\1\174"+
            "\7\uffff\1\u0085\6\uffff\1\u0084\3\uffff\1\u0083\12\uffff\1"+
            "\175\1\uffff\1\u0083\4\uffff\1\162",
            "\1\u008e\7\uffff\1\u0087\2\uffff\1\u0086\5\uffff\1\u008f\4"+
            "\uffff\1\u0088\1\uffff\1\u008c\4\uffff\1\u0089\5\uffff\1\u0088"+
            "\1\uffff\1\u008c\3\uffff\1\u008a\16\uffff\1\u0090\21\uffff\1"+
            "\u008b\4\uffff\1\u0091\1\u0092\1\u0093\17\uffff\1\3\7\uffff"+
            "\1\u0096\6\uffff\1\u0095\3\uffff\1\u0094\12\uffff\1\u0097\1"+
            "\uffff\1\u0094\4\uffff\1\u008d",
            "\1\u009f\12\uffff\1\u00a1\5\uffff\1\u00a0\4\uffff\1\u0099\1"+
            "\uffff\1\u009d\4\uffff\1\u009a\5\uffff\1\u0099\1\uffff\1\u009d"+
            "\3\uffff\1\u009b\16\uffff\1\u00a2\21\uffff\1\u009c\4\uffff\1"+
            "\u00a3\1\u00a4\1\u00a5\27\uffff\1\u00a8\6\uffff\1\u00a7\3\uffff"+
            "\1\u00a6\12\uffff\1\u009f\1\uffff\1\u00a6\4\uffff\1\u009e",
            "\1\u00ae\12\uffff\1\u00b0\5\uffff\1\u00af\6\uffff\1\u00ac\4"+
            "\uffff\1\u00a9\7\uffff\1\u00ac\3\uffff\1\u00aa\16\uffff\1\u00b1"+
            "\21\uffff\1\u00ab\4\uffff\1\u00b2\1\u00b3\1\u00b4\27\uffff\1"+
            "\u00b7\6\uffff\1\u00b6\3\uffff\1\u00b5\12\uffff\1\u00ae\1\uffff"+
            "\1\u00b5\4\uffff\1\u00ad",
            "\1\u00bc\12\uffff\1\u00be\5\uffff\1\u00bd\6\uffff\1\u00ba\14"+
            "\uffff\1\u00ba\3\uffff\1\u00b8\16\uffff\1\u00bf\21\uffff\1\u00b9"+
            "\4\uffff\1\u00c0\1\u00c1\1\u00c2\27\uffff\1\u00c5\6\uffff\1"+
            "\u00c4\3\uffff\1\u00c3\12\uffff\1\u00bc\1\uffff\1\u00c3\4\uffff"+
            "\1\u00bb",
            "\1\u00c9\12\uffff\1\u00cb\5\uffff\1\u00ca\6\uffff\1\u00c7\14"+
            "\uffff\1\u00c7\22\uffff\1\u00cc\21\uffff\1\u00c6\4\uffff\1\u00cd"+
            "\1\u00ce\1\u00cf\27\uffff\1\u00d2\6\uffff\1\u00d1\3\uffff\1"+
            "\u00d0\12\uffff\1\u00c9\1\uffff\1\u00d0\4\uffff\1\u00c8",
            "\1\u00d5\12\uffff\1\u00d7\5\uffff\1\u00d6\6\uffff\1\u00d3\14"+
            "\uffff\1\u00d3\22\uffff\1\u00d8\26\uffff\1\u00d9\1\u00da\1\u00db"+
            "\27\uffff\1\u00de\6\uffff\1\u00dd\3\uffff\1\u00dc\12\uffff\1"+
            "\u00d5\1\uffff\1\u00dc\4\uffff\1\u00d4",
            "\1\u00e0\12\uffff\1\u00e2\5\uffff\1\u00e1\46\uffff\1\u00e3"+
            "\26\uffff\1\u00e4\1\u00e5\1\u00e6\27\uffff\1\u00e9\6\uffff\1"+
            "\u00e8\3\uffff\1\u00e7\12\uffff\1\u00e0\1\uffff\1\u00e7\4\uffff"+
            "\1\u00df",
            "\1\u00ea\176\uffff\1\u00ea",
            "\1\u00f1\13\uffff\1\u00fd\4\uffff\1\u00ed\43\uffff\1\u00f6"+
            "\1\u00f9\1\u00fc\1\u00eb\1\u00f1\2\u00fc\1\u00f5\1\uffff\1\u00ec"+
            "\1\u00f3\1\u00fc\1\u00ef\1\u00f4\1\u00f2\1\u00fc\1\u00f0\2\u00f4"+
            "\1\u00fc\1\u00f5\1\uffff\1\u00f8\1\u00fc\1\u00fa\1\u00f1\1\u00fc"+
            "\1\u00f2\1\u00fc\1\u00f0\1\u00fb\1\u00f3\1\u00fc\1\uffff\1\u00f7"+
            "\1\u00fc\25\uffff\1\u00fe\44\uffff\1\u00ee",
            "\1\u0100\12\uffff\1\u00ff\5\uffff\1\u0101\75\uffff\1\u0102"+
            "\57\uffff\1\u0100",
            "\1\u0104\13\uffff\1\u0110\50\uffff\1\u0109\1\u010c\1\u010f"+
            "\1\uffff\1\u0104\2\u010f\1\u0108\2\uffff\1\u0106\1\u010f\2\u0107"+
            "\1\u0105\1\u010f\1\u0103\2\u0107\1\u010f\1\u0108\1\uffff\1\u010b"+
            "\1\u010f\1\u010d\1\u0104\1\u010f\1\u0105\1\u010f\1\u0103\1\u010e"+
            "\1\u0106\1\u010f\1\uffff\1\u010a\1\u010f\25\uffff\1\u0111",
            "\1\u0113\13\uffff\1\u011f\50\uffff\1\u0118\1\u011b\1\u011e"+
            "\1\uffff\1\u0113\2\u011e\1\u0117\2\uffff\1\u0115\1\u011e\2\u0116"+
            "\1\u0114\1\u011e\1\u0112\2\u0116\1\u011e\1\u0117\1\uffff\1\u011a"+
            "\1\u011e\1\u011c\1\u0113\1\u011e\1\u0114\1\u011e\1\u0112\1\u011d"+
            "\1\u0115\1\u011e\1\uffff\1\u0119\1\u011e\25\uffff\1\u0120",
            "\1\u0122\13\uffff\1\u012e\50\uffff\1\u0127\1\u012a\1\u012d"+
            "\1\uffff\1\u0122\2\u012d\1\u0126\2\uffff\1\u0124\1\u012d\2\u0125"+
            "\1\u0123\1\u012d\1\u0121\2\u0125\1\u012d\1\u0126\1\uffff\1\u0129"+
            "\1\u012d\1\u012b\1\u0122\1\u012d\1\u0123\1\u012d\1\u0121\1\u012c"+
            "\1\u0124\1\u012d\1\uffff\1\u0128\1\u012d\25\uffff\1\u012f",
            "\1\u0131\13\uffff\1\u013d\50\uffff\1\u0136\1\u0139\1\u013c"+
            "\1\uffff\1\u0131\2\u013c\1\u0135\2\uffff\1\u0133\1\u013c\2\u0134"+
            "\1\u0132\1\u013c\1\u0130\2\u0134\1\u013c\1\u0135\1\uffff\1\u0138"+
            "\1\u013c\1\u013a\1\u0131\1\u013c\1\u0132\1\u013c\1\u0130\1\u013b"+
            "\1\u0133\1\u013c\1\uffff\1\u0137\1\u013c\25\uffff\1\u013e",
            "\1\u0140\13\uffff\1\u014c\50\uffff\1\u0145\1\u0148\1\u014b"+
            "\1\uffff\1\u0140\2\u014b\1\u0144\2\uffff\1\u0142\1\u014b\2\u0143"+
            "\1\u0141\1\u014b\1\u013f\2\u0143\1\u014b\1\u0144\1\uffff\1\u0147"+
            "\1\u014b\1\u0149\1\u0140\1\u014b\1\u0141\1\u014b\1\u013f\1\u014a"+
            "\1\u0142\1\u014b\1\uffff\1\u0146\1\u014b\25\uffff\1\u014d",
            "\1\u014e",
            "\1\u014f",
            "\1\11\13\uffff\1\3\4\uffff\1\u0151\33\uffff\1\11\11\uffff\1"+
            "\3\2\uffff\2\3\2\uffff\1\u0150\1\uffff\1\3\3\uffff\1\3\3\uffff"+
            "\1\3\3\uffff\1\3\2\uffff\1\3\1\uffff\1\3\3\uffff\1\3\2\uffff"+
            "\1\3\32\uffff\1\3\32\uffff\1\11\4\uffff\1\u0152\30\uffff\1\11",
            "\1\u0160\13\uffff\1\u016c\4\uffff\1\u015c\43\uffff\1\u0165"+
            "\1\u0168\1\u016b\1\u015a\1\u0160\2\u016b\1\u0164\1\uffff\1\u015b"+
            "\1\u0162\1\u016b\1\u015e\1\u0163\1\u0161\1\u016b\1\u015f\2\u0163"+
            "\1\u016b\1\u0164\1\uffff\1\u0167\1\u016b\1\u0169\1\u0160\1\u016b"+
            "\1\u0161\1\u016b\1\u015f\1\u016a\1\u0162\1\u016b\1\uffff\1\u0166"+
            "\1\u016b\25\uffff\1\u016d\44\uffff\1\u015d",
            "",
            "\1\u016e\13\uffff\1\3\4\uffff\1\u0170\33\uffff\1\11\11\uffff"+
            "\2\3\1\uffff\2\3\2\uffff\1\u0175\1\uffff\1\3\3\uffff\1\3\3\uffff"+
            "\1\3\3\uffff\1\3\2\uffff\1\3\1\uffff\1\3\3\uffff\1\3\2\uffff"+
            "\1\3\32\uffff\1\3\32\uffff\1\11\4\uffff\1\u0171\30\uffff\1\11",
            "\1\u017d\14\uffff\1\u0179\37\uffff\1\u017b\7\uffff\1\u017e"+
            "\2\uffff\1\u017c\5\uffff\1\u0186\4\uffff\1\u017f\1\uffff\1\u0183"+
            "\4\uffff\1\u0180\5\uffff\1\u017f\1\uffff\1\u0183\3\uffff\1\u0181"+
            "\16\uffff\1\u0187\21\uffff\1\u0182\4\uffff\1\u0188\1\u0189\1"+
            "\u018a\17\uffff\1\u0184\7\uffff\1\u018d\6\uffff\1\u018c\3\uffff"+
            "\1\u018b\12\uffff\1\u0185\1\uffff\1\u018b\4\uffff\1\u017a",
            "\1\u0196\7\uffff\1\u018f\2\uffff\1\u018e\5\uffff\1\u0197\4"+
            "\uffff\1\u0190\1\uffff\1\u0194\4\uffff\1\u0191\5\uffff\1\u0190"+
            "\1\uffff\1\u0194\3\uffff\1\u0192\16\uffff\1\u0198\21\uffff\1"+
            "\u0193\4\uffff\1\u0199\1\u019a\1\u019b\27\uffff\1\u019e\6\uffff"+
            "\1\u019d\3\uffff\1\u019c\12\uffff\1\u0196\1\uffff\1\u019c\4"+
            "\uffff\1\u0195",
            "\1\u01a5\12\uffff\1\u01a7\5\uffff\1\u01a6\4\uffff\1\u019f\1"+
            "\uffff\1\u01a3\4\uffff\1\u01a0\5\uffff\1\u019f\1\uffff\1\u01a3"+
            "\3\uffff\1\u01a1\16\uffff\1\u01a8\21\uffff\1\u01a2\4\uffff\1"+
            "\u01a9\1\u01aa\1\u01ab\27\uffff\1\u01ae\6\uffff\1\u01ad\3\uffff"+
            "\1\u01ac\12\uffff\1\u01a5\1\uffff\1\u01ac\4\uffff\1\u01a4",
            "\1\u01b4\12\uffff\1\u01b6\5\uffff\1\u01b5\6\uffff\1\u01b2\4"+
            "\uffff\1\u01af\7\uffff\1\u01b2\3\uffff\1\u01b0\16\uffff\1\u01b7"+
            "\21\uffff\1\u01b1\4\uffff\1\u01b8\1\u01b9\1\u01ba\27\uffff\1"+
            "\u01bd\6\uffff\1\u01bc\3\uffff\1\u01bb\12\uffff\1\u01b4\1\uffff"+
            "\1\u01bb\4\uffff\1\u01b3",
            "\1\u01c2\12\uffff\1\u01c4\5\uffff\1\u01c3\6\uffff\1\u01c0\14"+
            "\uffff\1\u01c0\3\uffff\1\u01be\16\uffff\1\u01c5\21\uffff\1\u01bf"+
            "\4\uffff\1\u01c6\1\u01c7\1\u01c8\27\uffff\1\u01cb\6\uffff\1"+
            "\u01ca\3\uffff\1\u01c9\12\uffff\1\u01c2\1\uffff\1\u01c9\4\uffff"+
            "\1\u01c1",
            "\1\u01cf\12\uffff\1\u01d1\5\uffff\1\u01d0\6\uffff\1\u01cd\14"+
            "\uffff\1\u01cd\22\uffff\1\u01d2\21\uffff\1\u01cc\4\uffff\1\u01d3"+
            "\1\u01d4\1\u01d5\27\uffff\1\u01d8\6\uffff\1\u01d7\3\uffff\1"+
            "\u01d6\12\uffff\1\u01cf\1\uffff\1\u01d6\4\uffff\1\u01ce",
            "\1\u01db\12\uffff\1\u01dd\5\uffff\1\u01dc\6\uffff\1\u01d9\14"+
            "\uffff\1\u01d9\22\uffff\1\u01de\26\uffff\1\u01df\1\u01e0\1\u01e1"+
            "\27\uffff\1\u01e4\6\uffff\1\u01e3\3\uffff\1\u01e2\12\uffff\1"+
            "\u01db\1\uffff\1\u01e2\4\uffff\1\u01da",
            "\1\u01e6\12\uffff\1\u01e8\5\uffff\1\u01e7\46\uffff\1\u01e9"+
            "\26\uffff\1\u01ea\1\u01eb\1\u01ec\27\uffff\1\u01ef\6\uffff\1"+
            "\u01ee\3\uffff\1\u01ed\12\uffff\1\u01e6\1\uffff\1\u01ed\4\uffff"+
            "\1\u01e5",
            "\1\u01f0\176\uffff\1\u01f0",
            "\1\u01f7\20\uffff\1\u01f3\43\uffff\1\u01fc\1\u01ff\1\u0202"+
            "\1\u01f1\1\u01f7\2\u0202\1\u01fb\1\uffff\1\u01f2\1\u01f9\1\u0202"+
            "\1\u01f5\1\u01fa\1\u01f8\1\u0202\1\u01f6\2\u01fa\1\u0202\1\u01fb"+
            "\1\uffff\1\u01fe\1\u0202\1\u0200\1\u01f7\1\u0202\1\u01f8\1\u0202"+
            "\1\u01f6\1\u0201\1\u01f9\1\u0202\1\uffff\1\u01fd\1\u0202\27"+
            "\uffff\1\u0203\42\uffff\1\u01f4",
            "\1\u0205\12\uffff\1\u0204\5\uffff\1\u0206\75\uffff\1\u0207"+
            "\57\uffff\1\u0205",
            "\1\u0209\64\uffff\1\u020e\1\u0211\1\u0214\1\uffff\1\u0209\2"+
            "\u0214\1\u020d\2\uffff\1\u020b\1\u0214\2\u020c\1\u020a\1\u0214"+
            "\1\u0208\2\u020c\1\u0214\1\u020d\1\uffff\1\u0210\1\u0214\1\u0212"+
            "\1\u0209\1\u0214\1\u020a\1\u0214\1\u0208\1\u0213\1\u020b\1\u0214"+
            "\1\uffff\1\u020f\1\u0214\27\uffff\1\u0215",
            "\1\u0217\64\uffff\1\u021c\1\u021f\1\u0222\1\uffff\1\u0217\2"+
            "\u0222\1\u021b\2\uffff\1\u0219\1\u0222\2\u021a\1\u0218\1\u0222"+
            "\1\u0216\2\u021a\1\u0222\1\u021b\1\uffff\1\u021e\1\u0222\1\u0220"+
            "\1\u0217\1\u0222\1\u0218\1\u0222\1\u0216\1\u0221\1\u0219\1\u0222"+
            "\1\uffff\1\u021d\1\u0222\27\uffff\1\u0223",
            "\1\u0225\64\uffff\1\u022a\1\u022d\1\u0230\1\uffff\1\u0225\2"+
            "\u0230\1\u0229\2\uffff\1\u0227\1\u0230\2\u0228\1\u0226\1\u0230"+
            "\1\u0224\2\u0228\1\u0230\1\u0229\1\uffff\1\u022c\1\u0230\1\u022e"+
            "\1\u0225\1\u0230\1\u0226\1\u0230\1\u0224\1\u022f\1\u0227\1\u0230"+
            "\1\uffff\1\u022b\1\u0230\27\uffff\1\u0231",
            "\1\u0233\64\uffff\1\u0238\1\u023b\1\u023e\1\uffff\1\u0233\2"+
            "\u023e\1\u0237\2\uffff\1\u0235\1\u023e\2\u0236\1\u0234\1\u023e"+
            "\1\u0232\2\u0236\1\u023e\1\u0237\1\uffff\1\u023a\1\u023e\1\u023c"+
            "\1\u0233\1\u023e\1\u0234\1\u023e\1\u0232\1\u023d\1\u0235\1\u023e"+
            "\1\uffff\1\u0239\1\u023e\27\uffff\1\u023f",
            "\1\u0241\64\uffff\1\u0246\1\u0249\1\u024c\1\uffff\1\u0241\2"+
            "\u024c\1\u0245\2\uffff\1\u0243\1\u024c\2\u0244\1\u0242\1\u024c"+
            "\1\u0240\2\u0244\1\u024c\1\u0245\1\uffff\1\u0248\1\u024c\1\u024a"+
            "\1\u0241\1\u024c\1\u0242\1\u024c\1\u0240\1\u024b\1\u0243\1\u024c"+
            "\1\uffff\1\u0247\1\u024c\27\uffff\1\u024d",
            "\1\u024e",
            "\1\u024f",
            "\1\11\13\uffff\1\3\4\uffff\1\u0256\33\uffff\1\11\11\uffff\1"+
            "\3\1\u0250\1\uffff\2\3\2\uffff\1\u0251\1\uffff\1\3\3\uffff\1"+
            "\3\3\uffff\1\3\3\uffff\1\3\2\uffff\1\3\1\uffff\1\3\3\uffff\1"+
            "\3\2\uffff\1\3\32\uffff\1\3\32\uffff\1\11\4\uffff\1\u0257\30"+
            "\uffff\1\11",
            "\1\11\13\uffff\1\3\4\uffff\1\u0261\33\uffff\1\11\11\uffff\1"+
            "\3\1\u025b\1\uffff\2\3\2\uffff\1\u025c\1\uffff\1\3\3\uffff\1"+
            "\3\3\uffff\1\3\3\uffff\1\3\2\uffff\1\3\1\uffff\1\3\3\uffff\1"+
            "\3\2\uffff\1\3\32\uffff\1\3\32\uffff\1\11\4\uffff\1\u0262\30"+
            "\uffff\1\11",
            "",
            "",
            "",
            "",
            "",
            "\1\u026a\14\uffff\1\u0266\37\uffff\1\u0268\7\uffff\1\u026b"+
            "\2\uffff\1\u0269\5\uffff\1\u0273\4\uffff\1\u026c\1\uffff\1\u0270"+
            "\4\uffff\1\u026d\5\uffff\1\u026c\1\uffff\1\u0270\3\uffff\1\u026e"+
            "\16\uffff\1\u0274\21\uffff\1\u026f\4\uffff\1\u0275\1\u0276\1"+
            "\u0277\17\uffff\1\u0271\7\uffff\1\u027a\6\uffff\1\u0279\3\uffff"+
            "\1\u0278\12\uffff\1\u0272\1\uffff\1\u0278\4\uffff\1\u0267",
            "\1\u0283\7\uffff\1\u027c\2\uffff\1\u027b\5\uffff\1\u0284\4"+
            "\uffff\1\u027d\1\uffff\1\u0281\4\uffff\1\u027e\5\uffff\1\u027d"+
            "\1\uffff\1\u0281\3\uffff\1\u027f\16\uffff\1\u0285\21\uffff\1"+
            "\u0280\4\uffff\1\u0286\1\u0287\1\u0288\27\uffff\1\u028b\6\uffff"+
            "\1\u028a\3\uffff\1\u0289\12\uffff\1\u0283\1\uffff\1\u0289\4"+
            "\uffff\1\u0282",
            "\1\u0292\12\uffff\1\u0294\5\uffff\1\u0293\4\uffff\1\u028c\1"+
            "\uffff\1\u0290\4\uffff\1\u028d\5\uffff\1\u028c\1\uffff\1\u0290"+
            "\3\uffff\1\u028e\16\uffff\1\u0295\21\uffff\1\u028f\4\uffff\1"+
            "\u0296\1\u0297\1\u0298\27\uffff\1\u029b\6\uffff\1\u029a\3\uffff"+
            "\1\u0299\12\uffff\1\u0292\1\uffff\1\u0299\4\uffff\1\u0291",
            "\1\u02a1\12\uffff\1\u02a3\5\uffff\1\u02a2\6\uffff\1\u029f\4"+
            "\uffff\1\u029c\7\uffff\1\u029f\3\uffff\1\u029d\16\uffff\1\u02a4"+
            "\21\uffff\1\u029e\4\uffff\1\u02a5\1\u02a6\1\u02a7\27\uffff\1"+
            "\u02aa\6\uffff\1\u02a9\3\uffff\1\u02a8\12\uffff\1\u02a1\1\uffff"+
            "\1\u02a8\4\uffff\1\u02a0",
            "\1\u02af\12\uffff\1\u02b1\5\uffff\1\u02b0\6\uffff\1\u02ad\14"+
            "\uffff\1\u02ad\3\uffff\1\u02ab\16\uffff\1\u02b2\21\uffff\1\u02ac"+
            "\4\uffff\1\u02b3\1\u02b4\1\u02b5\27\uffff\1\u02b8\6\uffff\1"+
            "\u02b7\3\uffff\1\u02b6\12\uffff\1\u02af\1\uffff\1\u02b6\4\uffff"+
            "\1\u02ae",
            "\1\u02bc\12\uffff\1\u02be\5\uffff\1\u02bd\6\uffff\1\u02ba\14"+
            "\uffff\1\u02ba\22\uffff\1\u02bf\21\uffff\1\u02b9\4\uffff\1\u02c0"+
            "\1\u02c1\1\u02c2\27\uffff\1\u02c5\6\uffff\1\u02c4\3\uffff\1"+
            "\u02c3\12\uffff\1\u02bc\1\uffff\1\u02c3\4\uffff\1\u02bb",
            "\1\u02c8\12\uffff\1\u02ca\5\uffff\1\u02c9\6\uffff\1\u02c6\14"+
            "\uffff\1\u02c6\22\uffff\1\u02cb\26\uffff\1\u02cc\1\u02cd\1\u02ce"+
            "\27\uffff\1\u02d1\6\uffff\1\u02d0\3\uffff\1\u02cf\12\uffff\1"+
            "\u02c8\1\uffff\1\u02cf\4\uffff\1\u02c7",
            "\1\u02d3\12\uffff\1\u02d5\5\uffff\1\u02d4\46\uffff\1\u02d6"+
            "\26\uffff\1\u02d7\1\u02d8\1\u02d9\27\uffff\1\u02dc\6\uffff\1"+
            "\u02db\3\uffff\1\u02da\12\uffff\1\u02d3\1\uffff\1\u02da\4\uffff"+
            "\1\u02d2",
            "\1\u02dd\176\uffff\1\u02dd",
            "\1\u02e4\13\uffff\1\u02f0\4\uffff\1\u02e0\43\uffff\1\u02e9"+
            "\1\u02ec\1\u02ef\1\u02de\1\u02e4\2\u02ef\1\u02e8\1\uffff\1\u02df"+
            "\1\u02e6\1\u02ef\1\u02e2\1\u02e7\1\u02e5\1\u02ef\1\u02e3\2\u02e7"+
            "\1\u02ef\1\u02e8\1\uffff\1\u02eb\1\u02ef\1\u02ed\1\u02e4\1\u02ef"+
            "\1\u02e5\1\u02ef\1\u02e3\1\u02ee\1\u02e6\1\u02ef\1\uffff\1\u02ea"+
            "\1\u02ef\25\uffff\1\u02f1\44\uffff\1\u02e1",
            "\1\u02f3\12\uffff\1\u02f2\5\uffff\1\u02f4\75\uffff\1\u02f5"+
            "\57\uffff\1\u02f3",
            "\1\u02f7\13\uffff\1\u0303\50\uffff\1\u02fc\1\u02ff\1\u0302"+
            "\1\uffff\1\u02f7\2\u0302\1\u02fb\2\uffff\1\u02f9\1\u0302\2\u02fa"+
            "\1\u02f8\1\u0302\1\u02f6\2\u02fa\1\u0302\1\u02fb\1\uffff\1\u02fe"+
            "\1\u0302\1\u0300\1\u02f7\1\u0302\1\u02f8\1\u0302\1\u02f6\1\u0301"+
            "\1\u02f9\1\u0302\1\uffff\1\u02fd\1\u0302\25\uffff\1\u0304",
            "\1\u0306\13\uffff\1\u0312\50\uffff\1\u030b\1\u030e\1\u0311"+
            "\1\uffff\1\u0306\2\u0311\1\u030a\2\uffff\1\u0308\1\u0311\2\u0309"+
            "\1\u0307\1\u0311\1\u0305\2\u0309\1\u0311\1\u030a\1\uffff\1\u030d"+
            "\1\u0311\1\u030f\1\u0306\1\u0311\1\u0307\1\u0311\1\u0305\1\u0310"+
            "\1\u0308\1\u0311\1\uffff\1\u030c\1\u0311\25\uffff\1\u0313",
            "\1\u0315\13\uffff\1\u0321\50\uffff\1\u031a\1\u031d\1\u0320"+
            "\1\uffff\1\u0315\2\u0320\1\u0319\2\uffff\1\u0317\1\u0320\2\u0318"+
            "\1\u0316\1\u0320\1\u0314\2\u0318\1\u0320\1\u0319\1\uffff\1\u031c"+
            "\1\u0320\1\u031e\1\u0315\1\u0320\1\u0316\1\u0320\1\u0314\1\u031f"+
            "\1\u0317\1\u0320\1\uffff\1\u031b\1\u0320\25\uffff\1\u0322",
            "\1\u0324\13\uffff\1\u0330\50\uffff\1\u0329\1\u032c\1\u032f"+
            "\1\uffff\1\u0324\2\u032f\1\u0328\2\uffff\1\u0326\1\u032f\2\u0327"+
            "\1\u0325\1\u032f\1\u0323\2\u0327\1\u032f\1\u0328\1\uffff\1\u032b"+
            "\1\u032f\1\u032d\1\u0324\1\u032f\1\u0325\1\u032f\1\u0323\1\u032e"+
            "\1\u0326\1\u032f\1\uffff\1\u032a\1\u032f\25\uffff\1\u0331",
            "\1\u0333\13\uffff\1\u033f\50\uffff\1\u0338\1\u033b\1\u033e"+
            "\1\uffff\1\u0333\2\u033e\1\u0337\2\uffff\1\u0335\1\u033e\2\u0336"+
            "\1\u0334\1\u033e\1\u0332\2\u0336\1\u033e\1\u0337\1\uffff\1\u033a"+
            "\1\u033e\1\u033c\1\u0333\1\u033e\1\u0334\1\u033e\1\u0332\1\u033d"+
            "\1\u0335\1\u033e\1\uffff\1\u0339\1\u033e\25\uffff\1\u0340",
            "\1\u0341",
            "\1\u0342",
            "\1\11\13\uffff\1\3\4\uffff\1\u0344\33\uffff\1\11\11\uffff\1"+
            "\3\2\uffff\2\3\2\uffff\1\u0343\1\uffff\1\3\3\uffff\1\3\3\uffff"+
            "\1\3\3\uffff\1\3\2\uffff\1\3\1\uffff\1\3\3\uffff\1\3\2\uffff"+
            "\1\3\32\uffff\1\3\32\uffff\1\11\4\uffff\1\u0345\30\uffff\1\11",
            "\1\u0351\14\uffff\1\u034d\37\uffff\1\u034f\7\uffff\1\u0352"+
            "\2\uffff\1\u0350\5\uffff\1\u035a\4\uffff\1\u0353\1\uffff\1\u0357"+
            "\4\uffff\1\u0354\5\uffff\1\u0353\1\uffff\1\u0357\3\uffff\1\u0355"+
            "\16\uffff\1\u035b\21\uffff\1\u0356\4\uffff\1\u035c\1\u035d\1"+
            "\u035e\17\uffff\1\u0358\7\uffff\1\u0361\6\uffff\1\u0360\3\uffff"+
            "\1\u035f\12\uffff\1\u0359\1\uffff\1\u035f\4\uffff\1\u034e",
            "\1\u036a\7\uffff\1\u0363\2\uffff\1\u0362\5\uffff\1\u036b\4"+
            "\uffff\1\u0364\1\uffff\1\u0368\4\uffff\1\u0365\5\uffff\1\u0364"+
            "\1\uffff\1\u0368\3\uffff\1\u0366\16\uffff\1\u036c\21\uffff\1"+
            "\u0367\4\uffff\1\u036d\1\u036e\1\u036f\27\uffff\1\u0372\6\uffff"+
            "\1\u0371\3\uffff\1\u0370\12\uffff\1\u036a\1\uffff\1\u0370\4"+
            "\uffff\1\u0369",
            "\1\u0379\12\uffff\1\u037b\5\uffff\1\u037a\4\uffff\1\u0373\1"+
            "\uffff\1\u0377\4\uffff\1\u0374\5\uffff\1\u0373\1\uffff\1\u0377"+
            "\3\uffff\1\u0375\16\uffff\1\u037c\21\uffff\1\u0376\4\uffff\1"+
            "\u037d\1\u037e\1\u037f\27\uffff\1\u0382\6\uffff\1\u0381\3\uffff"+
            "\1\u0380\12\uffff\1\u0379\1\uffff\1\u0380\4\uffff\1\u0378",
            "\1\u0388\12\uffff\1\u038a\5\uffff\1\u0389\6\uffff\1\u0386\4"+
            "\uffff\1\u0383\7\uffff\1\u0386\3\uffff\1\u0384\16\uffff\1\u038b"+
            "\21\uffff\1\u0385\4\uffff\1\u038c\1\u038d\1\u038e\27\uffff\1"+
            "\u0391\6\uffff\1\u0390\3\uffff\1\u038f\12\uffff\1\u0388\1\uffff"+
            "\1\u038f\4\uffff\1\u0387",
            "\1\u0396\12\uffff\1\u0398\5\uffff\1\u0397\6\uffff\1\u0394\14"+
            "\uffff\1\u0394\3\uffff\1\u0392\16\uffff\1\u0399\21\uffff\1\u0393"+
            "\4\uffff\1\u039a\1\u039b\1\u039c\27\uffff\1\u039f\6\uffff\1"+
            "\u039e\3\uffff\1\u039d\12\uffff\1\u0396\1\uffff\1\u039d\4\uffff"+
            "\1\u0395",
            "\1\u03a3\12\uffff\1\u03a5\5\uffff\1\u03a4\6\uffff\1\u03a1\14"+
            "\uffff\1\u03a1\22\uffff\1\u03a6\21\uffff\1\u03a0\4\uffff\1\u03a7"+
            "\1\u03a8\1\u03a9\27\uffff\1\u03ac\6\uffff\1\u03ab\3\uffff\1"+
            "\u03aa\12\uffff\1\u03a3\1\uffff\1\u03aa\4\uffff\1\u03a2",
            "\1\u03af\12\uffff\1\u03b1\5\uffff\1\u03b0\6\uffff\1\u03ad\14"+
            "\uffff\1\u03ad\22\uffff\1\u03b2\26\uffff\1\u03b3\1\u03b4\1\u03b5"+
            "\27\uffff\1\u03b8\6\uffff\1\u03b7\3\uffff\1\u03b6\12\uffff\1"+
            "\u03af\1\uffff\1\u03b6\4\uffff\1\u03ae",
            "\1\u03ba\12\uffff\1\u03bc\5\uffff\1\u03bb\46\uffff\1\u03bd"+
            "\26\uffff\1\u03be\1\u03bf\1\u03c0\27\uffff\1\u03c3\6\uffff\1"+
            "\u03c2\3\uffff\1\u03c1\12\uffff\1\u03ba\1\uffff\1\u03c1\4\uffff"+
            "\1\u03b9",
            "\1\u03c4\176\uffff\1\u03c4",
            "\1\u03cb\20\uffff\1\u03c7\43\uffff\1\u03d0\1\u03d3\1\u03d6"+
            "\1\u03c5\1\u03cb\2\u03d6\1\u03cf\1\uffff\1\u03c6\1\u03cd\1\u03d6"+
            "\1\u03c9\1\u03ce\1\u03cc\1\u03d6\1\u03ca\2\u03ce\1\u03d6\1\u03cf"+
            "\1\uffff\1\u03d2\1\u03d6\1\u03d4\1\u03cb\1\u03d6\1\u03cc\1\u03d6"+
            "\1\u03ca\1\u03d5\1\u03cd\1\u03d6\1\uffff\1\u03d1\1\u03d6\27"+
            "\uffff\1\u03d7\42\uffff\1\u03c8",
            "\1\u03d9\12\uffff\1\u03d8\5\uffff\1\u03da\75\uffff\1\u03db"+
            "\57\uffff\1\u03d9",
            "\1\u03dd\64\uffff\1\u03e2\1\u03e5\1\u03e8\1\uffff\1\u03dd\2"+
            "\u03e8\1\u03e1\2\uffff\1\u03df\1\u03e8\2\u03e0\1\u03de\1\u03e8"+
            "\1\u03dc\2\u03e0\1\u03e8\1\u03e1\1\uffff\1\u03e4\1\u03e8\1\u03e6"+
            "\1\u03dd\1\u03e8\1\u03de\1\u03e8\1\u03dc\1\u03e7\1\u03df\1\u03e8"+
            "\1\uffff\1\u03e3\1\u03e8\27\uffff\1\u03e9",
            "\1\u03eb\64\uffff\1\u03f0\1\u03f3\1\u03f6\1\uffff\1\u03eb\2"+
            "\u03f6\1\u03ef\2\uffff\1\u03ed\1\u03f6\2\u03ee\1\u03ec\1\u03f6"+
            "\1\u03ea\2\u03ee\1\u03f6\1\u03ef\1\uffff\1\u03f2\1\u03f6\1\u03f4"+
            "\1\u03eb\1\u03f6\1\u03ec\1\u03f6\1\u03ea\1\u03f5\1\u03ed\1\u03f6"+
            "\1\uffff\1\u03f1\1\u03f6\27\uffff\1\u03f7",
            "\1\u03f9\64\uffff\1\u03fe\1\u0401\1\u0404\1\uffff\1\u03f9\2"+
            "\u0404\1\u03fd\2\uffff\1\u03fb\1\u0404\2\u03fc\1\u03fa\1\u0404"+
            "\1\u03f8\2\u03fc\1\u0404\1\u03fd\1\uffff\1\u0400\1\u0404\1\u0402"+
            "\1\u03f9\1\u0404\1\u03fa\1\u0404\1\u03f8\1\u0403\1\u03fb\1\u0404"+
            "\1\uffff\1\u03ff\1\u0404\27\uffff\1\u0405",
            "\1\u0407\64\uffff\1\u040c\1\u040f\1\u0412\1\uffff\1\u0407\2"+
            "\u0412\1\u040b\2\uffff\1\u0409\1\u0412\2\u040a\1\u0408\1\u0412"+
            "\1\u0406\2\u040a\1\u0412\1\u040b\1\uffff\1\u040e\1\u0412\1\u0410"+
            "\1\u0407\1\u0412\1\u0408\1\u0412\1\u0406\1\u0411\1\u0409\1\u0412"+
            "\1\uffff\1\u040d\1\u0412\27\uffff\1\u0413",
            "\1\u0415\64\uffff\1\u041a\1\u041d\1\u0420\1\uffff\1\u0415\2"+
            "\u0420\1\u0419\2\uffff\1\u0417\1\u0420\2\u0418\1\u0416\1\u0420"+
            "\1\u0414\2\u0418\1\u0420\1\u0419\1\uffff\1\u041c\1\u0420\1\u041e"+
            "\1\u0415\1\u0420\1\u0416\1\u0420\1\u0414\1\u041f\1\u0417\1\u0420"+
            "\1\uffff\1\u041b\1\u0420\27\uffff\1\u0421",
            "\1\u0422",
            "\1\u0423",
            "\1\11\13\uffff\1\3\4\uffff\1\u0424\33\uffff\1\11\11\uffff\1"+
            "\3\2\uffff\2\3\2\uffff\1\u042a\1\uffff\1\3\3\uffff\1\3\3\uffff"+
            "\1\3\3\uffff\1\3\2\uffff\1\3\1\uffff\1\3\3\uffff\1\3\2\uffff"+
            "\1\3\32\uffff\1\3\32\uffff\1\11\4\uffff\1\u0425\30\uffff\1\11",
            "\1\11\13\uffff\1\3\4\uffff\1\u0434\33\uffff\1\11\11\uffff\1"+
            "\3\1\u042e\1\uffff\2\3\2\uffff\1\u042f\1\uffff\1\3\3\uffff\1"+
            "\3\3\uffff\1\3\3\uffff\1\3\2\uffff\1\3\1\uffff\1\3\3\uffff\1"+
            "\3\2\uffff\1\3\32\uffff\1\3\32\uffff\1\11\4\uffff\1\u0435\30"+
            "\uffff\1\11",
            "\1\11\13\uffff\1\3\4\uffff\1\u043f\33\uffff\1\11\11\uffff\1"+
            "\3\1\u0439\1\uffff\2\3\2\uffff\1\u043a\1\uffff\1\3\3\uffff\1"+
            "\3\3\uffff\1\3\3\uffff\1\3\2\uffff\1\3\1\uffff\1\3\3\uffff\1"+
            "\3\2\uffff\1\3\32\uffff\1\3\32\uffff\1\11\4\uffff\1\u0440\30"+
            "\uffff\1\11",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA56_eot = DFA.unpackEncodedString(DFA56_eotS);
    static final short[] DFA56_eof = DFA.unpackEncodedString(DFA56_eofS);
    static final char[] DFA56_min = DFA.unpackEncodedStringToUnsignedChars(DFA56_minS);
    static final char[] DFA56_max = DFA.unpackEncodedStringToUnsignedChars(DFA56_maxS);
    static final short[] DFA56_accept = DFA.unpackEncodedString(DFA56_acceptS);
    static final short[] DFA56_special = DFA.unpackEncodedString(DFA56_specialS);
    static final short[][] DFA56_transition;

    static {
        int numStates = DFA56_transitionS.length;
        DFA56_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA56_transition[i] = DFA.unpackEncodedString(DFA56_transitionS[i]);
        }
    }

    class DFA56 extends DFA {

        public DFA56(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 56;
            this.eot = DFA56_eot;
            this.eof = DFA56_eof;
            this.min = DFA56_min;
            this.max = DFA56_max;
            this.accept = DFA56_accept;
            this.special = DFA56_special;
            this.transition = DFA56_transition;
        }
        public String getDescription() {
            return "447:32: ( object_name ( ASTERISK )* )?";
        }
    }
    static final String DFA76_eotS =
        "\137\uffff";
    static final String DFA76_eofS =
        "\137\uffff";
    static final String DFA76_minS =
        "\2\4\23\uffff\1\4\23\uffff\1\4\65\uffff";
    static final String DFA76_maxS =
        "\2\u00b7\23\uffff\1\u0097\23\uffff\1\u00b7\65\uffff";
    static final String DFA76_acceptS =
        "\2\uffff\1\1\45\uffff\1\2\66\uffff";
    static final String DFA76_specialS =
        "\137\uffff}>";
    static final String[] DFA76_transitionS = {
            "\1\2\54\uffff\1\2\7\uffff\1\2\2\uffff\1\1\5\uffff\1\2\4\uffff"+
            "\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff"+
            "\1\2\16\uffff\1\2\21\uffff\1\2\4\uffff\3\2\27\uffff\1\2\6\uffff"+
            "\1\2\3\uffff\1\2\12\uffff\1\2\1\uffff\1\2\4\uffff\1\2",
            "\1\2\14\uffff\1\2\37\uffff\1\25\7\uffff\1\2\2\uffff\1\2\5\uffff"+
            "\1\2\4\uffff\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff"+
            "\1\2\3\uffff\1\2\16\uffff\1\2\21\uffff\1\2\4\uffff\3\2\1\uffff"+
            "\1\50\15\uffff\1\2\7\uffff\1\2\6\uffff\1\2\3\uffff\1\2\12\uffff"+
            "\1\2\1\uffff\1\2\4\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\2\20\uffff\1\2\43\uffff\10\2\1\uffff\14\2\1\uffff\13\2\1"+
            "\uffff\2\2\25\uffff\1\51\44\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\2\13\uffff\1\2\4\uffff\1\2\33\uffff\1\2\7\uffff\10\2\1\50"+
            "\33\2\14\uffff\1\2\10\uffff\2\2\7\uffff\1\2\4\uffff\3\2\24\uffff"+
            "\1\2\2\uffff\1\2\6\uffff\1\2\3\uffff\1\2\12\uffff\1\2\1\uffff"+
            "\1\2\4\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA76_eot = DFA.unpackEncodedString(DFA76_eotS);
    static final short[] DFA76_eof = DFA.unpackEncodedString(DFA76_eofS);
    static final char[] DFA76_min = DFA.unpackEncodedStringToUnsignedChars(DFA76_minS);
    static final char[] DFA76_max = DFA.unpackEncodedStringToUnsignedChars(DFA76_maxS);
    static final short[] DFA76_accept = DFA.unpackEncodedString(DFA76_acceptS);
    static final short[] DFA76_special = DFA.unpackEncodedString(DFA76_specialS);
    static final short[][] DFA76_transition;

    static {
        int numStates = DFA76_transitionS.length;
        DFA76_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA76_transition[i] = DFA.unpackEncodedString(DFA76_transitionS[i]);
        }
    }

    class DFA76 extends DFA {

        public DFA76(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 76;
            this.eot = DFA76_eot;
            this.eof = DFA76_eof;
            this.min = DFA76_min;
            this.max = DFA76_max;
            this.accept = DFA76_accept;
            this.special = DFA76_special;
            this.transition = DFA76_transition;
        }
        public String getDescription() {
            return "540:1: expression : ( classical_expr_wrp | struct_init );";
        }
    }
    static final String DFA80_eotS =
        "\150\uffff";
    static final String DFA80_eofS =
        "\150\uffff";
    static final String DFA80_minS =
        "\2\4\24\uffff\1\4\10\uffff\1\4\11\uffff\1\4\2\uffff\1\4\20\uffff"+
        "\1\164\52\uffff";
    static final String DFA80_maxS =
        "\2\u00b7\24\uffff\1\u0097\10\uffff\1\162\11\uffff\1\u00b7\2\uffff"+
        "\1\u00b7\20\uffff\1\164\52\uffff";
    static final String DFA80_acceptS =
        "\2\uffff\1\1\20\uffff\1\2\54\uffff\1\3\1\1\22\uffff\1\1\22\uffff"+
        "\1\1";
    static final String DFA80_specialS =
        "\150\uffff}>";
    static final String[] DFA80_transitionS = {
            "\1\2\54\uffff\1\2\7\uffff\1\2\2\uffff\1\1\4\uffff\1\23\1\2\4"+
            "\uffff\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3"+
            "\uffff\1\2\16\uffff\1\2\21\uffff\1\2\4\uffff\3\2\27\uffff\1"+
            "\2\6\uffff\1\2\3\uffff\1\2\12\uffff\1\2\1\uffff\1\2\4\uffff"+
            "\1\2",
            "\1\2\14\uffff\1\2\37\uffff\1\26\7\uffff\1\2\2\uffff\1\2\5\uffff"+
            "\1\2\4\uffff\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff"+
            "\1\2\3\uffff\1\2\16\uffff\1\2\21\uffff\1\2\4\uffff\3\2\17\uffff"+
            "\1\37\7\uffff\1\2\6\uffff\1\2\3\uffff\1\2\12\uffff\1\2\1\uffff"+
            "\1\2\4\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\2\20\uffff\1\2\43\uffff\3\2\1\54\4\2\1\uffff\1\51\13\2\1"+
            "\uffff\13\2\1\uffff\2\2\25\uffff\1\2\44\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\2\67\uffff\1\100\5\uffff\1\75\57\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\2\54\uffff\1\2\7\uffff\1\2\2\uffff\1\2\5\uffff\1\2\4\uffff"+
            "\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff"+
            "\1\2\16\uffff\1\2\12\uffff\1\101\6\uffff\1\2\4\uffff\3\2\27"+
            "\uffff\1\2\6\uffff\1\2\3\uffff\1\2\12\uffff\1\2\1\uffff\1\2"+
            "\4\uffff\1\2",
            "",
            "",
            "\1\124\54\uffff\1\2\7\uffff\1\2\2\uffff\1\2\5\uffff\1\2\4\uffff"+
            "\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff"+
            "\1\2\16\uffff\1\2\10\uffff\1\2\10\uffff\1\2\4\uffff\3\2\27\uffff"+
            "\1\2\6\uffff\1\2\3\uffff\1\2\12\uffff\1\2\1\uffff\1\2\4\uffff"+
            "\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\147",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA80_eot = DFA.unpackEncodedString(DFA80_eotS);
    static final short[] DFA80_eof = DFA.unpackEncodedString(DFA80_eofS);
    static final char[] DFA80_min = DFA.unpackEncodedStringToUnsignedChars(DFA80_minS);
    static final char[] DFA80_max = DFA.unpackEncodedStringToUnsignedChars(DFA80_maxS);
    static final short[] DFA80_accept = DFA.unpackEncodedString(DFA80_acceptS);
    static final short[] DFA80_special = DFA.unpackEncodedString(DFA80_specialS);
    static final short[][] DFA80_transition;

    static {
        int numStates = DFA80_transitionS.length;
        DFA80_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA80_transition[i] = DFA.unpackEncodedString(DFA80_transitionS[i]);
        }
    }

    class DFA80 extends DFA {

        public DFA80(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 80;
            this.eot = DFA80_eot;
            this.eof = DFA80_eof;
            this.min = DFA80_min;
            this.max = DFA80_max;
            this.accept = DFA80_accept;
            this.special = DFA80_special;
            this.transition = DFA80_transition;
        }
        public String getDescription() {
            return "558:11: ( classical_expr_wrp | array_init | ( func_pointer2 ( method_call_wrapper )? ) )";
        }
    }
    static final String DFA85_eotS =
        "\145\uffff";
    static final String DFA85_eofS =
        "\145\uffff";
    static final String DFA85_minS =
        "\1\61\1\4\2\uffff\2\4\10\uffff\1\61\7\uffff\1\4\13\uffff\1\4\102"+
        "\uffff";
    static final String DFA85_maxS =
        "\2\u00b0\2\uffff\2\u00b7\10\uffff\1\u00b7\7\uffff\1\u0097\13\uffff"+
        "\1\u00b0\102\uffff";
    static final String DFA85_acceptS =
        "\2\uffff\1\1\1\2\71\uffff\1\1\13\uffff\1\1\21\uffff\1\1\11\uffff";
    static final String DFA85_specialS =
        "\145\uffff}>";
    static final String[] DFA85_transitionS = {
            "\1\1\140\uffff\1\3\35\uffff\1\2",
            "\1\3\13\uffff\1\2\4\uffff\1\2\45\uffff\1\2\1\4\1\uffff\2\2"+
            "\2\uffff\1\5\1\uffff\1\2\3\uffff\1\2\3\uffff\1\2\3\uffff\1\2"+
            "\2\uffff\1\2\1\uffff\1\2\3\uffff\1\2\2\uffff\1\2\32\uffff\1"+
            "\2\37\uffff\1\2\30\uffff\1\2",
            "",
            "",
            "\1\16\54\uffff\1\26\7\uffff\1\2\2\uffff\1\2\5\uffff\1\2\4\uffff"+
            "\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff"+
            "\1\2\16\uffff\1\2\10\uffff\1\2\10\uffff\1\2\4\uffff\3\2\17\uffff"+
            "\1\3\7\uffff\1\2\6\uffff\1\2\3\uffff\1\2\12\uffff\1\2\1\uffff"+
            "\1\2\4\uffff\1\2",
            "\1\2\54\uffff\1\2\7\uffff\1\2\2\uffff\1\2\5\uffff\1\2\4\uffff"+
            "\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff"+
            "\1\2\16\uffff\1\2\12\uffff\1\42\6\uffff\1\2\4\uffff\3\2\27\uffff"+
            "\1\2\6\uffff\1\2\3\uffff\1\2\12\uffff\1\2\1\uffff\1\2\4\uffff"+
            "\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\75\7\uffff\1\2\2\uffff\1\2\5\uffff\1\2\4\uffff\1\2\1\uffff"+
            "\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff\1\2\16\uffff"+
            "\1\2\21\uffff\1\2\4\uffff\3\2\17\uffff\1\3\7\uffff\1\2\6\uffff"+
            "\1\2\3\uffff\1\2\12\uffff\1\2\1\uffff\1\2\4\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\2\13\uffff\1\2\4\uffff\1\2\43\uffff\10\2\1\uffff\1\111\13"+
            "\2\1\uffff\13\2\1\uffff\2\2\25\uffff\1\133\44\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\3\13\uffff\1\133\4\uffff\1\133\45\uffff\1\133\1\3\1\uffff"+
            "\2\133\2\uffff\1\133\1\uffff\1\133\3\uffff\1\133\3\uffff\1\133"+
            "\3\uffff\1\133\2\uffff\1\133\1\uffff\1\133\3\uffff\1\133\2\uffff"+
            "\1\133\32\uffff\1\133\37\uffff\1\133\30\uffff\1\133",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA85_eot = DFA.unpackEncodedString(DFA85_eotS);
    static final short[] DFA85_eof = DFA.unpackEncodedString(DFA85_eofS);
    static final char[] DFA85_min = DFA.unpackEncodedStringToUnsignedChars(DFA85_minS);
    static final char[] DFA85_max = DFA.unpackEncodedStringToUnsignedChars(DFA85_maxS);
    static final short[] DFA85_accept = DFA.unpackEncodedString(DFA85_acceptS);
    static final short[] DFA85_special = DFA.unpackEncodedString(DFA85_specialS);
    static final short[][] DFA85_transition;

    static {
        int numStates = DFA85_transitionS.length;
        DFA85_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA85_transition[i] = DFA.unpackEncodedString(DFA85_transitionS[i]);
        }
    }

    class DFA85 extends DFA {

        public DFA85(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 85;
            this.eot = DFA85_eot;
            this.eof = DFA85_eof;
            this.min = DFA85_min;
            this.max = DFA85_max;
            this.accept = DFA85_accept;
            this.special = DFA85_special;
            this.transition = DFA85_transition;
        }
        public String getDescription() {
            return "579:4: ( object_name | func_pointer1 )";
        }
    }
    static final String DFA97_eotS =
        "\u00a0\uffff";
    static final String DFA97_eofS =
        "\55\uffff\1\2\162\uffff";
    static final String DFA97_minS =
        "\2\4\22\uffff\1\61\1\4\22\uffff\1\4\2\uffff\3\4\162\uffff";
    static final String DFA97_maxS =
        "\2\u00b7\22\uffff\1\u00b0\1\u0097\22\uffff\1\u0097\2\uffff\3\u00b7"+
        "\162\uffff";
    static final String DFA97_acceptS =
        "\2\uffff\1\2\20\uffff\1\1\53\uffff\3\1\21\uffff\1\1\23\uffff\1\1"+
        "\21\uffff\3\1\3\uffff\1\1\1\uffff\1\1\31\uffff\1\1\4\uffff";
    static final String DFA97_specialS =
        "\u00a0\uffff}>";
    static final String[] DFA97_transitionS = {
            "\1\2\54\uffff\1\2\7\uffff\1\2\2\uffff\1\1\5\uffff\1\2\4\uffff"+
            "\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff"+
            "\1\2\16\uffff\1\2\21\uffff\1\2\4\uffff\3\2\27\uffff\1\2\6\uffff"+
            "\1\2\3\uffff\1\2\12\uffff\1\2\1\uffff\1\2\4\uffff\1\2",
            "\1\2\14\uffff\1\23\37\uffff\1\25\7\uffff\1\2\2\uffff\1\2\5"+
            "\uffff\1\2\4\uffff\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1"+
            "\uffff\1\2\3\uffff\1\2\16\uffff\1\2\21\uffff\1\2\4\uffff\3\2"+
            "\17\uffff\1\23\7\uffff\1\2\6\uffff\1\2\3\uffff\1\2\12\uffff"+
            "\1\2\1\uffff\1\2\4\uffff\1\24",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\50\140\uffff\1\23\35\uffff\1\2",
            "\1\54\20\uffff\1\2\43\uffff\10\2\1\uffff\1\53\13\2\1\uffff"+
            "\13\2\1\uffff\2\2\25\uffff\1\55\44\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\100\20\uffff\1\2\43\uffff\10\2\1\uffff\1\77\13\2\1\uffff"+
            "\13\2\1\uffff\2\2\25\uffff\1\101\44\uffff\1\2",
            "",
            "",
            "\1\2\54\uffff\1\2\7\uffff\1\2\2\uffff\1\2\5\uffff\1\2\4\uffff"+
            "\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff"+
            "\1\2\16\uffff\1\2\12\uffff\1\123\6\uffff\1\2\4\uffff\3\2\27"+
            "\uffff\1\2\6\uffff\1\2\3\uffff\1\2\12\uffff\1\2\1\uffff\1\2"+
            "\4\uffff\1\2",
            "\1\147\54\uffff\1\2\7\uffff\1\2\2\uffff\1\2\5\uffff\1\2\4\uffff"+
            "\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff"+
            "\1\2\16\uffff\1\2\10\uffff\1\23\10\uffff\1\2\4\uffff\3\2\27"+
            "\uffff\1\2\6\uffff\1\2\3\uffff\1\2\12\uffff\1\2\1\uffff\1\2"+
            "\4\uffff\1\2",
            "\1\171\12\uffff\2\2\4\uffff\1\2\33\uffff\1\u0081\7\uffff\1"+
            "\172\2\2\1\u0081\4\2\1\uffff\1\u0081\4\2\1\173\1\2\1\177\4\2"+
            "\1\173\5\2\1\173\1\2\1\177\3\2\1\173\2\2\14\uffff\1\u0081\10"+
            "\uffff\3\2\2\uffff\1\2\3\uffff\1\173\4\uffff\3\u0081\17\uffff"+
            "\1\2\4\uffff\1\2\2\uffff\1\u0081\6\uffff\1\u0081\3\uffff\1\u0081"+
            "\12\uffff\1\u009b\1\uffff\1\u0081\4\uffff\1\173",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA97_eot = DFA.unpackEncodedString(DFA97_eotS);
    static final short[] DFA97_eof = DFA.unpackEncodedString(DFA97_eofS);
    static final char[] DFA97_min = DFA.unpackEncodedStringToUnsignedChars(DFA97_minS);
    static final char[] DFA97_max = DFA.unpackEncodedStringToUnsignedChars(DFA97_maxS);
    static final short[] DFA97_accept = DFA.unpackEncodedString(DFA97_acceptS);
    static final short[] DFA97_special = DFA.unpackEncodedString(DFA97_specialS);
    static final short[][] DFA97_transition;

    static {
        int numStates = DFA97_transitionS.length;
        DFA97_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA97_transition[i] = DFA.unpackEncodedString(DFA97_transitionS[i]);
        }
    }

    class DFA97 extends DFA {

        public DFA97(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 97;
            this.eot = DFA97_eot;
            this.eof = DFA97_eof;
            this.min = DFA97_min;
            this.max = DFA97_max;
            this.accept = DFA97_accept;
            this.special = DFA97_special;
            this.transition = DFA97_transition;
        }
        public String getDescription() {
            return "659:4: ( type_convertion )?";
        }
    }
    static final String DFA98_eotS =
        "\u009e\uffff";
    static final String DFA98_eofS =
        "\54\uffff\1\2\161\uffff";
    static final String DFA98_minS =
        "\1\61\1\4\21\uffff\1\61\1\4\22\uffff\1\4\2\uffff\3\4\161\uffff";
    static final String DFA98_maxS =
        "\2\u00b7\21\uffff\1\u00b0\1\u0097\22\uffff\1\u0097\2\uffff\3\u00b7"+
        "\161\uffff";
    static final String DFA98_acceptS =
        "\2\uffff\1\2\17\uffff\1\1\53\uffff\3\1\21\uffff\1\1\23\uffff\1\1"+
        "\21\uffff\2\1\3\uffff\1\1\1\uffff\1\1\31\uffff\1\1\4\uffff";
    static final String DFA98_specialS =
        "\u009e\uffff}>";
    static final String[] DFA98_transitionS = {
            "\1\2\7\uffff\1\2\2\uffff\1\1\5\uffff\1\2\4\uffff\1\2\1\uffff"+
            "\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff\1\2\16\uffff"+
            "\1\2\21\uffff\1\2\4\uffff\3\2\27\uffff\1\2\6\uffff\1\2\3\uffff"+
            "\1\2\12\uffff\1\2\1\uffff\1\2\4\uffff\1\2",
            "\1\2\14\uffff\1\22\37\uffff\1\24\7\uffff\1\2\2\uffff\1\2\5"+
            "\uffff\1\2\4\uffff\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1"+
            "\uffff\1\2\3\uffff\1\2\16\uffff\1\2\21\uffff\1\2\4\uffff\3\2"+
            "\17\uffff\1\22\7\uffff\1\2\6\uffff\1\2\3\uffff\1\2\12\uffff"+
            "\1\2\1\uffff\1\2\4\uffff\1\23",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\47\140\uffff\1\22\35\uffff\1\2",
            "\1\53\20\uffff\1\2\43\uffff\10\2\1\uffff\1\52\13\2\1\uffff"+
            "\13\2\1\uffff\2\2\25\uffff\1\54\44\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\77\20\uffff\1\2\43\uffff\10\2\1\uffff\1\76\13\2\1\uffff"+
            "\13\2\1\uffff\2\2\25\uffff\1\100\44\uffff\1\2",
            "",
            "",
            "\1\2\54\uffff\1\2\7\uffff\1\2\2\uffff\1\2\5\uffff\1\2\4\uffff"+
            "\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff"+
            "\1\2\16\uffff\1\2\12\uffff\1\122\6\uffff\1\2\4\uffff\3\2\27"+
            "\uffff\1\2\6\uffff\1\2\3\uffff\1\2\12\uffff\1\2\1\uffff\1\2"+
            "\4\uffff\1\2",
            "\1\146\54\uffff\1\2\7\uffff\1\2\2\uffff\1\2\5\uffff\1\2\4\uffff"+
            "\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff"+
            "\1\2\16\uffff\1\2\10\uffff\1\22\10\uffff\1\2\4\uffff\3\2\27"+
            "\uffff\1\2\6\uffff\1\2\3\uffff\1\2\12\uffff\1\2\1\uffff\1\2"+
            "\4\uffff\1\2",
            "\1\2\12\uffff\2\2\4\uffff\1\2\33\uffff\1\177\7\uffff\1\170"+
            "\2\2\1\177\4\2\1\uffff\1\177\4\2\1\171\1\2\1\175\4\2\1\171\5"+
            "\2\1\171\1\2\1\175\3\2\1\171\2\2\14\uffff\1\177\10\uffff\3\2"+
            "\2\uffff\1\2\3\uffff\1\171\4\uffff\3\177\17\uffff\1\2\4\uffff"+
            "\1\2\2\uffff\1\177\6\uffff\1\177\3\uffff\1\177\12\uffff\1\u0099"+
            "\1\uffff\1\177\4\uffff\1\171",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA98_eot = DFA.unpackEncodedString(DFA98_eotS);
    static final short[] DFA98_eof = DFA.unpackEncodedString(DFA98_eofS);
    static final char[] DFA98_min = DFA.unpackEncodedStringToUnsignedChars(DFA98_minS);
    static final char[] DFA98_max = DFA.unpackEncodedStringToUnsignedChars(DFA98_maxS);
    static final short[] DFA98_accept = DFA.unpackEncodedString(DFA98_acceptS);
    static final short[] DFA98_special = DFA.unpackEncodedString(DFA98_specialS);
    static final short[][] DFA98_transition;

    static {
        int numStates = DFA98_transitionS.length;
        DFA98_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA98_transition[i] = DFA.unpackEncodedString(DFA98_transitionS[i]);
        }
    }

    class DFA98 extends DFA {

        public DFA98(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 98;
            this.eot = DFA98_eot;
            this.eof = DFA98_eof;
            this.min = DFA98_min;
            this.max = DFA98_max;
            this.accept = DFA98_accept;
            this.special = DFA98_special;
            this.transition = DFA98_transition;
        }
        public String getDescription() {
            return "662:14: ( type_convertion )?";
        }
    }
    static final String DFA108_eotS =
        "\u0099\uffff";
    static final String DFA108_eofS =
        "\1\2\30\uffff\1\2\24\uffff\1\112\152\uffff";
    static final String DFA108_minS =
        "\2\4\27\uffff\1\4\22\uffff\3\4\152\uffff";
    static final String DFA108_maxS =
        "\1\u00b0\1\u00b7\27\uffff\1\u00b0\22\uffff\3\u00b7\152\uffff";
    static final String DFA108_acceptS =
        "\2\uffff\1\2\107\uffff\1\1\1\uffff\1\1\21\uffff\1\1\26\uffff\3\1"+
        "\3\uffff\1\1\11\uffff\1\1\3\uffff\1\1\17\uffff";
    static final String DFA108_specialS =
        "\u0099\uffff}>";
    static final String[] DFA108_transitionS = {
            "\1\2\12\uffff\2\2\40\uffff\1\2\7\uffff\3\2\1\uffff\4\2\2\uffff"+
            "\2\2\1\1\10\2\1\uffff\13\2\1\uffff\2\2\25\uffff\3\2\2\uffff"+
            "\1\2\32\uffff\1\2\35\uffff\1\2",
            "\1\2\54\uffff\1\31\7\uffff\1\2\2\uffff\1\2\5\uffff\1\2\4\uffff"+
            "\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff"+
            "\1\2\16\uffff\1\2\21\uffff\1\2\4\uffff\3\2\27\uffff\1\2\6\uffff"+
            "\1\2\3\uffff\1\2\12\uffff\1\2\1\uffff\1\2\4\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\54\12\uffff\1\2\1\55\4\uffff\1\2\33\uffff\1\2\7\uffff\10"+
            "\2\1\uffff\10\2\1\56\3\2\1\uffff\13\2\1\uffff\2\2\25\uffff\3"+
            "\2\2\uffff\1\2\32\uffff\1\2\4\uffff\1\2\30\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\114\13\uffff\1\112\40\uffff\1\2\7\uffff\1\2\2\uffff\1\2"+
            "\5\uffff\1\2\4\uffff\1\2\1\uffff\1\2\1\112\3\uffff\1\2\5\uffff"+
            "\1\2\1\uffff\1\2\3\uffff\1\2\16\uffff\1\2\21\uffff\1\2\4\uffff"+
            "\3\2\27\uffff\1\2\6\uffff\1\2\3\uffff\1\2\12\uffff\1\2\1\uffff"+
            "\1\2\4\uffff\1\2",
            "\1\2\20\uffff\1\2\33\uffff\1\136\7\uffff\1\2\2\uffff\1\2\4"+
            "\uffff\2\2\4\uffff\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1"+
            "\uffff\1\2\3\uffff\1\2\16\uffff\1\2\21\uffff\1\2\4\uffff\3\2"+
            "\17\uffff\1\2\7\uffff\1\2\6\uffff\1\2\3\uffff\1\2\12\uffff\1"+
            "\2\1\uffff\1\2\4\uffff\1\2",
            "\1\166\12\uffff\1\u0085\1\112\40\uffff\1\u0085\7\uffff\1\173"+
            "\2\112\1\2\1\u0089\3\112\1\uffff\1\2\4\112\1\167\1\112\1\165"+
            "\4\112\1\2\3\112\1\u0089\1\112\1\167\1\112\1\165\3\112\1\2\2"+
            "\112\14\uffff\1\2\10\uffff\1\112\2\u0085\2\uffff\1\112\3\uffff"+
            "\1\2\4\uffff\3\2\17\uffff\1\u0089\7\uffff\1\2\6\uffff\1\2\3"+
            "\uffff\1\2\12\uffff\1\u0089\1\uffff\1\2\4\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA108_eot = DFA.unpackEncodedString(DFA108_eotS);
    static final short[] DFA108_eof = DFA.unpackEncodedString(DFA108_eofS);
    static final char[] DFA108_min = DFA.unpackEncodedStringToUnsignedChars(DFA108_minS);
    static final char[] DFA108_max = DFA.unpackEncodedStringToUnsignedChars(DFA108_maxS);
    static final short[] DFA108_accept = DFA.unpackEncodedString(DFA108_acceptS);
    static final short[] DFA108_special = DFA.unpackEncodedString(DFA108_specialS);
    static final short[][] DFA108_transition;

    static {
        int numStates = DFA108_transitionS.length;
        DFA108_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA108_transition[i] = DFA.unpackEncodedString(DFA108_transitionS[i]);
        }
    }

    class DFA108 extends DFA {

        public DFA108(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 108;
            this.eot = DFA108_eot;
            this.eof = DFA108_eof;
            this.min = DFA108_min;
            this.max = DFA108_max;
            this.accept = DFA108_accept;
            this.special = DFA108_special;
            this.transition = DFA108_transition;
        }
        public String getDescription() {
            return "690:29: ( generic )?";
        }
    }
    static final String DFA199_eotS =
        "\u00b0\uffff";
    static final String DFA199_eofS =
        "\u00b0\uffff";
    static final String DFA199_minS =
        "\1\61\3\uffff\1\4\1\uffff\3\4\1\uffff\1\4\20\uffff\1\4\23\uffff"+
        "\1\4\16\uffff\1\4\16\uffff\1\4\142\uffff";
    static final String DFA199_maxS =
        "\1\u00b2\3\uffff\1\u00b7\1\uffff\1\u0097\2\163\1\uffff\1\163\20"+
        "\uffff\1\u00b7\23\uffff\1\u00b7\16\uffff\1\u00b7\16\uffff\1\u00b7"+
        "\142\uffff";
    static final String DFA199_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\uffff\1\5\3\uffff\1\4\1\uffff\1\6\20\uffff"+
        "\1\4\23\uffff\1\4\16\uffff\1\4\16\uffff\1\4\15\uffff\3\4\1\uffff"+
        "\1\4\20\uffff\3\4\1\uffff\1\4\20\uffff\3\4\1\uffff\1\4\20\uffff"+
        "\3\4\1\uffff\1\4\20\uffff";
    static final String DFA199_specialS =
        "\u00b0\uffff}>";
    static final String[] DFA199_transitionS = {
            "\1\1\17\uffff\1\4\47\uffff\1\5\26\uffff\1\2\44\uffff\1\3\14"+
            "\uffff\1\3",
            "",
            "",
            "",
            "\1\13\20\uffff\1\13\33\uffff\1\6\7\uffff\1\13\2\uffff\1\13"+
            "\4\uffff\1\11\1\13\4\uffff\1\13\1\uffff\1\13\4\uffff\1\13\5"+
            "\uffff\1\13\1\uffff\1\13\3\uffff\1\13\16\uffff\1\12\21\uffff"+
            "\1\13\4\uffff\1\7\2\13\27\uffff\1\13\6\uffff\1\13\3\uffff\1"+
            "\10\12\uffff\1\13\1\uffff\1\10\4\uffff\1\13",
            "",
            "\1\13\13\uffff\1\33\4\uffff\1\13\43\uffff\10\13\1\uffff\14"+
            "\13\1\uffff\13\13\1\uffff\2\13\26\uffff\1\34\43\uffff\1\13",
            "\1\13\13\uffff\1\57\50\uffff\3\13\1\uffff\4\13\2\uffff\13\13"+
            "\1\uffff\13\13\1\uffff\2\13\26\uffff\1\60",
            "\1\13\13\uffff\1\76\50\uffff\3\13\1\uffff\4\13\2\uffff\13\13"+
            "\1\uffff\13\13\1\uffff\2\13\26\uffff\1\77",
            "",
            "\1\13\13\uffff\1\115\50\uffff\3\13\1\uffff\4\13\2\uffff\13"+
            "\13\1\uffff\13\13\1\uffff\2\13\26\uffff\1\116",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\13\20\uffff\1\13\33\uffff\1\134\7\uffff\1\13\2\uffff\1\13"+
            "\4\uffff\1\116\1\13\4\uffff\1\13\1\uffff\1\13\4\uffff\1\13\5"+
            "\uffff\1\13\1\uffff\1\13\3\uffff\1\13\16\uffff\1\140\21\uffff"+
            "\1\13\4\uffff\1\135\2\13\27\uffff\1\13\6\uffff\1\13\3\uffff"+
            "\1\136\12\uffff\1\13\1\uffff\1\136\4\uffff\1\13",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\13\20\uffff\1\13\33\uffff\1\161\7\uffff\1\13\2\uffff\1\13"+
            "\4\uffff\1\116\1\13\4\uffff\1\13\1\uffff\1\13\4\uffff\1\13\5"+
            "\uffff\1\13\1\uffff\1\13\3\uffff\1\13\16\uffff\1\165\21\uffff"+
            "\1\13\4\uffff\1\162\2\13\27\uffff\1\13\6\uffff\1\13\3\uffff"+
            "\1\163\12\uffff\1\13\1\uffff\1\163\4\uffff\1\13",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\13\20\uffff\1\13\33\uffff\1\u0086\7\uffff\1\13\2\uffff\1"+
            "\13\4\uffff\1\116\1\13\4\uffff\1\13\1\uffff\1\13\4\uffff\1\13"+
            "\5\uffff\1\13\1\uffff\1\13\3\uffff\1\13\16\uffff\1\u008a\21"+
            "\uffff\1\13\4\uffff\1\u0087\2\13\27\uffff\1\13\6\uffff\1\13"+
            "\3\uffff\1\u0088\12\uffff\1\13\1\uffff\1\u0088\4\uffff\1\13",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\13\20\uffff\1\13\33\uffff\1\u009b\7\uffff\1\13\2\uffff\1"+
            "\13\4\uffff\1\116\1\13\4\uffff\1\13\1\uffff\1\13\4\uffff\1\13"+
            "\5\uffff\1\13\1\uffff\1\13\3\uffff\1\13\16\uffff\1\u009f\21"+
            "\uffff\1\13\4\uffff\1\u009c\2\13\27\uffff\1\13\6\uffff\1\13"+
            "\3\uffff\1\u009d\12\uffff\1\13\1\uffff\1\u009d\4\uffff\1\13",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA199_eot = DFA.unpackEncodedString(DFA199_eotS);
    static final short[] DFA199_eof = DFA.unpackEncodedString(DFA199_eofS);
    static final char[] DFA199_min = DFA.unpackEncodedStringToUnsignedChars(DFA199_minS);
    static final char[] DFA199_max = DFA.unpackEncodedStringToUnsignedChars(DFA199_maxS);
    static final short[] DFA199_accept = DFA.unpackEncodedString(DFA199_acceptS);
    static final short[] DFA199_special = DFA.unpackEncodedString(DFA199_specialS);
    static final short[][] DFA199_transition;

    static {
        int numStates = DFA199_transitionS.length;
        DFA199_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA199_transition[i] = DFA.unpackEncodedString(DFA199_transitionS[i]);
        }
    }

    class DFA199 extends DFA {

        public DFA199(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 199;
            this.eot = DFA199_eot;
            this.eof = DFA199_eof;
            this.min = DFA199_min;
            this.max = DFA199_max;
            this.accept = DFA199_accept;
            this.special = DFA199_special;
            this.transition = DFA199_transition;
        }
        public String getDescription() {
            return "1052:1: value : ( ID | string_value | null_stmt | array | NUMBER | struct_init2 );";
        }
    }
 

    public static final BitSet FOLLOW_code_internal_in_code387 = new BitSet(new long[]{0x0002000000020002L,0x4000000000000000L,0x0000200060040010L});
    public static final BitSet FOLLOW_operator_wrapper_in_code_internal401 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implementation_wrapper_in_code_internal407 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_operator_in_operator_wrapper418 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_extern_wrapper_in_operator436 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_static_section_wrapper_in_operator442 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_start_wrapper_in_operator447 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interface_declaration_wrapper_in_operator454 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typedef_struct_declaration_in_operator460 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_extern_in_extern_wrapper479 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_173_in_extern498 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_150_in_extern501 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_L_FBR_in_extern504 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFF7FFFFFFFFFFFFL,0x01FFFFFFFFFFFFFFL});
    public static final BitSet FOLLOW_set_in_extern506 = new BitSet(new long[]{0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_R_FBR_in_extern511 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implementation_in_implementation_wrapper523 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_157_in_implementation542 = new BitSet(new long[]{0x0002000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_name_in_implementation545 = new BitSet(new long[]{0x1002000000008000L,0x4000000000100080L,0x0020200400040010L});
    public static final BitSet FOLLOW_category_in_implementation548 = new BitSet(new long[]{0x0002000000008000L,0x4000000000100080L,0x0020200400040010L});
    public static final BitSet FOLLOW_super_class_in_implementation551 = new BitSet(new long[]{0x0002000000000000L,0x4000000000100080L,0x0020200400040010L});
    public static final BitSet FOLLOW_implementation_body_in_implementation556 = new BitSet(new long[]{0x0002000000000000L,0x4000000000100080L,0x0020200408040010L});
    public static final BitSet FOLLOW_155_in_implementation561 = new BitSet(new long[]{0x0000000000000002L,0x0080000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_implementation564 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_BR_in_category576 = new BitSet(new long[]{0x0002000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_name_in_category579 = new BitSet(new long[]{0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_R_BR_in_category582 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_directives_in_implementation_body600 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typedef_in_implementation_body606 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_static_section_wrapper_in_implementation_body612 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implementation_method_wrapper_in_implementation_body618 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_type_started_wrapper_in_implementation_body624 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_declaration_wrapper_in_implementation_body630 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typedef_struct_declaration_wrapper_in_implementation_body635 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_synthesize_in_directives646 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_162_in_synthesize659 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_ID_in_synthesize662 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_synthesize665 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_181_in_typedef677 = new BitSet(new long[]{0x0000000001000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_typedef_declaration_wrapper_in_typedef681 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typedef_struct_declaration_wrapper_in_typedef685 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_static_section_in_static_section_wrapper700 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STATIC_PREFIX_in_static_section720 = new BitSet(new long[]{0x0002000001020000L,0x0080000000000002L,0x0002000000040010L});
    public static final BitSet FOLLOW_CONST_PREFIX_in_static_section722 = new BitSet(new long[]{0x0002000001000000L,0x0080000000000002L,0x0002000000040010L});
    public static final BitSet FOLLOW_STRUCT_PREFIX_in_static_section725 = new BitSet(new long[]{0x0002000001000000L,0x0080000000000002L,0x0002000000040000L});
    public static final BitSet FOLLOW_ENUM_PREFIX_in_static_section728 = new BitSet(new long[]{0x0002000000000000L,0x0080000000000002L,0x0002000000040000L});
    public static final BitSet FOLLOW_static_section2_in_static_section731 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inline_section_in_static_section2740 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implementation_method_wrapper2_in_static_section2747 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_static_section3_in_static_section2754 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_177_in_inline_section766 = new BitSet(new long[]{0x0002000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_field_type_in_inline_section769 = new BitSet(new long[]{0x0002000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_name_in_inline_section771 = new BitSet(new long[]{0x1000000000000000L,0x0080000000000002L});
    public static final BitSet FOLLOW_method_params2_in_inline_section774 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000002L});
    public static final BitSet FOLLOW_block_wrapper_in_inline_section778 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_inline_section782 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_type_in_static_section3793 = new BitSet(new long[]{0x0002000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_name_in_static_section3795 = new BitSet(new long[]{0x9000000000000000L,0x0080000000000004L});
    public static final BitSet FOLLOW_indexed_in_static_section3797 = new BitSet(new long[]{0x9000000000000000L,0x0080000000000004L});
    public static final BitSet FOLLOW_static_end_in_static_section3801 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implementation_method_wrapper3_in_static_end813 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_end_in_static_end819 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_end_internal_in_field_end830 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_value_set_in_field_end_internal848 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_field_end_internal851 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implementation_method3_in_implementation_method_wrapper3863 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_header_body3_in_implementation_method3881 = new BitSet(new long[]{0x0000000000000002L,0x0080000000000002L,0x0000004000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_implementation_method3884 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000002L,0x0000004000000000L});
    public static final BitSet FOLLOW_attribute_in_implementation_method3889 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000002L});
    public static final BitSet FOLLOW_block_wrapper_in_implementation_method3894 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_166_in_attribute907 = new BitSet(new long[]{0x1000000000000000L});
    public static final BitSet FOLLOW_L_BR_in_attribute910 = new BitSet(new long[]{0x1000000000000000L});
    public static final BitSet FOLLOW_L_BR_in_attribute913 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_169_in_attribute916 = new BitSet(new long[]{0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_R_BR_in_attribute919 = new BitSet(new long[]{0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_R_BR_in_attribute922 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_attribute925 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_implementation_method2937 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_block_wrapper_in_implementation_method2942 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_type_started_in_field_type_started_wrapper954 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_type_in_field_type_started973 = new BitSet(new long[]{0x0002000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_name_in_field_type_started975 = new BitSet(new long[]{0x9000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_classic_method_declaration_wrapper_in_field_type_started978 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_declaration_end_wrapper_in_field_type_started982 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_declaration_end_in_field_declaration_end_wrapper993 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classic_method_declaration_in_classic_method_declaration_wrapper1011 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_params2_in_classic_method_declaration1031 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_block_wrapper_in_classic_method_declaration1036 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implementation_method_in_implementation_method_wrapper1049 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implementation_method2_in_implementation_method_wrapper21066 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_header_body_in_implementation_method1083 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_implementation_method1085 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_block_wrapper_in_implementation_method1090 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_in_block_wrapper1103 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_FBR_in_block1125 = new BitSet(new long[]{0x1202000001020090L,0x4C88020004504286L,0x019DD8BA04040017L});
    public static final BitSet FOLLOW_block_internal_full_in_block1131 = new BitSet(new long[]{0x1202000001020090L,0x4C88020004504286L,0x019DD8BA04040017L});
    public static final BitSet FOLLOW_block_in_block1135 = new BitSet(new long[]{0x1202000001020090L,0x4C88020004504286L,0x019DD8BA04040017L});
    public static final BitSet FOLLOW_R_FBR_in_block1143 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_FBR_in_block_case1158 = new BitSet(new long[]{0x1202000001020090L,0x4C88020004504286L,0x019DDCBA04040017L});
    public static final BitSet FOLLOW_block_internal_full_in_block_case1164 = new BitSet(new long[]{0x1202000001020090L,0x4C88020004504286L,0x019DDCBA04040017L});
    public static final BitSet FOLLOW_block_in_block_case1168 = new BitSet(new long[]{0x1202000001020090L,0x4C88020004504286L,0x019DDCBA04040017L});
    public static final BitSet FOLLOW_default_stmt_in_block_case1177 = new BitSet(new long[]{0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_R_FBR_in_block_case1182 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_internal_in_block_internal_full1194 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_try_stmt_in_block_internal1205 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_throw_stmt_in_block_internal1210 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_static_start_wrapper_in_block_internal1215 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_block_internal1217 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_do_stmt_in_block_internal1222 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_const_expression_in_block_internal1227 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_block_internal1229 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_full_expr_wrapper_in_block_internal1234 = new BitSet(new long[]{0x0002000000008000L,0x0080000000000000L,0x0001000000040000L});
    public static final BitSet FOLLOW_full_expr2_in_block_internal1238 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_block_internal1241 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COLON_in_block_internal1246 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_if_stmt_wrapper_in_block_internal1252 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_else_stmt_in_block_internal1257 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_switch_stmt_wrapper_in_block_internal1262 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_return_stmt_in_block_internal1267 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_stmt_in_block_internal1272 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_while_stmt_wrapper_in_block_internal1277 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_single_operators_in_block_internal1282 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_struct_variable_in_block_internal1287 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_block_internal1289 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enum_variable_in_block_internal1294 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_block_internal1296 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeof_started_in_block_internal1301 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_block_internal1303 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_known_type_started_in_block_internal1308 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_block_internal1310 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_block_internal1315 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_known_types_in_known_type_started1328 = new BitSet(new long[]{0x0002000000000010L,0x0000000000000000L,0x0001000000040000L});
    public static final BitSet FOLLOW_ASTERISK_in_known_type_started1330 = new BitSet(new long[]{0x0002000000000010L,0x0000000000000000L,0x0001000000040000L});
    public static final BitSet FOLLOW_full_expr2_in_known_type_started1333 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeof_in_typeof_started1345 = new BitSet(new long[]{0x1202000000000010L,0x0800020004504284L,0x0085002204000007L});
    public static final BitSet FOLLOW_full_expr_wrapper_in_typeof_started1347 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRUCT_PREFIX_in_struct_variable1360 = new BitSet(new long[]{0x1202000000000010L,0x0800020004504284L,0x0085002204000007L});
    public static final BitSet FOLLOW_full_expr_wrapper_in_struct_variable1362 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ENUM_PREFIX_in_enum_variable1371 = new BitSet(new long[]{0x1202000000000010L,0x0800020004504284L,0x0085002204000007L});
    public static final BitSet FOLLOW_full_expr_wrapper_in_enum_variable1373 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CONST_PREFIX_in_const_expression1384 = new BitSet(new long[]{0x1202000000000010L,0x0800020004504284L,0x0085002204000007L});
    public static final BitSet FOLLOW_full_expr_wrapper_in_const_expression1386 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_163_in_throw_stmt1395 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_throw_stmt1398 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_164_in_try_stmt1409 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_block_in_try_stmt1412 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000012000000L});
    public static final BitSet FOLLOW_catch_stmt_in_try_stmt1415 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000012000000L});
    public static final BitSet FOLLOW_156_in_try_stmt1419 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_block_in_try_stmt1422 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_153_in_catch_stmt1436 = new BitSet(new long[]{0x1000000000000000L});
    public static final BitSet FOLLOW_L_BR_in_catch_stmt1439 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_ID_in_catch_stmt1442 = new BitSet(new long[]{0x0002000000000010L});
    public static final BitSet FOLLOW_ASTERISK_in_catch_stmt1445 = new BitSet(new long[]{0x0002000000000010L});
    public static final BitSet FOLLOW_ID_in_catch_stmt1448 = new BitSet(new long[]{0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_R_BR_in_catch_stmt1451 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_block_in_catch_stmt1454 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_switch_stmt_in_switch_stmt_wrapper1467 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_180_in_switch_stmt1484 = new BitSet(new long[]{0x1000000000000000L});
    public static final BitSet FOLLOW_L_BR_in_switch_stmt1487 = new BitSet(new long[]{0x1202000000000010L,0x0800020004504284L,0x0085002204000007L});
    public static final BitSet FOLLOW_switch_expr_in_switch_stmt1490 = new BitSet(new long[]{0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_R_BR_in_switch_stmt1492 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_switch_body_wrapper_in_switch_stmt1498 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_FBR_in_switch_body_wrapper1511 = new BitSet(new long[]{0x1202000001020090L,0x4C88020004504284L,0x019DDDBA04040017L});
    public static final BitSet FOLLOW_switch_body_in_switch_body_wrapper1513 = new BitSet(new long[]{0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_R_FBR_in_switch_body_wrapper1515 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_internal_full_in_switch_body1534 = new BitSet(new long[]{0x1202000001020092L,0x4C80020004504284L,0x019DDDBA04040017L});
    public static final BitSet FOLLOW_switch_internal_in_switch_body1539 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000050000000000L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_switch_expr1552 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_case_stmt_wrapper_in_switch_internal1569 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_default_stmt_wrapper_in_switch_internal1575 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_case_stmt_in_case_stmt_wrapper1584 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_168_in_case_stmt1601 = new BitSet(new long[]{0x0002000000000000L,0x0000020000000000L,0x0004002000000007L});
    public static final BitSet FOLLOW_case_expr_wrapper_in_case_stmt1604 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_COLON_in_case_stmt1607 = new BitSet(new long[]{0x1202000001020092L,0x4C80020004504286L,0x019DD8BA04040017L});
    public static final BitSet FOLLOW_case_body_wrapper_in_case_stmt1612 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_case_body_in_case_body_wrapper1626 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_break_in_case_body1645 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_internal_full_in_case_body1652 = new BitSet(new long[]{0x1202000001020092L,0x4C80020004504284L,0x019DD8BA04040017L});
    public static final BitSet FOLLOW_case_expr_in_case_expr_wrapper1668 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_const_expr_in_case_expr1690 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_case_expr1697 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_case_in_block_break1708 = new BitSet(new long[]{0x0000000000000082L,0x0400000000000000L});
    public static final BitSet FOLLOW_single_operators_in_block_break1710 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_default_stmt_in_default_stmt_wrapper1722 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_170_in_default_stmt1739 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_COLON_in_default_stmt1742 = new BitSet(new long[]{0x1202000001020092L,0x4C80020004504286L,0x019DD8BA04040017L});
    public static final BitSet FOLLOW_default_body_wrapper_in_default_stmt1747 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_default_body_in_default_body_wrapper1760 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_break_in_default_body1780 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_internal_full_in_default_body1786 = new BitSet(new long[]{0x1202000001020092L,0x4C80020004504284L,0x019DD8BA04040017L});
    public static final BitSet FOLLOW_SINGLE_OP_in_single_operators1801 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_break_wrapper_in_single_operators1808 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_break_stmt_in_break_wrapper1820 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BREAK_WORD_in_break_stmt1838 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_break_stmt1841 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_171_in_do_stmt1851 = new BitSet(new long[]{0x1202000001020090L,0x4C80020004504286L,0x019DD8BA04040017L});
    public static final BitSet FOLLOW_if_stmt_block_in_do_stmt1854 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_184_in_do_stmt1857 = new BitSet(new long[]{0x1000000000000000L});
    public static final BitSet FOLLOW_L_BR_in_do_stmt1860 = new BitSet(new long[]{0x1202000000000010L,0x0800020004504284L,0x0085002204000007L});
    public static final BitSet FOLLOW_expression_in_do_stmt1863 = new BitSet(new long[]{0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_R_BR_in_do_stmt1865 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_while_stmt_in_while_stmt_wrapper1874 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_184_in_while_stmt1893 = new BitSet(new long[]{0x1000000000000000L});
    public static final BitSet FOLLOW_L_BR_in_while_stmt1896 = new BitSet(new long[]{0x1202000000000010L,0x0800020004504284L,0x0085002204000007L});
    public static final BitSet FOLLOW_while_expr_in_while_stmt1899 = new BitSet(new long[]{0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_R_BR_in_while_stmt1901 = new BitSet(new long[]{0x1202000001020090L,0x4C80020004504286L,0x019DD8BA04040017L});
    public static final BitSet FOLLOW_if_stmt_block_wrapper_in_while_stmt1904 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_while_expr1917 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_174_in_for_stmt1934 = new BitSet(new long[]{0x1000000000000000L});
    public static final BitSet FOLLOW_L_BR_in_for_stmt1937 = new BitSet(new long[]{0x1202000000000010L,0x0880020004504284L,0x0085002204000007L});
    public static final BitSet FOLLOW_for_stmt_expr_in_for_stmt1940 = new BitSet(new long[]{0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_R_BR_in_for_stmt1942 = new BitSet(new long[]{0x1202000001020090L,0x4C80020004504286L,0x019DD8BA04040017L});
    public static final BitSet FOLLOW_if_stmt_block_in_for_stmt1945 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_full_expr_wrapper_in_for_stmt_expr1957 = new BitSet(new long[]{0x0002000000000000L,0x0080000000000000L,0x0001000000040000L});
    public static final BitSet FOLLOW_for_stmt_int1_in_for_stmt_expr1960 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_full_expr2_in_for_stmt_expr1965 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_for_stmt_int1_in_for_stmt_expr1968 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_stmt_int2_in_for_stmt_expr1972 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_stmt_int2_in_for_stmt_expr1978 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_stmt_int2_in_for_stmt_expr1984 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_176_in_for_stmt_int11999 = new BitSet(new long[]{0x1002000000000000L,0x0000020000000004L,0x0085002204000007L});
    public static final BitSet FOLLOW_object_wrapped2_in_for_stmt_int12001 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_for_stmt_int22021 = new BitSet(new long[]{0x1202000000000010L,0x0880020004504284L,0x0085002204000007L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_for_stmt_int22023 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_for_stmt_int22026 = new BitSet(new long[]{0x1202000000000012L,0x0800020004504284L,0x0085002204000007L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_for_stmt_int22028 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_179_in_return_stmt2045 = new BitSet(new long[]{0x1202000000000010L,0x0880020004504284L,0x0085002204000007L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_return_stmt2047 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_return_stmt2050 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_if_stmt_in_if_stmt_wrapper2071 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_175_in_if_stmt2087 = new BitSet(new long[]{0x1000000000000000L});
    public static final BitSet FOLLOW_L_BR_in_if_stmt2090 = new BitSet(new long[]{0x1202000000000010L,0x0800020004504284L,0x0085002204000007L});
    public static final BitSet FOLLOW_if_expr_in_if_stmt2093 = new BitSet(new long[]{0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_R_BR_in_if_stmt2095 = new BitSet(new long[]{0x1202000001020090L,0x4C80020004504286L,0x019DD8BA04040017L});
    public static final BitSet FOLLOW_if_stmt_block_wrapper_in_if_stmt2098 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_if_expr2111 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_172_in_else_stmt2130 = new BitSet(new long[]{0x1202000001020090L,0x4C80020004504286L,0x019DD8BA04040017L});
    public static final BitSet FOLLOW_if_stmt_block_in_else_stmt2133 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_if_stmt_block_in_if_stmt_block_wrapper2142 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_wrapper_in_if_stmt_block2159 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_internal_in_if_stmt_block2165 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_static_start_in_static_start_wrapper2177 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STATIC_PREFIX_in_static_start2195 = new BitSet(new long[]{0x0002000000020000L,0x0000000000000000L,0x0001000000040000L});
    public static final BitSet FOLLOW_CONST_PREFIX_in_static_start2197 = new BitSet(new long[]{0x0002000000000000L,0x0000000000000000L,0x0001000000040000L});
    public static final BitSet FOLLOW_object_name_in_static_start2201 = new BitSet(new long[]{0x0002000000000010L,0x0000000000000000L,0x0001000000040000L});
    public static final BitSet FOLLOW_ASTERISK_in_static_start2203 = new BitSet(new long[]{0x0002000000000010L,0x0000000000000000L,0x0001000000040000L});
    public static final BitSet FOLLOW_full_expr2_in_static_start2208 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_id_part_end_internal_in_id_part_end2220 = new BitSet(new long[]{0x0000000000200002L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_DOT_in_id_part_end_internal2235 = new BitSet(new long[]{0x0002000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_151_in_id_part_end_internal2239 = new BitSet(new long[]{0x0002000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_id_part_in_id_part_end_internal2242 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_internal_in_id_part2280 = new BitSet(new long[]{0x1000000000000002L,0x0000000000000004L});
    public static final BitSet FOLLOW_function_brackets_wrapper_in_id_part2282 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000004L});
    public static final BitSet FOLLOW_index_in_id_part2285 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000004L});
    public static final BitSet FOLLOW_id_part_in_object_name2298 = new BitSet(new long[]{0x0000000000200002L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_id_part_end_in_object_name2300 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_square_brackets_in_view_stmt2315 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_wrapper_in_view_stmt2320 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_KBR_in_method_call_wrapper2334 = new BitSet(new long[]{0x1002000000000000L,0x0000000000000004L,0x0001000000000001L});
    public static final BitSet FOLLOW_method_call2_in_method_call_wrapper2336 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_R_KBR_in_method_call_wrapper2338 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_call2_in_method_call_wrapper22361 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_wrapper_in_method_call22380 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_method_name_in_method_call22382 = new BitSet(new long[]{0x0000000000008002L});
    public static final BitSet FOLLOW_method_call_message_list_wrapper_in_method_call22386 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_wrapper_internal_in_object_wrapper2397 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_BR_in_object_wrapper_internal2415 = new BitSet(new long[]{0x0002000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_object_name_in_object_wrapper_internal2417 = new BitSet(new long[]{0x0000000000000010L,0x0004000000000020L});
    public static final BitSet FOLLOW_generic_in_object_wrapper_internal2419 = new BitSet(new long[]{0x0000000000000010L,0x0004000000000000L});
    public static final BitSet FOLLOW_ASTERISK_in_object_wrapper_internal2422 = new BitSet(new long[]{0x0000000000000010L,0x0004000000000000L});
    public static final BitSet FOLLOW_R_BR_in_object_wrapper_internal2425 = new BitSet(new long[]{0x0002000000000000L,0x0000000000000004L,0x0001000000000000L});
    public static final BitSet FOLLOW_object_name_in_object_wrapper_internal2428 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_call_wrapper_in_object_wrapper_internal2432 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_name_in_object_wrapper_internal2438 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_call_wrapper_in_object_wrapper_internal2443 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_object_wrapper_internal2448 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_method_message32460 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_BR_in_type_convertion_start2477 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_ID_in_type_convertion_start2480 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000020L});
    public static final BitSet FOLLOW_generic_in_type_convertion_start2482 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ASTERISK_in_type_convertion_end2505 = new BitSet(new long[]{0x0000000000000010L,0x0004000000000000L});
    public static final BitSet FOLLOW_R_BR_in_type_convertion_end2508 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_BR_in_type_convertion2525 = new BitSet(new long[]{0x0002000000020000L,0x0000000000000000L,0x0080000000040000L});
    public static final BitSet FOLLOW_CONST_PREFIX_in_type_convertion2527 = new BitSet(new long[]{0x0002000000000000L,0x0000000000000000L,0x0080000000040000L});
    public static final BitSet FOLLOW_183_in_type_convertion2530 = new BitSet(new long[]{0x0002000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_type_internal_in_type_convertion2533 = new BitSet(new long[]{0x0000000000000010L,0x0004000000000000L});
    public static final BitSet FOLLOW_ASTERISK_in_type_convertion2536 = new BitSet(new long[]{0x0000000000000010L,0x0004000000000000L});
    public static final BitSet FOLLOW_R_BR_in_type_convertion2539 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_method_name2557 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_call_message_list_in_method_call_message_list_wrapper2574 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_call_message_first_wrapper_in_method_call_message_list2591 = new BitSet(new long[]{0x0002000000008002L});
    public static final BitSet FOLLOW_method_call_message_wrapper_in_method_call_message_list2593 = new BitSet(new long[]{0x0002000000008002L});
    public static final BitSet FOLLOW_method_call_message_first_in_method_call_message_first_wrapper2604 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COLON_in_method_call_message_first2621 = new BitSet(new long[]{0x1202000000000010L,0x0800020004504284L,0x0085002204000007L});
    public static final BitSet FOLLOW_message_in_method_call_message_first2624 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_call_message_in_method_call_message_wrapper2634 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prefix_in_method_call_message2653 = new BitSet(new long[]{0x1202000000000010L,0x0800020004504284L,0x0085002204000007L});
    public static final BitSet FOLLOW_incomplete_prefix_in_method_call_message2657 = new BitSet(new long[]{0x1202000000000010L,0x0800020004504284L,0x0085002204000007L});
    public static final BitSet FOLLOW_message_in_method_call_message2661 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_msg_expr_in_message2670 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_COMMA_in_message2673 = new BitSet(new long[]{0x1202000000000010L,0x0800020004504284L,0x0085002204000007L});
    public static final BitSet FOLLOW_msg_expr_in_message2675 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_msg_expr2709 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_expression2725 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_struct_init_in_expression2730 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_full_expr_in_full_expr_wrapper2741 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_full_expr2758 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_COMMA_in_full_expr2761 = new BitSet(new long[]{0x1202000000000010L,0x0800020004504284L,0x0085002204000007L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_full_expr2763 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_classical_expr_wrp2_in_full_expr22774 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_COMMA_in_full_expr22777 = new BitSet(new long[]{0x0002000000000000L,0x0000000000000000L,0x0001000000040000L});
    public static final BitSet FOLLOW_classical_expr_wrp2_in_full_expr22779 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_expr_assign_in_expr_assign_wrapper2790 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_assign_in_expr_assign2809 = new BitSet(new long[]{0x1202000000000010L,0x0800020004504286L,0x0085002204000007L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_expr_assign2812 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_array_init_in_expr_assign2816 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_func_pointer2_in_expr_assign2821 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000004L});
    public static final BitSet FOLLOW_method_call_wrapper_in_expr_assign2823 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_FBR_in_array_init2836 = new BitSet(new long[]{0x1202000000000010L,0x0808020004504286L,0x0085002204000007L});
    public static final BitSet FOLLOW_classical_expr_wrp3_in_array_init2839 = new BitSet(new long[]{0x0000000000010000L,0x0008000000000000L});
    public static final BitSet FOLLOW_COMMA_in_array_init2842 = new BitSet(new long[]{0x1202000000000010L,0x0800020004504286L,0x0085002204000007L});
    public static final BitSet FOLLOW_classical_expr_wrp3_in_array_init2844 = new BitSet(new long[]{0x0000000000010000L,0x0008000000000000L});
    public static final BitSet FOLLOW_R_FBR_in_array_init2850 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_array_init_in_classical_expr_wrp32862 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_classical_expr_wrp32868 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_expr_in_classical_expr_wrp2881 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_expr_wrapper_in_classical_expr2898 = new BitSet(new long[]{0xC800000000000002L,0x0000000012A91110L});
    public static final BitSet FOLLOW_expr_question_wrapper_in_classical_expr2901 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_assign_wrapper_in_classical_expr2905 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_expr2_in_classical_expr_wrp22917 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_name_in_classical_expr22935 = new BitSet(new long[]{0xC800000000000002L,0x0000000012291110L});
    public static final BitSet FOLLOW_func_pointer1_in_classical_expr22939 = new BitSet(new long[]{0xC800000000000002L,0x0000000012291110L});
    public static final BitSet FOLLOW_expr_assign_wrapper_in_classical_expr22942 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_question_in_expr_question_wrapper2952 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_QUESTION_in_expr_question2969 = new BitSet(new long[]{0x1202000000000010L,0x0800020004504284L,0x0085002204000007L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_expr_question2971 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_COLON_in_expr_question2973 = new BitSet(new long[]{0x1202000000000010L,0x0800020004504284L,0x0085002204000007L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_expr_question2975 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_expr_in_simple_expr_wrapper3040 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_or_or_in_simple_expr3058 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_and_and_wrapper_in_expr_or_or3075 = new BitSet(new long[]{0x0000000000000002L,0x0000000000020000L});
    public static final BitSet FOLLOW_L_OR_OR_in_expr_or_or3078 = new BitSet(new long[]{0x1202000000000010L,0x0800020004504284L,0x0085002204000007L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_expr_or_or3080 = new BitSet(new long[]{0x0000000000000002L,0x0000000000020000L});
    public static final BitSet FOLLOW_expr_and_and_in_expr_and_and_wrapper3091 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_or_wrapper_in_expr_and_and3108 = new BitSet(new long[]{0x0400000000000002L});
    public static final BitSet FOLLOW_L_AND_AND_in_expr_and_and3111 = new BitSet(new long[]{0x1202000000000010L,0x0800020004504284L,0x0085002204000007L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_expr_and_and3113 = new BitSet(new long[]{0x0400000000000002L});
    public static final BitSet FOLLOW_expr_or_in_expr_or_wrapper3124 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_xor_wrapper_in_expr_or3142 = new BitSet(new long[]{0x0000000000000002L,0x0000000000008000L});
    public static final BitSet FOLLOW_L_OR_in_expr_or3145 = new BitSet(new long[]{0x1202000000000010L,0x0800020004504284L,0x0085002204000007L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_expr_or3147 = new BitSet(new long[]{0x0000000000000002L,0x0000000000008000L});
    public static final BitSet FOLLOW_expr_xor_in_expr_xor_wrapper3158 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_and_wrapper_in_expr_xor3175 = new BitSet(new long[]{0x0000000000000002L,0x0000000008000000L});
    public static final BitSet FOLLOW_L_XOR_in_expr_xor3178 = new BitSet(new long[]{0x1202000000000010L,0x0800020004504284L,0x0085002204000007L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_expr_xor3180 = new BitSet(new long[]{0x0000000000000002L,0x0000000008000000L});
    public static final BitSet FOLLOW_expr_and_in_expr_and_wrapper3192 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_eq_wrapper_in_expr_and3210 = new BitSet(new long[]{0x0200000000000002L});
    public static final BitSet FOLLOW_L_AND_in_expr_and3213 = new BitSet(new long[]{0x1202000000000010L,0x0800020004504284L,0x0085002204000007L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_expr_and3215 = new BitSet(new long[]{0x0200000000000002L});
    public static final BitSet FOLLOW_expr_eq_in_expr_eq_wrapper3227 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_cond_wrapper_in_expr_eq3245 = new BitSet(new long[]{0x0000000000000002L,0x0000000000002001L});
    public static final BitSet FOLLOW_set_in_expr_eq3248 = new BitSet(new long[]{0x1202000000000010L,0x0800020004504284L,0x0085002204000007L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_expr_eq3256 = new BitSet(new long[]{0x0000000000000002L,0x0000000000002001L});
    public static final BitSet FOLLOW_expr_cond_in_expr_cond_wrapper3267 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_mov_wrapper_in_expr_cond3284 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000C60L});
    public static final BitSet FOLLOW_set_in_expr_cond3287 = new BitSet(new long[]{0x1202000000000010L,0x0800020004504284L,0x0085002204000007L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_expr_cond3303 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000C60L});
    public static final BitSet FOLLOW_expr_mov_in_expr_mov_wrapper3314 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_add_wrapper_in_expr_mov3332 = new BitSet(new long[]{0x0000000000000002L,0x0000000001000008L});
    public static final BitSet FOLLOW_set_in_expr_mov3335 = new BitSet(new long[]{0x1202000000000010L,0x0800020004504284L,0x0085002204000007L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_expr_mov3343 = new BitSet(new long[]{0x0000000000000002L,0x0000000001000008L});
    public static final BitSet FOLLOW_expr_add_in_expr_add_wrapper3355 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_mult_wrapper_in_expr_add3372 = new BitSet(new long[]{0x0000000000000002L,0x0000000000100080L});
    public static final BitSet FOLLOW_set_in_expr_add3375 = new BitSet(new long[]{0x1202000000000010L,0x0800020004504284L,0x0085002204000007L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_expr_add3383 = new BitSet(new long[]{0x0000000000000002L,0x0000000000100080L});
    public static final BitSet FOLLOW_expr_mult_in_expr_mult_wrapper3394 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_type_wrapper_in_expr_mult3411 = new BitSet(new long[]{0x2000000000000012L,0x0000000000040000L});
    public static final BitSet FOLLOW_set_in_expr_mult3414 = new BitSet(new long[]{0x1202000000000010L,0x0800020004504284L,0x0085002204000007L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_expr_mult3426 = new BitSet(new long[]{0x2000000000000012L,0x0000000000040000L});
    public static final BitSet FOLLOW_expr_type_in_expr_type_wrapper3438 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_convertion_in_expr_type3455 = new BitSet(new long[]{0x1202000000000010L,0x0800020004504284L,0x0085002204000007L});
    public static final BitSet FOLLOW_expr_unname_in_expr_type3458 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ASTERISK_in_expr_unname3469 = new BitSet(new long[]{0x1202000000000000L,0x0800020004504284L,0x0085002204000007L});
    public static final BitSet FOLLOW_type_convertion_in_expr_unname3471 = new BitSet(new long[]{0x1202000000000000L,0x0800020004504284L,0x0085002204000007L});
    public static final BitSet FOLLOW_expr_addr_in_expr_unname3476 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_AND_in_expr_addr3486 = new BitSet(new long[]{0x1002000000000000L,0x0800020004504284L,0x0085002204000007L});
    public static final BitSet FOLLOW_expr_sign_in_expr_addr3489 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_not_wrapper_in_expr_sign3508 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_not_in_expr_not_wrapper3518 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_NOT_in_expr_not3537 = new BitSet(new long[]{0x1002000000000000L,0x0800020004400204L,0x0085002204000007L});
    public static final BitSet FOLLOW_expr_not2_in_expr_not3540 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_TILDA_in_expr_not23549 = new BitSet(new long[]{0x1002000000000000L,0x0800020000400204L,0x0085002204000007L});
    public static final BitSet FOLLOW_expr_size_of_in_expr_not23552 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SIZEOF_in_expr_size_of3562 = new BitSet(new long[]{0x1002000000000000L,0x0000020000400204L,0x0085002204000007L});
    public static final BitSet FOLLOW_expr_xcrement_in_expr_size_of3565 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_wrapped1_in_expr_xcrement3584 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_wrapped2_in_object_wrapped13594 = new BitSet(new long[]{0x0000000000000002L,0x0000000000400200L});
    public static final BitSet FOLLOW_183_in_object_wrapped23615 = new BitSet(new long[]{0x0002000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_object_name_in_object_wrapped23618 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000020L});
    public static final BitSet FOLLOW_generic_in_object_wrapped23620 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_call_wrapper_in_object_wrapped23626 = new BitSet(new long[]{0x0000000000200002L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_id_part_end_in_object_wrapped23628 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_BR_in_object_wrapped23634 = new BitSet(new long[]{0x1202000000000010L,0x0800020004504284L,0x0085002204000007L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_object_wrapped23636 = new BitSet(new long[]{0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_R_BR_in_object_wrapped23638 = new BitSet(new long[]{0x0000000000200002L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_id_part_end_in_object_wrapped23640 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_const_expr_in_object_wrapped23646 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_a_started_in_object_wrapped23651 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_function_brackets_in_function_brackets_wrapper3663 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_BR_in_function_brackets3682 = new BitSet(new long[]{0x1202000000000010L,0x0804020004504284L,0x0085002204000007L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_function_brackets3685 = new BitSet(new long[]{0x0000000000010000L,0x0004000000000000L});
    public static final BitSet FOLLOW_COMMA_in_function_brackets3688 = new BitSet(new long[]{0x1202000000000010L,0x0800020004504284L,0x0085002204000007L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_function_brackets3690 = new BitSet(new long[]{0x0000000000010000L,0x0004000000000000L});
    public static final BitSet FOLLOW_R_BR_in_function_brackets3696 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_KBR_in_index3706 = new BitSet(new long[]{0x1202000000000010L,0x0810020004504284L,0x0085002204000007L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_index3708 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_R_KBR_in_index3711 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_BR_in_struct_init3721 = new BitSet(new long[]{0x0002000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_STRUCT_PREFIX_in_struct_init3724 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_ID_in_struct_init3727 = new BitSet(new long[]{0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_R_BR_in_struct_init3730 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_L_FBR_in_struct_init3733 = new BitSet(new long[]{0x1202000000200010L,0x0800020004504284L,0x0085002204000007L});
    public static final BitSet FOLLOW_struct_init_line_in_struct_init3739 = new BitSet(new long[]{0x0000000000010000L,0x0008000000000000L});
    public static final BitSet FOLLOW_COMMA_in_struct_init3742 = new BitSet(new long[]{0x1202000000200010L,0x0800020004504284L,0x0085002204000007L});
    public static final BitSet FOLLOW_struct_init_line_in_struct_init3745 = new BitSet(new long[]{0x0000000000010000L,0x0008000000000000L});
    public static final BitSet FOLLOW_R_FBR_in_struct_init3751 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_FBR_in_struct_init23765 = new BitSet(new long[]{0x1202000000200010L,0x0800020004504284L,0x0085002204000007L});
    public static final BitSet FOLLOW_struct_init_line_in_struct_init23771 = new BitSet(new long[]{0x0000000000010000L,0x0008000000000000L});
    public static final BitSet FOLLOW_COMMA_in_struct_init23774 = new BitSet(new long[]{0x1202000000200010L,0x0800020004504284L,0x0085002204000007L});
    public static final BitSet FOLLOW_struct_init_line_in_struct_init23777 = new BitSet(new long[]{0x0000000000010000L,0x0008000000000000L});
    public static final BitSet FOLLOW_R_FBR_in_struct_init23783 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_struct_init_var_in_struct_init_line3796 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_struct_init_expression_in_struct_init_line3801 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_struct_init_expression3814 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_struct_init_method3825 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_struct_init_var3837 = new BitSet(new long[]{0x0002000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_id_part_in_struct_init_var3839 = new BitSet(new long[]{0x8000000000200000L});
    public static final BitSet FOLLOW_L_EQ_in_struct_init_var3844 = new BitSet(new long[]{0x1202000000000010L,0x0800020004504286L,0x0085002204000007L});
    public static final BitSet FOLLOW_in_q_brackets_in_struct_init_var3848 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_struct_init_var3852 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_a_selector_wrapper_in_a_started3864 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_a_encode_wrapper_in_a_started3869 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_167_in_typeof3879 = new BitSet(new long[]{0x1000000000000000L});
    public static final BitSet FOLLOW_L_BR_in_typeof3882 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_ID_in_typeof3885 = new BitSet(new long[]{0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_R_BR_in_typeof3888 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_a_selector_in_a_selector_wrapper3899 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_161_in_a_selector3916 = new BitSet(new long[]{0x1000000000000000L});
    public static final BitSet FOLLOW_L_BR_in_a_selector3918 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_a_selector_value_wrapper_in_a_selector3920 = new BitSet(new long[]{0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_R_BR_in_a_selector3922 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_a_encode_in_a_encode_wrapper3932 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_a_selector_value_in_a_selector_value_wrapper3949 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_a_selector_value3968 = new BitSet(new long[]{0x0000000000008002L});
    public static final BitSet FOLLOW_COLON_in_a_selector_value3972 = new BitSet(new long[]{0x0002000000000002L});
    public static final BitSet FOLLOW_ID_in_a_selector_value3976 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_COLON_in_a_selector_value3979 = new BitSet(new long[]{0x0002000000000002L});
    public static final BitSet FOLLOW_154_in_a_encode3990 = new BitSet(new long[]{0x1000000000000000L});
    public static final BitSet FOLLOW_L_BR_in_a_encode3992 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFBFFFFFFFFFFFFL,0x01FFFFFFFFFFFFFFL});
    public static final BitSet FOLLOW_R_BR_in_a_encode4000 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUMBER_in_const_expr4011 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_const_expr4015 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_LITERAL2_in_const_expr4019 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_LITERAL3_in_const_expr4023 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_null_stmt_in_const_expr4027 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_LITERAL3_in_string_literal34037 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_BR_in_method_brackets4047 = new BitSet(new long[]{0x1202000000000010L,0x0804020004504284L,0x0085002204000007L});
    public static final BitSet FOLLOW_expression_in_method_brackets4051 = new BitSet(new long[]{0x0000000000010000L,0x0004000000000000L});
    public static final BitSet FOLLOW_COMMA_in_method_brackets4055 = new BitSet(new long[]{0x1202000000000010L,0x0800020004504284L,0x0085002204000007L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_method_brackets4058 = new BitSet(new long[]{0x0000000000010000L,0x0004000000000000L});
    public static final BitSet FOLLOW_R_BR_in_method_brackets4064 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_internal_in_func_pointer14074 = new BitSet(new long[]{0x1000000000000010L});
    public static final BitSet FOLLOW_ASTERISK_in_func_pointer14077 = new BitSet(new long[]{0x1000000000000000L});
    public static final BitSet FOLLOW_L_BR_in_func_pointer14080 = new BitSet(new long[]{0x0002000000000010L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_ASTERISK_in_func_pointer14082 = new BitSet(new long[]{0x0002000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_type_internal_in_func_pointer14085 = new BitSet(new long[]{0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_R_BR_in_func_pointer14088 = new BitSet(new long[]{0x1000000000000002L});
    public static final BitSet FOLLOW_func_pointer_params_in_func_pointer14091 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_BR_in_func_pointer24104 = new BitSet(new long[]{0x0002000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_type_internal_in_func_pointer24107 = new BitSet(new long[]{0x1000000000000000L});
    public static final BitSet FOLLOW_L_BR_in_func_pointer24109 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_ASTERISK_in_func_pointer24112 = new BitSet(new long[]{0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_R_BR_in_func_pointer24115 = new BitSet(new long[]{0x1000000000000000L});
    public static final BitSet FOLLOW_func_pointer_params_in_func_pointer24118 = new BitSet(new long[]{0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_R_BR_in_func_pointer24121 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_BR_in_func_pointer_params4134 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_ID_in_func_pointer_params4137 = new BitSet(new long[]{0x0000000000010010L,0x0004000000000000L});
    public static final BitSet FOLLOW_ASTERISK_in_func_pointer_params4140 = new BitSet(new long[]{0x0000000000010010L,0x0004000000000000L});
    public static final BitSet FOLLOW_COMMA_in_func_pointer_params4144 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_ID_in_func_pointer_params4147 = new BitSet(new long[]{0x0000000000010010L,0x0004000000000000L});
    public static final BitSet FOLLOW_ASTERISK_in_func_pointer_params4150 = new BitSet(new long[]{0x0000000000010010L,0x0004000000000000L});
    public static final BitSet FOLLOW_R_BR_in_func_pointer_params4155 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_BR_in_in_brackets_end14165 = new BitSet(new long[]{0x1202000000000010L,0x0800020004504284L,0x0085002204000007L});
    public static final BitSet FOLLOW_expression_in_in_brackets_end14168 = new BitSet(new long[]{0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_R_BR_in_in_brackets_end14171 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_start_in_in_brackets_end14176 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000004L});
    public static final BitSet FOLLOW_index_brackets_in_in_brackets_end14178 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_in_brackets_end14184 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_method_start_in_in_brackets_end14192 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_const_expr_in_in_brackets_end14197 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_BR_in_in_brackets_end24209 = new BitSet(new long[]{0x1202000000000010L,0x0800020004504284L,0x0085002204000007L});
    public static final BitSet FOLLOW_expression_in_in_brackets_end24212 = new BitSet(new long[]{0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_R_BR_in_in_brackets_end24215 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_const_expr_in_in_brackets_end24220 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_method_start4233 = new BitSet(new long[]{0x1000000000000002L});
    public static final BitSet FOLLOW_method_brackets_in_method_start4235 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_FBR_in_in_q_brackets4246 = new BitSet(new long[]{0x1202000000000010L,0x0800020004504286L,0x0085002204000007L});
    public static final BitSet FOLLOW_q_brackets_source_in_in_q_brackets4249 = new BitSet(new long[]{0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_R_FBR_in_in_q_brackets4251 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_q_source_in_q_brackets_source4263 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_q_br_source_in_q_brackets_source4268 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_in_q_brackets_in_q_br_source4281 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_COMMA_in_q_br_source4285 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_in_q_brackets_in_q_br_source4288 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_COMMA_in_q_br_source4292 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_q_source4304 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_COMMA_in_q_source4308 = new BitSet(new long[]{0x1202000000000010L,0x0800020004504284L,0x0085002204000007L});
    public static final BitSet FOLLOW_expression_in_q_source4311 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_ID_in_simple_method_call4328 = new BitSet(new long[]{0x1000000000000002L});
    public static final BitSet FOLLOW_method_brackets_in_simple_method_call4330 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CONST_PREFIX_in_type_in_brackets4342 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_ID_in_type_in_brackets4345 = new BitSet(new long[]{0x0000000000000010L,0x0004000000000020L});
    public static final BitSet FOLLOW_generic_in_type_in_brackets4347 = new BitSet(new long[]{0x0000000000000010L,0x0004000000000000L});
    public static final BitSet FOLLOW_ASTERISK_in_type_in_brackets4350 = new BitSet(new long[]{0x0000000000000010L,0x0004000000000000L});
    public static final BitSet FOLLOW_R_BR_in_type_in_brackets4353 = new BitSet(new long[]{0x1002000000000000L,0x0000020000400200L,0x0004002000000007L});
    public static final BitSet FOLLOW_in_brackets_end1_in_type_in_brackets4356 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_KBR_in_square_brackets4372 = new BitSet(new long[]{0x1002000000000000L,0x0000000000000004L,0x0001000000000001L});
    public static final BitSet FOLLOW_method_call_wrapper2_in_square_brackets4375 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_R_KBR_in_square_brackets4377 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_KBR_in_index_brackets4388 = new BitSet(new long[]{0x1202000000000010L,0x0800020004504284L,0x0085002204000007L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_index_brackets4391 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_R_KBR_in_index_brackets4393 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interface_declaration_in_interface_declaration_wrapper4407 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_158_in_interface_declaration4425 = new BitSet(new long[]{0x0002000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_name_in_interface_declaration4428 = new BitSet(new long[]{0x1000000001008000L,0x0000000000100082L});
    public static final BitSet FOLLOW_interface_category_in_interface_declaration4431 = new BitSet(new long[]{0x0000000001008000L,0x0000000000100082L});
    public static final BitSet FOLLOW_super_class_in_interface_declaration4435 = new BitSet(new long[]{0x0000000001000000L,0x0000000000100082L});
    public static final BitSet FOLLOW_annotated_block_in_interface_declaration4442 = new BitSet(new long[]{0x0000000001000000L,0x0000000000100082L,0x0000000008000000L});
    public static final BitSet FOLLOW_interface_methods_in_interface_declaration4446 = new BitSet(new long[]{0x0000000001000000L,0x0000000000100082L,0x0000000008000000L});
    public static final BitSet FOLLOW_155_in_interface_declaration4455 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_FBR_in_annotated_block4466 = new BitSet(new long[]{0x0002000000000000L,0x0008000000000000L,0x0040000180040000L});
    public static final BitSet FOLLOW_annotated_block_internal_in_annotated_block4471 = new BitSet(new long[]{0x0002000000000000L,0x0008000000000000L,0x0040000180040000L});
    public static final BitSet FOLLOW_R_FBR_in_annotated_block4476 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_annotation_in_annotated_block_internal4489 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_public_block_internal_in_annotated_block_internal4496 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_field_declaration_in_public_block_internal4531 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_union_declaration_in_public_block_internal4536 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_type_in_simple_field_declaration4548 = new BitSet(new long[]{0x0002000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_name_in_simple_field_declaration4550 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_simple_field_declaration4553 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_182_in_union_declaration4566 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_L_FBR_in_union_declaration4569 = new BitSet(new long[]{0x0002000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_simple_field_declaration_in_union_declaration4575 = new BitSet(new long[]{0x0002000000000000L,0x0008000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_R_FBR_in_union_declaration4580 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_ID_in_union_declaration4583 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_union_declaration4586 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COLON_in_super_class4600 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_ID_in_super_class4603 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_BR_in_interface_category4623 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_ID_in_interface_category4626 = new BitSet(new long[]{0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_R_BR_in_interface_category4629 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enum_declaration_in_interface_methods4658 = new BitSet(new long[]{0x0000000001000002L,0x0000000000100080L});
    public static final BitSet FOLLOW_interface_method_in_interface_methods4662 = new BitSet(new long[]{0x0000000001000002L,0x0000000000100080L});
    public static final BitSet FOLLOW_method_header_in_interface_method4674 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_header_body_in_method_header4693 = new BitSet(new long[]{0x0000000000000002L,0x0080000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_method_header4695 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_modifier_wrapper_in_method_header_body4705 = new BitSet(new long[]{0x1000000000000000L});
    public static final BitSet FOLLOW_method_type_in_method_header_body4708 = new BitSet(new long[]{0x0002000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_name_in_method_header_body4711 = new BitSet(new long[]{0x1002000000018002L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_method_params_in_method_header_body4714 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_va_args_wrapper_in_method_header_body4717 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_va_args_in_va_args_wrapper4727 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_va_args4744 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_152_in_va_args4747 = new BitSet(new long[]{0x0000000000000002L,0x0080000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_va_args4750 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_type_in_method_header_body24761 = new BitSet(new long[]{0x0002000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_name_in_method_header_body24763 = new BitSet(new long[]{0x1000000000000002L});
    public static final BitSet FOLLOW_method_params2_in_method_header_body24766 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_params2_in_method_header_body34776 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_modifier_in_method_modifier_wrapper4785 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_BR_in_method_type4817 = new BitSet(new long[]{0x0002000000000000L,0x0000000000000000L,0x0000000000040010L});
    public static final BitSet FOLLOW_STRUCT_PREFIX_in_method_type4820 = new BitSet(new long[]{0x0002000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_type_internal_in_method_type4823 = new BitSet(new long[]{0x0000000000000010L,0x0004000000000020L});
    public static final BitSet FOLLOW_generic_in_method_type4826 = new BitSet(new long[]{0x0000000000000010L,0x0004000000000000L});
    public static final BitSet FOLLOW_ASTERISK_in_method_type4829 = new BitSet(new long[]{0x0000000000000010L,0x0004000000000000L});
    public static final BitSet FOLLOW_R_BR_in_method_type4832 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_BR_in_method_type4846 = new BitSet(new long[]{0x0002000000020010L,0x0004000000000020L,0x0080000000040000L});
    public static final BitSet FOLLOW_CONST_PREFIX_in_method_type4849 = new BitSet(new long[]{0x0002000000000010L,0x0004000000000020L,0x0080000000040000L});
    public static final BitSet FOLLOW_known_types_in_method_type4852 = new BitSet(new long[]{0x0002000000000010L,0x0004000000000020L});
    public static final BitSet FOLLOW_ID_in_method_type4855 = new BitSet(new long[]{0x0002000000000010L,0x0004000000000020L});
    public static final BitSet FOLLOW_generic_in_method_type4858 = new BitSet(new long[]{0x0000000000000010L,0x0004000000000000L});
    public static final BitSet FOLLOW_ASTERISK_in_method_type4861 = new BitSet(new long[]{0x0000000000000010L,0x0004000000000000L});
    public static final BitSet FOLLOW_R_BR_in_method_type4864 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_internal1_in_type_internal4889 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000004L});
    public static final BitSet FOLLOW_L_KBR_in_type_internal4892 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_R_KBR_in_type_internal4895 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_LESS_in_generic4928 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_generic_internal_in_generic4930 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_L_MORE_in_generic4932 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_generic_internal4951 = new BitSet(new long[]{0x0000000000010012L});
    public static final BitSet FOLLOW_ASTERISK_in_generic_internal4954 = new BitSet(new long[]{0x0000000000010012L});
    public static final BitSet FOLLOW_COMMA_in_generic_internal4958 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_ID_in_generic_internal4961 = new BitSet(new long[]{0x0000000000010012L});
    public static final BitSet FOLLOW_ASTERISK_in_generic_internal4964 = new BitSet(new long[]{0x0000000000010012L});
    public static final BitSet FOLLOW_L_BR_in_method_params24976 = new BitSet(new long[]{0x0002000001020000L,0x0000000000000000L,0x0080000000040010L});
    public static final BitSet FOLLOW_method_param_wrapper2_in_method_params24979 = new BitSet(new long[]{0x0000000000010000L,0x0004000000000000L});
    public static final BitSet FOLLOW_COMMA_in_method_params24983 = new BitSet(new long[]{0x0002000001020000L,0x0000000000000000L,0x0080000000040010L});
    public static final BitSet FOLLOW_method_param_wrapper2_in_method_params24986 = new BitSet(new long[]{0x0000000000010000L,0x0004000000000000L});
    public static final BitSet FOLLOW_R_BR_in_method_params24990 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_param2_in_method_param_wrapper25001 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CONST_PREFIX_in_method_param25019 = new BitSet(new long[]{0x0002000001000000L,0x0000000000000000L,0x0080000000040010L});
    public static final BitSet FOLLOW_ENUM_PREFIX_in_method_param25022 = new BitSet(new long[]{0x0002000000000000L,0x0000000000000000L,0x0080000000040010L});
    public static final BitSet FOLLOW_STRUCT_PREFIX_in_method_param25025 = new BitSet(new long[]{0x0002000000000000L,0x0000000000000000L,0x0080000000040000L});
    public static final BitSet FOLLOW_183_in_method_param25028 = new BitSet(new long[]{0x0002000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_field_type_in_method_param25031 = new BitSet(new long[]{0x0002000000000002L,0x0000000000000004L,0x0001000000000000L});
    public static final BitSet FOLLOW_name_in_method_param25033 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000004L});
    public static final BitSet FOLLOW_indexed_in_method_param25036 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_KBR_in_indexed5046 = new BitSet(new long[]{0x0000000000000000L,0x0010020000000000L});
    public static final BitSet FOLLOW_NUMBER_in_indexed5048 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_R_KBR_in_indexed5051 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_param_in_method_params5061 = new BitSet(new long[]{0x1002000000008002L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_prefix_in_method_param5083 = new BitSet(new long[]{0x1002000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_COLON_in_method_param5088 = new BitSet(new long[]{0x1002000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_method_type_in_method_param5091 = new BitSet(new long[]{0x0002000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_name_in_method_param5094 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_prefix5106 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_COLON_in_prefix5108 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COLON_in_incomplete_prefix5127 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typedef_struct_declaration_in_typedef_struct_declaration_wrapper5149 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRUCT_PREFIX_in_typedef_struct_declaration5169 = new BitSet(new long[]{0x0002000000000000L,0x0000000000000002L,0x0001000000000000L});
    public static final BitSet FOLLOW_name_in_typedef_struct_declaration5171 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_L_FBR_in_typedef_struct_declaration5175 = new BitSet(new long[]{0x0002000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_typedef_struct_body_in_typedef_struct_declaration5180 = new BitSet(new long[]{0x0002000000000000L,0x0008000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_R_FBR_in_typedef_struct_declaration5184 = new BitSet(new long[]{0x0002000000000002L,0x0080000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_name_in_typedef_struct_declaration5187 = new BitSet(new long[]{0x0000000000000002L,0x0080000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_typedef_struct_declaration5190 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typedef_struct_declaration_element_wrapper_in_typedef_struct_body5203 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_struct_field_in_typedef_struct_declaration_element_wrapper5215 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_type_in_struct_field5233 = new BitSet(new long[]{0x0002000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_name_in_struct_field5235 = new BitSet(new long[]{0x0000000000010000L,0x0080000000000000L});
    public static final BitSet FOLLOW_COMMA_in_struct_field5239 = new BitSet(new long[]{0x0002000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_name_in_struct_field5242 = new BitSet(new long[]{0x0000000000010000L,0x0080000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_struct_field5246 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typedef_declaration_in_typedef_declaration_wrapper5262 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typedef_declaration_in_enum_declaration5282 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ENUM_PREFIX_in_typedef_declaration5302 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_L_FBR_in_typedef_declaration5304 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_typedef_declaration_element_wrapper_in_typedef_declaration5307 = new BitSet(new long[]{0x0000000000010000L,0x0008000000000000L});
    public static final BitSet FOLLOW_COMMA_in_typedef_declaration5311 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_typedef_declaration_element_wrapper_in_typedef_declaration5314 = new BitSet(new long[]{0x0000000000010000L,0x0008000000000000L});
    public static final BitSet FOLLOW_R_FBR_in_typedef_declaration5318 = new BitSet(new long[]{0x0002000000000000L,0x0080000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_name_in_typedef_declaration5321 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_typedef_declaration5324 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typedef_declaration_element_in_typedef_declaration_element_wrapper5334 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_typedef_declaration_element5353 = new BitSet(new long[]{0x8000000000000002L});
    public static final BitSet FOLLOW_L_EQ_in_typedef_declaration_element5357 = new BitSet(new long[]{0x0002000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_set_in_typedef_declaration_element5360 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_declaration_in_field_declaration_wrapper5381 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_modifier_wrapper_in_field_declaration5398 = new BitSet(new long[]{0x0002000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_field_type_in_field_declaration5401 = new BitSet(new long[]{0x0002000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_name_in_field_declaration5403 = new BitSet(new long[]{0x8000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_field_declaration_end_in_field_declaration5405 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_value_set_in_field_declaration_end5416 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_field_declaration_end5419 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_start_in_type_start_wrapper5429 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CONST_PREFIX_in_type_start5446 = new BitSet(new long[]{0x0002000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_field_type_in_type_start5449 = new BitSet(new long[]{0x0002000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_name_in_type_start5451 = new BitSet(new long[]{0x9000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_type_end_in_type_start5453 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_declaration4_in_type_end5461 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_declaration4_in_type_end5474 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_value_set_in_field_declaration45496 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_field_declaration45499 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_params2_in_method_declaration45512 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_block_wrapper_in_method_declaration45517 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_modifier_in_field_modifier_wrapper5529 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_173_in_field_modifier5547 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_type_internal_in_field_type5559 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_internal_in_field_type_internal5578 = new BitSet(new long[]{0x0000000000000012L,0x0000000000000020L});
    public static final BitSet FOLLOW_generic_in_field_type_internal5581 = new BitSet(new long[]{0x0000000000000012L});
    public static final BitSet FOLLOW_ASTERISK_in_field_type_internal5584 = new BitSet(new long[]{0x0000000000000012L});
    public static final BitSet FOLLOW_name_internal_in_name5598 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_EQ_in_value_set5638 = new BitSet(new long[]{0x0002000000000000L,0x0000020000000002L,0x0004002000000001L});
    public static final BitSet FOLLOW_value_in_value_set5641 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_value5657 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_string_value_in_value5661 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_null_stmt_in_value5665 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_array_in_value5669 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUMBER_in_value5673 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_struct_init2_in_value5677 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_string_value5687 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_FBR_in_array5708 = new BitSet(new long[]{0x0002000000000000L,0x0000020000000002L,0x0004002000000001L});
    public static final BitSet FOLLOW_value_in_array5711 = new BitSet(new long[]{0x0000000000010000L,0x0008000000000000L});
    public static final BitSet FOLLOW_COMMA_in_array5715 = new BitSet(new long[]{0x0002000000000000L,0x0000020000000002L,0x0004002000000001L});
    public static final BitSet FOLLOW_value_in_array5718 = new BitSet(new long[]{0x0000000000010000L,0x0008000000000000L});
    public static final BitSet FOLLOW_R_FBR_in_array5722 = new BitSet(new long[]{0x0000000000000002L});

}