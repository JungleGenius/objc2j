// $ANTLR 3.4 Objcm.g 2012-11-05 00:09:47

package ru.andremoniy.objctojavacnv.antlr.output;


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;

import org.antlr.runtime.tree.*;


@SuppressWarnings({"all", "warnings", "unchecked"})
public class ObjcmParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "ARRAY_INIT", "ASSIGN", "ASTERISK", "BLOCK", "BREAK", "BREAK_WORD", "CASE_BODY", "CASE_EXPR", "CASE_STMT", "CATEGORY", "CLASSICAL_EXPR", "CLASSICAL_EXPR_2", "COLON", "COMMA", "CONST_EXPR", "CONST_PREFIX", "DEFAULT_BODY", "DEFAULT_STMT", "DIGIT", "DOT", "ENCODE", "ENUM", "ENUM_PREFIX", "ESC", "EXPR", "EXPR_ADD", "EXPR_AND", "EXPR_AND_AND", "EXPR_ASSIGN", "EXPR_COND", "EXPR_EQ", "EXPR_FULL", "EXPR_MOV", "EXPR_MULT", "EXPR_NOT", "EXPR_OR", "EXPR_OR_OR", "EXPR_QUESTION", "EXPR_TYPE", "EXPR_XOR", "EXTERN", "FIELD", "FIELD_ACCESS", "FIELD_TYPE_STARTED", "FOR_IN_STMT", "FOR_STMT", "FOR_STMT_EXPR", "FUNCTION", "GENERIC", "GOTO", "ID", "IF_BLOCK", "IF_EXPR", "IF_STMT", "IMPLEMENTATION", "INCOMPLETE_PREFIX", "INDEX", "INDEX_NUMBER", "INTERFACE", "LETTER", "L_AND", "L_AND_AND", "L_AND_EQ", "L_BR", "L_DIV", "L_DIV_EQ", "L_EQ", "L_EQ_EQ", "L_FBR", "L_KBR", "L_LEFT", "L_LEFT_EQ", "L_LESS", "L_LESS_EQ", "L_MINUS", "L_MINUS_EQ", "L_MINUS_MINUS", "L_MORE", "L_MORE_EQ", "L_MULT_EQ", "L_NEQ", "L_NOT", "L_OR", "L_OR_EQ", "L_OR_OR", "L_PERC", "L_PERC_EQ", "L_PLUS", "L_PLUS_EQ", "L_PLUS_PLUS", "L_QUESTION", "L_RIGHT", "L_RIGHT_EQ", "L_TILDA", "L_XOR", "L_XOR_EQ", "MESSAGE", "METHOD", "METHOD_CALL", "METHOD_MSG", "METHOD_NAME", "MODIFIER", "MSG_LIST", "MULTI_COMMENT", "M_IMPORT", "M_TYPE_START", "NAME", "NOT", "NUMBER", "OBJECT", "OP", "OPER", "OPERATOR", "PARAM", "PREFIX", "PREPROCESSOR_DECLARATION", "PROTOCOL", "RETURN_STMT", "R_BR", "R_FBR", "R_KBR", "SELECTOR", "SELECTOR_VALUE", "SEMICOLON", "SIMPLE_EXPR", "SINGLE_COMMENT", "SINGLE_OP", "SIZEOF", "STATIC", "STATIC_METHOD", "STATIC_PREFIX", "STATIC_START", "STATIC_TYPE", "STRING", "STRING_LITERAL", "STRING_LITERAL2", "STRING_LITERAL3", "STRUCT_FIELD", "STRUCT_PREFIX", "SUPER_CLASS", "SWITCH", "SWITCH_BODY", "SWITCH_EXPRESSION", "THROW_EXCEPTION", "THROW_STMT", "TYPE", "TYPEDEF", "TYPEDEF_ELEMENT", "TYPEDEF_STRUCT", "TYPE_CONVERTION", "TYPE_RENAME", "VALUE", "VARIABLE_INIT", "VA_ARGS", "VOID", "WHILE_EXPR", "WHILE_STMT", "WS", "'\"C\"'", "'->'", "'...'", "'@catch'", "'@encode'", "'@end'", "'@finally'", "'@implementation'", "'@interface'", "'@private'", "'@property'", "'@protocol'", "'@public'", "'@selector'", "'@synthesize'", "'@throw'", "'@try'", "'Nil'", "'__attribute__'", "'__typeof__'", "'assign'", "'case'", "'constructor'", "'copy'", "'default'", "'do'", "'else'", "'extern'", "'for'", "'goto'", "'if'", "'in'", "'inline'", "'nil'", "'readwrite'", "'return'", "'switch'", "'typedef'", "'union'", "'unsigned'", "'while'"
    };

    public static final int EOF=-1;
    public static final int T__162=162;
    public static final int T__163=163;
    public static final int T__164=164;
    public static final int T__165=165;
    public static final int T__166=166;
    public static final int T__167=167;
    public static final int T__168=168;
    public static final int T__169=169;
    public static final int T__170=170;
    public static final int T__171=171;
    public static final int T__172=172;
    public static final int T__173=173;
    public static final int T__174=174;
    public static final int T__175=175;
    public static final int T__176=176;
    public static final int T__177=177;
    public static final int T__178=178;
    public static final int T__179=179;
    public static final int T__180=180;
    public static final int T__181=181;
    public static final int T__182=182;
    public static final int T__183=183;
    public static final int T__184=184;
    public static final int T__185=185;
    public static final int T__186=186;
    public static final int T__187=187;
    public static final int T__188=188;
    public static final int T__189=189;
    public static final int T__190=190;
    public static final int T__191=191;
    public static final int T__192=192;
    public static final int T__193=193;
    public static final int T__194=194;
    public static final int T__195=195;
    public static final int T__196=196;
    public static final int T__197=197;
    public static final int T__198=198;
    public static final int T__199=199;
    public static final int T__200=200;
    public static final int T__201=201;
    public static final int T__202=202;
    public static final int ARRAY_INIT=4;
    public static final int ASSIGN=5;
    public static final int ASTERISK=6;
    public static final int BLOCK=7;
    public static final int BREAK=8;
    public static final int BREAK_WORD=9;
    public static final int CASE_BODY=10;
    public static final int CASE_EXPR=11;
    public static final int CASE_STMT=12;
    public static final int CATEGORY=13;
    public static final int CLASSICAL_EXPR=14;
    public static final int CLASSICAL_EXPR_2=15;
    public static final int COLON=16;
    public static final int COMMA=17;
    public static final int CONST_EXPR=18;
    public static final int CONST_PREFIX=19;
    public static final int DEFAULT_BODY=20;
    public static final int DEFAULT_STMT=21;
    public static final int DIGIT=22;
    public static final int DOT=23;
    public static final int ENCODE=24;
    public static final int ENUM=25;
    public static final int ENUM_PREFIX=26;
    public static final int ESC=27;
    public static final int EXPR=28;
    public static final int EXPR_ADD=29;
    public static final int EXPR_AND=30;
    public static final int EXPR_AND_AND=31;
    public static final int EXPR_ASSIGN=32;
    public static final int EXPR_COND=33;
    public static final int EXPR_EQ=34;
    public static final int EXPR_FULL=35;
    public static final int EXPR_MOV=36;
    public static final int EXPR_MULT=37;
    public static final int EXPR_NOT=38;
    public static final int EXPR_OR=39;
    public static final int EXPR_OR_OR=40;
    public static final int EXPR_QUESTION=41;
    public static final int EXPR_TYPE=42;
    public static final int EXPR_XOR=43;
    public static final int EXTERN=44;
    public static final int FIELD=45;
    public static final int FIELD_ACCESS=46;
    public static final int FIELD_TYPE_STARTED=47;
    public static final int FOR_IN_STMT=48;
    public static final int FOR_STMT=49;
    public static final int FOR_STMT_EXPR=50;
    public static final int FUNCTION=51;
    public static final int GENERIC=52;
    public static final int GOTO=53;
    public static final int ID=54;
    public static final int IF_BLOCK=55;
    public static final int IF_EXPR=56;
    public static final int IF_STMT=57;
    public static final int IMPLEMENTATION=58;
    public static final int INCOMPLETE_PREFIX=59;
    public static final int INDEX=60;
    public static final int INDEX_NUMBER=61;
    public static final int INTERFACE=62;
    public static final int LETTER=63;
    public static final int L_AND=64;
    public static final int L_AND_AND=65;
    public static final int L_AND_EQ=66;
    public static final int L_BR=67;
    public static final int L_DIV=68;
    public static final int L_DIV_EQ=69;
    public static final int L_EQ=70;
    public static final int L_EQ_EQ=71;
    public static final int L_FBR=72;
    public static final int L_KBR=73;
    public static final int L_LEFT=74;
    public static final int L_LEFT_EQ=75;
    public static final int L_LESS=76;
    public static final int L_LESS_EQ=77;
    public static final int L_MINUS=78;
    public static final int L_MINUS_EQ=79;
    public static final int L_MINUS_MINUS=80;
    public static final int L_MORE=81;
    public static final int L_MORE_EQ=82;
    public static final int L_MULT_EQ=83;
    public static final int L_NEQ=84;
    public static final int L_NOT=85;
    public static final int L_OR=86;
    public static final int L_OR_EQ=87;
    public static final int L_OR_OR=88;
    public static final int L_PERC=89;
    public static final int L_PERC_EQ=90;
    public static final int L_PLUS=91;
    public static final int L_PLUS_EQ=92;
    public static final int L_PLUS_PLUS=93;
    public static final int L_QUESTION=94;
    public static final int L_RIGHT=95;
    public static final int L_RIGHT_EQ=96;
    public static final int L_TILDA=97;
    public static final int L_XOR=98;
    public static final int L_XOR_EQ=99;
    public static final int MESSAGE=100;
    public static final int METHOD=101;
    public static final int METHOD_CALL=102;
    public static final int METHOD_MSG=103;
    public static final int METHOD_NAME=104;
    public static final int MODIFIER=105;
    public static final int MSG_LIST=106;
    public static final int MULTI_COMMENT=107;
    public static final int M_IMPORT=108;
    public static final int M_TYPE_START=109;
    public static final int NAME=110;
    public static final int NOT=111;
    public static final int NUMBER=112;
    public static final int OBJECT=113;
    public static final int OP=114;
    public static final int OPER=115;
    public static final int OPERATOR=116;
    public static final int PARAM=117;
    public static final int PREFIX=118;
    public static final int PREPROCESSOR_DECLARATION=119;
    public static final int PROTOCOL=120;
    public static final int RETURN_STMT=121;
    public static final int R_BR=122;
    public static final int R_FBR=123;
    public static final int R_KBR=124;
    public static final int SELECTOR=125;
    public static final int SELECTOR_VALUE=126;
    public static final int SEMICOLON=127;
    public static final int SIMPLE_EXPR=128;
    public static final int SINGLE_COMMENT=129;
    public static final int SINGLE_OP=130;
    public static final int SIZEOF=131;
    public static final int STATIC=132;
    public static final int STATIC_METHOD=133;
    public static final int STATIC_PREFIX=134;
    public static final int STATIC_START=135;
    public static final int STATIC_TYPE=136;
    public static final int STRING=137;
    public static final int STRING_LITERAL=138;
    public static final int STRING_LITERAL2=139;
    public static final int STRING_LITERAL3=140;
    public static final int STRUCT_FIELD=141;
    public static final int STRUCT_PREFIX=142;
    public static final int SUPER_CLASS=143;
    public static final int SWITCH=144;
    public static final int SWITCH_BODY=145;
    public static final int SWITCH_EXPRESSION=146;
    public static final int THROW_EXCEPTION=147;
    public static final int THROW_STMT=148;
    public static final int TYPE=149;
    public static final int TYPEDEF=150;
    public static final int TYPEDEF_ELEMENT=151;
    public static final int TYPEDEF_STRUCT=152;
    public static final int TYPE_CONVERTION=153;
    public static final int TYPE_RENAME=154;
    public static final int VALUE=155;
    public static final int VARIABLE_INIT=156;
    public static final int VA_ARGS=157;
    public static final int VOID=158;
    public static final int WHILE_EXPR=159;
    public static final int WHILE_STMT=160;
    public static final int WS=161;

    // delegates
    public Parser[] getDelegates() {
        return new Parser[] {};
    }

    // delegators


    public ObjcmParser(TokenStream input) {
        this(input, new RecognizerSharedState());
    }
    public ObjcmParser(TokenStream input, RecognizerSharedState state) {
        super(input, state);
    }

protected TreeAdaptor adaptor = new CommonTreeAdaptor();

public void setTreeAdaptor(TreeAdaptor adaptor) {
    this.adaptor = adaptor;
}
public TreeAdaptor getTreeAdaptor() {
    return adaptor;
}
    public String[] getTokenNames() { return ObjcmParser.tokenNames; }
    public String getGrammarFileName() { return "Objcm.g"; }


    public static class code_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "code"
    // Objcm.g:116:1: code : ( code_internal )+ ;
    public final ObjcmParser.code_return code() throws RecognitionException {
        ObjcmParser.code_return retval = new ObjcmParser.code_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.code_internal_return code_internal1 =null;



        try {
            // Objcm.g:116:6: ( ( code_internal )+ )
            // Objcm.g:117:3: ( code_internal )+
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:117:3: ( code_internal )+
            int cnt1=0;
            loop1:
            do {
                int alt1=2;
                int LA1_0 = input.LA(1);

                if ( (LA1_0==CONST_PREFIX||LA1_0==ENUM_PREFIX||LA1_0==ID||LA1_0==STATIC_PREFIX||LA1_0==STRUCT_PREFIX||LA1_0==VOID||(LA1_0 >= 169 && LA1_0 <= 170)||LA1_0==189||LA1_0==199) ) {
                    alt1=1;
                }


                switch (alt1) {
            	case 1 :
            	    // Objcm.g:117:3: code_internal
            	    {
            	    pushFollow(FOLLOW_code_internal_in_code435);
            	    code_internal1=code_internal();

            	    state._fsp--;

            	    adaptor.addChild(root_0, code_internal1.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt1 >= 1 ) break loop1;
                        EarlyExitException eee =
                            new EarlyExitException(1, input);
                        throw eee;
                }
                cnt1++;
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "code"


    public static class code_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "code_internal"
    // Objcm.g:121:1: code_internal : ( operator_wrapper | implementation_wrapper );
    public final ObjcmParser.code_internal_return code_internal() throws RecognitionException {
        ObjcmParser.code_internal_return retval = new ObjcmParser.code_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.operator_wrapper_return operator_wrapper2 =null;

        ObjcmParser.implementation_wrapper_return implementation_wrapper3 =null;



        try {
            // Objcm.g:122:2: ( operator_wrapper | implementation_wrapper )
            int alt2=2;
            int LA2_0 = input.LA(1);

            if ( (LA2_0==CONST_PREFIX||LA2_0==ENUM_PREFIX||LA2_0==ID||LA2_0==STATIC_PREFIX||LA2_0==STRUCT_PREFIX||LA2_0==VOID||LA2_0==170||LA2_0==189||LA2_0==199) ) {
                alt2=1;
            }
            else if ( (LA2_0==169) ) {
                alt2=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 2, 0, input);

                throw nvae;

            }
            switch (alt2) {
                case 1 :
                    // Objcm.g:122:4: operator_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_operator_wrapper_in_code_internal449);
                    operator_wrapper2=operator_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, operator_wrapper2.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:123:5: implementation_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_implementation_wrapper_in_code_internal455);
                    implementation_wrapper3=implementation_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, implementation_wrapper3.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "code_internal"


    public static class operator_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "operator_wrapper"
    // Objcm.g:126:1: operator_wrapper : operator -> ^( OPERATOR operator ) ;
    public final ObjcmParser.operator_wrapper_return operator_wrapper() throws RecognitionException {
        ObjcmParser.operator_wrapper_return retval = new ObjcmParser.operator_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.operator_return operator4 =null;


        RewriteRuleSubtreeStream stream_operator=new RewriteRuleSubtreeStream(adaptor,"rule operator");
        try {
            // Objcm.g:127:2: ( operator -> ^( OPERATOR operator ) )
            // Objcm.g:127:4: operator
            {
            pushFollow(FOLLOW_operator_in_operator_wrapper466);
            operator4=operator();

            state._fsp--;

            stream_operator.add(operator4.getTree());

            // AST REWRITE
            // elements: operator
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 127:13: -> ^( OPERATOR operator )
            {
                // Objcm.g:127:16: ^( OPERATOR operator )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(OPERATOR, "OPERATOR")
                , root_1);

                adaptor.addChild(root_1, stream_operator.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "operator_wrapper"


    public static class operator_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "operator"
    // Objcm.g:129:1: operator : ( extern_wrapper | static_section_wrapper | type_start_wrapper | interface_declaration_wrapper | typedef_struct_declaration | typedef_declaration_wrapper | typedef );
    public final ObjcmParser.operator_return operator() throws RecognitionException {
        ObjcmParser.operator_return retval = new ObjcmParser.operator_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.extern_wrapper_return extern_wrapper5 =null;

        ObjcmParser.static_section_wrapper_return static_section_wrapper6 =null;

        ObjcmParser.type_start_wrapper_return type_start_wrapper7 =null;

        ObjcmParser.interface_declaration_wrapper_return interface_declaration_wrapper8 =null;

        ObjcmParser.typedef_struct_declaration_return typedef_struct_declaration9 =null;

        ObjcmParser.typedef_declaration_wrapper_return typedef_declaration_wrapper10 =null;

        ObjcmParser.typedef_return typedef11 =null;



        try {
            // Objcm.g:130:2: ( extern_wrapper | static_section_wrapper | type_start_wrapper | interface_declaration_wrapper | typedef_struct_declaration | typedef_declaration_wrapper | typedef )
            int alt3=7;
            switch ( input.LA(1) ) {
            case 189:
                {
                alt3=1;
                }
                break;
            case STATIC_PREFIX:
                {
                alt3=2;
                }
                break;
            case CONST_PREFIX:
            case ID:
            case VOID:
                {
                alt3=3;
                }
                break;
            case 170:
                {
                alt3=4;
                }
                break;
            case STRUCT_PREFIX:
                {
                alt3=5;
                }
                break;
            case ENUM_PREFIX:
                {
                alt3=6;
                }
                break;
            case 199:
                {
                alt3=7;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 3, 0, input);

                throw nvae;

            }

            switch (alt3) {
                case 1 :
                    // Objcm.g:130:4: extern_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_extern_wrapper_in_operator484);
                    extern_wrapper5=extern_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, extern_wrapper5.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:131:4: static_section_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_static_section_wrapper_in_operator490);
                    static_section_wrapper6=static_section_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, static_section_wrapper6.getTree());

                    }
                    break;
                case 3 :
                    // Objcm.g:132:4: type_start_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_start_wrapper_in_operator495);
                    type_start_wrapper7=type_start_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, type_start_wrapper7.getTree());

                    }
                    break;
                case 4 :
                    // Objcm.g:133:5: interface_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_interface_declaration_wrapper_in_operator502);
                    interface_declaration_wrapper8=interface_declaration_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, interface_declaration_wrapper8.getTree());

                    }
                    break;
                case 5 :
                    // Objcm.g:134:4: typedef_struct_declaration
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_typedef_struct_declaration_in_operator508);
                    typedef_struct_declaration9=typedef_struct_declaration();

                    state._fsp--;

                    adaptor.addChild(root_0, typedef_struct_declaration9.getTree());

                    }
                    break;
                case 6 :
                    // Objcm.g:135:4: typedef_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_typedef_declaration_wrapper_in_operator514);
                    typedef_declaration_wrapper10=typedef_declaration_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, typedef_declaration_wrapper10.getTree());

                    }
                    break;
                case 7 :
                    // Objcm.g:136:4: typedef
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_typedef_in_operator519);
                    typedef11=typedef();

                    state._fsp--;

                    adaptor.addChild(root_0, typedef11.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "operator"


    public static class extern_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "extern_wrapper"
    // Objcm.g:143:2: extern_wrapper : extern -> ^( EXTERN ) ;
    public final ObjcmParser.extern_wrapper_return extern_wrapper() throws RecognitionException {
        ObjcmParser.extern_wrapper_return retval = new ObjcmParser.extern_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.extern_return extern12 =null;


        RewriteRuleSubtreeStream stream_extern=new RewriteRuleSubtreeStream(adaptor,"rule extern");
        try {
            // Objcm.g:144:3: ( extern -> ^( EXTERN ) )
            // Objcm.g:144:5: extern
            {
            pushFollow(FOLLOW_extern_in_extern_wrapper537);
            extern12=extern();

            state._fsp--;

            stream_extern.add(extern12.getTree());

            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 144:12: -> ^( EXTERN )
            {
                // Objcm.g:144:15: ^( EXTERN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXTERN, "EXTERN")
                , root_1);

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "extern_wrapper"


    public static class extern_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "extern"
    // Objcm.g:147:2: extern : 'extern' '\"C\"' L_FBR ~ ( R_FBR ) R_FBR ;
    public final ObjcmParser.extern_return extern() throws RecognitionException {
        ObjcmParser.extern_return retval = new ObjcmParser.extern_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal13=null;
        Token string_literal14=null;
        Token L_FBR15=null;
        Token set16=null;
        Token R_FBR17=null;

        Object string_literal13_tree=null;
        Object string_literal14_tree=null;
        Object L_FBR15_tree=null;
        Object set16_tree=null;
        Object R_FBR17_tree=null;

        try {
            // Objcm.g:147:9: ( 'extern' '\"C\"' L_FBR ~ ( R_FBR ) R_FBR )
            // Objcm.g:147:11: 'extern' '\"C\"' L_FBR ~ ( R_FBR ) R_FBR
            {
            root_0 = (Object)adaptor.nil();


            string_literal13=(Token)match(input,189,FOLLOW_189_in_extern556); 
            string_literal13_tree = 
            (Object)adaptor.create(string_literal13)
            ;
            adaptor.addChild(root_0, string_literal13_tree);


            string_literal14=(Token)match(input,162,FOLLOW_162_in_extern559); 
            string_literal14_tree = 
            (Object)adaptor.create(string_literal14)
            ;
            adaptor.addChild(root_0, string_literal14_tree);


            L_FBR15=(Token)match(input,L_FBR,FOLLOW_L_FBR_in_extern562); 
            L_FBR15_tree = 
            (Object)adaptor.create(L_FBR15)
            ;
            adaptor.addChild(root_0, L_FBR15_tree);


            set16=(Token)input.LT(1);

            if ( (input.LA(1) >= ARRAY_INIT && input.LA(1) <= R_BR)||(input.LA(1) >= R_KBR && input.LA(1) <= 202) ) {
                input.consume();
                adaptor.addChild(root_0, 
                (Object)adaptor.create(set16)
                );
                state.errorRecovery=false;
            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            R_FBR17=(Token)match(input,R_FBR,FOLLOW_R_FBR_in_extern569); 
            R_FBR17_tree = 
            (Object)adaptor.create(R_FBR17)
            ;
            adaptor.addChild(root_0, R_FBR17_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "extern"


    public static class implementation_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementation_wrapper"
    // Objcm.g:149:1: implementation_wrapper : implementation -> ^( IMPLEMENTATION implementation ) ;
    public final ObjcmParser.implementation_wrapper_return implementation_wrapper() throws RecognitionException {
        ObjcmParser.implementation_wrapper_return retval = new ObjcmParser.implementation_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.implementation_return implementation18 =null;


        RewriteRuleSubtreeStream stream_implementation=new RewriteRuleSubtreeStream(adaptor,"rule implementation");
        try {
            // Objcm.g:150:3: ( implementation -> ^( IMPLEMENTATION implementation ) )
            // Objcm.g:150:5: implementation
            {
            pushFollow(FOLLOW_implementation_in_implementation_wrapper581);
            implementation18=implementation();

            state._fsp--;

            stream_implementation.add(implementation18.getTree());

            // AST REWRITE
            // elements: implementation
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 150:20: -> ^( IMPLEMENTATION implementation )
            {
                // Objcm.g:150:23: ^( IMPLEMENTATION implementation )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(IMPLEMENTATION, "IMPLEMENTATION")
                , root_1);

                adaptor.addChild(root_1, stream_implementation.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implementation_wrapper"


    public static class implementation_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementation"
    // Objcm.g:152:1: implementation : '@implementation' name ( category )? ( super_class )? ( implementation_body )* '@end' ( SEMICOLON )? ;
    public final ObjcmParser.implementation_return implementation() throws RecognitionException {
        ObjcmParser.implementation_return retval = new ObjcmParser.implementation_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal19=null;
        Token string_literal24=null;
        Token SEMICOLON25=null;
        ObjcmParser.name_return name20 =null;

        ObjcmParser.category_return category21 =null;

        ObjcmParser.super_class_return super_class22 =null;

        ObjcmParser.implementation_body_return implementation_body23 =null;


        Object string_literal19_tree=null;
        Object string_literal24_tree=null;
        Object SEMICOLON25_tree=null;

        try {
            // Objcm.g:153:2: ( '@implementation' name ( category )? ( super_class )? ( implementation_body )* '@end' ( SEMICOLON )? )
            // Objcm.g:153:4: '@implementation' name ( category )? ( super_class )? ( implementation_body )* '@end' ( SEMICOLON )?
            {
            root_0 = (Object)adaptor.nil();


            string_literal19=(Token)match(input,169,FOLLOW_169_in_implementation600); 
            string_literal19_tree = 
            (Object)adaptor.create(string_literal19)
            ;
            adaptor.addChild(root_0, string_literal19_tree);


            pushFollow(FOLLOW_name_in_implementation603);
            name20=name();

            state._fsp--;

            adaptor.addChild(root_0, name20.getTree());

            // Objcm.g:153:29: ( category )?
            int alt4=2;
            int LA4_0 = input.LA(1);

            if ( (LA4_0==L_BR) ) {
                alt4=1;
            }
            switch (alt4) {
                case 1 :
                    // Objcm.g:153:29: category
                    {
                    pushFollow(FOLLOW_category_in_implementation606);
                    category21=category();

                    state._fsp--;

                    adaptor.addChild(root_0, category21.getTree());

                    }
                    break;

            }


            // Objcm.g:153:39: ( super_class )?
            int alt5=2;
            int LA5_0 = input.LA(1);

            if ( (LA5_0==COLON) ) {
                alt5=1;
            }
            switch (alt5) {
                case 1 :
                    // Objcm.g:153:39: super_class
                    {
                    pushFollow(FOLLOW_super_class_in_implementation609);
                    super_class22=super_class();

                    state._fsp--;

                    adaptor.addChild(root_0, super_class22.getTree());

                    }
                    break;

            }


            // Objcm.g:154:3: ( implementation_body )*
            loop6:
            do {
                int alt6=2;
                int LA6_0 = input.LA(1);

                if ( (LA6_0==ID||LA6_0==L_MINUS||LA6_0==L_PLUS||LA6_0==STATIC_PREFIX||LA6_0==STRUCT_PREFIX||LA6_0==VOID||LA6_0==176||LA6_0==189||LA6_0==199) ) {
                    alt6=1;
                }


                switch (alt6) {
            	case 1 :
            	    // Objcm.g:154:3: implementation_body
            	    {
            	    pushFollow(FOLLOW_implementation_body_in_implementation614);
            	    implementation_body23=implementation_body();

            	    state._fsp--;

            	    adaptor.addChild(root_0, implementation_body23.getTree());

            	    }
            	    break;

            	default :
            	    break loop6;
                }
            } while (true);


            string_literal24=(Token)match(input,167,FOLLOW_167_in_implementation619); 
            string_literal24_tree = 
            (Object)adaptor.create(string_literal24)
            ;
            adaptor.addChild(root_0, string_literal24_tree);


            // Objcm.g:155:11: ( SEMICOLON )?
            int alt7=2;
            int LA7_0 = input.LA(1);

            if ( (LA7_0==SEMICOLON) ) {
                alt7=1;
            }
            switch (alt7) {
                case 1 :
                    // Objcm.g:155:11: SEMICOLON
                    {
                    SEMICOLON25=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_implementation622); 
                    SEMICOLON25_tree = 
                    (Object)adaptor.create(SEMICOLON25)
                    ;
                    adaptor.addChild(root_0, SEMICOLON25_tree);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implementation"


    public static class category_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "category"
    // Objcm.g:158:1: category : L_BR name R_BR -> ^( CATEGORY name ) ;
    public final ObjcmParser.category_return category() throws RecognitionException {
        ObjcmParser.category_return retval = new ObjcmParser.category_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_BR26=null;
        Token R_BR28=null;
        ObjcmParser.name_return name27 =null;


        Object L_BR26_tree=null;
        Object R_BR28_tree=null;
        RewriteRuleTokenStream stream_R_BR=new RewriteRuleTokenStream(adaptor,"token R_BR");
        RewriteRuleTokenStream stream_L_BR=new RewriteRuleTokenStream(adaptor,"token L_BR");
        RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name");
        try {
            // Objcm.g:158:9: ( L_BR name R_BR -> ^( CATEGORY name ) )
            // Objcm.g:158:11: L_BR name R_BR
            {
            L_BR26=(Token)match(input,L_BR,FOLLOW_L_BR_in_category634);  
            stream_L_BR.add(L_BR26);


            pushFollow(FOLLOW_name_in_category637);
            name27=name();

            state._fsp--;

            stream_name.add(name27.getTree());

            R_BR28=(Token)match(input,R_BR,FOLLOW_R_BR_in_category640);  
            stream_R_BR.add(R_BR28);


            // AST REWRITE
            // elements: name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 158:28: -> ^( CATEGORY name )
            {
                // Objcm.g:158:31: ^( CATEGORY name )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CATEGORY, "CATEGORY")
                , root_1);

                adaptor.addChild(root_1, stream_name.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "category"


    public static class implementation_body_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementation_body"
    // Objcm.g:160:1: implementation_body : ( directives | typedef | static_section_wrapper | implementation_method_wrapper | field_type_started_wrapper | field_declaration_wrapper | typedef_struct_declaration_wrapper );
    public final ObjcmParser.implementation_body_return implementation_body() throws RecognitionException {
        ObjcmParser.implementation_body_return retval = new ObjcmParser.implementation_body_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.directives_return directives29 =null;

        ObjcmParser.typedef_return typedef30 =null;

        ObjcmParser.static_section_wrapper_return static_section_wrapper31 =null;

        ObjcmParser.implementation_method_wrapper_return implementation_method_wrapper32 =null;

        ObjcmParser.field_type_started_wrapper_return field_type_started_wrapper33 =null;

        ObjcmParser.field_declaration_wrapper_return field_declaration_wrapper34 =null;

        ObjcmParser.typedef_struct_declaration_wrapper_return typedef_struct_declaration_wrapper35 =null;



        try {
            // Objcm.g:161:2: ( directives | typedef | static_section_wrapper | implementation_method_wrapper | field_type_started_wrapper | field_declaration_wrapper | typedef_struct_declaration_wrapper )
            int alt8=7;
            switch ( input.LA(1) ) {
            case 176:
                {
                alt8=1;
                }
                break;
            case 199:
                {
                alt8=2;
                }
                break;
            case STATIC_PREFIX:
                {
                alt8=3;
                }
                break;
            case L_MINUS:
            case L_PLUS:
                {
                alt8=4;
                }
                break;
            case ID:
            case VOID:
                {
                alt8=5;
                }
                break;
            case 189:
                {
                alt8=6;
                }
                break;
            case STRUCT_PREFIX:
                {
                alt8=7;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 8, 0, input);

                throw nvae;

            }

            switch (alt8) {
                case 1 :
                    // Objcm.g:161:4: directives
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_directives_in_implementation_body658);
                    directives29=directives();

                    state._fsp--;

                    adaptor.addChild(root_0, directives29.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:162:5: typedef
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_typedef_in_implementation_body664);
                    typedef30=typedef();

                    state._fsp--;

                    adaptor.addChild(root_0, typedef30.getTree());

                    }
                    break;
                case 3 :
                    // Objcm.g:163:5: static_section_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_static_section_wrapper_in_implementation_body670);
                    static_section_wrapper31=static_section_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, static_section_wrapper31.getTree());

                    }
                    break;
                case 4 :
                    // Objcm.g:164:5: implementation_method_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_implementation_method_wrapper_in_implementation_body676);
                    implementation_method_wrapper32=implementation_method_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, implementation_method_wrapper32.getTree());

                    }
                    break;
                case 5 :
                    // Objcm.g:166:4: field_type_started_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_field_type_started_wrapper_in_implementation_body682);
                    field_type_started_wrapper33=field_type_started_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, field_type_started_wrapper33.getTree());

                    }
                    break;
                case 6 :
                    // Objcm.g:167:5: field_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_field_declaration_wrapper_in_implementation_body688);
                    field_declaration_wrapper34=field_declaration_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, field_declaration_wrapper34.getTree());

                    }
                    break;
                case 7 :
                    // Objcm.g:168:4: typedef_struct_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_typedef_struct_declaration_wrapper_in_implementation_body693);
                    typedef_struct_declaration_wrapper35=typedef_struct_declaration_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, typedef_struct_declaration_wrapper35.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implementation_body"


    public static class directives_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "directives"
    // Objcm.g:171:1: directives : synthesize ;
    public final ObjcmParser.directives_return directives() throws RecognitionException {
        ObjcmParser.directives_return retval = new ObjcmParser.directives_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.synthesize_return synthesize36 =null;



        try {
            // Objcm.g:172:2: ( synthesize )
            // Objcm.g:172:4: synthesize
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_synthesize_in_directives704);
            synthesize36=synthesize();

            state._fsp--;

            adaptor.addChild(root_0, synthesize36.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "directives"


    public static class synthesize_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "synthesize"
    // Objcm.g:175:1: synthesize : '@synthesize' ID ( L_EQ ID )? SEMICOLON ;
    public final ObjcmParser.synthesize_return synthesize() throws RecognitionException {
        ObjcmParser.synthesize_return retval = new ObjcmParser.synthesize_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal37=null;
        Token ID38=null;
        Token L_EQ39=null;
        Token ID40=null;
        Token SEMICOLON41=null;

        Object string_literal37_tree=null;
        Object ID38_tree=null;
        Object L_EQ39_tree=null;
        Object ID40_tree=null;
        Object SEMICOLON41_tree=null;

        try {
            // Objcm.g:176:2: ( '@synthesize' ID ( L_EQ ID )? SEMICOLON )
            // Objcm.g:176:4: '@synthesize' ID ( L_EQ ID )? SEMICOLON
            {
            root_0 = (Object)adaptor.nil();


            string_literal37=(Token)match(input,176,FOLLOW_176_in_synthesize717); 
            string_literal37_tree = 
            (Object)adaptor.create(string_literal37)
            ;
            adaptor.addChild(root_0, string_literal37_tree);


            ID38=(Token)match(input,ID,FOLLOW_ID_in_synthesize720); 
            ID38_tree = 
            (Object)adaptor.create(ID38)
            ;
            adaptor.addChild(root_0, ID38_tree);


            // Objcm.g:176:22: ( L_EQ ID )?
            int alt9=2;
            int LA9_0 = input.LA(1);

            if ( (LA9_0==L_EQ) ) {
                alt9=1;
            }
            switch (alt9) {
                case 1 :
                    // Objcm.g:176:23: L_EQ ID
                    {
                    L_EQ39=(Token)match(input,L_EQ,FOLLOW_L_EQ_in_synthesize723); 
                    L_EQ39_tree = 
                    (Object)adaptor.create(L_EQ39)
                    ;
                    adaptor.addChild(root_0, L_EQ39_tree);


                    ID40=(Token)match(input,ID,FOLLOW_ID_in_synthesize725); 
                    ID40_tree = 
                    (Object)adaptor.create(ID40)
                    ;
                    adaptor.addChild(root_0, ID40_tree);


                    }
                    break;

            }


            SEMICOLON41=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_synthesize729); 
            SEMICOLON41_tree = 
            (Object)adaptor.create(SEMICOLON41)
            ;
            adaptor.addChild(root_0, SEMICOLON41_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "synthesize"


    public static class typedef_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typedef"
    // Objcm.g:179:1: typedef : 'typedef' ( typedef_declaration_wrapper | typedef_struct_declaration_wrapper | type_rename_wrapper ) ;
    public final ObjcmParser.typedef_return typedef() throws RecognitionException {
        ObjcmParser.typedef_return retval = new ObjcmParser.typedef_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal42=null;
        ObjcmParser.typedef_declaration_wrapper_return typedef_declaration_wrapper43 =null;

        ObjcmParser.typedef_struct_declaration_wrapper_return typedef_struct_declaration_wrapper44 =null;

        ObjcmParser.type_rename_wrapper_return type_rename_wrapper45 =null;


        Object string_literal42_tree=null;

        try {
            // Objcm.g:179:9: ( 'typedef' ( typedef_declaration_wrapper | typedef_struct_declaration_wrapper | type_rename_wrapper ) )
            // Objcm.g:179:11: 'typedef' ( typedef_declaration_wrapper | typedef_struct_declaration_wrapper | type_rename_wrapper )
            {
            root_0 = (Object)adaptor.nil();


            string_literal42=(Token)match(input,199,FOLLOW_199_in_typedef741); 
            string_literal42_tree = 
            (Object)adaptor.create(string_literal42)
            ;
            adaptor.addChild(root_0, string_literal42_tree);


            // Objcm.g:179:22: ( typedef_declaration_wrapper | typedef_struct_declaration_wrapper | type_rename_wrapper )
            int alt10=3;
            switch ( input.LA(1) ) {
            case ENUM_PREFIX:
                {
                alt10=1;
                }
                break;
            case STRUCT_PREFIX:
                {
                alt10=2;
                }
                break;
            case ID:
                {
                alt10=3;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 10, 0, input);

                throw nvae;

            }

            switch (alt10) {
                case 1 :
                    // Objcm.g:179:23: typedef_declaration_wrapper
                    {
                    pushFollow(FOLLOW_typedef_declaration_wrapper_in_typedef745);
                    typedef_declaration_wrapper43=typedef_declaration_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, typedef_declaration_wrapper43.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:179:53: typedef_struct_declaration_wrapper
                    {
                    pushFollow(FOLLOW_typedef_struct_declaration_wrapper_in_typedef749);
                    typedef_struct_declaration_wrapper44=typedef_struct_declaration_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, typedef_struct_declaration_wrapper44.getTree());

                    }
                    break;
                case 3 :
                    // Objcm.g:179:90: type_rename_wrapper
                    {
                    pushFollow(FOLLOW_type_rename_wrapper_in_typedef753);
                    type_rename_wrapper45=type_rename_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, type_rename_wrapper45.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typedef"


    public static class type_rename_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_rename_wrapper"
    // Objcm.g:182:1: type_rename_wrapper : type_rename -> ^( TYPE_RENAME type_rename ) ;
    public final ObjcmParser.type_rename_wrapper_return type_rename_wrapper() throws RecognitionException {
        ObjcmParser.type_rename_wrapper_return retval = new ObjcmParser.type_rename_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.type_rename_return type_rename46 =null;


        RewriteRuleSubtreeStream stream_type_rename=new RewriteRuleSubtreeStream(adaptor,"rule type_rename");
        try {
            // Objcm.g:183:2: ( type_rename -> ^( TYPE_RENAME type_rename ) )
            // Objcm.g:183:4: type_rename
            {
            pushFollow(FOLLOW_type_rename_in_type_rename_wrapper767);
            type_rename46=type_rename();

            state._fsp--;

            stream_type_rename.add(type_rename46.getTree());

            // AST REWRITE
            // elements: type_rename
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 183:16: -> ^( TYPE_RENAME type_rename )
            {
                // Objcm.g:183:19: ^( TYPE_RENAME type_rename )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TYPE_RENAME, "TYPE_RENAME")
                , root_1);

                adaptor.addChild(root_1, stream_type_rename.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_rename_wrapper"


    public static class type_rename_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_rename"
    // Objcm.g:185:1: type_rename : ID ID SEMICOLON ;
    public final ObjcmParser.type_rename_return type_rename() throws RecognitionException {
        ObjcmParser.type_rename_return retval = new ObjcmParser.type_rename_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID47=null;
        Token ID48=null;
        Token SEMICOLON49=null;

        Object ID47_tree=null;
        Object ID48_tree=null;
        Object SEMICOLON49_tree=null;

        try {
            // Objcm.g:186:2: ( ID ID SEMICOLON )
            // Objcm.g:186:4: ID ID SEMICOLON
            {
            root_0 = (Object)adaptor.nil();


            ID47=(Token)match(input,ID,FOLLOW_ID_in_type_rename786); 
            ID47_tree = 
            (Object)adaptor.create(ID47)
            ;
            adaptor.addChild(root_0, ID47_tree);


            ID48=(Token)match(input,ID,FOLLOW_ID_in_type_rename788); 
            ID48_tree = 
            (Object)adaptor.create(ID48)
            ;
            adaptor.addChild(root_0, ID48_tree);


            SEMICOLON49=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_type_rename790); 
            SEMICOLON49_tree = 
            (Object)adaptor.create(SEMICOLON49)
            ;
            adaptor.addChild(root_0, SEMICOLON49_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_rename"


    public static class static_section_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "static_section_wrapper"
    // Objcm.g:188:1: static_section_wrapper : static_section -> ^( STATIC static_section ) ;
    public final ObjcmParser.static_section_wrapper_return static_section_wrapper() throws RecognitionException {
        ObjcmParser.static_section_wrapper_return retval = new ObjcmParser.static_section_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.static_section_return static_section50 =null;


        RewriteRuleSubtreeStream stream_static_section=new RewriteRuleSubtreeStream(adaptor,"rule static_section");
        try {
            // Objcm.g:189:2: ( static_section -> ^( STATIC static_section ) )
            // Objcm.g:189:4: static_section
            {
            pushFollow(FOLLOW_static_section_in_static_section_wrapper802);
            static_section50=static_section();

            state._fsp--;

            stream_static_section.add(static_section50.getTree());

            // AST REWRITE
            // elements: static_section
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 189:19: -> ^( STATIC static_section )
            {
                // Objcm.g:189:22: ^( STATIC static_section )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(STATIC, "STATIC")
                , root_1);

                adaptor.addChild(root_1, stream_static_section.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "static_section_wrapper"


    public static class static_section_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "static_section"
    // Objcm.g:191:1: static_section : STATIC_PREFIX ( CONST_PREFIX )? ( STRUCT_PREFIX )? ( ENUM_PREFIX )? static_section2 ;
    public final ObjcmParser.static_section_return static_section() throws RecognitionException {
        ObjcmParser.static_section_return retval = new ObjcmParser.static_section_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STATIC_PREFIX51=null;
        Token CONST_PREFIX52=null;
        Token STRUCT_PREFIX53=null;
        Token ENUM_PREFIX54=null;
        ObjcmParser.static_section2_return static_section255 =null;


        Object STATIC_PREFIX51_tree=null;
        Object CONST_PREFIX52_tree=null;
        Object STRUCT_PREFIX53_tree=null;
        Object ENUM_PREFIX54_tree=null;

        try {
            // Objcm.g:192:2: ( STATIC_PREFIX ( CONST_PREFIX )? ( STRUCT_PREFIX )? ( ENUM_PREFIX )? static_section2 )
            // Objcm.g:192:4: STATIC_PREFIX ( CONST_PREFIX )? ( STRUCT_PREFIX )? ( ENUM_PREFIX )? static_section2
            {
            root_0 = (Object)adaptor.nil();


            STATIC_PREFIX51=(Token)match(input,STATIC_PREFIX,FOLLOW_STATIC_PREFIX_in_static_section822); 
            STATIC_PREFIX51_tree = 
            (Object)adaptor.create(STATIC_PREFIX51)
            ;
            adaptor.addChild(root_0, STATIC_PREFIX51_tree);


            // Objcm.g:192:18: ( CONST_PREFIX )?
            int alt11=2;
            int LA11_0 = input.LA(1);

            if ( (LA11_0==CONST_PREFIX) ) {
                alt11=1;
            }
            switch (alt11) {
                case 1 :
                    // Objcm.g:192:18: CONST_PREFIX
                    {
                    CONST_PREFIX52=(Token)match(input,CONST_PREFIX,FOLLOW_CONST_PREFIX_in_static_section824); 
                    CONST_PREFIX52_tree = 
                    (Object)adaptor.create(CONST_PREFIX52)
                    ;
                    adaptor.addChild(root_0, CONST_PREFIX52_tree);


                    }
                    break;

            }


            // Objcm.g:192:32: ( STRUCT_PREFIX )?
            int alt12=2;
            int LA12_0 = input.LA(1);

            if ( (LA12_0==STRUCT_PREFIX) ) {
                alt12=1;
            }
            switch (alt12) {
                case 1 :
                    // Objcm.g:192:32: STRUCT_PREFIX
                    {
                    STRUCT_PREFIX53=(Token)match(input,STRUCT_PREFIX,FOLLOW_STRUCT_PREFIX_in_static_section827); 
                    STRUCT_PREFIX53_tree = 
                    (Object)adaptor.create(STRUCT_PREFIX53)
                    ;
                    adaptor.addChild(root_0, STRUCT_PREFIX53_tree);


                    }
                    break;

            }


            // Objcm.g:192:47: ( ENUM_PREFIX )?
            int alt13=2;
            int LA13_0 = input.LA(1);

            if ( (LA13_0==ENUM_PREFIX) ) {
                alt13=1;
            }
            switch (alt13) {
                case 1 :
                    // Objcm.g:192:47: ENUM_PREFIX
                    {
                    ENUM_PREFIX54=(Token)match(input,ENUM_PREFIX,FOLLOW_ENUM_PREFIX_in_static_section830); 
                    ENUM_PREFIX54_tree = 
                    (Object)adaptor.create(ENUM_PREFIX54)
                    ;
                    adaptor.addChild(root_0, ENUM_PREFIX54_tree);


                    }
                    break;

            }


            pushFollow(FOLLOW_static_section2_in_static_section833);
            static_section255=static_section2();

            state._fsp--;

            adaptor.addChild(root_0, static_section255.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "static_section"


    public static class static_section2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "static_section2"
    // Objcm.g:194:1: static_section2 : ( inline_section | implementation_method_wrapper2 | static_section3 );
    public final ObjcmParser.static_section2_return static_section2() throws RecognitionException {
        ObjcmParser.static_section2_return retval = new ObjcmParser.static_section2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.inline_section_return inline_section56 =null;

        ObjcmParser.implementation_method_wrapper2_return implementation_method_wrapper257 =null;

        ObjcmParser.static_section3_return static_section358 =null;



        try {
            // Objcm.g:195:2: ( inline_section | implementation_method_wrapper2 | static_section3 )
            int alt14=3;
            switch ( input.LA(1) ) {
            case 194:
                {
                alt14=1;
                }
                break;
            case L_FBR:
            case SEMICOLON:
                {
                alt14=2;
                }
                break;
            case ID:
            case VOID:
                {
                alt14=3;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 14, 0, input);

                throw nvae;

            }

            switch (alt14) {
                case 1 :
                    // Objcm.g:195:4: inline_section
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_inline_section_in_static_section2842);
                    inline_section56=inline_section();

                    state._fsp--;

                    adaptor.addChild(root_0, inline_section56.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:196:5: implementation_method_wrapper2
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_implementation_method_wrapper2_in_static_section2849);
                    implementation_method_wrapper257=implementation_method_wrapper2();

                    state._fsp--;

                    adaptor.addChild(root_0, implementation_method_wrapper257.getTree());

                    }
                    break;
                case 3 :
                    // Objcm.g:197:5: static_section3
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_static_section3_in_static_section2856);
                    static_section358=static_section3();

                    state._fsp--;

                    adaptor.addChild(root_0, static_section358.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "static_section2"


    public static class inline_section_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "inline_section"
    // Objcm.g:200:1: inline_section : 'inline' field_type name ( method_params2 )? ( block_wrapper | SEMICOLON ) ;
    public final ObjcmParser.inline_section_return inline_section() throws RecognitionException {
        ObjcmParser.inline_section_return retval = new ObjcmParser.inline_section_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal59=null;
        Token SEMICOLON64=null;
        ObjcmParser.field_type_return field_type60 =null;

        ObjcmParser.name_return name61 =null;

        ObjcmParser.method_params2_return method_params262 =null;

        ObjcmParser.block_wrapper_return block_wrapper63 =null;


        Object string_literal59_tree=null;
        Object SEMICOLON64_tree=null;

        try {
            // Objcm.g:201:2: ( 'inline' field_type name ( method_params2 )? ( block_wrapper | SEMICOLON ) )
            // Objcm.g:201:4: 'inline' field_type name ( method_params2 )? ( block_wrapper | SEMICOLON )
            {
            root_0 = (Object)adaptor.nil();


            string_literal59=(Token)match(input,194,FOLLOW_194_in_inline_section868); 
            string_literal59_tree = 
            (Object)adaptor.create(string_literal59)
            ;
            adaptor.addChild(root_0, string_literal59_tree);


            pushFollow(FOLLOW_field_type_in_inline_section871);
            field_type60=field_type();

            state._fsp--;

            adaptor.addChild(root_0, field_type60.getTree());

            pushFollow(FOLLOW_name_in_inline_section873);
            name61=name();

            state._fsp--;

            adaptor.addChild(root_0, name61.getTree());

            // Objcm.g:201:31: ( method_params2 )?
            int alt15=2;
            int LA15_0 = input.LA(1);

            if ( (LA15_0==L_BR) ) {
                alt15=1;
            }
            switch (alt15) {
                case 1 :
                    // Objcm.g:201:31: method_params2
                    {
                    pushFollow(FOLLOW_method_params2_in_inline_section876);
                    method_params262=method_params2();

                    state._fsp--;

                    adaptor.addChild(root_0, method_params262.getTree());

                    }
                    break;

            }


            // Objcm.g:201:47: ( block_wrapper | SEMICOLON )
            int alt16=2;
            int LA16_0 = input.LA(1);

            if ( (LA16_0==L_FBR) ) {
                alt16=1;
            }
            else if ( (LA16_0==SEMICOLON) ) {
                alt16=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 16, 0, input);

                throw nvae;

            }
            switch (alt16) {
                case 1 :
                    // Objcm.g:201:48: block_wrapper
                    {
                    pushFollow(FOLLOW_block_wrapper_in_inline_section880);
                    block_wrapper63=block_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, block_wrapper63.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:201:64: SEMICOLON
                    {
                    SEMICOLON64=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_inline_section884); 
                    SEMICOLON64_tree = 
                    (Object)adaptor.create(SEMICOLON64)
                    ;
                    adaptor.addChild(root_0, SEMICOLON64_tree);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "inline_section"


    public static class static_section3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "static_section3"
    // Objcm.g:203:1: static_section3 : field_type name ( indexed )* static_end ;
    public final ObjcmParser.static_section3_return static_section3() throws RecognitionException {
        ObjcmParser.static_section3_return retval = new ObjcmParser.static_section3_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.field_type_return field_type65 =null;

        ObjcmParser.name_return name66 =null;

        ObjcmParser.indexed_return indexed67 =null;

        ObjcmParser.static_end_return static_end68 =null;



        try {
            // Objcm.g:204:2: ( field_type name ( indexed )* static_end )
            // Objcm.g:204:4: field_type name ( indexed )* static_end
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_field_type_in_static_section3895);
            field_type65=field_type();

            state._fsp--;

            adaptor.addChild(root_0, field_type65.getTree());

            pushFollow(FOLLOW_name_in_static_section3897);
            name66=name();

            state._fsp--;

            adaptor.addChild(root_0, name66.getTree());

            // Objcm.g:204:20: ( indexed )*
            loop17:
            do {
                int alt17=2;
                int LA17_0 = input.LA(1);

                if ( (LA17_0==L_KBR) ) {
                    alt17=1;
                }


                switch (alt17) {
            	case 1 :
            	    // Objcm.g:204:20: indexed
            	    {
            	    pushFollow(FOLLOW_indexed_in_static_section3899);
            	    indexed67=indexed();

            	    state._fsp--;

            	    adaptor.addChild(root_0, indexed67.getTree());

            	    }
            	    break;

            	default :
            	    break loop17;
                }
            } while (true);


            pushFollow(FOLLOW_static_end_in_static_section3903);
            static_end68=static_end();

            state._fsp--;

            adaptor.addChild(root_0, static_end68.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "static_section3"


    public static class static_end_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "static_end"
    // Objcm.g:207:1: static_end : ( implementation_method_wrapper3 | field_end );
    public final ObjcmParser.static_end_return static_end() throws RecognitionException {
        ObjcmParser.static_end_return retval = new ObjcmParser.static_end_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.implementation_method_wrapper3_return implementation_method_wrapper369 =null;

        ObjcmParser.field_end_return field_end70 =null;



        try {
            // Objcm.g:208:2: ( implementation_method_wrapper3 | field_end )
            int alt18=2;
            int LA18_0 = input.LA(1);

            if ( (LA18_0==L_BR) ) {
                alt18=1;
            }
            else if ( (LA18_0==L_EQ||LA18_0==SEMICOLON) ) {
                alt18=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 18, 0, input);

                throw nvae;

            }
            switch (alt18) {
                case 1 :
                    // Objcm.g:208:4: implementation_method_wrapper3
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_implementation_method_wrapper3_in_static_end915);
                    implementation_method_wrapper369=implementation_method_wrapper3();

                    state._fsp--;

                    adaptor.addChild(root_0, implementation_method_wrapper369.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:209:5: field_end
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_field_end_in_static_end921);
                    field_end70=field_end();

                    state._fsp--;

                    adaptor.addChild(root_0, field_end70.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "static_end"


    public static class field_end_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_end"
    // Objcm.g:211:1: field_end : field_end_internal -> ^( FIELD field_end_internal ) ;
    public final ObjcmParser.field_end_return field_end() throws RecognitionException {
        ObjcmParser.field_end_return retval = new ObjcmParser.field_end_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.field_end_internal_return field_end_internal71 =null;


        RewriteRuleSubtreeStream stream_field_end_internal=new RewriteRuleSubtreeStream(adaptor,"rule field_end_internal");
        try {
            // Objcm.g:212:2: ( field_end_internal -> ^( FIELD field_end_internal ) )
            // Objcm.g:212:4: field_end_internal
            {
            pushFollow(FOLLOW_field_end_internal_in_field_end932);
            field_end_internal71=field_end_internal();

            state._fsp--;

            stream_field_end_internal.add(field_end_internal71.getTree());

            // AST REWRITE
            // elements: field_end_internal
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 212:23: -> ^( FIELD field_end_internal )
            {
                // Objcm.g:212:26: ^( FIELD field_end_internal )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FIELD, "FIELD")
                , root_1);

                adaptor.addChild(root_1, stream_field_end_internal.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_end"


    public static class field_end_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_end_internal"
    // Objcm.g:214:1: field_end_internal : ( value_set )? SEMICOLON ;
    public final ObjcmParser.field_end_internal_return field_end_internal() throws RecognitionException {
        ObjcmParser.field_end_internal_return retval = new ObjcmParser.field_end_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON73=null;
        ObjcmParser.value_set_return value_set72 =null;


        Object SEMICOLON73_tree=null;

        try {
            // Objcm.g:215:2: ( ( value_set )? SEMICOLON )
            // Objcm.g:215:4: ( value_set )? SEMICOLON
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:215:4: ( value_set )?
            int alt19=2;
            int LA19_0 = input.LA(1);

            if ( (LA19_0==L_EQ) ) {
                alt19=1;
            }
            switch (alt19) {
                case 1 :
                    // Objcm.g:215:4: value_set
                    {
                    pushFollow(FOLLOW_value_set_in_field_end_internal950);
                    value_set72=value_set();

                    state._fsp--;

                    adaptor.addChild(root_0, value_set72.getTree());

                    }
                    break;

            }


            SEMICOLON73=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_field_end_internal953); 
            SEMICOLON73_tree = 
            (Object)adaptor.create(SEMICOLON73)
            ;
            adaptor.addChild(root_0, SEMICOLON73_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_end_internal"


    public static class implementation_method_wrapper3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementation_method_wrapper3"
    // Objcm.g:217:1: implementation_method_wrapper3 : implementation_method3 -> ^( METHOD implementation_method3 ) ;
    public final ObjcmParser.implementation_method_wrapper3_return implementation_method_wrapper3() throws RecognitionException {
        ObjcmParser.implementation_method_wrapper3_return retval = new ObjcmParser.implementation_method_wrapper3_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.implementation_method3_return implementation_method374 =null;


        RewriteRuleSubtreeStream stream_implementation_method3=new RewriteRuleSubtreeStream(adaptor,"rule implementation_method3");
        try {
            // Objcm.g:218:2: ( implementation_method3 -> ^( METHOD implementation_method3 ) )
            // Objcm.g:218:4: implementation_method3
            {
            pushFollow(FOLLOW_implementation_method3_in_implementation_method_wrapper3965);
            implementation_method374=implementation_method3();

            state._fsp--;

            stream_implementation_method3.add(implementation_method374.getTree());

            // AST REWRITE
            // elements: implementation_method3
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 218:27: -> ^( METHOD implementation_method3 )
            {
                // Objcm.g:218:30: ^( METHOD implementation_method3 )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD, "METHOD")
                , root_1);

                adaptor.addChild(root_1, stream_implementation_method3.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implementation_method_wrapper3"


    public static class implementation_method3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementation_method3"
    // Objcm.g:220:1: implementation_method3 : method_header_body3 ( SEMICOLON )? ( attribute )? ( block_wrapper )? ;
    public final ObjcmParser.implementation_method3_return implementation_method3() throws RecognitionException {
        ObjcmParser.implementation_method3_return retval = new ObjcmParser.implementation_method3_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON76=null;
        ObjcmParser.method_header_body3_return method_header_body375 =null;

        ObjcmParser.attribute_return attribute77 =null;

        ObjcmParser.block_wrapper_return block_wrapper78 =null;


        Object SEMICOLON76_tree=null;

        try {
            // Objcm.g:221:2: ( method_header_body3 ( SEMICOLON )? ( attribute )? ( block_wrapper )? )
            // Objcm.g:221:4: method_header_body3 ( SEMICOLON )? ( attribute )? ( block_wrapper )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_method_header_body3_in_implementation_method3983);
            method_header_body375=method_header_body3();

            state._fsp--;

            adaptor.addChild(root_0, method_header_body375.getTree());

            // Objcm.g:221:25: ( SEMICOLON )?
            int alt20=2;
            int LA20_0 = input.LA(1);

            if ( (LA20_0==SEMICOLON) ) {
                alt20=1;
            }
            switch (alt20) {
                case 1 :
                    // Objcm.g:221:25: SEMICOLON
                    {
                    SEMICOLON76=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_implementation_method3986); 
                    SEMICOLON76_tree = 
                    (Object)adaptor.create(SEMICOLON76)
                    ;
                    adaptor.addChild(root_0, SEMICOLON76_tree);


                    }
                    break;

            }


            // Objcm.g:222:3: ( attribute )?
            int alt21=2;
            int LA21_0 = input.LA(1);

            if ( (LA21_0==180) ) {
                alt21=1;
            }
            switch (alt21) {
                case 1 :
                    // Objcm.g:222:3: attribute
                    {
                    pushFollow(FOLLOW_attribute_in_implementation_method3991);
                    attribute77=attribute();

                    state._fsp--;

                    adaptor.addChild(root_0, attribute77.getTree());

                    }
                    break;

            }


            // Objcm.g:223:3: ( block_wrapper )?
            int alt22=2;
            int LA22_0 = input.LA(1);

            if ( (LA22_0==L_FBR) ) {
                alt22=1;
            }
            switch (alt22) {
                case 1 :
                    // Objcm.g:223:3: block_wrapper
                    {
                    pushFollow(FOLLOW_block_wrapper_in_implementation_method3996);
                    block_wrapper78=block_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, block_wrapper78.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implementation_method3"


    public static class attribute_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "attribute"
    // Objcm.g:226:1: attribute : '__attribute__' L_BR L_BR 'constructor' R_BR R_BR SEMICOLON ;
    public final ObjcmParser.attribute_return attribute() throws RecognitionException {
        ObjcmParser.attribute_return retval = new ObjcmParser.attribute_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal79=null;
        Token L_BR80=null;
        Token L_BR81=null;
        Token string_literal82=null;
        Token R_BR83=null;
        Token R_BR84=null;
        Token SEMICOLON85=null;

        Object string_literal79_tree=null;
        Object L_BR80_tree=null;
        Object L_BR81_tree=null;
        Object string_literal82_tree=null;
        Object R_BR83_tree=null;
        Object R_BR84_tree=null;
        Object SEMICOLON85_tree=null;

        try {
            // Objcm.g:227:2: ( '__attribute__' L_BR L_BR 'constructor' R_BR R_BR SEMICOLON )
            // Objcm.g:227:4: '__attribute__' L_BR L_BR 'constructor' R_BR R_BR SEMICOLON
            {
            root_0 = (Object)adaptor.nil();


            string_literal79=(Token)match(input,180,FOLLOW_180_in_attribute1009); 
            string_literal79_tree = 
            (Object)adaptor.create(string_literal79)
            ;
            adaptor.addChild(root_0, string_literal79_tree);


            L_BR80=(Token)match(input,L_BR,FOLLOW_L_BR_in_attribute1012); 
            L_BR80_tree = 
            (Object)adaptor.create(L_BR80)
            ;
            adaptor.addChild(root_0, L_BR80_tree);


            L_BR81=(Token)match(input,L_BR,FOLLOW_L_BR_in_attribute1015); 
            L_BR81_tree = 
            (Object)adaptor.create(L_BR81)
            ;
            adaptor.addChild(root_0, L_BR81_tree);


            string_literal82=(Token)match(input,184,FOLLOW_184_in_attribute1018); 
            string_literal82_tree = 
            (Object)adaptor.create(string_literal82)
            ;
            adaptor.addChild(root_0, string_literal82_tree);


            R_BR83=(Token)match(input,R_BR,FOLLOW_R_BR_in_attribute1021); 
            R_BR83_tree = 
            (Object)adaptor.create(R_BR83)
            ;
            adaptor.addChild(root_0, R_BR83_tree);


            R_BR84=(Token)match(input,R_BR,FOLLOW_R_BR_in_attribute1024); 
            R_BR84_tree = 
            (Object)adaptor.create(R_BR84)
            ;
            adaptor.addChild(root_0, R_BR84_tree);


            SEMICOLON85=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_attribute1027); 
            SEMICOLON85_tree = 
            (Object)adaptor.create(SEMICOLON85)
            ;
            adaptor.addChild(root_0, SEMICOLON85_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "attribute"


    public static class implementation_method2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementation_method2"
    // Objcm.g:229:1: implementation_method2 : ( SEMICOLON )? block_wrapper ;
    public final ObjcmParser.implementation_method2_return implementation_method2() throws RecognitionException {
        ObjcmParser.implementation_method2_return retval = new ObjcmParser.implementation_method2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON86=null;
        ObjcmParser.block_wrapper_return block_wrapper87 =null;


        Object SEMICOLON86_tree=null;

        try {
            // Objcm.g:230:2: ( ( SEMICOLON )? block_wrapper )
            // Objcm.g:230:5: ( SEMICOLON )? block_wrapper
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:230:5: ( SEMICOLON )?
            int alt23=2;
            int LA23_0 = input.LA(1);

            if ( (LA23_0==SEMICOLON) ) {
                alt23=1;
            }
            switch (alt23) {
                case 1 :
                    // Objcm.g:230:5: SEMICOLON
                    {
                    SEMICOLON86=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_implementation_method21039); 
                    SEMICOLON86_tree = 
                    (Object)adaptor.create(SEMICOLON86)
                    ;
                    adaptor.addChild(root_0, SEMICOLON86_tree);


                    }
                    break;

            }


            pushFollow(FOLLOW_block_wrapper_in_implementation_method21044);
            block_wrapper87=block_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, block_wrapper87.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implementation_method2"


    public static class field_type_started_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_type_started_wrapper"
    // Objcm.g:234:1: field_type_started_wrapper : field_type_started -> ^( FIELD_TYPE_STARTED field_type_started ) ;
    public final ObjcmParser.field_type_started_wrapper_return field_type_started_wrapper() throws RecognitionException {
        ObjcmParser.field_type_started_wrapper_return retval = new ObjcmParser.field_type_started_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.field_type_started_return field_type_started88 =null;


        RewriteRuleSubtreeStream stream_field_type_started=new RewriteRuleSubtreeStream(adaptor,"rule field_type_started");
        try {
            // Objcm.g:235:2: ( field_type_started -> ^( FIELD_TYPE_STARTED field_type_started ) )
            // Objcm.g:235:4: field_type_started
            {
            pushFollow(FOLLOW_field_type_started_in_field_type_started_wrapper1056);
            field_type_started88=field_type_started();

            state._fsp--;

            stream_field_type_started.add(field_type_started88.getTree());

            // AST REWRITE
            // elements: field_type_started
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 235:23: -> ^( FIELD_TYPE_STARTED field_type_started )
            {
                // Objcm.g:235:26: ^( FIELD_TYPE_STARTED field_type_started )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FIELD_TYPE_STARTED, "FIELD_TYPE_STARTED")
                , root_1);

                adaptor.addChild(root_1, stream_field_type_started.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_type_started_wrapper"


    public static class field_type_started_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_type_started"
    // Objcm.g:237:1: field_type_started : field_type name ( classic_method_declaration_wrapper | field_declaration_end_wrapper ) ;
    public final ObjcmParser.field_type_started_return field_type_started() throws RecognitionException {
        ObjcmParser.field_type_started_return retval = new ObjcmParser.field_type_started_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.field_type_return field_type89 =null;

        ObjcmParser.name_return name90 =null;

        ObjcmParser.classic_method_declaration_wrapper_return classic_method_declaration_wrapper91 =null;

        ObjcmParser.field_declaration_end_wrapper_return field_declaration_end_wrapper92 =null;



        try {
            // Objcm.g:238:2: ( field_type name ( classic_method_declaration_wrapper | field_declaration_end_wrapper ) )
            // Objcm.g:238:4: field_type name ( classic_method_declaration_wrapper | field_declaration_end_wrapper )
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_field_type_in_field_type_started1075);
            field_type89=field_type();

            state._fsp--;

            adaptor.addChild(root_0, field_type89.getTree());

            pushFollow(FOLLOW_name_in_field_type_started1077);
            name90=name();

            state._fsp--;

            adaptor.addChild(root_0, name90.getTree());

            // Objcm.g:238:20: ( classic_method_declaration_wrapper | field_declaration_end_wrapper )
            int alt24=2;
            int LA24_0 = input.LA(1);

            if ( (LA24_0==L_BR) ) {
                alt24=1;
            }
            else if ( (LA24_0==L_EQ||LA24_0==SEMICOLON) ) {
                alt24=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 24, 0, input);

                throw nvae;

            }
            switch (alt24) {
                case 1 :
                    // Objcm.g:238:21: classic_method_declaration_wrapper
                    {
                    pushFollow(FOLLOW_classic_method_declaration_wrapper_in_field_type_started1080);
                    classic_method_declaration_wrapper91=classic_method_declaration_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, classic_method_declaration_wrapper91.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:238:58: field_declaration_end_wrapper
                    {
                    pushFollow(FOLLOW_field_declaration_end_wrapper_in_field_type_started1084);
                    field_declaration_end_wrapper92=field_declaration_end_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, field_declaration_end_wrapper92.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_type_started"


    public static class field_declaration_end_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_declaration_end_wrapper"
    // Objcm.g:240:1: field_declaration_end_wrapper : field_declaration_end -> ^( FIELD field_declaration_end ) ;
    public final ObjcmParser.field_declaration_end_wrapper_return field_declaration_end_wrapper() throws RecognitionException {
        ObjcmParser.field_declaration_end_wrapper_return retval = new ObjcmParser.field_declaration_end_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.field_declaration_end_return field_declaration_end93 =null;


        RewriteRuleSubtreeStream stream_field_declaration_end=new RewriteRuleSubtreeStream(adaptor,"rule field_declaration_end");
        try {
            // Objcm.g:241:2: ( field_declaration_end -> ^( FIELD field_declaration_end ) )
            // Objcm.g:241:4: field_declaration_end
            {
            pushFollow(FOLLOW_field_declaration_end_in_field_declaration_end_wrapper1095);
            field_declaration_end93=field_declaration_end();

            state._fsp--;

            stream_field_declaration_end.add(field_declaration_end93.getTree());

            // AST REWRITE
            // elements: field_declaration_end
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 241:26: -> ^( FIELD field_declaration_end )
            {
                // Objcm.g:241:29: ^( FIELD field_declaration_end )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FIELD, "FIELD")
                , root_1);

                adaptor.addChild(root_1, stream_field_declaration_end.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_declaration_end_wrapper"


    public static class classic_method_declaration_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classic_method_declaration_wrapper"
    // Objcm.g:243:1: classic_method_declaration_wrapper : classic_method_declaration -> ^( STATIC_METHOD classic_method_declaration ) ;
    public final ObjcmParser.classic_method_declaration_wrapper_return classic_method_declaration_wrapper() throws RecognitionException {
        ObjcmParser.classic_method_declaration_wrapper_return retval = new ObjcmParser.classic_method_declaration_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.classic_method_declaration_return classic_method_declaration94 =null;


        RewriteRuleSubtreeStream stream_classic_method_declaration=new RewriteRuleSubtreeStream(adaptor,"rule classic_method_declaration");
        try {
            // Objcm.g:244:2: ( classic_method_declaration -> ^( STATIC_METHOD classic_method_declaration ) )
            // Objcm.g:244:4: classic_method_declaration
            {
            pushFollow(FOLLOW_classic_method_declaration_in_classic_method_declaration_wrapper1113);
            classic_method_declaration94=classic_method_declaration();

            state._fsp--;

            stream_classic_method_declaration.add(classic_method_declaration94.getTree());

            // AST REWRITE
            // elements: classic_method_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 244:31: -> ^( STATIC_METHOD classic_method_declaration )
            {
                // Objcm.g:244:34: ^( STATIC_METHOD classic_method_declaration )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(STATIC_METHOD, "STATIC_METHOD")
                , root_1);

                adaptor.addChild(root_1, stream_classic_method_declaration.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classic_method_declaration_wrapper"


    public static class classic_method_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classic_method_declaration"
    // Objcm.g:246:1: classic_method_declaration : method_params2 block_wrapper ;
    public final ObjcmParser.classic_method_declaration_return classic_method_declaration() throws RecognitionException {
        ObjcmParser.classic_method_declaration_return retval = new ObjcmParser.classic_method_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_params2_return method_params295 =null;

        ObjcmParser.block_wrapper_return block_wrapper96 =null;



        try {
            // Objcm.g:248:2: ( method_params2 block_wrapper )
            // Objcm.g:248:4: method_params2 block_wrapper
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_method_params2_in_classic_method_declaration1133);
            method_params295=method_params2();

            state._fsp--;

            adaptor.addChild(root_0, method_params295.getTree());

            pushFollow(FOLLOW_block_wrapper_in_classic_method_declaration1138);
            block_wrapper96=block_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, block_wrapper96.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classic_method_declaration"


    public static class implementation_method_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementation_method_wrapper"
    // Objcm.g:252:1: implementation_method_wrapper : implementation_method -> ^( METHOD implementation_method ) ;
    public final ObjcmParser.implementation_method_wrapper_return implementation_method_wrapper() throws RecognitionException {
        ObjcmParser.implementation_method_wrapper_return retval = new ObjcmParser.implementation_method_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.implementation_method_return implementation_method97 =null;


        RewriteRuleSubtreeStream stream_implementation_method=new RewriteRuleSubtreeStream(adaptor,"rule implementation_method");
        try {
            // Objcm.g:253:2: ( implementation_method -> ^( METHOD implementation_method ) )
            // Objcm.g:253:4: implementation_method
            {
            pushFollow(FOLLOW_implementation_method_in_implementation_method_wrapper1151);
            implementation_method97=implementation_method();

            state._fsp--;

            stream_implementation_method.add(implementation_method97.getTree());

            // AST REWRITE
            // elements: implementation_method
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 253:26: -> ^( METHOD implementation_method )
            {
                // Objcm.g:253:29: ^( METHOD implementation_method )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD, "METHOD")
                , root_1);

                adaptor.addChild(root_1, stream_implementation_method.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implementation_method_wrapper"


    public static class implementation_method_wrapper2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementation_method_wrapper2"
    // Objcm.g:255:1: implementation_method_wrapper2 : implementation_method2 -> ^( METHOD implementation_method2 ) ;
    public final ObjcmParser.implementation_method_wrapper2_return implementation_method_wrapper2() throws RecognitionException {
        ObjcmParser.implementation_method_wrapper2_return retval = new ObjcmParser.implementation_method_wrapper2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.implementation_method2_return implementation_method298 =null;


        RewriteRuleSubtreeStream stream_implementation_method2=new RewriteRuleSubtreeStream(adaptor,"rule implementation_method2");
        try {
            // Objcm.g:256:2: ( implementation_method2 -> ^( METHOD implementation_method2 ) )
            // Objcm.g:256:4: implementation_method2
            {
            pushFollow(FOLLOW_implementation_method2_in_implementation_method_wrapper21168);
            implementation_method298=implementation_method2();

            state._fsp--;

            stream_implementation_method2.add(implementation_method298.getTree());

            // AST REWRITE
            // elements: implementation_method2
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 256:27: -> ^( METHOD implementation_method2 )
            {
                // Objcm.g:256:30: ^( METHOD implementation_method2 )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD, "METHOD")
                , root_1);

                adaptor.addChild(root_1, stream_implementation_method2.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implementation_method_wrapper2"


    public static class implementation_method_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementation_method"
    // Objcm.g:258:1: implementation_method : method_header_body ( SEMICOLON )? block_wrapper ;
    public final ObjcmParser.implementation_method_return implementation_method() throws RecognitionException {
        ObjcmParser.implementation_method_return retval = new ObjcmParser.implementation_method_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON100=null;
        ObjcmParser.method_header_body_return method_header_body99 =null;

        ObjcmParser.block_wrapper_return block_wrapper101 =null;


        Object SEMICOLON100_tree=null;

        try {
            // Objcm.g:259:2: ( method_header_body ( SEMICOLON )? block_wrapper )
            // Objcm.g:259:4: method_header_body ( SEMICOLON )? block_wrapper
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_method_header_body_in_implementation_method1185);
            method_header_body99=method_header_body();

            state._fsp--;

            adaptor.addChild(root_0, method_header_body99.getTree());

            // Objcm.g:259:23: ( SEMICOLON )?
            int alt25=2;
            int LA25_0 = input.LA(1);

            if ( (LA25_0==SEMICOLON) ) {
                alt25=1;
            }
            switch (alt25) {
                case 1 :
                    // Objcm.g:259:23: SEMICOLON
                    {
                    SEMICOLON100=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_implementation_method1187); 
                    SEMICOLON100_tree = 
                    (Object)adaptor.create(SEMICOLON100)
                    ;
                    adaptor.addChild(root_0, SEMICOLON100_tree);


                    }
                    break;

            }


            pushFollow(FOLLOW_block_wrapper_in_implementation_method1192);
            block_wrapper101=block_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, block_wrapper101.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implementation_method"


    public static class block_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_wrapper"
    // Objcm.g:263:1: block_wrapper : block -> ^( BLOCK block ) ;
    public final ObjcmParser.block_wrapper_return block_wrapper() throws RecognitionException {
        ObjcmParser.block_wrapper_return retval = new ObjcmParser.block_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.block_return block102 =null;


        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            // Objcm.g:264:2: ( block -> ^( BLOCK block ) )
            // Objcm.g:264:4: block
            {
            pushFollow(FOLLOW_block_in_block_wrapper1205);
            block102=block();

            state._fsp--;

            stream_block.add(block102.getTree());

            // AST REWRITE
            // elements: block
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 264:10: -> ^( BLOCK block )
            {
                // Objcm.g:264:13: ^( BLOCK block )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(BLOCK, "BLOCK")
                , root_1);

                adaptor.addChild(root_1, stream_block.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_wrapper"


    public static class block_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block"
    // Objcm.g:266:1: block : L_FBR ( block_internal_full | block )* R_FBR ;
    public final ObjcmParser.block_return block() throws RecognitionException {
        ObjcmParser.block_return retval = new ObjcmParser.block_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_FBR103=null;
        Token R_FBR106=null;
        ObjcmParser.block_internal_full_return block_internal_full104 =null;

        ObjcmParser.block_return block105 =null;


        Object L_FBR103_tree=null;
        Object R_FBR106_tree=null;

        try {
            // Objcm.g:266:7: ( L_FBR ( block_internal_full | block )* R_FBR )
            // Objcm.g:267:3: L_FBR ( block_internal_full | block )* R_FBR
            {
            root_0 = (Object)adaptor.nil();


            L_FBR103=(Token)match(input,L_FBR,FOLLOW_L_FBR_in_block1227); 
            L_FBR103_tree = 
            (Object)adaptor.create(L_FBR103)
            ;
            adaptor.addChild(root_0, L_FBR103_tree);


            // Objcm.g:268:4: ( block_internal_full | block )*
            loop26:
            do {
                int alt26=3;
                int LA26_0 = input.LA(1);

                if ( (LA26_0==ASTERISK||LA26_0==BREAK_WORD||LA26_0==CONST_PREFIX||LA26_0==ENUM_PREFIX||LA26_0==ID||LA26_0==L_AND||LA26_0==L_BR||LA26_0==L_KBR||LA26_0==L_MINUS||LA26_0==L_MINUS_MINUS||LA26_0==L_NOT||LA26_0==L_PLUS||LA26_0==L_PLUS_PLUS||LA26_0==L_TILDA||LA26_0==NUMBER||LA26_0==SEMICOLON||(LA26_0 >= SINGLE_OP && LA26_0 <= SIZEOF)||LA26_0==STATIC_PREFIX||(LA26_0 >= STRING_LITERAL && LA26_0 <= STRING_LITERAL3)||LA26_0==STRUCT_PREFIX||LA26_0==VOID||LA26_0==166||LA26_0==173||LA26_0==175||(LA26_0 >= 177 && LA26_0 <= 179)||(LA26_0 >= 181 && LA26_0 <= 182)||LA26_0==185||(LA26_0 >= 187 && LA26_0 <= 193)||(LA26_0 >= 195 && LA26_0 <= 198)||(LA26_0 >= 201 && LA26_0 <= 202)) ) {
                    alt26=1;
                }
                else if ( (LA26_0==L_FBR) ) {
                    alt26=2;
                }


                switch (alt26) {
            	case 1 :
            	    // Objcm.g:268:5: block_internal_full
            	    {
            	    pushFollow(FOLLOW_block_internal_full_in_block1233);
            	    block_internal_full104=block_internal_full();

            	    state._fsp--;

            	    adaptor.addChild(root_0, block_internal_full104.getTree());

            	    }
            	    break;
            	case 2 :
            	    // Objcm.g:268:27: block
            	    {
            	    pushFollow(FOLLOW_block_in_block1237);
            	    block105=block();

            	    state._fsp--;

            	    adaptor.addChild(root_0, block105.getTree());

            	    }
            	    break;

            	default :
            	    break loop26;
                }
            } while (true);


            R_FBR106=(Token)match(input,R_FBR,FOLLOW_R_FBR_in_block1245); 
            R_FBR106_tree = 
            (Object)adaptor.create(R_FBR106)
            ;
            adaptor.addChild(root_0, R_FBR106_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block"


    public static class block_case_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_case"
    // Objcm.g:272:1: block_case : L_FBR ( block_internal_full | block )* ( default_stmt )? R_FBR ;
    public final ObjcmParser.block_case_return block_case() throws RecognitionException {
        ObjcmParser.block_case_return retval = new ObjcmParser.block_case_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_FBR107=null;
        Token R_FBR111=null;
        ObjcmParser.block_internal_full_return block_internal_full108 =null;

        ObjcmParser.block_return block109 =null;

        ObjcmParser.default_stmt_return default_stmt110 =null;


        Object L_FBR107_tree=null;
        Object R_FBR111_tree=null;

        try {
            // Objcm.g:273:2: ( L_FBR ( block_internal_full | block )* ( default_stmt )? R_FBR )
            // Objcm.g:274:3: L_FBR ( block_internal_full | block )* ( default_stmt )? R_FBR
            {
            root_0 = (Object)adaptor.nil();


            L_FBR107=(Token)match(input,L_FBR,FOLLOW_L_FBR_in_block_case1260); 
            L_FBR107_tree = 
            (Object)adaptor.create(L_FBR107)
            ;
            adaptor.addChild(root_0, L_FBR107_tree);


            // Objcm.g:275:4: ( block_internal_full | block )*
            loop27:
            do {
                int alt27=3;
                int LA27_0 = input.LA(1);

                if ( (LA27_0==ASTERISK||LA27_0==BREAK_WORD||LA27_0==CONST_PREFIX||LA27_0==ENUM_PREFIX||LA27_0==ID||LA27_0==L_AND||LA27_0==L_BR||LA27_0==L_KBR||LA27_0==L_MINUS||LA27_0==L_MINUS_MINUS||LA27_0==L_NOT||LA27_0==L_PLUS||LA27_0==L_PLUS_PLUS||LA27_0==L_TILDA||LA27_0==NUMBER||LA27_0==SEMICOLON||(LA27_0 >= SINGLE_OP && LA27_0 <= SIZEOF)||LA27_0==STATIC_PREFIX||(LA27_0 >= STRING_LITERAL && LA27_0 <= STRING_LITERAL3)||LA27_0==STRUCT_PREFIX||LA27_0==VOID||LA27_0==166||LA27_0==173||LA27_0==175||(LA27_0 >= 177 && LA27_0 <= 179)||(LA27_0 >= 181 && LA27_0 <= 182)||LA27_0==185||(LA27_0 >= 187 && LA27_0 <= 193)||(LA27_0 >= 195 && LA27_0 <= 198)||(LA27_0 >= 201 && LA27_0 <= 202)) ) {
                    alt27=1;
                }
                else if ( (LA27_0==L_FBR) ) {
                    alt27=2;
                }


                switch (alt27) {
            	case 1 :
            	    // Objcm.g:275:5: block_internal_full
            	    {
            	    pushFollow(FOLLOW_block_internal_full_in_block_case1266);
            	    block_internal_full108=block_internal_full();

            	    state._fsp--;

            	    adaptor.addChild(root_0, block_internal_full108.getTree());

            	    }
            	    break;
            	case 2 :
            	    // Objcm.g:275:27: block
            	    {
            	    pushFollow(FOLLOW_block_in_block_case1270);
            	    block109=block();

            	    state._fsp--;

            	    adaptor.addChild(root_0, block109.getTree());

            	    }
            	    break;

            	default :
            	    break loop27;
                }
            } while (true);


            // Objcm.g:276:4: ( default_stmt )?
            int alt28=2;
            int LA28_0 = input.LA(1);

            if ( (LA28_0==186) ) {
                alt28=1;
            }
            switch (alt28) {
                case 1 :
                    // Objcm.g:276:4: default_stmt
                    {
                    pushFollow(FOLLOW_default_stmt_in_block_case1279);
                    default_stmt110=default_stmt();

                    state._fsp--;

                    adaptor.addChild(root_0, default_stmt110.getTree());

                    }
                    break;

            }


            R_FBR111=(Token)match(input,R_FBR,FOLLOW_R_FBR_in_block_case1284); 
            R_FBR111_tree = 
            (Object)adaptor.create(R_FBR111)
            ;
            adaptor.addChild(root_0, R_FBR111_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_case"


    public static class block_internal_full_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_internal_full"
    // Objcm.g:280:1: block_internal_full : block_internal ;
    public final ObjcmParser.block_internal_full_return block_internal_full() throws RecognitionException {
        ObjcmParser.block_internal_full_return retval = new ObjcmParser.block_internal_full_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.block_internal_return block_internal112 =null;



        try {
            // Objcm.g:281:2: ( block_internal )
            // Objcm.g:281:4: block_internal
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_block_internal_in_block_internal_full1296);
            block_internal112=block_internal();

            state._fsp--;

            adaptor.addChild(root_0, block_internal112.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_internal_full"


    public static class block_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_internal"
    // Objcm.g:284:1: block_internal : ( try_stmt | throw_stmt_wrapper | static_start_wrapper SEMICOLON | do_stmt | const_expression SEMICOLON | variable_init_wrapper | if_stmt_wrapper | else_stmt | switch_stmt_wrapper | return_stmt | for_stmt_wrapper | while_stmt_wrapper | single_operators | struct_variable SEMICOLON | enum_variable SEMICOLON | typeof_started SEMICOLON | known_type_started SEMICOLON | SEMICOLON | goto_wrapper | 'extern' );
    public final ObjcmParser.block_internal_return block_internal() throws RecognitionException {
        ObjcmParser.block_internal_return retval = new ObjcmParser.block_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON116=null;
        Token SEMICOLON119=null;
        Token SEMICOLON129=null;
        Token SEMICOLON131=null;
        Token SEMICOLON133=null;
        Token SEMICOLON135=null;
        Token SEMICOLON136=null;
        Token string_literal138=null;
        ObjcmParser.try_stmt_return try_stmt113 =null;

        ObjcmParser.throw_stmt_wrapper_return throw_stmt_wrapper114 =null;

        ObjcmParser.static_start_wrapper_return static_start_wrapper115 =null;

        ObjcmParser.do_stmt_return do_stmt117 =null;

        ObjcmParser.const_expression_return const_expression118 =null;

        ObjcmParser.variable_init_wrapper_return variable_init_wrapper120 =null;

        ObjcmParser.if_stmt_wrapper_return if_stmt_wrapper121 =null;

        ObjcmParser.else_stmt_return else_stmt122 =null;

        ObjcmParser.switch_stmt_wrapper_return switch_stmt_wrapper123 =null;

        ObjcmParser.return_stmt_return return_stmt124 =null;

        ObjcmParser.for_stmt_wrapper_return for_stmt_wrapper125 =null;

        ObjcmParser.while_stmt_wrapper_return while_stmt_wrapper126 =null;

        ObjcmParser.single_operators_return single_operators127 =null;

        ObjcmParser.struct_variable_return struct_variable128 =null;

        ObjcmParser.enum_variable_return enum_variable130 =null;

        ObjcmParser.typeof_started_return typeof_started132 =null;

        ObjcmParser.known_type_started_return known_type_started134 =null;

        ObjcmParser.goto_wrapper_return goto_wrapper137 =null;


        Object SEMICOLON116_tree=null;
        Object SEMICOLON119_tree=null;
        Object SEMICOLON129_tree=null;
        Object SEMICOLON131_tree=null;
        Object SEMICOLON133_tree=null;
        Object SEMICOLON135_tree=null;
        Object SEMICOLON136_tree=null;
        Object string_literal138_tree=null;

        try {
            // Objcm.g:285:2: ( try_stmt | throw_stmt_wrapper | static_start_wrapper SEMICOLON | do_stmt | const_expression SEMICOLON | variable_init_wrapper | if_stmt_wrapper | else_stmt | switch_stmt_wrapper | return_stmt | for_stmt_wrapper | while_stmt_wrapper | single_operators | struct_variable SEMICOLON | enum_variable SEMICOLON | typeof_started SEMICOLON | known_type_started SEMICOLON | SEMICOLON | goto_wrapper | 'extern' )
            int alt29=20;
            alt29 = dfa29.predict(input);
            switch (alt29) {
                case 1 :
                    // Objcm.g:285:4: try_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_try_stmt_in_block_internal1307);
                    try_stmt113=try_stmt();

                    state._fsp--;

                    adaptor.addChild(root_0, try_stmt113.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:286:4: throw_stmt_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_throw_stmt_wrapper_in_block_internal1312);
                    throw_stmt_wrapper114=throw_stmt_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, throw_stmt_wrapper114.getTree());

                    }
                    break;
                case 3 :
                    // Objcm.g:287:4: static_start_wrapper SEMICOLON
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_static_start_wrapper_in_block_internal1317);
                    static_start_wrapper115=static_start_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, static_start_wrapper115.getTree());

                    SEMICOLON116=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_block_internal1319); 
                    SEMICOLON116_tree = 
                    (Object)adaptor.create(SEMICOLON116)
                    ;
                    adaptor.addChild(root_0, SEMICOLON116_tree);


                    }
                    break;
                case 4 :
                    // Objcm.g:288:4: do_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_do_stmt_in_block_internal1324);
                    do_stmt117=do_stmt();

                    state._fsp--;

                    adaptor.addChild(root_0, do_stmt117.getTree());

                    }
                    break;
                case 5 :
                    // Objcm.g:289:4: const_expression SEMICOLON
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_const_expression_in_block_internal1329);
                    const_expression118=const_expression();

                    state._fsp--;

                    adaptor.addChild(root_0, const_expression118.getTree());

                    SEMICOLON119=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_block_internal1331); 
                    SEMICOLON119_tree = 
                    (Object)adaptor.create(SEMICOLON119)
                    ;
                    adaptor.addChild(root_0, SEMICOLON119_tree);


                    }
                    break;
                case 6 :
                    // Objcm.g:290:4: variable_init_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_variable_init_wrapper_in_block_internal1336);
                    variable_init_wrapper120=variable_init_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, variable_init_wrapper120.getTree());

                    }
                    break;
                case 7 :
                    // Objcm.g:291:4: if_stmt_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_if_stmt_wrapper_in_block_internal1341);
                    if_stmt_wrapper121=if_stmt_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, if_stmt_wrapper121.getTree());

                    }
                    break;
                case 8 :
                    // Objcm.g:292:4: else_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_else_stmt_in_block_internal1346);
                    else_stmt122=else_stmt();

                    state._fsp--;

                    adaptor.addChild(root_0, else_stmt122.getTree());

                    }
                    break;
                case 9 :
                    // Objcm.g:293:4: switch_stmt_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_switch_stmt_wrapper_in_block_internal1351);
                    switch_stmt_wrapper123=switch_stmt_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, switch_stmt_wrapper123.getTree());

                    }
                    break;
                case 10 :
                    // Objcm.g:294:4: return_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_return_stmt_in_block_internal1356);
                    return_stmt124=return_stmt();

                    state._fsp--;

                    adaptor.addChild(root_0, return_stmt124.getTree());

                    }
                    break;
                case 11 :
                    // Objcm.g:295:4: for_stmt_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_for_stmt_wrapper_in_block_internal1361);
                    for_stmt_wrapper125=for_stmt_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, for_stmt_wrapper125.getTree());

                    }
                    break;
                case 12 :
                    // Objcm.g:296:4: while_stmt_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_while_stmt_wrapper_in_block_internal1366);
                    while_stmt_wrapper126=while_stmt_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, while_stmt_wrapper126.getTree());

                    }
                    break;
                case 13 :
                    // Objcm.g:297:4: single_operators
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_single_operators_in_block_internal1371);
                    single_operators127=single_operators();

                    state._fsp--;

                    adaptor.addChild(root_0, single_operators127.getTree());

                    }
                    break;
                case 14 :
                    // Objcm.g:298:4: struct_variable SEMICOLON
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_struct_variable_in_block_internal1376);
                    struct_variable128=struct_variable();

                    state._fsp--;

                    adaptor.addChild(root_0, struct_variable128.getTree());

                    SEMICOLON129=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_block_internal1378); 
                    SEMICOLON129_tree = 
                    (Object)adaptor.create(SEMICOLON129)
                    ;
                    adaptor.addChild(root_0, SEMICOLON129_tree);


                    }
                    break;
                case 15 :
                    // Objcm.g:299:4: enum_variable SEMICOLON
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_enum_variable_in_block_internal1383);
                    enum_variable130=enum_variable();

                    state._fsp--;

                    adaptor.addChild(root_0, enum_variable130.getTree());

                    SEMICOLON131=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_block_internal1385); 
                    SEMICOLON131_tree = 
                    (Object)adaptor.create(SEMICOLON131)
                    ;
                    adaptor.addChild(root_0, SEMICOLON131_tree);


                    }
                    break;
                case 16 :
                    // Objcm.g:300:4: typeof_started SEMICOLON
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_typeof_started_in_block_internal1390);
                    typeof_started132=typeof_started();

                    state._fsp--;

                    adaptor.addChild(root_0, typeof_started132.getTree());

                    SEMICOLON133=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_block_internal1392); 
                    SEMICOLON133_tree = 
                    (Object)adaptor.create(SEMICOLON133)
                    ;
                    adaptor.addChild(root_0, SEMICOLON133_tree);


                    }
                    break;
                case 17 :
                    // Objcm.g:301:4: known_type_started SEMICOLON
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_known_type_started_in_block_internal1397);
                    known_type_started134=known_type_started();

                    state._fsp--;

                    adaptor.addChild(root_0, known_type_started134.getTree());

                    SEMICOLON135=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_block_internal1399); 
                    SEMICOLON135_tree = 
                    (Object)adaptor.create(SEMICOLON135)
                    ;
                    adaptor.addChild(root_0, SEMICOLON135_tree);


                    }
                    break;
                case 18 :
                    // Objcm.g:302:4: SEMICOLON
                    {
                    root_0 = (Object)adaptor.nil();


                    SEMICOLON136=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_block_internal1404); 
                    SEMICOLON136_tree = 
                    (Object)adaptor.create(SEMICOLON136)
                    ;
                    adaptor.addChild(root_0, SEMICOLON136_tree);


                    }
                    break;
                case 19 :
                    // Objcm.g:303:4: goto_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_goto_wrapper_in_block_internal1410);
                    goto_wrapper137=goto_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, goto_wrapper137.getTree());

                    }
                    break;
                case 20 :
                    // Objcm.g:304:4: 'extern'
                    {
                    root_0 = (Object)adaptor.nil();


                    string_literal138=(Token)match(input,189,FOLLOW_189_in_block_internal1415); 
                    string_literal138_tree = 
                    (Object)adaptor.create(string_literal138)
                    ;
                    adaptor.addChild(root_0, string_literal138_tree);


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_internal"


    public static class goto_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "goto_wrapper"
    // Objcm.g:307:1: goto_wrapper : goto_operator -> ^( GOTO goto_operator ) ;
    public final ObjcmParser.goto_wrapper_return goto_wrapper() throws RecognitionException {
        ObjcmParser.goto_wrapper_return retval = new ObjcmParser.goto_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.goto_operator_return goto_operator139 =null;


        RewriteRuleSubtreeStream stream_goto_operator=new RewriteRuleSubtreeStream(adaptor,"rule goto_operator");
        try {
            // Objcm.g:308:2: ( goto_operator -> ^( GOTO goto_operator ) )
            // Objcm.g:308:4: goto_operator
            {
            pushFollow(FOLLOW_goto_operator_in_goto_wrapper1427);
            goto_operator139=goto_operator();

            state._fsp--;

            stream_goto_operator.add(goto_operator139.getTree());

            // AST REWRITE
            // elements: goto_operator
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 308:18: -> ^( GOTO goto_operator )
            {
                // Objcm.g:308:21: ^( GOTO goto_operator )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(GOTO, "GOTO")
                , root_1);

                adaptor.addChild(root_1, stream_goto_operator.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "goto_wrapper"


    public static class goto_operator_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "goto_operator"
    // Objcm.g:310:1: goto_operator : 'goto' ID SEMICOLON ;
    public final ObjcmParser.goto_operator_return goto_operator() throws RecognitionException {
        ObjcmParser.goto_operator_return retval = new ObjcmParser.goto_operator_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal140=null;
        Token ID141=null;
        Token SEMICOLON142=null;

        Object string_literal140_tree=null;
        Object ID141_tree=null;
        Object SEMICOLON142_tree=null;

        try {
            // Objcm.g:311:2: ( 'goto' ID SEMICOLON )
            // Objcm.g:311:4: 'goto' ID SEMICOLON
            {
            root_0 = (Object)adaptor.nil();


            string_literal140=(Token)match(input,191,FOLLOW_191_in_goto_operator1444); 
            string_literal140_tree = 
            (Object)adaptor.create(string_literal140)
            ;
            adaptor.addChild(root_0, string_literal140_tree);


            ID141=(Token)match(input,ID,FOLLOW_ID_in_goto_operator1446); 
            ID141_tree = 
            (Object)adaptor.create(ID141)
            ;
            adaptor.addChild(root_0, ID141_tree);


            SEMICOLON142=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_goto_operator1448); 
            SEMICOLON142_tree = 
            (Object)adaptor.create(SEMICOLON142)
            ;
            adaptor.addChild(root_0, SEMICOLON142_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "goto_operator"


    public static class variable_init_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "variable_init_wrapper"
    // Objcm.g:313:1: variable_init_wrapper : variable_init -> ^( VARIABLE_INIT variable_init ) ;
    public final ObjcmParser.variable_init_wrapper_return variable_init_wrapper() throws RecognitionException {
        ObjcmParser.variable_init_wrapper_return retval = new ObjcmParser.variable_init_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.variable_init_return variable_init143 =null;


        RewriteRuleSubtreeStream stream_variable_init=new RewriteRuleSubtreeStream(adaptor,"rule variable_init");
        try {
            // Objcm.g:314:2: ( variable_init -> ^( VARIABLE_INIT variable_init ) )
            // Objcm.g:314:4: variable_init
            {
            pushFollow(FOLLOW_variable_init_in_variable_init_wrapper1459);
            variable_init143=variable_init();

            state._fsp--;

            stream_variable_init.add(variable_init143.getTree());

            // AST REWRITE
            // elements: variable_init
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 314:18: -> ^( VARIABLE_INIT variable_init )
            {
                // Objcm.g:314:21: ^( VARIABLE_INIT variable_init )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(VARIABLE_INIT, "VARIABLE_INIT")
                , root_1);

                adaptor.addChild(root_1, stream_variable_init.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "variable_init_wrapper"


    public static class variable_init_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "variable_init"
    // Objcm.g:316:1: variable_init : full_expr_wrapper ( ( ( full_expr2 )? SEMICOLON ) | COLON ) ;
    public final ObjcmParser.variable_init_return variable_init() throws RecognitionException {
        ObjcmParser.variable_init_return retval = new ObjcmParser.variable_init_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON146=null;
        Token COLON147=null;
        ObjcmParser.full_expr_wrapper_return full_expr_wrapper144 =null;

        ObjcmParser.full_expr2_return full_expr2145 =null;


        Object SEMICOLON146_tree=null;
        Object COLON147_tree=null;

        try {
            // Objcm.g:317:2: ( full_expr_wrapper ( ( ( full_expr2 )? SEMICOLON ) | COLON ) )
            // Objcm.g:317:4: full_expr_wrapper ( ( ( full_expr2 )? SEMICOLON ) | COLON )
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_full_expr_wrapper_in_variable_init1477);
            full_expr_wrapper144=full_expr_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, full_expr_wrapper144.getTree());

            // Objcm.g:317:22: ( ( ( full_expr2 )? SEMICOLON ) | COLON )
            int alt31=2;
            int LA31_0 = input.LA(1);

            if ( (LA31_0==ID||LA31_0==SEMICOLON||LA31_0==VOID||LA31_0==182||LA31_0==185||LA31_0==193||LA31_0==196) ) {
                alt31=1;
            }
            else if ( (LA31_0==COLON) ) {
                alt31=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 31, 0, input);

                throw nvae;

            }
            switch (alt31) {
                case 1 :
                    // Objcm.g:317:23: ( ( full_expr2 )? SEMICOLON )
                    {
                    // Objcm.g:317:23: ( ( full_expr2 )? SEMICOLON )
                    // Objcm.g:317:24: ( full_expr2 )? SEMICOLON
                    {
                    // Objcm.g:317:24: ( full_expr2 )?
                    int alt30=2;
                    int LA30_0 = input.LA(1);

                    if ( (LA30_0==ID||LA30_0==VOID||LA30_0==182||LA30_0==185||LA30_0==193||LA30_0==196) ) {
                        alt30=1;
                    }
                    switch (alt30) {
                        case 1 :
                            // Objcm.g:317:24: full_expr2
                            {
                            pushFollow(FOLLOW_full_expr2_in_variable_init1481);
                            full_expr2145=full_expr2();

                            state._fsp--;

                            adaptor.addChild(root_0, full_expr2145.getTree());

                            }
                            break;

                    }


                    SEMICOLON146=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_variable_init1484); 
                    SEMICOLON146_tree = 
                    (Object)adaptor.create(SEMICOLON146)
                    ;
                    adaptor.addChild(root_0, SEMICOLON146_tree);


                    }


                    }
                    break;
                case 2 :
                    // Objcm.g:317:49: COLON
                    {
                    COLON147=(Token)match(input,COLON,FOLLOW_COLON_in_variable_init1489); 
                    COLON147_tree = 
                    (Object)adaptor.create(COLON147)
                    ;
                    adaptor.addChild(root_0, COLON147_tree);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "variable_init"


    public static class known_type_started_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "known_type_started"
    // Objcm.g:319:1: known_type_started : known_types ( ASTERISK )* full_expr2 ;
    public final ObjcmParser.known_type_started_return known_type_started() throws RecognitionException {
        ObjcmParser.known_type_started_return retval = new ObjcmParser.known_type_started_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ASTERISK149=null;
        ObjcmParser.known_types_return known_types148 =null;

        ObjcmParser.full_expr2_return full_expr2150 =null;


        Object ASTERISK149_tree=null;

        try {
            // Objcm.g:320:2: ( known_types ( ASTERISK )* full_expr2 )
            // Objcm.g:320:4: known_types ( ASTERISK )* full_expr2
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_known_types_in_known_type_started1501);
            known_types148=known_types();

            state._fsp--;

            adaptor.addChild(root_0, known_types148.getTree());

            // Objcm.g:320:16: ( ASTERISK )*
            loop32:
            do {
                int alt32=2;
                int LA32_0 = input.LA(1);

                if ( (LA32_0==ASTERISK) ) {
                    alt32=1;
                }


                switch (alt32) {
            	case 1 :
            	    // Objcm.g:320:16: ASTERISK
            	    {
            	    ASTERISK149=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_known_type_started1503); 
            	    ASTERISK149_tree = 
            	    (Object)adaptor.create(ASTERISK149)
            	    ;
            	    adaptor.addChild(root_0, ASTERISK149_tree);


            	    }
            	    break;

            	default :
            	    break loop32;
                }
            } while (true);


            pushFollow(FOLLOW_full_expr2_in_known_type_started1506);
            full_expr2150=full_expr2();

            state._fsp--;

            adaptor.addChild(root_0, full_expr2150.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "known_type_started"


    public static class typeof_started_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typeof_started"
    // Objcm.g:322:1: typeof_started : typeof full_expr_wrapper ;
    public final ObjcmParser.typeof_started_return typeof_started() throws RecognitionException {
        ObjcmParser.typeof_started_return retval = new ObjcmParser.typeof_started_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.typeof_return typeof151 =null;

        ObjcmParser.full_expr_wrapper_return full_expr_wrapper152 =null;



        try {
            // Objcm.g:323:2: ( typeof full_expr_wrapper )
            // Objcm.g:323:4: typeof full_expr_wrapper
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_typeof_in_typeof_started1518);
            typeof151=typeof();

            state._fsp--;

            adaptor.addChild(root_0, typeof151.getTree());

            pushFollow(FOLLOW_full_expr_wrapper_in_typeof_started1520);
            full_expr_wrapper152=full_expr_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, full_expr_wrapper152.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typeof_started"


    public static class struct_variable_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "struct_variable"
    // Objcm.g:326:1: struct_variable : STRUCT_PREFIX full_expr_wrapper ;
    public final ObjcmParser.struct_variable_return struct_variable() throws RecognitionException {
        ObjcmParser.struct_variable_return retval = new ObjcmParser.struct_variable_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STRUCT_PREFIX153=null;
        ObjcmParser.full_expr_wrapper_return full_expr_wrapper154 =null;


        Object STRUCT_PREFIX153_tree=null;

        try {
            // Objcm.g:327:2: ( STRUCT_PREFIX full_expr_wrapper )
            // Objcm.g:327:4: STRUCT_PREFIX full_expr_wrapper
            {
            root_0 = (Object)adaptor.nil();


            STRUCT_PREFIX153=(Token)match(input,STRUCT_PREFIX,FOLLOW_STRUCT_PREFIX_in_struct_variable1533); 
            STRUCT_PREFIX153_tree = 
            (Object)adaptor.create(STRUCT_PREFIX153)
            ;
            adaptor.addChild(root_0, STRUCT_PREFIX153_tree);


            pushFollow(FOLLOW_full_expr_wrapper_in_struct_variable1535);
            full_expr_wrapper154=full_expr_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, full_expr_wrapper154.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "struct_variable"


    public static class enum_variable_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "enum_variable"
    // Objcm.g:329:1: enum_variable : ENUM_PREFIX full_expr_wrapper ;
    public final ObjcmParser.enum_variable_return enum_variable() throws RecognitionException {
        ObjcmParser.enum_variable_return retval = new ObjcmParser.enum_variable_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ENUM_PREFIX155=null;
        ObjcmParser.full_expr_wrapper_return full_expr_wrapper156 =null;


        Object ENUM_PREFIX155_tree=null;

        try {
            // Objcm.g:330:2: ( ENUM_PREFIX full_expr_wrapper )
            // Objcm.g:330:4: ENUM_PREFIX full_expr_wrapper
            {
            root_0 = (Object)adaptor.nil();


            ENUM_PREFIX155=(Token)match(input,ENUM_PREFIX,FOLLOW_ENUM_PREFIX_in_enum_variable1544); 
            ENUM_PREFIX155_tree = 
            (Object)adaptor.create(ENUM_PREFIX155)
            ;
            adaptor.addChild(root_0, ENUM_PREFIX155_tree);


            pushFollow(FOLLOW_full_expr_wrapper_in_enum_variable1546);
            full_expr_wrapper156=full_expr_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, full_expr_wrapper156.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "enum_variable"


    public static class const_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "const_expression"
    // Objcm.g:332:1: const_expression : CONST_PREFIX full_expr_wrapper ;
    public final ObjcmParser.const_expression_return const_expression() throws RecognitionException {
        ObjcmParser.const_expression_return retval = new ObjcmParser.const_expression_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token CONST_PREFIX157=null;
        ObjcmParser.full_expr_wrapper_return full_expr_wrapper158 =null;


        Object CONST_PREFIX157_tree=null;

        try {
            // Objcm.g:333:2: ( CONST_PREFIX full_expr_wrapper )
            // Objcm.g:333:4: CONST_PREFIX full_expr_wrapper
            {
            root_0 = (Object)adaptor.nil();


            CONST_PREFIX157=(Token)match(input,CONST_PREFIX,FOLLOW_CONST_PREFIX_in_const_expression1557); 
            CONST_PREFIX157_tree = 
            (Object)adaptor.create(CONST_PREFIX157)
            ;
            adaptor.addChild(root_0, CONST_PREFIX157_tree);


            pushFollow(FOLLOW_full_expr_wrapper_in_const_expression1559);
            full_expr_wrapper158=full_expr_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, full_expr_wrapper158.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "const_expression"


    public static class throw_stmt_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "throw_stmt_wrapper"
    // Objcm.g:335:1: throw_stmt_wrapper : throw_stmt -> ^( THROW_STMT throw_stmt ) ;
    public final ObjcmParser.throw_stmt_wrapper_return throw_stmt_wrapper() throws RecognitionException {
        ObjcmParser.throw_stmt_wrapper_return retval = new ObjcmParser.throw_stmt_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.throw_stmt_return throw_stmt159 =null;


        RewriteRuleSubtreeStream stream_throw_stmt=new RewriteRuleSubtreeStream(adaptor,"rule throw_stmt");
        try {
            // Objcm.g:336:2: ( throw_stmt -> ^( THROW_STMT throw_stmt ) )
            // Objcm.g:336:4: throw_stmt
            {
            pushFollow(FOLLOW_throw_stmt_in_throw_stmt_wrapper1568);
            throw_stmt159=throw_stmt();

            state._fsp--;

            stream_throw_stmt.add(throw_stmt159.getTree());

            // AST REWRITE
            // elements: throw_stmt
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 336:15: -> ^( THROW_STMT throw_stmt )
            {
                // Objcm.g:336:18: ^( THROW_STMT throw_stmt )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(THROW_STMT, "THROW_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_throw_stmt.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "throw_stmt_wrapper"


    public static class throw_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "throw_stmt"
    // Objcm.g:338:1: throw_stmt : '@throw' SEMICOLON ;
    public final ObjcmParser.throw_stmt_return throw_stmt() throws RecognitionException {
        ObjcmParser.throw_stmt_return retval = new ObjcmParser.throw_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal160=null;
        Token SEMICOLON161=null;

        Object string_literal160_tree=null;
        Object SEMICOLON161_tree=null;

        try {
            // Objcm.g:339:2: ( '@throw' SEMICOLON )
            // Objcm.g:339:4: '@throw' SEMICOLON
            {
            root_0 = (Object)adaptor.nil();


            string_literal160=(Token)match(input,177,FOLLOW_177_in_throw_stmt1585); 
            string_literal160_tree = 
            (Object)adaptor.create(string_literal160)
            ;
            adaptor.addChild(root_0, string_literal160_tree);


            SEMICOLON161=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_throw_stmt1588); 
            SEMICOLON161_tree = 
            (Object)adaptor.create(SEMICOLON161)
            ;
            adaptor.addChild(root_0, SEMICOLON161_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "throw_stmt"


    public static class try_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "try_stmt"
    // Objcm.g:342:1: try_stmt : '@try' block ( catch_stmt )* ( '@finally' block )? ;
    public final ObjcmParser.try_stmt_return try_stmt() throws RecognitionException {
        ObjcmParser.try_stmt_return retval = new ObjcmParser.try_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal162=null;
        Token string_literal165=null;
        ObjcmParser.block_return block163 =null;

        ObjcmParser.catch_stmt_return catch_stmt164 =null;

        ObjcmParser.block_return block166 =null;


        Object string_literal162_tree=null;
        Object string_literal165_tree=null;

        try {
            // Objcm.g:342:9: ( '@try' block ( catch_stmt )* ( '@finally' block )? )
            // Objcm.g:342:11: '@try' block ( catch_stmt )* ( '@finally' block )?
            {
            root_0 = (Object)adaptor.nil();


            string_literal162=(Token)match(input,178,FOLLOW_178_in_try_stmt1599); 
            string_literal162_tree = 
            (Object)adaptor.create(string_literal162)
            ;
            adaptor.addChild(root_0, string_literal162_tree);


            pushFollow(FOLLOW_block_in_try_stmt1602);
            block163=block();

            state._fsp--;

            adaptor.addChild(root_0, block163.getTree());

            // Objcm.g:342:26: ( catch_stmt )*
            loop33:
            do {
                int alt33=2;
                int LA33_0 = input.LA(1);

                if ( (LA33_0==165) ) {
                    alt33=1;
                }


                switch (alt33) {
            	case 1 :
            	    // Objcm.g:342:26: catch_stmt
            	    {
            	    pushFollow(FOLLOW_catch_stmt_in_try_stmt1605);
            	    catch_stmt164=catch_stmt();

            	    state._fsp--;

            	    adaptor.addChild(root_0, catch_stmt164.getTree());

            	    }
            	    break;

            	default :
            	    break loop33;
                }
            } while (true);


            // Objcm.g:342:38: ( '@finally' block )?
            int alt34=2;
            int LA34_0 = input.LA(1);

            if ( (LA34_0==168) ) {
                alt34=1;
            }
            switch (alt34) {
                case 1 :
                    // Objcm.g:342:39: '@finally' block
                    {
                    string_literal165=(Token)match(input,168,FOLLOW_168_in_try_stmt1609); 
                    string_literal165_tree = 
                    (Object)adaptor.create(string_literal165)
                    ;
                    adaptor.addChild(root_0, string_literal165_tree);


                    pushFollow(FOLLOW_block_in_try_stmt1612);
                    block166=block();

                    state._fsp--;

                    adaptor.addChild(root_0, block166.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "try_stmt"


    public static class catch_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "catch_stmt"
    // Objcm.g:345:1: catch_stmt : '@catch' L_BR ID ( ASTERISK )* ID R_BR block ;
    public final ObjcmParser.catch_stmt_return catch_stmt() throws RecognitionException {
        ObjcmParser.catch_stmt_return retval = new ObjcmParser.catch_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal167=null;
        Token L_BR168=null;
        Token ID169=null;
        Token ASTERISK170=null;
        Token ID171=null;
        Token R_BR172=null;
        ObjcmParser.block_return block173 =null;


        Object string_literal167_tree=null;
        Object L_BR168_tree=null;
        Object ID169_tree=null;
        Object ASTERISK170_tree=null;
        Object ID171_tree=null;
        Object R_BR172_tree=null;

        try {
            // Objcm.g:346:2: ( '@catch' L_BR ID ( ASTERISK )* ID R_BR block )
            // Objcm.g:346:4: '@catch' L_BR ID ( ASTERISK )* ID R_BR block
            {
            root_0 = (Object)adaptor.nil();


            string_literal167=(Token)match(input,165,FOLLOW_165_in_catch_stmt1626); 
            string_literal167_tree = 
            (Object)adaptor.create(string_literal167)
            ;
            adaptor.addChild(root_0, string_literal167_tree);


            L_BR168=(Token)match(input,L_BR,FOLLOW_L_BR_in_catch_stmt1629); 
            L_BR168_tree = 
            (Object)adaptor.create(L_BR168)
            ;
            adaptor.addChild(root_0, L_BR168_tree);


            ID169=(Token)match(input,ID,FOLLOW_ID_in_catch_stmt1632); 
            ID169_tree = 
            (Object)adaptor.create(ID169)
            ;
            adaptor.addChild(root_0, ID169_tree);


            // Objcm.g:346:24: ( ASTERISK )*
            loop35:
            do {
                int alt35=2;
                int LA35_0 = input.LA(1);

                if ( (LA35_0==ASTERISK) ) {
                    alt35=1;
                }


                switch (alt35) {
            	case 1 :
            	    // Objcm.g:346:24: ASTERISK
            	    {
            	    ASTERISK170=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_catch_stmt1635); 
            	    ASTERISK170_tree = 
            	    (Object)adaptor.create(ASTERISK170)
            	    ;
            	    adaptor.addChild(root_0, ASTERISK170_tree);


            	    }
            	    break;

            	default :
            	    break loop35;
                }
            } while (true);


            ID171=(Token)match(input,ID,FOLLOW_ID_in_catch_stmt1638); 
            ID171_tree = 
            (Object)adaptor.create(ID171)
            ;
            adaptor.addChild(root_0, ID171_tree);


            R_BR172=(Token)match(input,R_BR,FOLLOW_R_BR_in_catch_stmt1641); 
            R_BR172_tree = 
            (Object)adaptor.create(R_BR172)
            ;
            adaptor.addChild(root_0, R_BR172_tree);


            pushFollow(FOLLOW_block_in_catch_stmt1644);
            block173=block();

            state._fsp--;

            adaptor.addChild(root_0, block173.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "catch_stmt"


    public static class switch_stmt_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "switch_stmt_wrapper"
    // Objcm.g:349:1: switch_stmt_wrapper : switch_stmt -> ^( SWITCH switch_stmt ) ;
    public final ObjcmParser.switch_stmt_wrapper_return switch_stmt_wrapper() throws RecognitionException {
        ObjcmParser.switch_stmt_wrapper_return retval = new ObjcmParser.switch_stmt_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.switch_stmt_return switch_stmt174 =null;


        RewriteRuleSubtreeStream stream_switch_stmt=new RewriteRuleSubtreeStream(adaptor,"rule switch_stmt");
        try {
            // Objcm.g:350:2: ( switch_stmt -> ^( SWITCH switch_stmt ) )
            // Objcm.g:350:4: switch_stmt
            {
            pushFollow(FOLLOW_switch_stmt_in_switch_stmt_wrapper1657);
            switch_stmt174=switch_stmt();

            state._fsp--;

            stream_switch_stmt.add(switch_stmt174.getTree());

            // AST REWRITE
            // elements: switch_stmt
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 350:16: -> ^( SWITCH switch_stmt )
            {
                // Objcm.g:350:19: ^( SWITCH switch_stmt )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SWITCH, "SWITCH")
                , root_1);

                adaptor.addChild(root_1, stream_switch_stmt.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "switch_stmt_wrapper"


    public static class switch_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "switch_stmt"
    // Objcm.g:352:1: switch_stmt : 'switch' L_BR switch_expr R_BR switch_body_wrapper ;
    public final ObjcmParser.switch_stmt_return switch_stmt() throws RecognitionException {
        ObjcmParser.switch_stmt_return retval = new ObjcmParser.switch_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal175=null;
        Token L_BR176=null;
        Token R_BR178=null;
        ObjcmParser.switch_expr_return switch_expr177 =null;

        ObjcmParser.switch_body_wrapper_return switch_body_wrapper179 =null;


        Object string_literal175_tree=null;
        Object L_BR176_tree=null;
        Object R_BR178_tree=null;

        try {
            // Objcm.g:353:2: ( 'switch' L_BR switch_expr R_BR switch_body_wrapper )
            // Objcm.g:353:4: 'switch' L_BR switch_expr R_BR switch_body_wrapper
            {
            root_0 = (Object)adaptor.nil();


            string_literal175=(Token)match(input,198,FOLLOW_198_in_switch_stmt1674); 
            string_literal175_tree = 
            (Object)adaptor.create(string_literal175)
            ;
            adaptor.addChild(root_0, string_literal175_tree);


            L_BR176=(Token)match(input,L_BR,FOLLOW_L_BR_in_switch_stmt1677); 
            L_BR176_tree = 
            (Object)adaptor.create(L_BR176)
            ;
            adaptor.addChild(root_0, L_BR176_tree);


            pushFollow(FOLLOW_switch_expr_in_switch_stmt1680);
            switch_expr177=switch_expr();

            state._fsp--;

            adaptor.addChild(root_0, switch_expr177.getTree());

            R_BR178=(Token)match(input,R_BR,FOLLOW_R_BR_in_switch_stmt1682); 
            R_BR178_tree = 
            (Object)adaptor.create(R_BR178)
            ;
            adaptor.addChild(root_0, R_BR178_tree);


            pushFollow(FOLLOW_switch_body_wrapper_in_switch_stmt1688);
            switch_body_wrapper179=switch_body_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, switch_body_wrapper179.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "switch_stmt"


    public static class switch_body_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "switch_body_wrapper"
    // Objcm.g:357:1: switch_body_wrapper : L_FBR switch_body R_FBR -> ^( SWITCH_BODY switch_body ) ;
    public final ObjcmParser.switch_body_wrapper_return switch_body_wrapper() throws RecognitionException {
        ObjcmParser.switch_body_wrapper_return retval = new ObjcmParser.switch_body_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_FBR180=null;
        Token R_FBR182=null;
        ObjcmParser.switch_body_return switch_body181 =null;


        Object L_FBR180_tree=null;
        Object R_FBR182_tree=null;
        RewriteRuleTokenStream stream_R_FBR=new RewriteRuleTokenStream(adaptor,"token R_FBR");
        RewriteRuleTokenStream stream_L_FBR=new RewriteRuleTokenStream(adaptor,"token L_FBR");
        RewriteRuleSubtreeStream stream_switch_body=new RewriteRuleSubtreeStream(adaptor,"rule switch_body");
        try {
            // Objcm.g:358:2: ( L_FBR switch_body R_FBR -> ^( SWITCH_BODY switch_body ) )
            // Objcm.g:358:4: L_FBR switch_body R_FBR
            {
            L_FBR180=(Token)match(input,L_FBR,FOLLOW_L_FBR_in_switch_body_wrapper1701);  
            stream_L_FBR.add(L_FBR180);


            pushFollow(FOLLOW_switch_body_in_switch_body_wrapper1703);
            switch_body181=switch_body();

            state._fsp--;

            stream_switch_body.add(switch_body181.getTree());

            R_FBR182=(Token)match(input,R_FBR,FOLLOW_R_FBR_in_switch_body_wrapper1705);  
            stream_R_FBR.add(R_FBR182);


            // AST REWRITE
            // elements: switch_body
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 358:28: -> ^( SWITCH_BODY switch_body )
            {
                // Objcm.g:358:31: ^( SWITCH_BODY switch_body )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SWITCH_BODY, "SWITCH_BODY")
                , root_1);

                adaptor.addChild(root_1, stream_switch_body.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "switch_body_wrapper"


    public static class switch_body_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "switch_body"
    // Objcm.g:360:1: switch_body : ( block_internal_full )* ( switch_internal )* ;
    public final ObjcmParser.switch_body_return switch_body() throws RecognitionException {
        ObjcmParser.switch_body_return retval = new ObjcmParser.switch_body_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.block_internal_full_return block_internal_full183 =null;

        ObjcmParser.switch_internal_return switch_internal184 =null;



        try {
            // Objcm.g:361:2: ( ( block_internal_full )* ( switch_internal )* )
            // Objcm.g:361:4: ( block_internal_full )* ( switch_internal )*
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:361:4: ( block_internal_full )*
            loop36:
            do {
                int alt36=2;
                int LA36_0 = input.LA(1);

                if ( (LA36_0==ASTERISK||LA36_0==BREAK_WORD||LA36_0==CONST_PREFIX||LA36_0==ENUM_PREFIX||LA36_0==ID||LA36_0==L_AND||LA36_0==L_BR||LA36_0==L_KBR||LA36_0==L_MINUS||LA36_0==L_MINUS_MINUS||LA36_0==L_NOT||LA36_0==L_PLUS||LA36_0==L_PLUS_PLUS||LA36_0==L_TILDA||LA36_0==NUMBER||LA36_0==SEMICOLON||(LA36_0 >= SINGLE_OP && LA36_0 <= SIZEOF)||LA36_0==STATIC_PREFIX||(LA36_0 >= STRING_LITERAL && LA36_0 <= STRING_LITERAL3)||LA36_0==STRUCT_PREFIX||LA36_0==VOID||LA36_0==166||LA36_0==173||LA36_0==175||(LA36_0 >= 177 && LA36_0 <= 179)||(LA36_0 >= 181 && LA36_0 <= 182)||LA36_0==185||(LA36_0 >= 187 && LA36_0 <= 193)||(LA36_0 >= 195 && LA36_0 <= 198)||(LA36_0 >= 201 && LA36_0 <= 202)) ) {
                    alt36=1;
                }


                switch (alt36) {
            	case 1 :
            	    // Objcm.g:361:4: block_internal_full
            	    {
            	    pushFollow(FOLLOW_block_internal_full_in_switch_body1724);
            	    block_internal_full183=block_internal_full();

            	    state._fsp--;

            	    adaptor.addChild(root_0, block_internal_full183.getTree());

            	    }
            	    break;

            	default :
            	    break loop36;
                }
            } while (true);


            // Objcm.g:362:3: ( switch_internal )*
            loop37:
            do {
                int alt37=2;
                int LA37_0 = input.LA(1);

                if ( (LA37_0==183||LA37_0==186) ) {
                    alt37=1;
                }


                switch (alt37) {
            	case 1 :
            	    // Objcm.g:362:3: switch_internal
            	    {
            	    pushFollow(FOLLOW_switch_internal_in_switch_body1729);
            	    switch_internal184=switch_internal();

            	    state._fsp--;

            	    adaptor.addChild(root_0, switch_internal184.getTree());

            	    }
            	    break;

            	default :
            	    break loop37;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "switch_body"


    public static class switch_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "switch_expr"
    // Objcm.g:365:1: switch_expr : classical_expr_wrp -> ^( SWITCH_EXPRESSION classical_expr_wrp ) ;
    public final ObjcmParser.switch_expr_return switch_expr() throws RecognitionException {
        ObjcmParser.switch_expr_return retval = new ObjcmParser.switch_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp185 =null;


        RewriteRuleSubtreeStream stream_classical_expr_wrp=new RewriteRuleSubtreeStream(adaptor,"rule classical_expr_wrp");
        try {
            // Objcm.g:366:2: ( classical_expr_wrp -> ^( SWITCH_EXPRESSION classical_expr_wrp ) )
            // Objcm.g:366:4: classical_expr_wrp
            {
            pushFollow(FOLLOW_classical_expr_wrp_in_switch_expr1742);
            classical_expr_wrp185=classical_expr_wrp();

            state._fsp--;

            stream_classical_expr_wrp.add(classical_expr_wrp185.getTree());

            // AST REWRITE
            // elements: classical_expr_wrp
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 366:23: -> ^( SWITCH_EXPRESSION classical_expr_wrp )
            {
                // Objcm.g:366:26: ^( SWITCH_EXPRESSION classical_expr_wrp )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SWITCH_EXPRESSION, "SWITCH_EXPRESSION")
                , root_1);

                adaptor.addChild(root_1, stream_classical_expr_wrp.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "switch_expr"


    public static class switch_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "switch_internal"
    // Objcm.g:368:1: switch_internal : ( case_stmt_wrapper | default_stmt_wrapper );
    public final ObjcmParser.switch_internal_return switch_internal() throws RecognitionException {
        ObjcmParser.switch_internal_return retval = new ObjcmParser.switch_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.case_stmt_wrapper_return case_stmt_wrapper186 =null;

        ObjcmParser.default_stmt_wrapper_return default_stmt_wrapper187 =null;



        try {
            // Objcm.g:369:2: ( case_stmt_wrapper | default_stmt_wrapper )
            int alt38=2;
            int LA38_0 = input.LA(1);

            if ( (LA38_0==183) ) {
                alt38=1;
            }
            else if ( (LA38_0==186) ) {
                alt38=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 38, 0, input);

                throw nvae;

            }
            switch (alt38) {
                case 1 :
                    // Objcm.g:369:4: case_stmt_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_case_stmt_wrapper_in_switch_internal1759);
                    case_stmt_wrapper186=case_stmt_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, case_stmt_wrapper186.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:370:5: default_stmt_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_default_stmt_wrapper_in_switch_internal1765);
                    default_stmt_wrapper187=default_stmt_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, default_stmt_wrapper187.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "switch_internal"


    public static class case_stmt_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "case_stmt_wrapper"
    // Objcm.g:372:1: case_stmt_wrapper : case_stmt -> ^( CASE_STMT case_stmt ) ;
    public final ObjcmParser.case_stmt_wrapper_return case_stmt_wrapper() throws RecognitionException {
        ObjcmParser.case_stmt_wrapper_return retval = new ObjcmParser.case_stmt_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.case_stmt_return case_stmt188 =null;


        RewriteRuleSubtreeStream stream_case_stmt=new RewriteRuleSubtreeStream(adaptor,"rule case_stmt");
        try {
            // Objcm.g:373:2: ( case_stmt -> ^( CASE_STMT case_stmt ) )
            // Objcm.g:373:4: case_stmt
            {
            pushFollow(FOLLOW_case_stmt_in_case_stmt_wrapper1774);
            case_stmt188=case_stmt();

            state._fsp--;

            stream_case_stmt.add(case_stmt188.getTree());

            // AST REWRITE
            // elements: case_stmt
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 373:14: -> ^( CASE_STMT case_stmt )
            {
                // Objcm.g:373:17: ^( CASE_STMT case_stmt )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CASE_STMT, "CASE_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_case_stmt.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "case_stmt_wrapper"


    public static class case_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "case_stmt"
    // Objcm.g:375:1: case_stmt : 'case' case_expr_wrapper COLON ( case_body_wrapper )? ;
    public final ObjcmParser.case_stmt_return case_stmt() throws RecognitionException {
        ObjcmParser.case_stmt_return retval = new ObjcmParser.case_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal189=null;
        Token COLON191=null;
        ObjcmParser.case_expr_wrapper_return case_expr_wrapper190 =null;

        ObjcmParser.case_body_wrapper_return case_body_wrapper192 =null;


        Object string_literal189_tree=null;
        Object COLON191_tree=null;

        try {
            // Objcm.g:376:2: ( 'case' case_expr_wrapper COLON ( case_body_wrapper )? )
            // Objcm.g:376:4: 'case' case_expr_wrapper COLON ( case_body_wrapper )?
            {
            root_0 = (Object)adaptor.nil();


            string_literal189=(Token)match(input,183,FOLLOW_183_in_case_stmt1791); 
            string_literal189_tree = 
            (Object)adaptor.create(string_literal189)
            ;
            adaptor.addChild(root_0, string_literal189_tree);


            pushFollow(FOLLOW_case_expr_wrapper_in_case_stmt1794);
            case_expr_wrapper190=case_expr_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, case_expr_wrapper190.getTree());

            COLON191=(Token)match(input,COLON,FOLLOW_COLON_in_case_stmt1797); 
            COLON191_tree = 
            (Object)adaptor.create(COLON191)
            ;
            adaptor.addChild(root_0, COLON191_tree);


            // Objcm.g:377:3: ( case_body_wrapper )?
            int alt39=2;
            int LA39_0 = input.LA(1);

            if ( (LA39_0==ASTERISK||LA39_0==BREAK_WORD||LA39_0==CONST_PREFIX||LA39_0==ENUM_PREFIX||LA39_0==ID||LA39_0==L_AND||LA39_0==L_BR||(LA39_0 >= L_FBR && LA39_0 <= L_KBR)||LA39_0==L_MINUS||LA39_0==L_MINUS_MINUS||LA39_0==L_NOT||LA39_0==L_PLUS||LA39_0==L_PLUS_PLUS||LA39_0==L_TILDA||LA39_0==NUMBER||LA39_0==SEMICOLON||(LA39_0 >= SINGLE_OP && LA39_0 <= SIZEOF)||LA39_0==STATIC_PREFIX||(LA39_0 >= STRING_LITERAL && LA39_0 <= STRING_LITERAL3)||LA39_0==STRUCT_PREFIX||LA39_0==VOID||LA39_0==166||LA39_0==173||LA39_0==175||(LA39_0 >= 177 && LA39_0 <= 179)||(LA39_0 >= 181 && LA39_0 <= 182)||LA39_0==185||(LA39_0 >= 187 && LA39_0 <= 193)||(LA39_0 >= 195 && LA39_0 <= 198)||(LA39_0 >= 201 && LA39_0 <= 202)) ) {
                alt39=1;
            }
            switch (alt39) {
                case 1 :
                    // Objcm.g:377:3: case_body_wrapper
                    {
                    pushFollow(FOLLOW_case_body_wrapper_in_case_stmt1802);
                    case_body_wrapper192=case_body_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, case_body_wrapper192.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "case_stmt"


    public static class case_body_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "case_body_wrapper"
    // Objcm.g:380:1: case_body_wrapper : case_body -> ^( CASE_BODY case_body ) ;
    public final ObjcmParser.case_body_wrapper_return case_body_wrapper() throws RecognitionException {
        ObjcmParser.case_body_wrapper_return retval = new ObjcmParser.case_body_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.case_body_return case_body193 =null;


        RewriteRuleSubtreeStream stream_case_body=new RewriteRuleSubtreeStream(adaptor,"rule case_body");
        try {
            // Objcm.g:381:2: ( case_body -> ^( CASE_BODY case_body ) )
            // Objcm.g:381:4: case_body
            {
            pushFollow(FOLLOW_case_body_in_case_body_wrapper1816);
            case_body193=case_body();

            state._fsp--;

            stream_case_body.add(case_body193.getTree());

            // AST REWRITE
            // elements: case_body
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 381:14: -> ^( CASE_BODY case_body )
            {
                // Objcm.g:381:17: ^( CASE_BODY case_body )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CASE_BODY, "CASE_BODY")
                , root_1);

                adaptor.addChild(root_1, stream_case_body.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "case_body_wrapper"


    public static class case_body_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "case_body"
    // Objcm.g:383:1: case_body : ( block_break | ( block_internal_full )+ );
    public final ObjcmParser.case_body_return case_body() throws RecognitionException {
        ObjcmParser.case_body_return retval = new ObjcmParser.case_body_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.block_break_return block_break194 =null;

        ObjcmParser.block_internal_full_return block_internal_full195 =null;



        try {
            // Objcm.g:384:2: ( block_break | ( block_internal_full )+ )
            int alt41=2;
            int LA41_0 = input.LA(1);

            if ( (LA41_0==L_FBR) ) {
                alt41=1;
            }
            else if ( (LA41_0==ASTERISK||LA41_0==BREAK_WORD||LA41_0==CONST_PREFIX||LA41_0==ENUM_PREFIX||LA41_0==ID||LA41_0==L_AND||LA41_0==L_BR||LA41_0==L_KBR||LA41_0==L_MINUS||LA41_0==L_MINUS_MINUS||LA41_0==L_NOT||LA41_0==L_PLUS||LA41_0==L_PLUS_PLUS||LA41_0==L_TILDA||LA41_0==NUMBER||LA41_0==SEMICOLON||(LA41_0 >= SINGLE_OP && LA41_0 <= SIZEOF)||LA41_0==STATIC_PREFIX||(LA41_0 >= STRING_LITERAL && LA41_0 <= STRING_LITERAL3)||LA41_0==STRUCT_PREFIX||LA41_0==VOID||LA41_0==166||LA41_0==173||LA41_0==175||(LA41_0 >= 177 && LA41_0 <= 179)||(LA41_0 >= 181 && LA41_0 <= 182)||LA41_0==185||(LA41_0 >= 187 && LA41_0 <= 193)||(LA41_0 >= 195 && LA41_0 <= 198)||(LA41_0 >= 201 && LA41_0 <= 202)) ) {
                alt41=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 41, 0, input);

                throw nvae;

            }
            switch (alt41) {
                case 1 :
                    // Objcm.g:384:4: block_break
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_block_break_in_case_body1835);
                    block_break194=block_break();

                    state._fsp--;

                    adaptor.addChild(root_0, block_break194.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:385:5: ( block_internal_full )+
                    {
                    root_0 = (Object)adaptor.nil();


                    // Objcm.g:385:5: ( block_internal_full )+
                    int cnt40=0;
                    loop40:
                    do {
                        int alt40=2;
                        int LA40_0 = input.LA(1);

                        if ( (LA40_0==ASTERISK||LA40_0==BREAK_WORD||LA40_0==CONST_PREFIX||LA40_0==ENUM_PREFIX||LA40_0==ID||LA40_0==L_AND||LA40_0==L_BR||LA40_0==L_KBR||LA40_0==L_MINUS||LA40_0==L_MINUS_MINUS||LA40_0==L_NOT||LA40_0==L_PLUS||LA40_0==L_PLUS_PLUS||LA40_0==L_TILDA||LA40_0==NUMBER||LA40_0==SEMICOLON||(LA40_0 >= SINGLE_OP && LA40_0 <= SIZEOF)||LA40_0==STATIC_PREFIX||(LA40_0 >= STRING_LITERAL && LA40_0 <= STRING_LITERAL3)||LA40_0==STRUCT_PREFIX||LA40_0==VOID||LA40_0==166||LA40_0==173||LA40_0==175||(LA40_0 >= 177 && LA40_0 <= 179)||(LA40_0 >= 181 && LA40_0 <= 182)||LA40_0==185||(LA40_0 >= 187 && LA40_0 <= 193)||(LA40_0 >= 195 && LA40_0 <= 198)||(LA40_0 >= 201 && LA40_0 <= 202)) ) {
                            alt40=1;
                        }


                        switch (alt40) {
                    	case 1 :
                    	    // Objcm.g:385:5: block_internal_full
                    	    {
                    	    pushFollow(FOLLOW_block_internal_full_in_case_body1842);
                    	    block_internal_full195=block_internal_full();

                    	    state._fsp--;

                    	    adaptor.addChild(root_0, block_internal_full195.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt40 >= 1 ) break loop40;
                                EarlyExitException eee =
                                    new EarlyExitException(40, input);
                                throw eee;
                        }
                        cnt40++;
                    } while (true);


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "case_body"


    public static class case_expr_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "case_expr_wrapper"
    // Objcm.g:388:1: case_expr_wrapper : case_expr -> ^( CASE_EXPR case_expr ) ;
    public final ObjcmParser.case_expr_wrapper_return case_expr_wrapper() throws RecognitionException {
        ObjcmParser.case_expr_wrapper_return retval = new ObjcmParser.case_expr_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.case_expr_return case_expr196 =null;


        RewriteRuleSubtreeStream stream_case_expr=new RewriteRuleSubtreeStream(adaptor,"rule case_expr");
        try {
            // Objcm.g:389:2: ( case_expr -> ^( CASE_EXPR case_expr ) )
            // Objcm.g:389:4: case_expr
            {
            pushFollow(FOLLOW_case_expr_in_case_expr_wrapper1858);
            case_expr196=case_expr();

            state._fsp--;

            stream_case_expr.add(case_expr196.getTree());

            // AST REWRITE
            // elements: case_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 389:14: -> ^( CASE_EXPR case_expr )
            {
                // Objcm.g:389:17: ^( CASE_EXPR case_expr )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CASE_EXPR, "CASE_EXPR")
                , root_1);

                adaptor.addChild(root_1, stream_case_expr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "case_expr_wrapper"


    public static class case_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "case_expr"
    // Objcm.g:391:1: case_expr : ( const_expr | ID );
    public final ObjcmParser.case_expr_return case_expr() throws RecognitionException {
        ObjcmParser.case_expr_return retval = new ObjcmParser.case_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID198=null;
        ObjcmParser.const_expr_return const_expr197 =null;


        Object ID198_tree=null;

        try {
            // Objcm.g:392:2: ( const_expr | ID )
            int alt42=2;
            int LA42_0 = input.LA(1);

            if ( (LA42_0==NUMBER||(LA42_0 >= STRING_LITERAL && LA42_0 <= STRING_LITERAL3)||LA42_0==179||LA42_0==195) ) {
                alt42=1;
            }
            else if ( (LA42_0==ID) ) {
                alt42=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 42, 0, input);

                throw nvae;

            }
            switch (alt42) {
                case 1 :
                    // Objcm.g:392:4: const_expr
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_const_expr_in_case_expr1880);
                    const_expr197=const_expr();

                    state._fsp--;

                    adaptor.addChild(root_0, const_expr197.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:393:5: ID
                    {
                    root_0 = (Object)adaptor.nil();


                    ID198=(Token)match(input,ID,FOLLOW_ID_in_case_expr1887); 
                    ID198_tree = 
                    (Object)adaptor.create(ID198)
                    ;
                    adaptor.addChild(root_0, ID198_tree);


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "case_expr"


    public static class block_break_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_break"
    // Objcm.g:395:1: block_break : block_case ( single_operators )? ;
    public final ObjcmParser.block_break_return block_break() throws RecognitionException {
        ObjcmParser.block_break_return retval = new ObjcmParser.block_break_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.block_case_return block_case199 =null;

        ObjcmParser.single_operators_return single_operators200 =null;



        try {
            // Objcm.g:396:2: ( block_case ( single_operators )? )
            // Objcm.g:396:4: block_case ( single_operators )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_block_case_in_block_break1898);
            block_case199=block_case();

            state._fsp--;

            adaptor.addChild(root_0, block_case199.getTree());

            // Objcm.g:396:15: ( single_operators )?
            int alt43=2;
            int LA43_0 = input.LA(1);

            if ( (LA43_0==BREAK_WORD||LA43_0==SINGLE_OP) ) {
                alt43=1;
            }
            switch (alt43) {
                case 1 :
                    // Objcm.g:396:15: single_operators
                    {
                    pushFollow(FOLLOW_single_operators_in_block_break1900);
                    single_operators200=single_operators();

                    state._fsp--;

                    adaptor.addChild(root_0, single_operators200.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_break"


    public static class default_stmt_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "default_stmt_wrapper"
    // Objcm.g:399:1: default_stmt_wrapper : default_stmt -> ^( DEFAULT_STMT default_stmt ) ;
    public final ObjcmParser.default_stmt_wrapper_return default_stmt_wrapper() throws RecognitionException {
        ObjcmParser.default_stmt_wrapper_return retval = new ObjcmParser.default_stmt_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.default_stmt_return default_stmt201 =null;


        RewriteRuleSubtreeStream stream_default_stmt=new RewriteRuleSubtreeStream(adaptor,"rule default_stmt");
        try {
            // Objcm.g:400:2: ( default_stmt -> ^( DEFAULT_STMT default_stmt ) )
            // Objcm.g:400:4: default_stmt
            {
            pushFollow(FOLLOW_default_stmt_in_default_stmt_wrapper1912);
            default_stmt201=default_stmt();

            state._fsp--;

            stream_default_stmt.add(default_stmt201.getTree());

            // AST REWRITE
            // elements: default_stmt
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 400:17: -> ^( DEFAULT_STMT default_stmt )
            {
                // Objcm.g:400:20: ^( DEFAULT_STMT default_stmt )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(DEFAULT_STMT, "DEFAULT_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_default_stmt.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "default_stmt_wrapper"


    public static class default_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "default_stmt"
    // Objcm.g:402:1: default_stmt : 'default' COLON ( default_body_wrapper )? ;
    public final ObjcmParser.default_stmt_return default_stmt() throws RecognitionException {
        ObjcmParser.default_stmt_return retval = new ObjcmParser.default_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal202=null;
        Token COLON203=null;
        ObjcmParser.default_body_wrapper_return default_body_wrapper204 =null;


        Object string_literal202_tree=null;
        Object COLON203_tree=null;

        try {
            // Objcm.g:403:2: ( 'default' COLON ( default_body_wrapper )? )
            // Objcm.g:403:4: 'default' COLON ( default_body_wrapper )?
            {
            root_0 = (Object)adaptor.nil();


            string_literal202=(Token)match(input,186,FOLLOW_186_in_default_stmt1929); 
            string_literal202_tree = 
            (Object)adaptor.create(string_literal202)
            ;
            adaptor.addChild(root_0, string_literal202_tree);


            COLON203=(Token)match(input,COLON,FOLLOW_COLON_in_default_stmt1932); 
            COLON203_tree = 
            (Object)adaptor.create(COLON203)
            ;
            adaptor.addChild(root_0, COLON203_tree);


            // Objcm.g:404:3: ( default_body_wrapper )?
            int alt44=2;
            int LA44_0 = input.LA(1);

            if ( (LA44_0==ASTERISK||LA44_0==BREAK_WORD||LA44_0==CONST_PREFIX||LA44_0==ENUM_PREFIX||LA44_0==ID||LA44_0==L_AND||LA44_0==L_BR||(LA44_0 >= L_FBR && LA44_0 <= L_KBR)||LA44_0==L_MINUS||LA44_0==L_MINUS_MINUS||LA44_0==L_NOT||LA44_0==L_PLUS||LA44_0==L_PLUS_PLUS||LA44_0==L_TILDA||LA44_0==NUMBER||LA44_0==SEMICOLON||(LA44_0 >= SINGLE_OP && LA44_0 <= SIZEOF)||LA44_0==STATIC_PREFIX||(LA44_0 >= STRING_LITERAL && LA44_0 <= STRING_LITERAL3)||LA44_0==STRUCT_PREFIX||LA44_0==VOID||LA44_0==166||LA44_0==173||LA44_0==175||(LA44_0 >= 177 && LA44_0 <= 179)||(LA44_0 >= 181 && LA44_0 <= 182)||LA44_0==185||(LA44_0 >= 187 && LA44_0 <= 193)||(LA44_0 >= 195 && LA44_0 <= 198)||(LA44_0 >= 201 && LA44_0 <= 202)) ) {
                alt44=1;
            }
            switch (alt44) {
                case 1 :
                    // Objcm.g:404:3: default_body_wrapper
                    {
                    pushFollow(FOLLOW_default_body_wrapper_in_default_stmt1937);
                    default_body_wrapper204=default_body_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, default_body_wrapper204.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "default_stmt"


    public static class default_body_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "default_body_wrapper"
    // Objcm.g:407:1: default_body_wrapper : default_body -> ^( DEFAULT_BODY default_body ) ;
    public final ObjcmParser.default_body_wrapper_return default_body_wrapper() throws RecognitionException {
        ObjcmParser.default_body_wrapper_return retval = new ObjcmParser.default_body_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.default_body_return default_body205 =null;


        RewriteRuleSubtreeStream stream_default_body=new RewriteRuleSubtreeStream(adaptor,"rule default_body");
        try {
            // Objcm.g:408:2: ( default_body -> ^( DEFAULT_BODY default_body ) )
            // Objcm.g:408:4: default_body
            {
            pushFollow(FOLLOW_default_body_in_default_body_wrapper1950);
            default_body205=default_body();

            state._fsp--;

            stream_default_body.add(default_body205.getTree());

            // AST REWRITE
            // elements: default_body
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 408:17: -> ^( DEFAULT_BODY default_body )
            {
                // Objcm.g:408:20: ^( DEFAULT_BODY default_body )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(DEFAULT_BODY, "DEFAULT_BODY")
                , root_1);

                adaptor.addChild(root_1, stream_default_body.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "default_body_wrapper"


    public static class default_body_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "default_body"
    // Objcm.g:411:1: default_body : ( block_break | ( block_internal_full )+ );
    public final ObjcmParser.default_body_return default_body() throws RecognitionException {
        ObjcmParser.default_body_return retval = new ObjcmParser.default_body_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.block_break_return block_break206 =null;

        ObjcmParser.block_internal_full_return block_internal_full207 =null;



        try {
            // Objcm.g:412:2: ( block_break | ( block_internal_full )+ )
            int alt46=2;
            int LA46_0 = input.LA(1);

            if ( (LA46_0==L_FBR) ) {
                alt46=1;
            }
            else if ( (LA46_0==ASTERISK||LA46_0==BREAK_WORD||LA46_0==CONST_PREFIX||LA46_0==ENUM_PREFIX||LA46_0==ID||LA46_0==L_AND||LA46_0==L_BR||LA46_0==L_KBR||LA46_0==L_MINUS||LA46_0==L_MINUS_MINUS||LA46_0==L_NOT||LA46_0==L_PLUS||LA46_0==L_PLUS_PLUS||LA46_0==L_TILDA||LA46_0==NUMBER||LA46_0==SEMICOLON||(LA46_0 >= SINGLE_OP && LA46_0 <= SIZEOF)||LA46_0==STATIC_PREFIX||(LA46_0 >= STRING_LITERAL && LA46_0 <= STRING_LITERAL3)||LA46_0==STRUCT_PREFIX||LA46_0==VOID||LA46_0==166||LA46_0==173||LA46_0==175||(LA46_0 >= 177 && LA46_0 <= 179)||(LA46_0 >= 181 && LA46_0 <= 182)||LA46_0==185||(LA46_0 >= 187 && LA46_0 <= 193)||(LA46_0 >= 195 && LA46_0 <= 198)||(LA46_0 >= 201 && LA46_0 <= 202)) ) {
                alt46=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 46, 0, input);

                throw nvae;

            }
            switch (alt46) {
                case 1 :
                    // Objcm.g:412:4: block_break
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_block_break_in_default_body1970);
                    block_break206=block_break();

                    state._fsp--;

                    adaptor.addChild(root_0, block_break206.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:413:5: ( block_internal_full )+
                    {
                    root_0 = (Object)adaptor.nil();


                    // Objcm.g:413:5: ( block_internal_full )+
                    int cnt45=0;
                    loop45:
                    do {
                        int alt45=2;
                        int LA45_0 = input.LA(1);

                        if ( (LA45_0==ASTERISK||LA45_0==BREAK_WORD||LA45_0==CONST_PREFIX||LA45_0==ENUM_PREFIX||LA45_0==ID||LA45_0==L_AND||LA45_0==L_BR||LA45_0==L_KBR||LA45_0==L_MINUS||LA45_0==L_MINUS_MINUS||LA45_0==L_NOT||LA45_0==L_PLUS||LA45_0==L_PLUS_PLUS||LA45_0==L_TILDA||LA45_0==NUMBER||LA45_0==SEMICOLON||(LA45_0 >= SINGLE_OP && LA45_0 <= SIZEOF)||LA45_0==STATIC_PREFIX||(LA45_0 >= STRING_LITERAL && LA45_0 <= STRING_LITERAL3)||LA45_0==STRUCT_PREFIX||LA45_0==VOID||LA45_0==166||LA45_0==173||LA45_0==175||(LA45_0 >= 177 && LA45_0 <= 179)||(LA45_0 >= 181 && LA45_0 <= 182)||LA45_0==185||(LA45_0 >= 187 && LA45_0 <= 193)||(LA45_0 >= 195 && LA45_0 <= 198)||(LA45_0 >= 201 && LA45_0 <= 202)) ) {
                            alt45=1;
                        }


                        switch (alt45) {
                    	case 1 :
                    	    // Objcm.g:413:5: block_internal_full
                    	    {
                    	    pushFollow(FOLLOW_block_internal_full_in_default_body1976);
                    	    block_internal_full207=block_internal_full();

                    	    state._fsp--;

                    	    adaptor.addChild(root_0, block_internal_full207.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt45 >= 1 ) break loop45;
                                EarlyExitException eee =
                                    new EarlyExitException(45, input);
                                throw eee;
                        }
                        cnt45++;
                    } while (true);


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "default_body"


    public static class single_operators_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "single_operators"
    // Objcm.g:416:1: single_operators : ( SINGLE_OP | break_wrapper );
    public final ObjcmParser.single_operators_return single_operators() throws RecognitionException {
        ObjcmParser.single_operators_return retval = new ObjcmParser.single_operators_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SINGLE_OP208=null;
        ObjcmParser.break_wrapper_return break_wrapper209 =null;


        Object SINGLE_OP208_tree=null;

        try {
            // Objcm.g:417:2: ( SINGLE_OP | break_wrapper )
            int alt47=2;
            int LA47_0 = input.LA(1);

            if ( (LA47_0==SINGLE_OP) ) {
                alt47=1;
            }
            else if ( (LA47_0==BREAK_WORD) ) {
                alt47=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 47, 0, input);

                throw nvae;

            }
            switch (alt47) {
                case 1 :
                    // Objcm.g:417:4: SINGLE_OP
                    {
                    root_0 = (Object)adaptor.nil();


                    SINGLE_OP208=(Token)match(input,SINGLE_OP,FOLLOW_SINGLE_OP_in_single_operators1991); 
                    SINGLE_OP208_tree = 
                    (Object)adaptor.create(SINGLE_OP208)
                    ;
                    adaptor.addChild(root_0, SINGLE_OP208_tree);


                    }
                    break;
                case 2 :
                    // Objcm.g:418:5: break_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_break_wrapper_in_single_operators1998);
                    break_wrapper209=break_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, break_wrapper209.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "single_operators"


    public static class break_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "break_wrapper"
    // Objcm.g:421:1: break_wrapper : break_stmt -> ^( BREAK break_stmt ) ;
    public final ObjcmParser.break_wrapper_return break_wrapper() throws RecognitionException {
        ObjcmParser.break_wrapper_return retval = new ObjcmParser.break_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.break_stmt_return break_stmt210 =null;


        RewriteRuleSubtreeStream stream_break_stmt=new RewriteRuleSubtreeStream(adaptor,"rule break_stmt");
        try {
            // Objcm.g:422:2: ( break_stmt -> ^( BREAK break_stmt ) )
            // Objcm.g:422:4: break_stmt
            {
            pushFollow(FOLLOW_break_stmt_in_break_wrapper2010);
            break_stmt210=break_stmt();

            state._fsp--;

            stream_break_stmt.add(break_stmt210.getTree());

            // AST REWRITE
            // elements: break_stmt
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 422:15: -> ^( BREAK break_stmt )
            {
                // Objcm.g:422:18: ^( BREAK break_stmt )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(BREAK, "BREAK")
                , root_1);

                adaptor.addChild(root_1, stream_break_stmt.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "break_wrapper"


    public static class break_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "break_stmt"
    // Objcm.g:424:1: break_stmt : BREAK_WORD SEMICOLON ;
    public final ObjcmParser.break_stmt_return break_stmt() throws RecognitionException {
        ObjcmParser.break_stmt_return retval = new ObjcmParser.break_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token BREAK_WORD211=null;
        Token SEMICOLON212=null;

        Object BREAK_WORD211_tree=null;
        Object SEMICOLON212_tree=null;

        try {
            // Objcm.g:425:2: ( BREAK_WORD SEMICOLON )
            // Objcm.g:425:4: BREAK_WORD SEMICOLON
            {
            root_0 = (Object)adaptor.nil();


            BREAK_WORD211=(Token)match(input,BREAK_WORD,FOLLOW_BREAK_WORD_in_break_stmt2028); 
            BREAK_WORD211_tree = 
            (Object)adaptor.create(BREAK_WORD211)
            ;
            adaptor.addChild(root_0, BREAK_WORD211_tree);


            SEMICOLON212=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_break_stmt2031); 
            SEMICOLON212_tree = 
            (Object)adaptor.create(SEMICOLON212)
            ;
            adaptor.addChild(root_0, SEMICOLON212_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "break_stmt"


    public static class do_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "do_stmt"
    // Objcm.g:427:1: do_stmt : 'do' if_stmt_block 'while' L_BR expression R_BR ;
    public final ObjcmParser.do_stmt_return do_stmt() throws RecognitionException {
        ObjcmParser.do_stmt_return retval = new ObjcmParser.do_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal213=null;
        Token string_literal215=null;
        Token L_BR216=null;
        Token R_BR218=null;
        ObjcmParser.if_stmt_block_return if_stmt_block214 =null;

        ObjcmParser.expression_return expression217 =null;


        Object string_literal213_tree=null;
        Object string_literal215_tree=null;
        Object L_BR216_tree=null;
        Object R_BR218_tree=null;

        try {
            // Objcm.g:427:9: ( 'do' if_stmt_block 'while' L_BR expression R_BR )
            // Objcm.g:427:11: 'do' if_stmt_block 'while' L_BR expression R_BR
            {
            root_0 = (Object)adaptor.nil();


            string_literal213=(Token)match(input,187,FOLLOW_187_in_do_stmt2041); 
            string_literal213_tree = 
            (Object)adaptor.create(string_literal213)
            ;
            adaptor.addChild(root_0, string_literal213_tree);


            pushFollow(FOLLOW_if_stmt_block_in_do_stmt2044);
            if_stmt_block214=if_stmt_block();

            state._fsp--;

            adaptor.addChild(root_0, if_stmt_block214.getTree());

            string_literal215=(Token)match(input,202,FOLLOW_202_in_do_stmt2047); 
            string_literal215_tree = 
            (Object)adaptor.create(string_literal215)
            ;
            adaptor.addChild(root_0, string_literal215_tree);


            L_BR216=(Token)match(input,L_BR,FOLLOW_L_BR_in_do_stmt2050); 
            L_BR216_tree = 
            (Object)adaptor.create(L_BR216)
            ;
            adaptor.addChild(root_0, L_BR216_tree);


            pushFollow(FOLLOW_expression_in_do_stmt2053);
            expression217=expression();

            state._fsp--;

            adaptor.addChild(root_0, expression217.getTree());

            R_BR218=(Token)match(input,R_BR,FOLLOW_R_BR_in_do_stmt2055); 
            R_BR218_tree = 
            (Object)adaptor.create(R_BR218)
            ;
            adaptor.addChild(root_0, R_BR218_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "do_stmt"


    public static class while_stmt_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "while_stmt_wrapper"
    // Objcm.g:429:1: while_stmt_wrapper : while_stmt -> ^( WHILE_STMT while_stmt ) ;
    public final ObjcmParser.while_stmt_wrapper_return while_stmt_wrapper() throws RecognitionException {
        ObjcmParser.while_stmt_wrapper_return retval = new ObjcmParser.while_stmt_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.while_stmt_return while_stmt219 =null;


        RewriteRuleSubtreeStream stream_while_stmt=new RewriteRuleSubtreeStream(adaptor,"rule while_stmt");
        try {
            // Objcm.g:430:2: ( while_stmt -> ^( WHILE_STMT while_stmt ) )
            // Objcm.g:430:4: while_stmt
            {
            pushFollow(FOLLOW_while_stmt_in_while_stmt_wrapper2064);
            while_stmt219=while_stmt();

            state._fsp--;

            stream_while_stmt.add(while_stmt219.getTree());

            // AST REWRITE
            // elements: while_stmt
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 430:15: -> ^( WHILE_STMT while_stmt )
            {
                // Objcm.g:430:18: ^( WHILE_STMT while_stmt )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(WHILE_STMT, "WHILE_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_while_stmt.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "while_stmt_wrapper"


    public static class while_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "while_stmt"
    // Objcm.g:433:1: while_stmt : 'while' L_BR while_expr R_BR if_stmt_block_wrapper ;
    public final ObjcmParser.while_stmt_return while_stmt() throws RecognitionException {
        ObjcmParser.while_stmt_return retval = new ObjcmParser.while_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal220=null;
        Token L_BR221=null;
        Token R_BR223=null;
        ObjcmParser.while_expr_return while_expr222 =null;

        ObjcmParser.if_stmt_block_wrapper_return if_stmt_block_wrapper224 =null;


        Object string_literal220_tree=null;
        Object L_BR221_tree=null;
        Object R_BR223_tree=null;

        try {
            // Objcm.g:434:2: ( 'while' L_BR while_expr R_BR if_stmt_block_wrapper )
            // Objcm.g:434:4: 'while' L_BR while_expr R_BR if_stmt_block_wrapper
            {
            root_0 = (Object)adaptor.nil();


            string_literal220=(Token)match(input,202,FOLLOW_202_in_while_stmt2083); 
            string_literal220_tree = 
            (Object)adaptor.create(string_literal220)
            ;
            adaptor.addChild(root_0, string_literal220_tree);


            L_BR221=(Token)match(input,L_BR,FOLLOW_L_BR_in_while_stmt2086); 
            L_BR221_tree = 
            (Object)adaptor.create(L_BR221)
            ;
            adaptor.addChild(root_0, L_BR221_tree);


            pushFollow(FOLLOW_while_expr_in_while_stmt2089);
            while_expr222=while_expr();

            state._fsp--;

            adaptor.addChild(root_0, while_expr222.getTree());

            R_BR223=(Token)match(input,R_BR,FOLLOW_R_BR_in_while_stmt2091); 
            R_BR223_tree = 
            (Object)adaptor.create(R_BR223)
            ;
            adaptor.addChild(root_0, R_BR223_tree);


            pushFollow(FOLLOW_if_stmt_block_wrapper_in_while_stmt2094);
            if_stmt_block_wrapper224=if_stmt_block_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, if_stmt_block_wrapper224.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "while_stmt"


    public static class while_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "while_expr"
    // Objcm.g:436:1: while_expr : classical_expr_wrp -> ^( WHILE_EXPR classical_expr_wrp ) ;
    public final ObjcmParser.while_expr_return while_expr() throws RecognitionException {
        ObjcmParser.while_expr_return retval = new ObjcmParser.while_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp225 =null;


        RewriteRuleSubtreeStream stream_classical_expr_wrp=new RewriteRuleSubtreeStream(adaptor,"rule classical_expr_wrp");
        try {
            // Objcm.g:437:2: ( classical_expr_wrp -> ^( WHILE_EXPR classical_expr_wrp ) )
            // Objcm.g:437:5: classical_expr_wrp
            {
            pushFollow(FOLLOW_classical_expr_wrp_in_while_expr2107);
            classical_expr_wrp225=classical_expr_wrp();

            state._fsp--;

            stream_classical_expr_wrp.add(classical_expr_wrp225.getTree());

            // AST REWRITE
            // elements: classical_expr_wrp
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 437:24: -> ^( WHILE_EXPR classical_expr_wrp )
            {
                // Objcm.g:437:27: ^( WHILE_EXPR classical_expr_wrp )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(WHILE_EXPR, "WHILE_EXPR")
                , root_1);

                adaptor.addChild(root_1, stream_classical_expr_wrp.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "while_expr"


    public static class for_stmt_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "for_stmt_wrapper"
    // Objcm.g:439:1: for_stmt_wrapper : for_stmt -> ^( FOR_STMT for_stmt ) ;
    public final ObjcmParser.for_stmt_wrapper_return for_stmt_wrapper() throws RecognitionException {
        ObjcmParser.for_stmt_wrapper_return retval = new ObjcmParser.for_stmt_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.for_stmt_return for_stmt226 =null;


        RewriteRuleSubtreeStream stream_for_stmt=new RewriteRuleSubtreeStream(adaptor,"rule for_stmt");
        try {
            // Objcm.g:440:2: ( for_stmt -> ^( FOR_STMT for_stmt ) )
            // Objcm.g:440:4: for_stmt
            {
            pushFollow(FOLLOW_for_stmt_in_for_stmt_wrapper2126);
            for_stmt226=for_stmt();

            state._fsp--;

            stream_for_stmt.add(for_stmt226.getTree());

            // AST REWRITE
            // elements: for_stmt
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 440:13: -> ^( FOR_STMT for_stmt )
            {
                // Objcm.g:440:16: ^( FOR_STMT for_stmt )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FOR_STMT, "FOR_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_for_stmt.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "for_stmt_wrapper"


    public static class for_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "for_stmt"
    // Objcm.g:442:1: for_stmt : 'for' L_BR for_stmt_expr_wrapper R_BR if_stmt_block ;
    public final ObjcmParser.for_stmt_return for_stmt() throws RecognitionException {
        ObjcmParser.for_stmt_return retval = new ObjcmParser.for_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal227=null;
        Token L_BR228=null;
        Token R_BR230=null;
        ObjcmParser.for_stmt_expr_wrapper_return for_stmt_expr_wrapper229 =null;

        ObjcmParser.if_stmt_block_return if_stmt_block231 =null;


        Object string_literal227_tree=null;
        Object L_BR228_tree=null;
        Object R_BR230_tree=null;

        try {
            // Objcm.g:442:9: ( 'for' L_BR for_stmt_expr_wrapper R_BR if_stmt_block )
            // Objcm.g:442:11: 'for' L_BR for_stmt_expr_wrapper R_BR if_stmt_block
            {
            root_0 = (Object)adaptor.nil();


            string_literal227=(Token)match(input,190,FOLLOW_190_in_for_stmt2143); 
            string_literal227_tree = 
            (Object)adaptor.create(string_literal227)
            ;
            adaptor.addChild(root_0, string_literal227_tree);


            L_BR228=(Token)match(input,L_BR,FOLLOW_L_BR_in_for_stmt2146); 
            L_BR228_tree = 
            (Object)adaptor.create(L_BR228)
            ;
            adaptor.addChild(root_0, L_BR228_tree);


            pushFollow(FOLLOW_for_stmt_expr_wrapper_in_for_stmt2149);
            for_stmt_expr_wrapper229=for_stmt_expr_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, for_stmt_expr_wrapper229.getTree());

            R_BR230=(Token)match(input,R_BR,FOLLOW_R_BR_in_for_stmt2151); 
            R_BR230_tree = 
            (Object)adaptor.create(R_BR230)
            ;
            adaptor.addChild(root_0, R_BR230_tree);


            pushFollow(FOLLOW_if_stmt_block_in_for_stmt2154);
            if_stmt_block231=if_stmt_block();

            state._fsp--;

            adaptor.addChild(root_0, if_stmt_block231.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "for_stmt"


    public static class for_stmt_expr_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "for_stmt_expr_wrapper"
    // Objcm.g:445:1: for_stmt_expr_wrapper : for_stmt_expr -> ^( FOR_STMT_EXPR for_stmt_expr ) ;
    public final ObjcmParser.for_stmt_expr_wrapper_return for_stmt_expr_wrapper() throws RecognitionException {
        ObjcmParser.for_stmt_expr_wrapper_return retval = new ObjcmParser.for_stmt_expr_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.for_stmt_expr_return for_stmt_expr232 =null;


        RewriteRuleSubtreeStream stream_for_stmt_expr=new RewriteRuleSubtreeStream(adaptor,"rule for_stmt_expr");
        try {
            // Objcm.g:446:2: ( for_stmt_expr -> ^( FOR_STMT_EXPR for_stmt_expr ) )
            // Objcm.g:446:4: for_stmt_expr
            {
            pushFollow(FOLLOW_for_stmt_expr_in_for_stmt_expr_wrapper2166);
            for_stmt_expr232=for_stmt_expr();

            state._fsp--;

            stream_for_stmt_expr.add(for_stmt_expr232.getTree());

            // AST REWRITE
            // elements: for_stmt_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 446:18: -> ^( FOR_STMT_EXPR for_stmt_expr )
            {
                // Objcm.g:446:21: ^( FOR_STMT_EXPR for_stmt_expr )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FOR_STMT_EXPR, "FOR_STMT_EXPR")
                , root_1);

                adaptor.addChild(root_1, stream_for_stmt_expr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "for_stmt_expr_wrapper"


    public static class for_stmt_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "for_stmt_expr"
    // Objcm.g:448:1: for_stmt_expr : ( full_expr_wrapper ( for_stmt_int1 | ( full_expr2 ( for_stmt_int1 | for_stmt_int2 ) ) | for_stmt_int2 ) | for_stmt_int2 );
    public final ObjcmParser.for_stmt_expr_return for_stmt_expr() throws RecognitionException {
        ObjcmParser.for_stmt_expr_return retval = new ObjcmParser.for_stmt_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.full_expr_wrapper_return full_expr_wrapper233 =null;

        ObjcmParser.for_stmt_int1_return for_stmt_int1234 =null;

        ObjcmParser.full_expr2_return full_expr2235 =null;

        ObjcmParser.for_stmt_int1_return for_stmt_int1236 =null;

        ObjcmParser.for_stmt_int2_return for_stmt_int2237 =null;

        ObjcmParser.for_stmt_int2_return for_stmt_int2238 =null;

        ObjcmParser.for_stmt_int2_return for_stmt_int2239 =null;



        try {
            // Objcm.g:449:2: ( full_expr_wrapper ( for_stmt_int1 | ( full_expr2 ( for_stmt_int1 | for_stmt_int2 ) ) | for_stmt_int2 ) | for_stmt_int2 )
            int alt50=2;
            int LA50_0 = input.LA(1);

            if ( (LA50_0==ASTERISK||LA50_0==ID||LA50_0==L_AND||LA50_0==L_BR||LA50_0==L_KBR||LA50_0==L_MINUS||LA50_0==L_MINUS_MINUS||LA50_0==L_NOT||LA50_0==L_PLUS||LA50_0==L_PLUS_PLUS||LA50_0==L_TILDA||LA50_0==NUMBER||LA50_0==SIZEOF||(LA50_0 >= STRING_LITERAL && LA50_0 <= STRING_LITERAL3)||LA50_0==166||LA50_0==173||LA50_0==175||LA50_0==179||LA50_0==182||LA50_0==185||LA50_0==193||(LA50_0 >= 195 && LA50_0 <= 196)||LA50_0==201) ) {
                alt50=1;
            }
            else if ( (LA50_0==SEMICOLON) ) {
                alt50=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 50, 0, input);

                throw nvae;

            }
            switch (alt50) {
                case 1 :
                    // Objcm.g:449:4: full_expr_wrapper ( for_stmt_int1 | ( full_expr2 ( for_stmt_int1 | for_stmt_int2 ) ) | for_stmt_int2 )
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_full_expr_wrapper_in_for_stmt_expr2185);
                    full_expr_wrapper233=full_expr_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, full_expr_wrapper233.getTree());

                    // Objcm.g:449:22: ( for_stmt_int1 | ( full_expr2 ( for_stmt_int1 | for_stmt_int2 ) ) | for_stmt_int2 )
                    int alt49=3;
                    alt49 = dfa49.predict(input);
                    switch (alt49) {
                        case 1 :
                            // Objcm.g:449:23: for_stmt_int1
                            {
                            pushFollow(FOLLOW_for_stmt_int1_in_for_stmt_expr2188);
                            for_stmt_int1234=for_stmt_int1();

                            state._fsp--;

                            adaptor.addChild(root_0, for_stmt_int1234.getTree());

                            }
                            break;
                        case 2 :
                            // Objcm.g:449:39: ( full_expr2 ( for_stmt_int1 | for_stmt_int2 ) )
                            {
                            // Objcm.g:449:39: ( full_expr2 ( for_stmt_int1 | for_stmt_int2 ) )
                            // Objcm.g:449:40: full_expr2 ( for_stmt_int1 | for_stmt_int2 )
                            {
                            pushFollow(FOLLOW_full_expr2_in_for_stmt_expr2193);
                            full_expr2235=full_expr2();

                            state._fsp--;

                            adaptor.addChild(root_0, full_expr2235.getTree());

                            // Objcm.g:449:51: ( for_stmt_int1 | for_stmt_int2 )
                            int alt48=2;
                            int LA48_0 = input.LA(1);

                            if ( (LA48_0==193) ) {
                                alt48=1;
                            }
                            else if ( (LA48_0==SEMICOLON) ) {
                                alt48=2;
                            }
                            else {
                                NoViableAltException nvae =
                                    new NoViableAltException("", 48, 0, input);

                                throw nvae;

                            }
                            switch (alt48) {
                                case 1 :
                                    // Objcm.g:449:52: for_stmt_int1
                                    {
                                    pushFollow(FOLLOW_for_stmt_int1_in_for_stmt_expr2196);
                                    for_stmt_int1236=for_stmt_int1();

                                    state._fsp--;

                                    adaptor.addChild(root_0, for_stmt_int1236.getTree());

                                    }
                                    break;
                                case 2 :
                                    // Objcm.g:449:68: for_stmt_int2
                                    {
                                    pushFollow(FOLLOW_for_stmt_int2_in_for_stmt_expr2200);
                                    for_stmt_int2237=for_stmt_int2();

                                    state._fsp--;

                                    adaptor.addChild(root_0, for_stmt_int2237.getTree());

                                    }
                                    break;

                            }


                            }


                            }
                            break;
                        case 3 :
                            // Objcm.g:449:86: for_stmt_int2
                            {
                            pushFollow(FOLLOW_for_stmt_int2_in_for_stmt_expr2206);
                            for_stmt_int2238=for_stmt_int2();

                            state._fsp--;

                            adaptor.addChild(root_0, for_stmt_int2238.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // Objcm.g:450:4: for_stmt_int2
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_for_stmt_int2_in_for_stmt_expr2212);
                    for_stmt_int2239=for_stmt_int2();

                    state._fsp--;

                    adaptor.addChild(root_0, for_stmt_int2239.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "for_stmt_expr"


    public static class for_stmt_int1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "for_stmt_int1"
    // Objcm.g:453:1: for_stmt_int1 : 'in' object_wrapped2 -> ^( FOR_IN_STMT object_wrapped2 ) ;
    public final ObjcmParser.for_stmt_int1_return for_stmt_int1() throws RecognitionException {
        ObjcmParser.for_stmt_int1_return retval = new ObjcmParser.for_stmt_int1_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal240=null;
        ObjcmParser.object_wrapped2_return object_wrapped2241 =null;


        Object string_literal240_tree=null;
        RewriteRuleTokenStream stream_193=new RewriteRuleTokenStream(adaptor,"token 193");
        RewriteRuleSubtreeStream stream_object_wrapped2=new RewriteRuleSubtreeStream(adaptor,"rule object_wrapped2");
        try {
            // Objcm.g:454:2: ( 'in' object_wrapped2 -> ^( FOR_IN_STMT object_wrapped2 ) )
            // Objcm.g:454:4: 'in' object_wrapped2
            {
            string_literal240=(Token)match(input,193,FOLLOW_193_in_for_stmt_int12227);  
            stream_193.add(string_literal240);


            pushFollow(FOLLOW_object_wrapped2_in_for_stmt_int12229);
            object_wrapped2241=object_wrapped2();

            state._fsp--;

            stream_object_wrapped2.add(object_wrapped2241.getTree());

            // AST REWRITE
            // elements: object_wrapped2
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 454:26: -> ^( FOR_IN_STMT object_wrapped2 )
            {
                // Objcm.g:454:29: ^( FOR_IN_STMT object_wrapped2 )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FOR_IN_STMT, "FOR_IN_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_object_wrapped2.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "for_stmt_int1"


    public static class for_stmt_int2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "for_stmt_int2"
    // Objcm.g:456:1: for_stmt_int2 : SEMICOLON ( classical_expr_wrp )? SEMICOLON ( classical_expr_wrp )? ;
    public final ObjcmParser.for_stmt_int2_return for_stmt_int2() throws RecognitionException {
        ObjcmParser.for_stmt_int2_return retval = new ObjcmParser.for_stmt_int2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON242=null;
        Token SEMICOLON244=null;
        ObjcmParser.classical_expr_wrp_return classical_expr_wrp243 =null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp245 =null;


        Object SEMICOLON242_tree=null;
        Object SEMICOLON244_tree=null;

        try {
            // Objcm.g:457:2: ( SEMICOLON ( classical_expr_wrp )? SEMICOLON ( classical_expr_wrp )? )
            // Objcm.g:457:4: SEMICOLON ( classical_expr_wrp )? SEMICOLON ( classical_expr_wrp )?
            {
            root_0 = (Object)adaptor.nil();


            SEMICOLON242=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_for_stmt_int22249); 
            SEMICOLON242_tree = 
            (Object)adaptor.create(SEMICOLON242)
            ;
            adaptor.addChild(root_0, SEMICOLON242_tree);


            // Objcm.g:457:14: ( classical_expr_wrp )?
            int alt51=2;
            int LA51_0 = input.LA(1);

            if ( (LA51_0==ASTERISK||LA51_0==ID||LA51_0==L_AND||LA51_0==L_BR||LA51_0==L_KBR||LA51_0==L_MINUS||LA51_0==L_MINUS_MINUS||LA51_0==L_NOT||LA51_0==L_PLUS||LA51_0==L_PLUS_PLUS||LA51_0==L_TILDA||LA51_0==NUMBER||LA51_0==SIZEOF||(LA51_0 >= STRING_LITERAL && LA51_0 <= STRING_LITERAL3)||LA51_0==166||LA51_0==173||LA51_0==175||LA51_0==179||LA51_0==182||LA51_0==185||LA51_0==193||(LA51_0 >= 195 && LA51_0 <= 196)||LA51_0==201) ) {
                alt51=1;
            }
            switch (alt51) {
                case 1 :
                    // Objcm.g:457:14: classical_expr_wrp
                    {
                    pushFollow(FOLLOW_classical_expr_wrp_in_for_stmt_int22251);
                    classical_expr_wrp243=classical_expr_wrp();

                    state._fsp--;

                    adaptor.addChild(root_0, classical_expr_wrp243.getTree());

                    }
                    break;

            }


            SEMICOLON244=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_for_stmt_int22254); 
            SEMICOLON244_tree = 
            (Object)adaptor.create(SEMICOLON244)
            ;
            adaptor.addChild(root_0, SEMICOLON244_tree);


            // Objcm.g:457:44: ( classical_expr_wrp )?
            int alt52=2;
            int LA52_0 = input.LA(1);

            if ( (LA52_0==ASTERISK||LA52_0==ID||LA52_0==L_AND||LA52_0==L_BR||LA52_0==L_KBR||LA52_0==L_MINUS||LA52_0==L_MINUS_MINUS||LA52_0==L_NOT||LA52_0==L_PLUS||LA52_0==L_PLUS_PLUS||LA52_0==L_TILDA||LA52_0==NUMBER||LA52_0==SIZEOF||(LA52_0 >= STRING_LITERAL && LA52_0 <= STRING_LITERAL3)||LA52_0==166||LA52_0==173||LA52_0==175||LA52_0==179||LA52_0==182||LA52_0==185||LA52_0==193||(LA52_0 >= 195 && LA52_0 <= 196)||LA52_0==201) ) {
                alt52=1;
            }
            switch (alt52) {
                case 1 :
                    // Objcm.g:457:44: classical_expr_wrp
                    {
                    pushFollow(FOLLOW_classical_expr_wrp_in_for_stmt_int22256);
                    classical_expr_wrp245=classical_expr_wrp();

                    state._fsp--;

                    adaptor.addChild(root_0, classical_expr_wrp245.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "for_stmt_int2"


    public static class return_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "return_stmt"
    // Objcm.g:464:1: return_stmt : 'return' ( classical_expr_wrp )? SEMICOLON -> ^( RETURN_STMT ( classical_expr_wrp )? SEMICOLON ) ;
    public final ObjcmParser.return_stmt_return return_stmt() throws RecognitionException {
        ObjcmParser.return_stmt_return retval = new ObjcmParser.return_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal246=null;
        Token SEMICOLON248=null;
        ObjcmParser.classical_expr_wrp_return classical_expr_wrp247 =null;


        Object string_literal246_tree=null;
        Object SEMICOLON248_tree=null;
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleTokenStream stream_197=new RewriteRuleTokenStream(adaptor,"token 197");
        RewriteRuleSubtreeStream stream_classical_expr_wrp=new RewriteRuleSubtreeStream(adaptor,"rule classical_expr_wrp");
        try {
            // Objcm.g:465:2: ( 'return' ( classical_expr_wrp )? SEMICOLON -> ^( RETURN_STMT ( classical_expr_wrp )? SEMICOLON ) )
            // Objcm.g:465:4: 'return' ( classical_expr_wrp )? SEMICOLON
            {
            string_literal246=(Token)match(input,197,FOLLOW_197_in_return_stmt2273);  
            stream_197.add(string_literal246);


            // Objcm.g:465:13: ( classical_expr_wrp )?
            int alt53=2;
            int LA53_0 = input.LA(1);

            if ( (LA53_0==ASTERISK||LA53_0==ID||LA53_0==L_AND||LA53_0==L_BR||LA53_0==L_KBR||LA53_0==L_MINUS||LA53_0==L_MINUS_MINUS||LA53_0==L_NOT||LA53_0==L_PLUS||LA53_0==L_PLUS_PLUS||LA53_0==L_TILDA||LA53_0==NUMBER||LA53_0==SIZEOF||(LA53_0 >= STRING_LITERAL && LA53_0 <= STRING_LITERAL3)||LA53_0==166||LA53_0==173||LA53_0==175||LA53_0==179||LA53_0==182||LA53_0==185||LA53_0==193||(LA53_0 >= 195 && LA53_0 <= 196)||LA53_0==201) ) {
                alt53=1;
            }
            switch (alt53) {
                case 1 :
                    // Objcm.g:465:13: classical_expr_wrp
                    {
                    pushFollow(FOLLOW_classical_expr_wrp_in_return_stmt2275);
                    classical_expr_wrp247=classical_expr_wrp();

                    state._fsp--;

                    stream_classical_expr_wrp.add(classical_expr_wrp247.getTree());

                    }
                    break;

            }


            SEMICOLON248=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_return_stmt2278);  
            stream_SEMICOLON.add(SEMICOLON248);


            // AST REWRITE
            // elements: classical_expr_wrp, SEMICOLON
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 465:43: -> ^( RETURN_STMT ( classical_expr_wrp )? SEMICOLON )
            {
                // Objcm.g:465:46: ^( RETURN_STMT ( classical_expr_wrp )? SEMICOLON )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(RETURN_STMT, "RETURN_STMT")
                , root_1);

                // Objcm.g:465:60: ( classical_expr_wrp )?
                if ( stream_classical_expr_wrp.hasNext() ) {
                    adaptor.addChild(root_1, stream_classical_expr_wrp.nextTree());

                }
                stream_classical_expr_wrp.reset();

                adaptor.addChild(root_1, 
                stream_SEMICOLON.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "return_stmt"


    public static class if_stmt_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "if_stmt_wrapper"
    // Objcm.g:467:1: if_stmt_wrapper : if_stmt -> ^( IF_STMT if_stmt ) ;
    public final ObjcmParser.if_stmt_wrapper_return if_stmt_wrapper() throws RecognitionException {
        ObjcmParser.if_stmt_wrapper_return retval = new ObjcmParser.if_stmt_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.if_stmt_return if_stmt249 =null;


        RewriteRuleSubtreeStream stream_if_stmt=new RewriteRuleSubtreeStream(adaptor,"rule if_stmt");
        try {
            // Objcm.g:468:2: ( if_stmt -> ^( IF_STMT if_stmt ) )
            // Objcm.g:468:4: if_stmt
            {
            pushFollow(FOLLOW_if_stmt_in_if_stmt_wrapper2299);
            if_stmt249=if_stmt();

            state._fsp--;

            stream_if_stmt.add(if_stmt249.getTree());

            // AST REWRITE
            // elements: if_stmt
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 468:12: -> ^( IF_STMT if_stmt )
            {
                // Objcm.g:468:15: ^( IF_STMT if_stmt )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(IF_STMT, "IF_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_if_stmt.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "if_stmt_wrapper"


    public static class if_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "if_stmt"
    // Objcm.g:470:1: if_stmt : 'if' L_BR if_expr R_BR if_stmt_block_wrapper ;
    public final ObjcmParser.if_stmt_return if_stmt() throws RecognitionException {
        ObjcmParser.if_stmt_return retval = new ObjcmParser.if_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal250=null;
        Token L_BR251=null;
        Token R_BR253=null;
        ObjcmParser.if_expr_return if_expr252 =null;

        ObjcmParser.if_stmt_block_wrapper_return if_stmt_block_wrapper254 =null;


        Object string_literal250_tree=null;
        Object L_BR251_tree=null;
        Object R_BR253_tree=null;

        try {
            // Objcm.g:470:9: ( 'if' L_BR if_expr R_BR if_stmt_block_wrapper )
            // Objcm.g:470:11: 'if' L_BR if_expr R_BR if_stmt_block_wrapper
            {
            root_0 = (Object)adaptor.nil();


            string_literal250=(Token)match(input,192,FOLLOW_192_in_if_stmt2315); 
            string_literal250_tree = 
            (Object)adaptor.create(string_literal250)
            ;
            adaptor.addChild(root_0, string_literal250_tree);


            L_BR251=(Token)match(input,L_BR,FOLLOW_L_BR_in_if_stmt2318); 
            L_BR251_tree = 
            (Object)adaptor.create(L_BR251)
            ;
            adaptor.addChild(root_0, L_BR251_tree);


            pushFollow(FOLLOW_if_expr_in_if_stmt2321);
            if_expr252=if_expr();

            state._fsp--;

            adaptor.addChild(root_0, if_expr252.getTree());

            R_BR253=(Token)match(input,R_BR,FOLLOW_R_BR_in_if_stmt2323); 
            R_BR253_tree = 
            (Object)adaptor.create(R_BR253)
            ;
            adaptor.addChild(root_0, R_BR253_tree);


            pushFollow(FOLLOW_if_stmt_block_wrapper_in_if_stmt2326);
            if_stmt_block_wrapper254=if_stmt_block_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, if_stmt_block_wrapper254.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "if_stmt"


    public static class if_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "if_expr"
    // Objcm.g:473:1: if_expr : classical_expr_wrp -> ^( IF_EXPR classical_expr_wrp ) ;
    public final ObjcmParser.if_expr_return if_expr() throws RecognitionException {
        ObjcmParser.if_expr_return retval = new ObjcmParser.if_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp255 =null;


        RewriteRuleSubtreeStream stream_classical_expr_wrp=new RewriteRuleSubtreeStream(adaptor,"rule classical_expr_wrp");
        try {
            // Objcm.g:473:9: ( classical_expr_wrp -> ^( IF_EXPR classical_expr_wrp ) )
            // Objcm.g:473:12: classical_expr_wrp
            {
            pushFollow(FOLLOW_classical_expr_wrp_in_if_expr2339);
            classical_expr_wrp255=classical_expr_wrp();

            state._fsp--;

            stream_classical_expr_wrp.add(classical_expr_wrp255.getTree());

            // AST REWRITE
            // elements: classical_expr_wrp
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 473:31: -> ^( IF_EXPR classical_expr_wrp )
            {
                // Objcm.g:473:34: ^( IF_EXPR classical_expr_wrp )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(IF_EXPR, "IF_EXPR")
                , root_1);

                adaptor.addChild(root_1, stream_classical_expr_wrp.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "if_expr"


    public static class else_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "else_stmt"
    // Objcm.g:475:1: else_stmt : 'else' if_stmt_block ;
    public final ObjcmParser.else_stmt_return else_stmt() throws RecognitionException {
        ObjcmParser.else_stmt_return retval = new ObjcmParser.else_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal256=null;
        ObjcmParser.if_stmt_block_return if_stmt_block257 =null;


        Object string_literal256_tree=null;

        try {
            // Objcm.g:476:2: ( 'else' if_stmt_block )
            // Objcm.g:476:4: 'else' if_stmt_block
            {
            root_0 = (Object)adaptor.nil();


            string_literal256=(Token)match(input,188,FOLLOW_188_in_else_stmt2358); 
            string_literal256_tree = 
            (Object)adaptor.create(string_literal256)
            ;
            adaptor.addChild(root_0, string_literal256_tree);


            pushFollow(FOLLOW_if_stmt_block_in_else_stmt2361);
            if_stmt_block257=if_stmt_block();

            state._fsp--;

            adaptor.addChild(root_0, if_stmt_block257.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "else_stmt"


    public static class if_stmt_block_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "if_stmt_block_wrapper"
    // Objcm.g:478:1: if_stmt_block_wrapper : if_stmt_block -> ^( IF_BLOCK if_stmt_block ) ;
    public final ObjcmParser.if_stmt_block_wrapper_return if_stmt_block_wrapper() throws RecognitionException {
        ObjcmParser.if_stmt_block_wrapper_return retval = new ObjcmParser.if_stmt_block_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.if_stmt_block_return if_stmt_block258 =null;


        RewriteRuleSubtreeStream stream_if_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule if_stmt_block");
        try {
            // Objcm.g:479:2: ( if_stmt_block -> ^( IF_BLOCK if_stmt_block ) )
            // Objcm.g:479:4: if_stmt_block
            {
            pushFollow(FOLLOW_if_stmt_block_in_if_stmt_block_wrapper2370);
            if_stmt_block258=if_stmt_block();

            state._fsp--;

            stream_if_stmt_block.add(if_stmt_block258.getTree());

            // AST REWRITE
            // elements: if_stmt_block
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 479:18: -> ^( IF_BLOCK if_stmt_block )
            {
                // Objcm.g:479:21: ^( IF_BLOCK if_stmt_block )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(IF_BLOCK, "IF_BLOCK")
                , root_1);

                adaptor.addChild(root_1, stream_if_stmt_block.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "if_stmt_block_wrapper"


    public static class if_stmt_block_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "if_stmt_block"
    // Objcm.g:481:1: if_stmt_block : ( block_wrapper | block_internal );
    public final ObjcmParser.if_stmt_block_return if_stmt_block() throws RecognitionException {
        ObjcmParser.if_stmt_block_return retval = new ObjcmParser.if_stmt_block_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.block_wrapper_return block_wrapper259 =null;

        ObjcmParser.block_internal_return block_internal260 =null;



        try {
            // Objcm.g:482:2: ( block_wrapper | block_internal )
            int alt54=2;
            int LA54_0 = input.LA(1);

            if ( (LA54_0==L_FBR) ) {
                alt54=1;
            }
            else if ( (LA54_0==ASTERISK||LA54_0==BREAK_WORD||LA54_0==CONST_PREFIX||LA54_0==ENUM_PREFIX||LA54_0==ID||LA54_0==L_AND||LA54_0==L_BR||LA54_0==L_KBR||LA54_0==L_MINUS||LA54_0==L_MINUS_MINUS||LA54_0==L_NOT||LA54_0==L_PLUS||LA54_0==L_PLUS_PLUS||LA54_0==L_TILDA||LA54_0==NUMBER||LA54_0==SEMICOLON||(LA54_0 >= SINGLE_OP && LA54_0 <= SIZEOF)||LA54_0==STATIC_PREFIX||(LA54_0 >= STRING_LITERAL && LA54_0 <= STRING_LITERAL3)||LA54_0==STRUCT_PREFIX||LA54_0==VOID||LA54_0==166||LA54_0==173||LA54_0==175||(LA54_0 >= 177 && LA54_0 <= 179)||(LA54_0 >= 181 && LA54_0 <= 182)||LA54_0==185||(LA54_0 >= 187 && LA54_0 <= 193)||(LA54_0 >= 195 && LA54_0 <= 198)||(LA54_0 >= 201 && LA54_0 <= 202)) ) {
                alt54=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 54, 0, input);

                throw nvae;

            }
            switch (alt54) {
                case 1 :
                    // Objcm.g:482:4: block_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_block_wrapper_in_if_stmt_block2387);
                    block_wrapper259=block_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, block_wrapper259.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:483:5: block_internal
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_block_internal_in_if_stmt_block2393);
                    block_internal260=block_internal();

                    state._fsp--;

                    adaptor.addChild(root_0, block_internal260.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "if_stmt_block"


    public static class static_start_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "static_start_wrapper"
    // Objcm.g:486:1: static_start_wrapper : static_start -> ^( STATIC_START static_start ) ;
    public final ObjcmParser.static_start_wrapper_return static_start_wrapper() throws RecognitionException {
        ObjcmParser.static_start_wrapper_return retval = new ObjcmParser.static_start_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.static_start_return static_start261 =null;


        RewriteRuleSubtreeStream stream_static_start=new RewriteRuleSubtreeStream(adaptor,"rule static_start");
        try {
            // Objcm.g:487:2: ( static_start -> ^( STATIC_START static_start ) )
            // Objcm.g:487:4: static_start
            {
            pushFollow(FOLLOW_static_start_in_static_start_wrapper2405);
            static_start261=static_start();

            state._fsp--;

            stream_static_start.add(static_start261.getTree());

            // AST REWRITE
            // elements: static_start
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 487:17: -> ^( STATIC_START static_start )
            {
                // Objcm.g:487:20: ^( STATIC_START static_start )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(STATIC_START, "STATIC_START")
                , root_1);

                adaptor.addChild(root_1, stream_static_start.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "static_start_wrapper"


    public static class static_start_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "static_start"
    // Objcm.g:489:1: static_start : STATIC_PREFIX ( CONST_PREFIX )? ( static_type_wrapper )? full_expr2 ;
    public final ObjcmParser.static_start_return static_start() throws RecognitionException {
        ObjcmParser.static_start_return retval = new ObjcmParser.static_start_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STATIC_PREFIX262=null;
        Token CONST_PREFIX263=null;
        ObjcmParser.static_type_wrapper_return static_type_wrapper264 =null;

        ObjcmParser.full_expr2_return full_expr2265 =null;


        Object STATIC_PREFIX262_tree=null;
        Object CONST_PREFIX263_tree=null;

        try {
            // Objcm.g:490:2: ( STATIC_PREFIX ( CONST_PREFIX )? ( static_type_wrapper )? full_expr2 )
            // Objcm.g:490:4: STATIC_PREFIX ( CONST_PREFIX )? ( static_type_wrapper )? full_expr2
            {
            root_0 = (Object)adaptor.nil();


            STATIC_PREFIX262=(Token)match(input,STATIC_PREFIX,FOLLOW_STATIC_PREFIX_in_static_start2423); 
            STATIC_PREFIX262_tree = 
            (Object)adaptor.create(STATIC_PREFIX262)
            ;
            adaptor.addChild(root_0, STATIC_PREFIX262_tree);


            // Objcm.g:490:18: ( CONST_PREFIX )?
            int alt55=2;
            int LA55_0 = input.LA(1);

            if ( (LA55_0==CONST_PREFIX) ) {
                alt55=1;
            }
            switch (alt55) {
                case 1 :
                    // Objcm.g:490:18: CONST_PREFIX
                    {
                    CONST_PREFIX263=(Token)match(input,CONST_PREFIX,FOLLOW_CONST_PREFIX_in_static_start2425); 
                    CONST_PREFIX263_tree = 
                    (Object)adaptor.create(CONST_PREFIX263)
                    ;
                    adaptor.addChild(root_0, CONST_PREFIX263_tree);


                    }
                    break;

            }


            // Objcm.g:490:32: ( static_type_wrapper )?
            int alt56=2;
            alt56 = dfa56.predict(input);
            switch (alt56) {
                case 1 :
                    // Objcm.g:490:32: static_type_wrapper
                    {
                    pushFollow(FOLLOW_static_type_wrapper_in_static_start2428);
                    static_type_wrapper264=static_type_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, static_type_wrapper264.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_full_expr2_in_static_start2431);
            full_expr2265=full_expr2();

            state._fsp--;

            adaptor.addChild(root_0, full_expr2265.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "static_start"


    public static class static_type_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "static_type_wrapper"
    // Objcm.g:493:1: static_type_wrapper : static_type -> ^( STATIC_TYPE static_type ) ;
    public final ObjcmParser.static_type_wrapper_return static_type_wrapper() throws RecognitionException {
        ObjcmParser.static_type_wrapper_return retval = new ObjcmParser.static_type_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.static_type_return static_type266 =null;


        RewriteRuleSubtreeStream stream_static_type=new RewriteRuleSubtreeStream(adaptor,"rule static_type");
        try {
            // Objcm.g:494:2: ( static_type -> ^( STATIC_TYPE static_type ) )
            // Objcm.g:494:4: static_type
            {
            pushFollow(FOLLOW_static_type_in_static_type_wrapper2443);
            static_type266=static_type();

            state._fsp--;

            stream_static_type.add(static_type266.getTree());

            // AST REWRITE
            // elements: static_type
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 494:16: -> ^( STATIC_TYPE static_type )
            {
                // Objcm.g:494:19: ^( STATIC_TYPE static_type )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(STATIC_TYPE, "STATIC_TYPE")
                , root_1);

                adaptor.addChild(root_1, stream_static_type.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "static_type_wrapper"


    public static class static_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "static_type"
    // Objcm.g:496:1: static_type : object_name ( ASTERISK )* ;
    public final ObjcmParser.static_type_return static_type() throws RecognitionException {
        ObjcmParser.static_type_return retval = new ObjcmParser.static_type_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ASTERISK268=null;
        ObjcmParser.object_name_return object_name267 =null;


        Object ASTERISK268_tree=null;

        try {
            // Objcm.g:497:2: ( object_name ( ASTERISK )* )
            // Objcm.g:497:4: object_name ( ASTERISK )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_object_name_in_static_type2462);
            object_name267=object_name();

            state._fsp--;

            adaptor.addChild(root_0, object_name267.getTree());

            // Objcm.g:497:16: ( ASTERISK )*
            loop57:
            do {
                int alt57=2;
                int LA57_0 = input.LA(1);

                if ( (LA57_0==ASTERISK) ) {
                    alt57=1;
                }


                switch (alt57) {
            	case 1 :
            	    // Objcm.g:497:16: ASTERISK
            	    {
            	    ASTERISK268=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_static_type2464); 
            	    ASTERISK268_tree = 
            	    (Object)adaptor.create(ASTERISK268)
            	    ;
            	    adaptor.addChild(root_0, ASTERISK268_tree);


            	    }
            	    break;

            	default :
            	    break loop57;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "static_type"


    public static class id_part_end_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "id_part_end"
    // Objcm.g:499:1: id_part_end : ( id_part_end_internal )+ ;
    public final ObjcmParser.id_part_end_return id_part_end() throws RecognitionException {
        ObjcmParser.id_part_end_return retval = new ObjcmParser.id_part_end_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.id_part_end_internal_return id_part_end_internal269 =null;



        try {
            // Objcm.g:500:2: ( ( id_part_end_internal )+ )
            // Objcm.g:500:4: ( id_part_end_internal )+
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:500:4: ( id_part_end_internal )+
            int cnt58=0;
            loop58:
            do {
                int alt58=2;
                int LA58_0 = input.LA(1);

                if ( (LA58_0==DOT||LA58_0==163) ) {
                    alt58=1;
                }


                switch (alt58) {
            	case 1 :
            	    // Objcm.g:500:4: id_part_end_internal
            	    {
            	    pushFollow(FOLLOW_id_part_end_internal_in_id_part_end2476);
            	    id_part_end_internal269=id_part_end_internal();

            	    state._fsp--;

            	    adaptor.addChild(root_0, id_part_end_internal269.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt58 >= 1 ) break loop58;
                        EarlyExitException eee =
                            new EarlyExitException(58, input);
                        throw eee;
                }
                cnt58++;
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "id_part_end"


    public static class id_part_end_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "id_part_end_internal"
    // Objcm.g:503:1: id_part_end_internal : ( DOT | '->' ) id_part -> ^( FIELD_ACCESS id_part ) ;
    public final ObjcmParser.id_part_end_internal_return id_part_end_internal() throws RecognitionException {
        ObjcmParser.id_part_end_internal_return retval = new ObjcmParser.id_part_end_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token DOT270=null;
        Token string_literal271=null;
        ObjcmParser.id_part_return id_part272 =null;


        Object DOT270_tree=null;
        Object string_literal271_tree=null;
        RewriteRuleTokenStream stream_163=new RewriteRuleTokenStream(adaptor,"token 163");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_id_part=new RewriteRuleSubtreeStream(adaptor,"rule id_part");
        try {
            // Objcm.g:504:2: ( ( DOT | '->' ) id_part -> ^( FIELD_ACCESS id_part ) )
            // Objcm.g:504:4: ( DOT | '->' ) id_part
            {
            // Objcm.g:504:4: ( DOT | '->' )
            int alt59=2;
            int LA59_0 = input.LA(1);

            if ( (LA59_0==DOT) ) {
                alt59=1;
            }
            else if ( (LA59_0==163) ) {
                alt59=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 59, 0, input);

                throw nvae;

            }
            switch (alt59) {
                case 1 :
                    // Objcm.g:504:5: DOT
                    {
                    DOT270=(Token)match(input,DOT,FOLLOW_DOT_in_id_part_end_internal2491);  
                    stream_DOT.add(DOT270);


                    }
                    break;
                case 2 :
                    // Objcm.g:504:11: '->'
                    {
                    string_literal271=(Token)match(input,163,FOLLOW_163_in_id_part_end_internal2495);  
                    stream_163.add(string_literal271);


                    }
                    break;

            }


            pushFollow(FOLLOW_id_part_in_id_part_end_internal2498);
            id_part272=id_part();

            state._fsp--;

            stream_id_part.add(id_part272.getTree());

            // AST REWRITE
            // elements: id_part
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 504:25: -> ^( FIELD_ACCESS id_part )
            {
                // Objcm.g:504:28: ^( FIELD_ACCESS id_part )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FIELD_ACCESS, "FIELD_ACCESS")
                , root_1);

                adaptor.addChild(root_1, stream_id_part.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "id_part_end_internal"


    public static class known_types_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "known_types"
    // Objcm.g:507:1: known_types : ( 'unsigned' | VOID );
    public final ObjcmParser.known_types_return known_types() throws RecognitionException {
        ObjcmParser.known_types_return retval = new ObjcmParser.known_types_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set273=null;

        Object set273_tree=null;

        try {
            // Objcm.g:508:2: ( 'unsigned' | VOID )
            // Objcm.g:
            {
            root_0 = (Object)adaptor.nil();


            set273=(Token)input.LT(1);

            if ( input.LA(1)==VOID||input.LA(1)==201 ) {
                input.consume();
                adaptor.addChild(root_0, 
                (Object)adaptor.create(set273)
                );
                state.errorRecovery=false;
            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "known_types"


    public static class id_part_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "id_part"
    // Objcm.g:512:1: id_part : name_internal ( function_brackets_wrapper )? ( index_wrapper )* ;
    public final ObjcmParser.id_part_return id_part() throws RecognitionException {
        ObjcmParser.id_part_return retval = new ObjcmParser.id_part_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.name_internal_return name_internal274 =null;

        ObjcmParser.function_brackets_wrapper_return function_brackets_wrapper275 =null;

        ObjcmParser.index_wrapper_return index_wrapper276 =null;



        try {
            // Objcm.g:512:9: ( name_internal ( function_brackets_wrapper )? ( index_wrapper )* )
            // Objcm.g:512:12: name_internal ( function_brackets_wrapper )? ( index_wrapper )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_name_internal_in_id_part2536);
            name_internal274=name_internal();

            state._fsp--;

            adaptor.addChild(root_0, name_internal274.getTree());

            // Objcm.g:512:26: ( function_brackets_wrapper )?
            int alt60=2;
            int LA60_0 = input.LA(1);

            if ( (LA60_0==L_BR) ) {
                alt60=1;
            }
            switch (alt60) {
                case 1 :
                    // Objcm.g:512:26: function_brackets_wrapper
                    {
                    pushFollow(FOLLOW_function_brackets_wrapper_in_id_part2538);
                    function_brackets_wrapper275=function_brackets_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, function_brackets_wrapper275.getTree());

                    }
                    break;

            }


            // Objcm.g:512:53: ( index_wrapper )*
            loop61:
            do {
                int alt61=2;
                int LA61_0 = input.LA(1);

                if ( (LA61_0==L_KBR) ) {
                    alt61=1;
                }


                switch (alt61) {
            	case 1 :
            	    // Objcm.g:512:53: index_wrapper
            	    {
            	    pushFollow(FOLLOW_index_wrapper_in_id_part2541);
            	    index_wrapper276=index_wrapper();

            	    state._fsp--;

            	    adaptor.addChild(root_0, index_wrapper276.getTree());

            	    }
            	    break;

            	default :
            	    break loop61;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "id_part"


    public static class object_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "object_name"
    // Objcm.g:515:1: object_name : id_part ( id_part_end )? ;
    public final ObjcmParser.object_name_return object_name() throws RecognitionException {
        ObjcmParser.object_name_return retval = new ObjcmParser.object_name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.id_part_return id_part277 =null;

        ObjcmParser.id_part_end_return id_part_end278 =null;



        try {
            // Objcm.g:516:2: ( id_part ( id_part_end )? )
            // Objcm.g:516:4: id_part ( id_part_end )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_id_part_in_object_name2554);
            id_part277=id_part();

            state._fsp--;

            adaptor.addChild(root_0, id_part277.getTree());

            // Objcm.g:516:12: ( id_part_end )?
            int alt62=2;
            int LA62_0 = input.LA(1);

            if ( (LA62_0==DOT||LA62_0==163) ) {
                alt62=1;
            }
            switch (alt62) {
                case 1 :
                    // Objcm.g:516:12: id_part_end
                    {
                    pushFollow(FOLLOW_id_part_end_in_object_name2556);
                    id_part_end278=id_part_end();

                    state._fsp--;

                    adaptor.addChild(root_0, id_part_end278.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "object_name"


    public static class method_call_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_call_wrapper"
    // Objcm.g:519:1: method_call_wrapper : L_KBR method_call2 R_KBR -> ^( METHOD_CALL method_call2 ) ;
    public final ObjcmParser.method_call_wrapper_return method_call_wrapper() throws RecognitionException {
        ObjcmParser.method_call_wrapper_return retval = new ObjcmParser.method_call_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_KBR279=null;
        Token R_KBR281=null;
        ObjcmParser.method_call2_return method_call2280 =null;


        Object L_KBR279_tree=null;
        Object R_KBR281_tree=null;
        RewriteRuleTokenStream stream_R_KBR=new RewriteRuleTokenStream(adaptor,"token R_KBR");
        RewriteRuleTokenStream stream_L_KBR=new RewriteRuleTokenStream(adaptor,"token L_KBR");
        RewriteRuleSubtreeStream stream_method_call2=new RewriteRuleSubtreeStream(adaptor,"rule method_call2");
        try {
            // Objcm.g:520:2: ( L_KBR method_call2 R_KBR -> ^( METHOD_CALL method_call2 ) )
            // Objcm.g:520:4: L_KBR method_call2 R_KBR
            {
            L_KBR279=(Token)match(input,L_KBR,FOLLOW_L_KBR_in_method_call_wrapper2570);  
            stream_L_KBR.add(L_KBR279);


            pushFollow(FOLLOW_method_call2_in_method_call_wrapper2572);
            method_call2280=method_call2();

            state._fsp--;

            stream_method_call2.add(method_call2280.getTree());

            R_KBR281=(Token)match(input,R_KBR,FOLLOW_R_KBR_in_method_call_wrapper2574);  
            stream_R_KBR.add(R_KBR281);


            // AST REWRITE
            // elements: method_call2
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 520:29: -> ^( METHOD_CALL method_call2 )
            {
                // Objcm.g:520:32: ^( METHOD_CALL method_call2 )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD_CALL, "METHOD_CALL")
                , root_1);

                adaptor.addChild(root_1, stream_method_call2.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_call_wrapper"


    public static class method_call_wrapper2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_call_wrapper2"
    // Objcm.g:523:1: method_call_wrapper2 : method_call2 -> ^( METHOD_CALL method_call2 ) ;
    public final ObjcmParser.method_call_wrapper2_return method_call_wrapper2() throws RecognitionException {
        ObjcmParser.method_call_wrapper2_return retval = new ObjcmParser.method_call_wrapper2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_call2_return method_call2282 =null;


        RewriteRuleSubtreeStream stream_method_call2=new RewriteRuleSubtreeStream(adaptor,"rule method_call2");
        try {
            // Objcm.g:524:2: ( method_call2 -> ^( METHOD_CALL method_call2 ) )
            // Objcm.g:524:4: method_call2
            {
            pushFollow(FOLLOW_method_call2_in_method_call_wrapper22597);
            method_call2282=method_call2();

            state._fsp--;

            stream_method_call2.add(method_call2282.getTree());

            // AST REWRITE
            // elements: method_call2
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 524:17: -> ^( METHOD_CALL method_call2 )
            {
                // Objcm.g:524:20: ^( METHOD_CALL method_call2 )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD_CALL, "METHOD_CALL")
                , root_1);

                adaptor.addChild(root_1, stream_method_call2.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_call_wrapper2"


    public static class method_call2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_call2"
    // Objcm.g:526:1: method_call2 : object_wrapper method_name ( method_call_message_list_wrapper )? ;
    public final ObjcmParser.method_call2_return method_call2() throws RecognitionException {
        ObjcmParser.method_call2_return retval = new ObjcmParser.method_call2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.object_wrapper_return object_wrapper283 =null;

        ObjcmParser.method_name_return method_name284 =null;

        ObjcmParser.method_call_message_list_wrapper_return method_call_message_list_wrapper285 =null;



        try {
            // Objcm.g:527:2: ( object_wrapper method_name ( method_call_message_list_wrapper )? )
            // Objcm.g:527:4: object_wrapper method_name ( method_call_message_list_wrapper )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_object_wrapper_in_method_call22616);
            object_wrapper283=object_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, object_wrapper283.getTree());

            pushFollow(FOLLOW_method_name_in_method_call22618);
            method_name284=method_name();

            state._fsp--;

            adaptor.addChild(root_0, method_name284.getTree());

            // Objcm.g:527:31: ( method_call_message_list_wrapper )?
            int alt63=2;
            int LA63_0 = input.LA(1);

            if ( (LA63_0==COLON) ) {
                alt63=1;
            }
            switch (alt63) {
                case 1 :
                    // Objcm.g:527:33: method_call_message_list_wrapper
                    {
                    pushFollow(FOLLOW_method_call_message_list_wrapper_in_method_call22622);
                    method_call_message_list_wrapper285=method_call_message_list_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, method_call_message_list_wrapper285.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_call2"


    public static class object_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "object_wrapper"
    // Objcm.g:529:1: object_wrapper : object_wrapper_internal -> ^( OBJECT object_wrapper_internal ) ;
    public final ObjcmParser.object_wrapper_return object_wrapper() throws RecognitionException {
        ObjcmParser.object_wrapper_return retval = new ObjcmParser.object_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.object_wrapper_internal_return object_wrapper_internal286 =null;


        RewriteRuleSubtreeStream stream_object_wrapper_internal=new RewriteRuleSubtreeStream(adaptor,"rule object_wrapper_internal");
        try {
            // Objcm.g:530:2: ( object_wrapper_internal -> ^( OBJECT object_wrapper_internal ) )
            // Objcm.g:530:4: object_wrapper_internal
            {
            pushFollow(FOLLOW_object_wrapper_internal_in_object_wrapper2633);
            object_wrapper_internal286=object_wrapper_internal();

            state._fsp--;

            stream_object_wrapper_internal.add(object_wrapper_internal286.getTree());

            // AST REWRITE
            // elements: object_wrapper_internal
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 530:28: -> ^( OBJECT object_wrapper_internal )
            {
                // Objcm.g:530:31: ^( OBJECT object_wrapper_internal )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(OBJECT, "OBJECT")
                , root_1);

                adaptor.addChild(root_1, stream_object_wrapper_internal.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "object_wrapper"


    public static class object_wrapper_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "object_wrapper_internal"
    // Objcm.g:532:1: object_wrapper_internal : ( type_convertion ( object_name | method_call_wrapper ) | object_name | method_call_wrapper | STRING_LITERAL );
    public final ObjcmParser.object_wrapper_internal_return object_wrapper_internal() throws RecognitionException {
        ObjcmParser.object_wrapper_internal_return retval = new ObjcmParser.object_wrapper_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STRING_LITERAL292=null;
        ObjcmParser.type_convertion_return type_convertion287 =null;

        ObjcmParser.object_name_return object_name288 =null;

        ObjcmParser.method_call_wrapper_return method_call_wrapper289 =null;

        ObjcmParser.object_name_return object_name290 =null;

        ObjcmParser.method_call_wrapper_return method_call_wrapper291 =null;


        Object STRING_LITERAL292_tree=null;

        try {
            // Objcm.g:534:2: ( type_convertion ( object_name | method_call_wrapper ) | object_name | method_call_wrapper | STRING_LITERAL )
            int alt65=4;
            switch ( input.LA(1) ) {
            case L_BR:
                {
                alt65=1;
                }
                break;
            case ID:
            case 182:
            case 185:
            case 193:
            case 196:
                {
                alt65=2;
                }
                break;
            case L_KBR:
                {
                alt65=3;
                }
                break;
            case STRING_LITERAL:
                {
                alt65=4;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 65, 0, input);

                throw nvae;

            }

            switch (alt65) {
                case 1 :
                    // Objcm.g:534:4: type_convertion ( object_name | method_call_wrapper )
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_convertion_in_object_wrapper_internal2652);
                    type_convertion287=type_convertion();

                    state._fsp--;

                    adaptor.addChild(root_0, type_convertion287.getTree());

                    // Objcm.g:534:20: ( object_name | method_call_wrapper )
                    int alt64=2;
                    int LA64_0 = input.LA(1);

                    if ( (LA64_0==ID||LA64_0==182||LA64_0==185||LA64_0==193||LA64_0==196) ) {
                        alt64=1;
                    }
                    else if ( (LA64_0==L_KBR) ) {
                        alt64=2;
                    }
                    else {
                        NoViableAltException nvae =
                            new NoViableAltException("", 64, 0, input);

                        throw nvae;

                    }
                    switch (alt64) {
                        case 1 :
                            // Objcm.g:534:21: object_name
                            {
                            pushFollow(FOLLOW_object_name_in_object_wrapper_internal2655);
                            object_name288=object_name();

                            state._fsp--;

                            adaptor.addChild(root_0, object_name288.getTree());

                            }
                            break;
                        case 2 :
                            // Objcm.g:534:35: method_call_wrapper
                            {
                            pushFollow(FOLLOW_method_call_wrapper_in_object_wrapper_internal2659);
                            method_call_wrapper289=method_call_wrapper();

                            state._fsp--;

                            adaptor.addChild(root_0, method_call_wrapper289.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // Objcm.g:535:4: object_name
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_object_name_in_object_wrapper_internal2665);
                    object_name290=object_name();

                    state._fsp--;

                    adaptor.addChild(root_0, object_name290.getTree());

                    }
                    break;
                case 3 :
                    // Objcm.g:536:4: method_call_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_method_call_wrapper_in_object_wrapper_internal2670);
                    method_call_wrapper291=method_call_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, method_call_wrapper291.getTree());

                    }
                    break;
                case 4 :
                    // Objcm.g:537:4: STRING_LITERAL
                    {
                    root_0 = (Object)adaptor.nil();


                    STRING_LITERAL292=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_object_wrapper_internal2675); 
                    STRING_LITERAL292_tree = 
                    (Object)adaptor.create(STRING_LITERAL292)
                    ;
                    adaptor.addChild(root_0, STRING_LITERAL292_tree);


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "object_wrapper_internal"


    public static class method_message3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_message3"
    // Objcm.g:540:1: method_message3 : classical_expr_wrp -> ^( MESSAGE classical_expr_wrp ) ;
    public final ObjcmParser.method_message3_return method_message3() throws RecognitionException {
        ObjcmParser.method_message3_return retval = new ObjcmParser.method_message3_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp293 =null;


        RewriteRuleSubtreeStream stream_classical_expr_wrp=new RewriteRuleSubtreeStream(adaptor,"rule classical_expr_wrp");
        try {
            // Objcm.g:541:2: ( classical_expr_wrp -> ^( MESSAGE classical_expr_wrp ) )
            // Objcm.g:541:4: classical_expr_wrp
            {
            pushFollow(FOLLOW_classical_expr_wrp_in_method_message32687);
            classical_expr_wrp293=classical_expr_wrp();

            state._fsp--;

            stream_classical_expr_wrp.add(classical_expr_wrp293.getTree());

            // AST REWRITE
            // elements: classical_expr_wrp
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 541:23: -> ^( MESSAGE classical_expr_wrp )
            {
                // Objcm.g:541:26: ^( MESSAGE classical_expr_wrp )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(MESSAGE, "MESSAGE")
                , root_1);

                adaptor.addChild(root_1, stream_classical_expr_wrp.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_message3"


    public static class type_convertion_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_convertion"
    // Objcm.g:543:1: type_convertion : type_convertion_internal -> ^( TYPE_CONVERTION type_convertion_internal ) ;
    public final ObjcmParser.type_convertion_return type_convertion() throws RecognitionException {
        ObjcmParser.type_convertion_return retval = new ObjcmParser.type_convertion_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.type_convertion_internal_return type_convertion_internal294 =null;


        RewriteRuleSubtreeStream stream_type_convertion_internal=new RewriteRuleSubtreeStream(adaptor,"rule type_convertion_internal");
        try {
            // Objcm.g:544:2: ( type_convertion_internal -> ^( TYPE_CONVERTION type_convertion_internal ) )
            // Objcm.g:544:4: type_convertion_internal
            {
            pushFollow(FOLLOW_type_convertion_internal_in_type_convertion2706);
            type_convertion_internal294=type_convertion_internal();

            state._fsp--;

            stream_type_convertion_internal.add(type_convertion_internal294.getTree());

            // AST REWRITE
            // elements: type_convertion_internal
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 544:29: -> ^( TYPE_CONVERTION type_convertion_internal )
            {
                // Objcm.g:544:32: ^( TYPE_CONVERTION type_convertion_internal )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TYPE_CONVERTION, "TYPE_CONVERTION")
                , root_1);

                adaptor.addChild(root_1, stream_type_convertion_internal.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_convertion"


    public static class type_convertion_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_convertion_internal"
    // Objcm.g:546:1: type_convertion_internal : L_BR ( 'const' )? ( 'unsigned' )? type_internal ( generic )? ( ASTERISK )* R_BR -> ^( type_internal ( generic )? ) ;
    public final ObjcmParser.type_convertion_internal_return type_convertion_internal() throws RecognitionException {
        ObjcmParser.type_convertion_internal_return retval = new ObjcmParser.type_convertion_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_BR295=null;
        Token string_literal296=null;
        Token string_literal297=null;
        Token ASTERISK300=null;
        Token R_BR301=null;
        ObjcmParser.type_internal_return type_internal298 =null;

        ObjcmParser.generic_return generic299 =null;


        Object L_BR295_tree=null;
        Object string_literal296_tree=null;
        Object string_literal297_tree=null;
        Object ASTERISK300_tree=null;
        Object R_BR301_tree=null;
        RewriteRuleTokenStream stream_R_BR=new RewriteRuleTokenStream(adaptor,"token R_BR");
        RewriteRuleTokenStream stream_201=new RewriteRuleTokenStream(adaptor,"token 201");
        RewriteRuleTokenStream stream_L_BR=new RewriteRuleTokenStream(adaptor,"token L_BR");
        RewriteRuleTokenStream stream_ASTERISK=new RewriteRuleTokenStream(adaptor,"token ASTERISK");
        RewriteRuleTokenStream stream_CONST_PREFIX=new RewriteRuleTokenStream(adaptor,"token CONST_PREFIX");
        RewriteRuleSubtreeStream stream_generic=new RewriteRuleSubtreeStream(adaptor,"rule generic");
        RewriteRuleSubtreeStream stream_type_internal=new RewriteRuleSubtreeStream(adaptor,"rule type_internal");
        try {
            // Objcm.g:547:2: ( L_BR ( 'const' )? ( 'unsigned' )? type_internal ( generic )? ( ASTERISK )* R_BR -> ^( type_internal ( generic )? ) )
            // Objcm.g:547:4: L_BR ( 'const' )? ( 'unsigned' )? type_internal ( generic )? ( ASTERISK )* R_BR
            {
            L_BR295=(Token)match(input,L_BR,FOLLOW_L_BR_in_type_convertion_internal2725);  
            stream_L_BR.add(L_BR295);


            // Objcm.g:547:9: ( 'const' )?
            int alt66=2;
            int LA66_0 = input.LA(1);

            if ( (LA66_0==CONST_PREFIX) ) {
                alt66=1;
            }
            switch (alt66) {
                case 1 :
                    // Objcm.g:547:9: 'const'
                    {
                    string_literal296=(Token)match(input,CONST_PREFIX,FOLLOW_CONST_PREFIX_in_type_convertion_internal2727);  
                    stream_CONST_PREFIX.add(string_literal296);


                    }
                    break;

            }


            // Objcm.g:547:18: ( 'unsigned' )?
            int alt67=2;
            int LA67_0 = input.LA(1);

            if ( (LA67_0==201) ) {
                alt67=1;
            }
            switch (alt67) {
                case 1 :
                    // Objcm.g:547:18: 'unsigned'
                    {
                    string_literal297=(Token)match(input,201,FOLLOW_201_in_type_convertion_internal2730);  
                    stream_201.add(string_literal297);


                    }
                    break;

            }


            pushFollow(FOLLOW_type_internal_in_type_convertion_internal2733);
            type_internal298=type_internal();

            state._fsp--;

            stream_type_internal.add(type_internal298.getTree());

            // Objcm.g:547:44: ( generic )?
            int alt68=2;
            int LA68_0 = input.LA(1);

            if ( (LA68_0==L_LESS) ) {
                alt68=1;
            }
            switch (alt68) {
                case 1 :
                    // Objcm.g:547:44: generic
                    {
                    pushFollow(FOLLOW_generic_in_type_convertion_internal2735);
                    generic299=generic();

                    state._fsp--;

                    stream_generic.add(generic299.getTree());

                    }
                    break;

            }


            // Objcm.g:547:53: ( ASTERISK )*
            loop69:
            do {
                int alt69=2;
                int LA69_0 = input.LA(1);

                if ( (LA69_0==ASTERISK) ) {
                    alt69=1;
                }


                switch (alt69) {
            	case 1 :
            	    // Objcm.g:547:53: ASTERISK
            	    {
            	    ASTERISK300=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_type_convertion_internal2738);  
            	    stream_ASTERISK.add(ASTERISK300);


            	    }
            	    break;

            	default :
            	    break loop69;
                }
            } while (true);


            R_BR301=(Token)match(input,R_BR,FOLLOW_R_BR_in_type_convertion_internal2741);  
            stream_R_BR.add(R_BR301);


            // AST REWRITE
            // elements: generic, type_internal
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 547:68: -> ^( type_internal ( generic )? )
            {
                // Objcm.g:547:71: ^( type_internal ( generic )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_type_internal.nextNode(), root_1);

                // Objcm.g:547:87: ( generic )?
                if ( stream_generic.hasNext() ) {
                    adaptor.addChild(root_1, stream_generic.nextTree());

                }
                stream_generic.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_convertion_internal"


    public static class method_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_name"
    // Objcm.g:549:1: method_name : ( ID -> ^( METHOD_NAME ID ) | property -> ^( METHOD_NAME property ) );
    public final ObjcmParser.method_name_return method_name() throws RecognitionException {
        ObjcmParser.method_name_return retval = new ObjcmParser.method_name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID302=null;
        ObjcmParser.property_return property303 =null;


        Object ID302_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleSubtreeStream stream_property=new RewriteRuleSubtreeStream(adaptor,"rule property");
        try {
            // Objcm.g:550:2: ( ID -> ^( METHOD_NAME ID ) | property -> ^( METHOD_NAME property ) )
            int alt70=2;
            int LA70_0 = input.LA(1);

            if ( (LA70_0==ID) ) {
                alt70=1;
            }
            else if ( (LA70_0==182||LA70_0==185||LA70_0==196) ) {
                alt70=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 70, 0, input);

                throw nvae;

            }
            switch (alt70) {
                case 1 :
                    // Objcm.g:550:4: ID
                    {
                    ID302=(Token)match(input,ID,FOLLOW_ID_in_method_name2759);  
                    stream_ID.add(ID302);


                    // AST REWRITE
                    // elements: ID
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 550:7: -> ^( METHOD_NAME ID )
                    {
                        // Objcm.g:550:10: ^( METHOD_NAME ID )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(METHOD_NAME, "METHOD_NAME")
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_ID.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 2 :
                    // Objcm.g:551:4: property
                    {
                    pushFollow(FOLLOW_property_in_method_name2772);
                    property303=property();

                    state._fsp--;

                    stream_property.add(property303.getTree());

                    // AST REWRITE
                    // elements: property
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 551:13: -> ^( METHOD_NAME property )
                    {
                        // Objcm.g:551:16: ^( METHOD_NAME property )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(METHOD_NAME, "METHOD_NAME")
                        , root_1);

                        adaptor.addChild(root_1, stream_property.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_name"


    public static class method_call_message_list_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_call_message_list_wrapper"
    // Objcm.g:553:1: method_call_message_list_wrapper : method_call_message_list -> ^( MSG_LIST method_call_message_list ) ;
    public final ObjcmParser.method_call_message_list_wrapper_return method_call_message_list_wrapper() throws RecognitionException {
        ObjcmParser.method_call_message_list_wrapper_return retval = new ObjcmParser.method_call_message_list_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_call_message_list_return method_call_message_list304 =null;


        RewriteRuleSubtreeStream stream_method_call_message_list=new RewriteRuleSubtreeStream(adaptor,"rule method_call_message_list");
        try {
            // Objcm.g:554:2: ( method_call_message_list -> ^( MSG_LIST method_call_message_list ) )
            // Objcm.g:554:4: method_call_message_list
            {
            pushFollow(FOLLOW_method_call_message_list_in_method_call_message_list_wrapper2789);
            method_call_message_list304=method_call_message_list();

            state._fsp--;

            stream_method_call_message_list.add(method_call_message_list304.getTree());

            // AST REWRITE
            // elements: method_call_message_list
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 554:29: -> ^( MSG_LIST method_call_message_list )
            {
                // Objcm.g:554:32: ^( MSG_LIST method_call_message_list )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(MSG_LIST, "MSG_LIST")
                , root_1);

                adaptor.addChild(root_1, stream_method_call_message_list.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_call_message_list_wrapper"


    public static class method_call_message_list_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_call_message_list"
    // Objcm.g:556:1: method_call_message_list : method_call_message_first_wrapper ( method_call_message_wrapper )* ;
    public final ObjcmParser.method_call_message_list_return method_call_message_list() throws RecognitionException {
        ObjcmParser.method_call_message_list_return retval = new ObjcmParser.method_call_message_list_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_call_message_first_wrapper_return method_call_message_first_wrapper305 =null;

        ObjcmParser.method_call_message_wrapper_return method_call_message_wrapper306 =null;



        try {
            // Objcm.g:557:2: ( method_call_message_first_wrapper ( method_call_message_wrapper )* )
            // Objcm.g:557:4: method_call_message_first_wrapper ( method_call_message_wrapper )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_method_call_message_first_wrapper_in_method_call_message_list2806);
            method_call_message_first_wrapper305=method_call_message_first_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, method_call_message_first_wrapper305.getTree());

            // Objcm.g:557:38: ( method_call_message_wrapper )*
            loop71:
            do {
                int alt71=2;
                int LA71_0 = input.LA(1);

                if ( (LA71_0==COLON||LA71_0==ID) ) {
                    alt71=1;
                }


                switch (alt71) {
            	case 1 :
            	    // Objcm.g:557:38: method_call_message_wrapper
            	    {
            	    pushFollow(FOLLOW_method_call_message_wrapper_in_method_call_message_list2808);
            	    method_call_message_wrapper306=method_call_message_wrapper();

            	    state._fsp--;

            	    adaptor.addChild(root_0, method_call_message_wrapper306.getTree());

            	    }
            	    break;

            	default :
            	    break loop71;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_call_message_list"


    public static class method_call_message_first_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_call_message_first_wrapper"
    // Objcm.g:559:1: method_call_message_first_wrapper : method_call_message_first -> ^( METHOD_MSG method_call_message_first ) ;
    public final ObjcmParser.method_call_message_first_wrapper_return method_call_message_first_wrapper() throws RecognitionException {
        ObjcmParser.method_call_message_first_wrapper_return retval = new ObjcmParser.method_call_message_first_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_call_message_first_return method_call_message_first307 =null;


        RewriteRuleSubtreeStream stream_method_call_message_first=new RewriteRuleSubtreeStream(adaptor,"rule method_call_message_first");
        try {
            // Objcm.g:560:2: ( method_call_message_first -> ^( METHOD_MSG method_call_message_first ) )
            // Objcm.g:560:4: method_call_message_first
            {
            pushFollow(FOLLOW_method_call_message_first_in_method_call_message_first_wrapper2819);
            method_call_message_first307=method_call_message_first();

            state._fsp--;

            stream_method_call_message_first.add(method_call_message_first307.getTree());

            // AST REWRITE
            // elements: method_call_message_first
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 560:30: -> ^( METHOD_MSG method_call_message_first )
            {
                // Objcm.g:560:33: ^( METHOD_MSG method_call_message_first )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD_MSG, "METHOD_MSG")
                , root_1);

                adaptor.addChild(root_1, stream_method_call_message_first.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_call_message_first_wrapper"


    public static class method_call_message_first_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_call_message_first"
    // Objcm.g:562:1: method_call_message_first : COLON message ;
    public final ObjcmParser.method_call_message_first_return method_call_message_first() throws RecognitionException {
        ObjcmParser.method_call_message_first_return retval = new ObjcmParser.method_call_message_first_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COLON308=null;
        ObjcmParser.message_return message309 =null;


        Object COLON308_tree=null;

        try {
            // Objcm.g:563:2: ( COLON message )
            // Objcm.g:563:4: COLON message
            {
            root_0 = (Object)adaptor.nil();


            COLON308=(Token)match(input,COLON,FOLLOW_COLON_in_method_call_message_first2836); 
            COLON308_tree = 
            (Object)adaptor.create(COLON308)
            ;
            adaptor.addChild(root_0, COLON308_tree);


            pushFollow(FOLLOW_message_in_method_call_message_first2839);
            message309=message();

            state._fsp--;

            adaptor.addChild(root_0, message309.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_call_message_first"


    public static class method_call_message_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_call_message_wrapper"
    // Objcm.g:565:1: method_call_message_wrapper : method_call_message -> ^( METHOD_MSG method_call_message ) ;
    public final ObjcmParser.method_call_message_wrapper_return method_call_message_wrapper() throws RecognitionException {
        ObjcmParser.method_call_message_wrapper_return retval = new ObjcmParser.method_call_message_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_call_message_return method_call_message310 =null;


        RewriteRuleSubtreeStream stream_method_call_message=new RewriteRuleSubtreeStream(adaptor,"rule method_call_message");
        try {
            // Objcm.g:566:2: ( method_call_message -> ^( METHOD_MSG method_call_message ) )
            // Objcm.g:566:4: method_call_message
            {
            pushFollow(FOLLOW_method_call_message_in_method_call_message_wrapper2849);
            method_call_message310=method_call_message();

            state._fsp--;

            stream_method_call_message.add(method_call_message310.getTree());

            // AST REWRITE
            // elements: method_call_message
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 566:24: -> ^( METHOD_MSG method_call_message )
            {
                // Objcm.g:566:27: ^( METHOD_MSG method_call_message )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD_MSG, "METHOD_MSG")
                , root_1);

                adaptor.addChild(root_1, stream_method_call_message.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_call_message_wrapper"


    public static class method_call_message_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_call_message"
    // Objcm.g:568:1: method_call_message : ( prefix | incomplete_prefix ) message ;
    public final ObjcmParser.method_call_message_return method_call_message() throws RecognitionException {
        ObjcmParser.method_call_message_return retval = new ObjcmParser.method_call_message_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.prefix_return prefix311 =null;

        ObjcmParser.incomplete_prefix_return incomplete_prefix312 =null;

        ObjcmParser.message_return message313 =null;



        try {
            // Objcm.g:569:2: ( ( prefix | incomplete_prefix ) message )
            // Objcm.g:569:4: ( prefix | incomplete_prefix ) message
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:569:4: ( prefix | incomplete_prefix )
            int alt72=2;
            int LA72_0 = input.LA(1);

            if ( (LA72_0==ID) ) {
                alt72=1;
            }
            else if ( (LA72_0==COLON) ) {
                alt72=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 72, 0, input);

                throw nvae;

            }
            switch (alt72) {
                case 1 :
                    // Objcm.g:569:5: prefix
                    {
                    pushFollow(FOLLOW_prefix_in_method_call_message2868);
                    prefix311=prefix();

                    state._fsp--;

                    adaptor.addChild(root_0, prefix311.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:569:14: incomplete_prefix
                    {
                    pushFollow(FOLLOW_incomplete_prefix_in_method_call_message2872);
                    incomplete_prefix312=incomplete_prefix();

                    state._fsp--;

                    adaptor.addChild(root_0, incomplete_prefix312.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_message_in_method_call_message2876);
            message313=message();

            state._fsp--;

            adaptor.addChild(root_0, message313.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_call_message"


    public static class message_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "message"
    // Objcm.g:571:1: message : msg_expr ( COMMA msg_expr )* -> ^( MESSAGE msg_expr ( COMMA msg_expr )* ) ;
    public final ObjcmParser.message_return message() throws RecognitionException {
        ObjcmParser.message_return retval = new ObjcmParser.message_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA315=null;
        ObjcmParser.msg_expr_return msg_expr314 =null;

        ObjcmParser.msg_expr_return msg_expr316 =null;


        Object COMMA315_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_msg_expr=new RewriteRuleSubtreeStream(adaptor,"rule msg_expr");
        try {
            // Objcm.g:571:9: ( msg_expr ( COMMA msg_expr )* -> ^( MESSAGE msg_expr ( COMMA msg_expr )* ) )
            // Objcm.g:571:11: msg_expr ( COMMA msg_expr )*
            {
            pushFollow(FOLLOW_msg_expr_in_message2885);
            msg_expr314=msg_expr();

            state._fsp--;

            stream_msg_expr.add(msg_expr314.getTree());

            // Objcm.g:571:20: ( COMMA msg_expr )*
            loop73:
            do {
                int alt73=2;
                int LA73_0 = input.LA(1);

                if ( (LA73_0==COMMA) ) {
                    alt73=1;
                }


                switch (alt73) {
            	case 1 :
            	    // Objcm.g:571:21: COMMA msg_expr
            	    {
            	    COMMA315=(Token)match(input,COMMA,FOLLOW_COMMA_in_message2888);  
            	    stream_COMMA.add(COMMA315);


            	    pushFollow(FOLLOW_msg_expr_in_message2890);
            	    msg_expr316=msg_expr();

            	    state._fsp--;

            	    stream_msg_expr.add(msg_expr316.getTree());

            	    }
            	    break;

            	default :
            	    break loop73;
                }
            } while (true);


            // AST REWRITE
            // elements: msg_expr, msg_expr, COMMA
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 571:38: -> ^( MESSAGE msg_expr ( COMMA msg_expr )* )
            {
                // Objcm.g:571:41: ^( MESSAGE msg_expr ( COMMA msg_expr )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(MESSAGE, "MESSAGE")
                , root_1);

                adaptor.addChild(root_1, stream_msg_expr.nextTree());

                // Objcm.g:571:60: ( COMMA msg_expr )*
                while ( stream_msg_expr.hasNext()||stream_COMMA.hasNext() ) {
                    adaptor.addChild(root_1, 
                    stream_COMMA.nextNode()
                    );

                    adaptor.addChild(root_1, stream_msg_expr.nextTree());

                }
                stream_msg_expr.reset();
                stream_COMMA.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "message"


    public static class msg_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "msg_expr"
    // Objcm.g:575:1: msg_expr : classical_expr_wrp ;
    public final ObjcmParser.msg_expr_return msg_expr() throws RecognitionException {
        ObjcmParser.msg_expr_return retval = new ObjcmParser.msg_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp317 =null;



        try {
            // Objcm.g:576:2: ( classical_expr_wrp )
            // Objcm.g:576:5: classical_expr_wrp
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_classical_expr_wrp_in_msg_expr2924);
            classical_expr_wrp317=classical_expr_wrp();

            state._fsp--;

            adaptor.addChild(root_0, classical_expr_wrp317.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "msg_expr"


    public static class expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expression"
    // Objcm.g:583:1: expression : ( classical_expr_wrp | struct_init );
    public final ObjcmParser.expression_return expression() throws RecognitionException {
        ObjcmParser.expression_return retval = new ObjcmParser.expression_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp318 =null;

        ObjcmParser.struct_init_return struct_init319 =null;



        try {
            // Objcm.g:584:2: ( classical_expr_wrp | struct_init )
            int alt74=2;
            alt74 = dfa74.predict(input);
            switch (alt74) {
                case 1 :
                    // Objcm.g:584:4: classical_expr_wrp
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_classical_expr_wrp_in_expression2940);
                    classical_expr_wrp318=classical_expr_wrp();

                    state._fsp--;

                    adaptor.addChild(root_0, classical_expr_wrp318.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:585:4: struct_init
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_struct_init_in_expression2945);
                    struct_init319=struct_init();

                    state._fsp--;

                    adaptor.addChild(root_0, struct_init319.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expression"


    public static class full_expr_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "full_expr_wrapper"
    // Objcm.g:588:1: full_expr_wrapper : full_expr -> ^( EXPR_FULL full_expr ) ;
    public final ObjcmParser.full_expr_wrapper_return full_expr_wrapper() throws RecognitionException {
        ObjcmParser.full_expr_wrapper_return retval = new ObjcmParser.full_expr_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.full_expr_return full_expr320 =null;


        RewriteRuleSubtreeStream stream_full_expr=new RewriteRuleSubtreeStream(adaptor,"rule full_expr");
        try {
            // Objcm.g:589:2: ( full_expr -> ^( EXPR_FULL full_expr ) )
            // Objcm.g:589:4: full_expr
            {
            pushFollow(FOLLOW_full_expr_in_full_expr_wrapper2956);
            full_expr320=full_expr();

            state._fsp--;

            stream_full_expr.add(full_expr320.getTree());

            // AST REWRITE
            // elements: full_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 589:14: -> ^( EXPR_FULL full_expr )
            {
                // Objcm.g:589:17: ^( EXPR_FULL full_expr )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_FULL, "EXPR_FULL")
                , root_1);

                adaptor.addChild(root_1, stream_full_expr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "full_expr_wrapper"


    public static class full_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "full_expr"
    // Objcm.g:591:1: full_expr : classical_expr_wrp ( COMMA classical_expr_wrp )* ;
    public final ObjcmParser.full_expr_return full_expr() throws RecognitionException {
        ObjcmParser.full_expr_return retval = new ObjcmParser.full_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA322=null;
        ObjcmParser.classical_expr_wrp_return classical_expr_wrp321 =null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp323 =null;


        Object COMMA322_tree=null;

        try {
            // Objcm.g:592:2: ( classical_expr_wrp ( COMMA classical_expr_wrp )* )
            // Objcm.g:592:4: classical_expr_wrp ( COMMA classical_expr_wrp )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_classical_expr_wrp_in_full_expr2973);
            classical_expr_wrp321=classical_expr_wrp();

            state._fsp--;

            adaptor.addChild(root_0, classical_expr_wrp321.getTree());

            // Objcm.g:592:23: ( COMMA classical_expr_wrp )*
            loop75:
            do {
                int alt75=2;
                int LA75_0 = input.LA(1);

                if ( (LA75_0==COMMA) ) {
                    alt75=1;
                }


                switch (alt75) {
            	case 1 :
            	    // Objcm.g:592:24: COMMA classical_expr_wrp
            	    {
            	    COMMA322=(Token)match(input,COMMA,FOLLOW_COMMA_in_full_expr2976); 
            	    COMMA322_tree = 
            	    (Object)adaptor.create(COMMA322)
            	    ;
            	    adaptor.addChild(root_0, COMMA322_tree);


            	    pushFollow(FOLLOW_classical_expr_wrp_in_full_expr2978);
            	    classical_expr_wrp323=classical_expr_wrp();

            	    state._fsp--;

            	    adaptor.addChild(root_0, classical_expr_wrp323.getTree());

            	    }
            	    break;

            	default :
            	    break loop75;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "full_expr"


    public static class full_expr2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "full_expr2"
    // Objcm.g:594:1: full_expr2 : classical_expr_wrp2 ( COMMA classical_expr_wrp2 )* ;
    public final ObjcmParser.full_expr2_return full_expr2() throws RecognitionException {
        ObjcmParser.full_expr2_return retval = new ObjcmParser.full_expr2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA325=null;
        ObjcmParser.classical_expr_wrp2_return classical_expr_wrp2324 =null;

        ObjcmParser.classical_expr_wrp2_return classical_expr_wrp2326 =null;


        Object COMMA325_tree=null;

        try {
            // Objcm.g:595:2: ( classical_expr_wrp2 ( COMMA classical_expr_wrp2 )* )
            // Objcm.g:595:4: classical_expr_wrp2 ( COMMA classical_expr_wrp2 )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_classical_expr_wrp2_in_full_expr22989);
            classical_expr_wrp2324=classical_expr_wrp2();

            state._fsp--;

            adaptor.addChild(root_0, classical_expr_wrp2324.getTree());

            // Objcm.g:595:24: ( COMMA classical_expr_wrp2 )*
            loop76:
            do {
                int alt76=2;
                int LA76_0 = input.LA(1);

                if ( (LA76_0==COMMA) ) {
                    alt76=1;
                }


                switch (alt76) {
            	case 1 :
            	    // Objcm.g:595:25: COMMA classical_expr_wrp2
            	    {
            	    COMMA325=(Token)match(input,COMMA,FOLLOW_COMMA_in_full_expr22992); 
            	    COMMA325_tree = 
            	    (Object)adaptor.create(COMMA325)
            	    ;
            	    adaptor.addChild(root_0, COMMA325_tree);


            	    pushFollow(FOLLOW_classical_expr_wrp2_in_full_expr22994);
            	    classical_expr_wrp2326=classical_expr_wrp2();

            	    state._fsp--;

            	    adaptor.addChild(root_0, classical_expr_wrp2326.getTree());

            	    }
            	    break;

            	default :
            	    break loop76;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "full_expr2"


    public static class expr_assign_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_assign_wrapper"
    // Objcm.g:597:1: expr_assign_wrapper : expr_assign -> ^( EXPR_ASSIGN expr_assign ) ;
    public final ObjcmParser.expr_assign_wrapper_return expr_assign_wrapper() throws RecognitionException {
        ObjcmParser.expr_assign_wrapper_return retval = new ObjcmParser.expr_assign_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_assign_return expr_assign327 =null;


        RewriteRuleSubtreeStream stream_expr_assign=new RewriteRuleSubtreeStream(adaptor,"rule expr_assign");
        try {
            // Objcm.g:598:2: ( expr_assign -> ^( EXPR_ASSIGN expr_assign ) )
            // Objcm.g:598:4: expr_assign
            {
            pushFollow(FOLLOW_expr_assign_in_expr_assign_wrapper3005);
            expr_assign327=expr_assign();

            state._fsp--;

            stream_expr_assign.add(expr_assign327.getTree());

            // AST REWRITE
            // elements: expr_assign
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 598:16: -> ^( EXPR_ASSIGN expr_assign )
            {
                // Objcm.g:598:19: ^( EXPR_ASSIGN expr_assign )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_ASSIGN, "EXPR_ASSIGN")
                , root_1);

                adaptor.addChild(root_1, stream_expr_assign.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_assign_wrapper"


    public static class expr_assign_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_assign"
    // Objcm.g:600:1: expr_assign : assign_wrapper ( classical_expr_wrp | array_init_wrapper | ( func_pointer2 ( method_call_wrapper )? ) ) ;
    public final ObjcmParser.expr_assign_return expr_assign() throws RecognitionException {
        ObjcmParser.expr_assign_return retval = new ObjcmParser.expr_assign_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.assign_wrapper_return assign_wrapper328 =null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp329 =null;

        ObjcmParser.array_init_wrapper_return array_init_wrapper330 =null;

        ObjcmParser.func_pointer2_return func_pointer2331 =null;

        ObjcmParser.method_call_wrapper_return method_call_wrapper332 =null;



        try {
            // Objcm.g:601:2: ( assign_wrapper ( classical_expr_wrp | array_init_wrapper | ( func_pointer2 ( method_call_wrapper )? ) ) )
            // Objcm.g:601:4: assign_wrapper ( classical_expr_wrp | array_init_wrapper | ( func_pointer2 ( method_call_wrapper )? ) )
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_assign_wrapper_in_expr_assign3024);
            assign_wrapper328=assign_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, assign_wrapper328.getTree());

            // Objcm.g:601:19: ( classical_expr_wrp | array_init_wrapper | ( func_pointer2 ( method_call_wrapper )? ) )
            int alt78=3;
            alt78 = dfa78.predict(input);
            switch (alt78) {
                case 1 :
                    // Objcm.g:601:20: classical_expr_wrp
                    {
                    pushFollow(FOLLOW_classical_expr_wrp_in_expr_assign3027);
                    classical_expr_wrp329=classical_expr_wrp();

                    state._fsp--;

                    adaptor.addChild(root_0, classical_expr_wrp329.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:601:41: array_init_wrapper
                    {
                    pushFollow(FOLLOW_array_init_wrapper_in_expr_assign3031);
                    array_init_wrapper330=array_init_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, array_init_wrapper330.getTree());

                    }
                    break;
                case 3 :
                    // Objcm.g:601:62: ( func_pointer2 ( method_call_wrapper )? )
                    {
                    // Objcm.g:601:62: ( func_pointer2 ( method_call_wrapper )? )
                    // Objcm.g:601:63: func_pointer2 ( method_call_wrapper )?
                    {
                    pushFollow(FOLLOW_func_pointer2_in_expr_assign3036);
                    func_pointer2331=func_pointer2();

                    state._fsp--;

                    adaptor.addChild(root_0, func_pointer2331.getTree());

                    // Objcm.g:601:77: ( method_call_wrapper )?
                    int alt77=2;
                    int LA77_0 = input.LA(1);

                    if ( (LA77_0==L_KBR) ) {
                        alt77=1;
                    }
                    switch (alt77) {
                        case 1 :
                            // Objcm.g:601:77: method_call_wrapper
                            {
                            pushFollow(FOLLOW_method_call_wrapper_in_expr_assign3038);
                            method_call_wrapper332=method_call_wrapper();

                            state._fsp--;

                            adaptor.addChild(root_0, method_call_wrapper332.getTree());

                            }
                            break;

                    }


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_assign"


    public static class array_init_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "array_init_wrapper"
    // Objcm.g:603:1: array_init_wrapper : array_init -> ^( ARRAY_INIT array_init ) ;
    public final ObjcmParser.array_init_wrapper_return array_init_wrapper() throws RecognitionException {
        ObjcmParser.array_init_wrapper_return retval = new ObjcmParser.array_init_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.array_init_return array_init333 =null;


        RewriteRuleSubtreeStream stream_array_init=new RewriteRuleSubtreeStream(adaptor,"rule array_init");
        try {
            // Objcm.g:604:2: ( array_init -> ^( ARRAY_INIT array_init ) )
            // Objcm.g:604:4: array_init
            {
            pushFollow(FOLLOW_array_init_in_array_init_wrapper3050);
            array_init333=array_init();

            state._fsp--;

            stream_array_init.add(array_init333.getTree());

            // AST REWRITE
            // elements: array_init
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 604:15: -> ^( ARRAY_INIT array_init )
            {
                // Objcm.g:604:18: ^( ARRAY_INIT array_init )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(ARRAY_INIT, "ARRAY_INIT")
                , root_1);

                adaptor.addChild(root_1, stream_array_init.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "array_init_wrapper"


    public static class array_init_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "array_init"
    // Objcm.g:606:1: array_init : L_FBR ( classical_expr_wrp3 ( COMMA classical_expr_wrp3 )* )? R_FBR ;
    public final ObjcmParser.array_init_return array_init() throws RecognitionException {
        ObjcmParser.array_init_return retval = new ObjcmParser.array_init_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_FBR334=null;
        Token COMMA336=null;
        Token R_FBR338=null;
        ObjcmParser.classical_expr_wrp3_return classical_expr_wrp3335 =null;

        ObjcmParser.classical_expr_wrp3_return classical_expr_wrp3337 =null;


        Object L_FBR334_tree=null;
        Object COMMA336_tree=null;
        Object R_FBR338_tree=null;

        try {
            // Objcm.g:607:2: ( L_FBR ( classical_expr_wrp3 ( COMMA classical_expr_wrp3 )* )? R_FBR )
            // Objcm.g:607:4: L_FBR ( classical_expr_wrp3 ( COMMA classical_expr_wrp3 )* )? R_FBR
            {
            root_0 = (Object)adaptor.nil();


            L_FBR334=(Token)match(input,L_FBR,FOLLOW_L_FBR_in_array_init3069); 
            L_FBR334_tree = 
            (Object)adaptor.create(L_FBR334)
            ;
            adaptor.addChild(root_0, L_FBR334_tree);


            // Objcm.g:607:10: ( classical_expr_wrp3 ( COMMA classical_expr_wrp3 )* )?
            int alt80=2;
            int LA80_0 = input.LA(1);

            if ( (LA80_0==ASTERISK||LA80_0==ID||LA80_0==L_AND||LA80_0==L_BR||(LA80_0 >= L_FBR && LA80_0 <= L_KBR)||LA80_0==L_MINUS||LA80_0==L_MINUS_MINUS||LA80_0==L_NOT||LA80_0==L_PLUS||LA80_0==L_PLUS_PLUS||LA80_0==L_TILDA||LA80_0==NUMBER||LA80_0==SIZEOF||(LA80_0 >= STRING_LITERAL && LA80_0 <= STRING_LITERAL3)||LA80_0==166||LA80_0==173||LA80_0==175||LA80_0==179||LA80_0==182||LA80_0==185||LA80_0==193||(LA80_0 >= 195 && LA80_0 <= 196)||LA80_0==201) ) {
                alt80=1;
            }
            switch (alt80) {
                case 1 :
                    // Objcm.g:607:11: classical_expr_wrp3 ( COMMA classical_expr_wrp3 )*
                    {
                    pushFollow(FOLLOW_classical_expr_wrp3_in_array_init3072);
                    classical_expr_wrp3335=classical_expr_wrp3();

                    state._fsp--;

                    adaptor.addChild(root_0, classical_expr_wrp3335.getTree());

                    // Objcm.g:607:31: ( COMMA classical_expr_wrp3 )*
                    loop79:
                    do {
                        int alt79=2;
                        int LA79_0 = input.LA(1);

                        if ( (LA79_0==COMMA) ) {
                            alt79=1;
                        }


                        switch (alt79) {
                    	case 1 :
                    	    // Objcm.g:607:32: COMMA classical_expr_wrp3
                    	    {
                    	    COMMA336=(Token)match(input,COMMA,FOLLOW_COMMA_in_array_init3075); 
                    	    COMMA336_tree = 
                    	    (Object)adaptor.create(COMMA336)
                    	    ;
                    	    adaptor.addChild(root_0, COMMA336_tree);


                    	    pushFollow(FOLLOW_classical_expr_wrp3_in_array_init3077);
                    	    classical_expr_wrp3337=classical_expr_wrp3();

                    	    state._fsp--;

                    	    adaptor.addChild(root_0, classical_expr_wrp3337.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop79;
                        }
                    } while (true);


                    }
                    break;

            }


            R_FBR338=(Token)match(input,R_FBR,FOLLOW_R_FBR_in_array_init3083); 
            R_FBR338_tree = 
            (Object)adaptor.create(R_FBR338)
            ;
            adaptor.addChild(root_0, R_FBR338_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "array_init"


    public static class classical_expr_wrp3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classical_expr_wrp3"
    // Objcm.g:610:1: classical_expr_wrp3 : ( array_init_wrapper | classical_expr_wrp );
    public final ObjcmParser.classical_expr_wrp3_return classical_expr_wrp3() throws RecognitionException {
        ObjcmParser.classical_expr_wrp3_return retval = new ObjcmParser.classical_expr_wrp3_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.array_init_wrapper_return array_init_wrapper339 =null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp340 =null;



        try {
            // Objcm.g:611:2: ( array_init_wrapper | classical_expr_wrp )
            int alt81=2;
            int LA81_0 = input.LA(1);

            if ( (LA81_0==L_FBR) ) {
                alt81=1;
            }
            else if ( (LA81_0==ASTERISK||LA81_0==ID||LA81_0==L_AND||LA81_0==L_BR||LA81_0==L_KBR||LA81_0==L_MINUS||LA81_0==L_MINUS_MINUS||LA81_0==L_NOT||LA81_0==L_PLUS||LA81_0==L_PLUS_PLUS||LA81_0==L_TILDA||LA81_0==NUMBER||LA81_0==SIZEOF||(LA81_0 >= STRING_LITERAL && LA81_0 <= STRING_LITERAL3)||LA81_0==166||LA81_0==173||LA81_0==175||LA81_0==179||LA81_0==182||LA81_0==185||LA81_0==193||(LA81_0 >= 195 && LA81_0 <= 196)||LA81_0==201) ) {
                alt81=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 81, 0, input);

                throw nvae;

            }
            switch (alt81) {
                case 1 :
                    // Objcm.g:611:4: array_init_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_array_init_wrapper_in_classical_expr_wrp33095);
                    array_init_wrapper339=array_init_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, array_init_wrapper339.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:612:4: classical_expr_wrp
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_classical_expr_wrp_in_classical_expr_wrp33101);
                    classical_expr_wrp340=classical_expr_wrp();

                    state._fsp--;

                    adaptor.addChild(root_0, classical_expr_wrp340.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classical_expr_wrp3"


    public static class classical_expr_wrp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classical_expr_wrp"
    // Objcm.g:615:1: classical_expr_wrp : classical_expr -> ^( CLASSICAL_EXPR classical_expr ) ;
    public final ObjcmParser.classical_expr_wrp_return classical_expr_wrp() throws RecognitionException {
        ObjcmParser.classical_expr_wrp_return retval = new ObjcmParser.classical_expr_wrp_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.classical_expr_return classical_expr341 =null;


        RewriteRuleSubtreeStream stream_classical_expr=new RewriteRuleSubtreeStream(adaptor,"rule classical_expr");
        try {
            // Objcm.g:616:2: ( classical_expr -> ^( CLASSICAL_EXPR classical_expr ) )
            // Objcm.g:616:4: classical_expr
            {
            pushFollow(FOLLOW_classical_expr_in_classical_expr_wrp3114);
            classical_expr341=classical_expr();

            state._fsp--;

            stream_classical_expr.add(classical_expr341.getTree());

            // AST REWRITE
            // elements: classical_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 616:19: -> ^( CLASSICAL_EXPR classical_expr )
            {
                // Objcm.g:616:22: ^( CLASSICAL_EXPR classical_expr )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CLASSICAL_EXPR, "CLASSICAL_EXPR")
                , root_1);

                adaptor.addChild(root_1, stream_classical_expr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classical_expr_wrp"


    public static class classical_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classical_expr"
    // Objcm.g:618:1: classical_expr : simple_expr_wrapper ( expr_question_wrapper | expr_assign_wrapper )? ;
    public final ObjcmParser.classical_expr_return classical_expr() throws RecognitionException {
        ObjcmParser.classical_expr_return retval = new ObjcmParser.classical_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.simple_expr_wrapper_return simple_expr_wrapper342 =null;

        ObjcmParser.expr_question_wrapper_return expr_question_wrapper343 =null;

        ObjcmParser.expr_assign_wrapper_return expr_assign_wrapper344 =null;



        try {
            // Objcm.g:619:2: ( simple_expr_wrapper ( expr_question_wrapper | expr_assign_wrapper )? )
            // Objcm.g:619:4: simple_expr_wrapper ( expr_question_wrapper | expr_assign_wrapper )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_simple_expr_wrapper_in_classical_expr3131);
            simple_expr_wrapper342=simple_expr_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, simple_expr_wrapper342.getTree());

            // Objcm.g:619:24: ( expr_question_wrapper | expr_assign_wrapper )?
            int alt82=3;
            int LA82_0 = input.LA(1);

            if ( (LA82_0==L_QUESTION) ) {
                alt82=1;
            }
            else if ( (LA82_0==L_AND_EQ||(LA82_0 >= L_DIV_EQ && LA82_0 <= L_EQ)||LA82_0==L_LEFT_EQ||LA82_0==L_MINUS_EQ||LA82_0==L_MULT_EQ||LA82_0==L_OR_EQ||LA82_0==L_PERC_EQ||LA82_0==L_PLUS_EQ||LA82_0==L_RIGHT_EQ||LA82_0==L_XOR_EQ) ) {
                alt82=2;
            }
            switch (alt82) {
                case 1 :
                    // Objcm.g:619:25: expr_question_wrapper
                    {
                    pushFollow(FOLLOW_expr_question_wrapper_in_classical_expr3134);
                    expr_question_wrapper343=expr_question_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, expr_question_wrapper343.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:619:49: expr_assign_wrapper
                    {
                    pushFollow(FOLLOW_expr_assign_wrapper_in_classical_expr3138);
                    expr_assign_wrapper344=expr_assign_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, expr_assign_wrapper344.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classical_expr"


    public static class classical_expr_wrp2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classical_expr_wrp2"
    // Objcm.g:621:1: classical_expr_wrp2 : classical_expr2 -> ^( CLASSICAL_EXPR_2 classical_expr2 ) ;
    public final ObjcmParser.classical_expr_wrp2_return classical_expr_wrp2() throws RecognitionException {
        ObjcmParser.classical_expr_wrp2_return retval = new ObjcmParser.classical_expr_wrp2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.classical_expr2_return classical_expr2345 =null;


        RewriteRuleSubtreeStream stream_classical_expr2=new RewriteRuleSubtreeStream(adaptor,"rule classical_expr2");
        try {
            // Objcm.g:622:2: ( classical_expr2 -> ^( CLASSICAL_EXPR_2 classical_expr2 ) )
            // Objcm.g:622:4: classical_expr2
            {
            pushFollow(FOLLOW_classical_expr2_in_classical_expr_wrp23150);
            classical_expr2345=classical_expr2();

            state._fsp--;

            stream_classical_expr2.add(classical_expr2345.getTree());

            // AST REWRITE
            // elements: classical_expr2
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 622:20: -> ^( CLASSICAL_EXPR_2 classical_expr2 )
            {
                // Objcm.g:622:23: ^( CLASSICAL_EXPR_2 classical_expr2 )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CLASSICAL_EXPR_2, "CLASSICAL_EXPR_2")
                , root_1);

                adaptor.addChild(root_1, stream_classical_expr2.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classical_expr_wrp2"


    public static class classical_expr2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classical_expr2"
    // Objcm.g:624:1: classical_expr2 : ( object_name | func_pointer1 ) ( expr_assign_wrapper )? ;
    public final ObjcmParser.classical_expr2_return classical_expr2() throws RecognitionException {
        ObjcmParser.classical_expr2_return retval = new ObjcmParser.classical_expr2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.object_name_return object_name346 =null;

        ObjcmParser.func_pointer1_return func_pointer1347 =null;

        ObjcmParser.expr_assign_wrapper_return expr_assign_wrapper348 =null;



        try {
            // Objcm.g:625:2: ( ( object_name | func_pointer1 ) ( expr_assign_wrapper )? )
            // Objcm.g:625:4: ( object_name | func_pointer1 ) ( expr_assign_wrapper )?
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:625:4: ( object_name | func_pointer1 )
            int alt83=2;
            alt83 = dfa83.predict(input);
            switch (alt83) {
                case 1 :
                    // Objcm.g:625:5: object_name
                    {
                    pushFollow(FOLLOW_object_name_in_classical_expr23168);
                    object_name346=object_name();

                    state._fsp--;

                    adaptor.addChild(root_0, object_name346.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:625:19: func_pointer1
                    {
                    pushFollow(FOLLOW_func_pointer1_in_classical_expr23172);
                    func_pointer1347=func_pointer1();

                    state._fsp--;

                    adaptor.addChild(root_0, func_pointer1347.getTree());

                    }
                    break;

            }


            // Objcm.g:625:34: ( expr_assign_wrapper )?
            int alt84=2;
            int LA84_0 = input.LA(1);

            if ( (LA84_0==L_AND_EQ||(LA84_0 >= L_DIV_EQ && LA84_0 <= L_EQ)||LA84_0==L_LEFT_EQ||LA84_0==L_MINUS_EQ||LA84_0==L_MULT_EQ||LA84_0==L_OR_EQ||LA84_0==L_PERC_EQ||LA84_0==L_PLUS_EQ||LA84_0==L_RIGHT_EQ||LA84_0==L_XOR_EQ) ) {
                alt84=1;
            }
            switch (alt84) {
                case 1 :
                    // Objcm.g:625:34: expr_assign_wrapper
                    {
                    pushFollow(FOLLOW_expr_assign_wrapper_in_classical_expr23175);
                    expr_assign_wrapper348=expr_assign_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, expr_assign_wrapper348.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classical_expr2"


    public static class expr_question_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_question_wrapper"
    // Objcm.g:627:1: expr_question_wrapper : expr_question -> ^( EXPR_QUESTION expr_question ) ;
    public final ObjcmParser.expr_question_wrapper_return expr_question_wrapper() throws RecognitionException {
        ObjcmParser.expr_question_wrapper_return retval = new ObjcmParser.expr_question_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_question_return expr_question349 =null;


        RewriteRuleSubtreeStream stream_expr_question=new RewriteRuleSubtreeStream(adaptor,"rule expr_question");
        try {
            // Objcm.g:628:2: ( expr_question -> ^( EXPR_QUESTION expr_question ) )
            // Objcm.g:628:4: expr_question
            {
            pushFollow(FOLLOW_expr_question_in_expr_question_wrapper3185);
            expr_question349=expr_question();

            state._fsp--;

            stream_expr_question.add(expr_question349.getTree());

            // AST REWRITE
            // elements: expr_question
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 628:18: -> ^( EXPR_QUESTION expr_question )
            {
                // Objcm.g:628:21: ^( EXPR_QUESTION expr_question )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_QUESTION, "EXPR_QUESTION")
                , root_1);

                adaptor.addChild(root_1, stream_expr_question.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_question_wrapper"


    public static class expr_question_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_question"
    // Objcm.g:630:1: expr_question : L_QUESTION classical_expr_wrp COLON classical_expr_wrp ;
    public final ObjcmParser.expr_question_return expr_question() throws RecognitionException {
        ObjcmParser.expr_question_return retval = new ObjcmParser.expr_question_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_QUESTION350=null;
        Token COLON352=null;
        ObjcmParser.classical_expr_wrp_return classical_expr_wrp351 =null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp353 =null;


        Object L_QUESTION350_tree=null;
        Object COLON352_tree=null;

        try {
            // Objcm.g:631:2: ( L_QUESTION classical_expr_wrp COLON classical_expr_wrp )
            // Objcm.g:631:4: L_QUESTION classical_expr_wrp COLON classical_expr_wrp
            {
            root_0 = (Object)adaptor.nil();


            L_QUESTION350=(Token)match(input,L_QUESTION,FOLLOW_L_QUESTION_in_expr_question3202); 
            L_QUESTION350_tree = 
            (Object)adaptor.create(L_QUESTION350)
            ;
            adaptor.addChild(root_0, L_QUESTION350_tree);


            pushFollow(FOLLOW_classical_expr_wrp_in_expr_question3204);
            classical_expr_wrp351=classical_expr_wrp();

            state._fsp--;

            adaptor.addChild(root_0, classical_expr_wrp351.getTree());

            COLON352=(Token)match(input,COLON,FOLLOW_COLON_in_expr_question3206); 
            COLON352_tree = 
            (Object)adaptor.create(COLON352)
            ;
            adaptor.addChild(root_0, COLON352_tree);


            pushFollow(FOLLOW_classical_expr_wrp_in_expr_question3208);
            classical_expr_wrp353=classical_expr_wrp();

            state._fsp--;

            adaptor.addChild(root_0, classical_expr_wrp353.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_question"


    public static class assign_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "assign_wrapper"
    // Objcm.g:633:1: assign_wrapper : assign -> ^( ASSIGN assign ) ;
    public final ObjcmParser.assign_wrapper_return assign_wrapper() throws RecognitionException {
        ObjcmParser.assign_wrapper_return retval = new ObjcmParser.assign_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.assign_return assign354 =null;


        RewriteRuleSubtreeStream stream_assign=new RewriteRuleSubtreeStream(adaptor,"rule assign");
        try {
            // Objcm.g:634:2: ( assign -> ^( ASSIGN assign ) )
            // Objcm.g:634:4: assign
            {
            pushFollow(FOLLOW_assign_in_assign_wrapper3217);
            assign354=assign();

            state._fsp--;

            stream_assign.add(assign354.getTree());

            // AST REWRITE
            // elements: assign
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 634:11: -> ^( ASSIGN assign )
            {
                // Objcm.g:634:14: ^( ASSIGN assign )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(ASSIGN, "ASSIGN")
                , root_1);

                adaptor.addChild(root_1, stream_assign.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "assign_wrapper"


    public static class assign_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "assign"
    // Objcm.g:636:1: assign : ( L_EQ | L_PLUS_EQ | L_MINUS_EQ | L_MULT_EQ | L_DIV_EQ | L_PERC_EQ | L_LEFT_EQ | L_RIGHT_EQ | L_AND_EQ | L_XOR_EQ | L_OR_EQ );
    public final ObjcmParser.assign_return assign() throws RecognitionException {
        ObjcmParser.assign_return retval = new ObjcmParser.assign_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set355=null;

        Object set355_tree=null;

        try {
            // Objcm.g:637:2: ( L_EQ | L_PLUS_EQ | L_MINUS_EQ | L_MULT_EQ | L_DIV_EQ | L_PERC_EQ | L_LEFT_EQ | L_RIGHT_EQ | L_AND_EQ | L_XOR_EQ | L_OR_EQ )
            // Objcm.g:
            {
            root_0 = (Object)adaptor.nil();


            set355=(Token)input.LT(1);

            if ( input.LA(1)==L_AND_EQ||(input.LA(1) >= L_DIV_EQ && input.LA(1) <= L_EQ)||input.LA(1)==L_LEFT_EQ||input.LA(1)==L_MINUS_EQ||input.LA(1)==L_MULT_EQ||input.LA(1)==L_OR_EQ||input.LA(1)==L_PERC_EQ||input.LA(1)==L_PLUS_EQ||input.LA(1)==L_RIGHT_EQ||input.LA(1)==L_XOR_EQ ) {
                input.consume();
                adaptor.addChild(root_0, 
                (Object)adaptor.create(set355)
                );
                state.errorRecovery=false;
            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "assign"


    public static class simple_expr_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "simple_expr_wrapper"
    // Objcm.g:641:1: simple_expr_wrapper : simple_expr -> ^( SIMPLE_EXPR simple_expr ) ;
    public final ObjcmParser.simple_expr_wrapper_return simple_expr_wrapper() throws RecognitionException {
        ObjcmParser.simple_expr_wrapper_return retval = new ObjcmParser.simple_expr_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.simple_expr_return simple_expr356 =null;


        RewriteRuleSubtreeStream stream_simple_expr=new RewriteRuleSubtreeStream(adaptor,"rule simple_expr");
        try {
            // Objcm.g:642:2: ( simple_expr -> ^( SIMPLE_EXPR simple_expr ) )
            // Objcm.g:642:4: simple_expr
            {
            pushFollow(FOLLOW_simple_expr_in_simple_expr_wrapper3290);
            simple_expr356=simple_expr();

            state._fsp--;

            stream_simple_expr.add(simple_expr356.getTree());

            // AST REWRITE
            // elements: simple_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 642:16: -> ^( SIMPLE_EXPR simple_expr )
            {
                // Objcm.g:642:19: ^( SIMPLE_EXPR simple_expr )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SIMPLE_EXPR, "SIMPLE_EXPR")
                , root_1);

                adaptor.addChild(root_1, stream_simple_expr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "simple_expr_wrapper"


    public static class simple_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "simple_expr"
    // Objcm.g:644:1: simple_expr : expr_or_or -> ^( EXPR_OR_OR expr_or_or ) ;
    public final ObjcmParser.simple_expr_return simple_expr() throws RecognitionException {
        ObjcmParser.simple_expr_return retval = new ObjcmParser.simple_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_or_or_return expr_or_or357 =null;


        RewriteRuleSubtreeStream stream_expr_or_or=new RewriteRuleSubtreeStream(adaptor,"rule expr_or_or");
        try {
            // Objcm.g:645:2: ( expr_or_or -> ^( EXPR_OR_OR expr_or_or ) )
            // Objcm.g:645:4: expr_or_or
            {
            pushFollow(FOLLOW_expr_or_or_in_simple_expr3308);
            expr_or_or357=expr_or_or();

            state._fsp--;

            stream_expr_or_or.add(expr_or_or357.getTree());

            // AST REWRITE
            // elements: expr_or_or
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 645:15: -> ^( EXPR_OR_OR expr_or_or )
            {
                // Objcm.g:645:18: ^( EXPR_OR_OR expr_or_or )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_OR_OR, "EXPR_OR_OR")
                , root_1);

                adaptor.addChild(root_1, stream_expr_or_or.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "simple_expr"


    public static class expr_or_or_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_or_or"
    // Objcm.g:647:1: expr_or_or : expr_and_and_wrapper ( L_OR_OR simple_expr_wrapper )* ;
    public final ObjcmParser.expr_or_or_return expr_or_or() throws RecognitionException {
        ObjcmParser.expr_or_or_return retval = new ObjcmParser.expr_or_or_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_OR_OR359=null;
        ObjcmParser.expr_and_and_wrapper_return expr_and_and_wrapper358 =null;

        ObjcmParser.simple_expr_wrapper_return simple_expr_wrapper360 =null;


        Object L_OR_OR359_tree=null;

        try {
            // Objcm.g:648:2: ( expr_and_and_wrapper ( L_OR_OR simple_expr_wrapper )* )
            // Objcm.g:648:4: expr_and_and_wrapper ( L_OR_OR simple_expr_wrapper )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_expr_and_and_wrapper_in_expr_or_or3325);
            expr_and_and_wrapper358=expr_and_and_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, expr_and_and_wrapper358.getTree());

            // Objcm.g:648:25: ( L_OR_OR simple_expr_wrapper )*
            loop85:
            do {
                int alt85=2;
                int LA85_0 = input.LA(1);

                if ( (LA85_0==L_OR_OR) ) {
                    alt85=1;
                }


                switch (alt85) {
            	case 1 :
            	    // Objcm.g:648:26: L_OR_OR simple_expr_wrapper
            	    {
            	    L_OR_OR359=(Token)match(input,L_OR_OR,FOLLOW_L_OR_OR_in_expr_or_or3328); 
            	    L_OR_OR359_tree = 
            	    (Object)adaptor.create(L_OR_OR359)
            	    ;
            	    adaptor.addChild(root_0, L_OR_OR359_tree);


            	    pushFollow(FOLLOW_simple_expr_wrapper_in_expr_or_or3330);
            	    simple_expr_wrapper360=simple_expr_wrapper();

            	    state._fsp--;

            	    adaptor.addChild(root_0, simple_expr_wrapper360.getTree());

            	    }
            	    break;

            	default :
            	    break loop85;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_or_or"


    public static class expr_and_and_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_and_and_wrapper"
    // Objcm.g:650:1: expr_and_and_wrapper : expr_and_and -> ^( EXPR_AND_AND expr_and_and ) ;
    public final ObjcmParser.expr_and_and_wrapper_return expr_and_and_wrapper() throws RecognitionException {
        ObjcmParser.expr_and_and_wrapper_return retval = new ObjcmParser.expr_and_and_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_and_and_return expr_and_and361 =null;


        RewriteRuleSubtreeStream stream_expr_and_and=new RewriteRuleSubtreeStream(adaptor,"rule expr_and_and");
        try {
            // Objcm.g:651:2: ( expr_and_and -> ^( EXPR_AND_AND expr_and_and ) )
            // Objcm.g:651:4: expr_and_and
            {
            pushFollow(FOLLOW_expr_and_and_in_expr_and_and_wrapper3341);
            expr_and_and361=expr_and_and();

            state._fsp--;

            stream_expr_and_and.add(expr_and_and361.getTree());

            // AST REWRITE
            // elements: expr_and_and
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 651:17: -> ^( EXPR_AND_AND expr_and_and )
            {
                // Objcm.g:651:20: ^( EXPR_AND_AND expr_and_and )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_AND_AND, "EXPR_AND_AND")
                , root_1);

                adaptor.addChild(root_1, stream_expr_and_and.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_and_and_wrapper"


    public static class expr_and_and_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_and_and"
    // Objcm.g:653:1: expr_and_and : expr_or_wrapper ( L_AND_AND simple_expr_wrapper )* ;
    public final ObjcmParser.expr_and_and_return expr_and_and() throws RecognitionException {
        ObjcmParser.expr_and_and_return retval = new ObjcmParser.expr_and_and_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_AND_AND363=null;
        ObjcmParser.expr_or_wrapper_return expr_or_wrapper362 =null;

        ObjcmParser.simple_expr_wrapper_return simple_expr_wrapper364 =null;


        Object L_AND_AND363_tree=null;

        try {
            // Objcm.g:654:2: ( expr_or_wrapper ( L_AND_AND simple_expr_wrapper )* )
            // Objcm.g:654:4: expr_or_wrapper ( L_AND_AND simple_expr_wrapper )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_expr_or_wrapper_in_expr_and_and3358);
            expr_or_wrapper362=expr_or_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, expr_or_wrapper362.getTree());

            // Objcm.g:654:20: ( L_AND_AND simple_expr_wrapper )*
            loop86:
            do {
                int alt86=2;
                int LA86_0 = input.LA(1);

                if ( (LA86_0==L_AND_AND) ) {
                    alt86=1;
                }


                switch (alt86) {
            	case 1 :
            	    // Objcm.g:654:21: L_AND_AND simple_expr_wrapper
            	    {
            	    L_AND_AND363=(Token)match(input,L_AND_AND,FOLLOW_L_AND_AND_in_expr_and_and3361); 
            	    L_AND_AND363_tree = 
            	    (Object)adaptor.create(L_AND_AND363)
            	    ;
            	    adaptor.addChild(root_0, L_AND_AND363_tree);


            	    pushFollow(FOLLOW_simple_expr_wrapper_in_expr_and_and3363);
            	    simple_expr_wrapper364=simple_expr_wrapper();

            	    state._fsp--;

            	    adaptor.addChild(root_0, simple_expr_wrapper364.getTree());

            	    }
            	    break;

            	default :
            	    break loop86;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_and_and"


    public static class expr_or_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_or_wrapper"
    // Objcm.g:656:1: expr_or_wrapper : expr_or -> ^( EXPR_OR expr_or ) ;
    public final ObjcmParser.expr_or_wrapper_return expr_or_wrapper() throws RecognitionException {
        ObjcmParser.expr_or_wrapper_return retval = new ObjcmParser.expr_or_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_or_return expr_or365 =null;


        RewriteRuleSubtreeStream stream_expr_or=new RewriteRuleSubtreeStream(adaptor,"rule expr_or");
        try {
            // Objcm.g:657:2: ( expr_or -> ^( EXPR_OR expr_or ) )
            // Objcm.g:657:4: expr_or
            {
            pushFollow(FOLLOW_expr_or_in_expr_or_wrapper3374);
            expr_or365=expr_or();

            state._fsp--;

            stream_expr_or.add(expr_or365.getTree());

            // AST REWRITE
            // elements: expr_or
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 657:12: -> ^( EXPR_OR expr_or )
            {
                // Objcm.g:657:15: ^( EXPR_OR expr_or )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_OR, "EXPR_OR")
                , root_1);

                adaptor.addChild(root_1, stream_expr_or.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_or_wrapper"


    public static class expr_or_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_or"
    // Objcm.g:659:1: expr_or : expr_xor_wrapper ( L_OR simple_expr_wrapper )* ;
    public final ObjcmParser.expr_or_return expr_or() throws RecognitionException {
        ObjcmParser.expr_or_return retval = new ObjcmParser.expr_or_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_OR367=null;
        ObjcmParser.expr_xor_wrapper_return expr_xor_wrapper366 =null;

        ObjcmParser.simple_expr_wrapper_return simple_expr_wrapper368 =null;


        Object L_OR367_tree=null;

        try {
            // Objcm.g:660:2: ( expr_xor_wrapper ( L_OR simple_expr_wrapper )* )
            // Objcm.g:660:4: expr_xor_wrapper ( L_OR simple_expr_wrapper )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_expr_xor_wrapper_in_expr_or3392);
            expr_xor_wrapper366=expr_xor_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, expr_xor_wrapper366.getTree());

            // Objcm.g:660:21: ( L_OR simple_expr_wrapper )*
            loop87:
            do {
                int alt87=2;
                int LA87_0 = input.LA(1);

                if ( (LA87_0==L_OR) ) {
                    alt87=1;
                }


                switch (alt87) {
            	case 1 :
            	    // Objcm.g:660:22: L_OR simple_expr_wrapper
            	    {
            	    L_OR367=(Token)match(input,L_OR,FOLLOW_L_OR_in_expr_or3395); 
            	    L_OR367_tree = 
            	    (Object)adaptor.create(L_OR367)
            	    ;
            	    adaptor.addChild(root_0, L_OR367_tree);


            	    pushFollow(FOLLOW_simple_expr_wrapper_in_expr_or3397);
            	    simple_expr_wrapper368=simple_expr_wrapper();

            	    state._fsp--;

            	    adaptor.addChild(root_0, simple_expr_wrapper368.getTree());

            	    }
            	    break;

            	default :
            	    break loop87;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_or"


    public static class expr_xor_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_xor_wrapper"
    // Objcm.g:662:1: expr_xor_wrapper : expr_xor -> ^( EXPR_XOR expr_xor ) ;
    public final ObjcmParser.expr_xor_wrapper_return expr_xor_wrapper() throws RecognitionException {
        ObjcmParser.expr_xor_wrapper_return retval = new ObjcmParser.expr_xor_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_xor_return expr_xor369 =null;


        RewriteRuleSubtreeStream stream_expr_xor=new RewriteRuleSubtreeStream(adaptor,"rule expr_xor");
        try {
            // Objcm.g:663:2: ( expr_xor -> ^( EXPR_XOR expr_xor ) )
            // Objcm.g:663:4: expr_xor
            {
            pushFollow(FOLLOW_expr_xor_in_expr_xor_wrapper3408);
            expr_xor369=expr_xor();

            state._fsp--;

            stream_expr_xor.add(expr_xor369.getTree());

            // AST REWRITE
            // elements: expr_xor
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 663:13: -> ^( EXPR_XOR expr_xor )
            {
                // Objcm.g:663:16: ^( EXPR_XOR expr_xor )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_XOR, "EXPR_XOR")
                , root_1);

                adaptor.addChild(root_1, stream_expr_xor.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_xor_wrapper"


    public static class expr_xor_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_xor"
    // Objcm.g:665:1: expr_xor : expr_and_wrapper ( L_XOR simple_expr_wrapper )* ;
    public final ObjcmParser.expr_xor_return expr_xor() throws RecognitionException {
        ObjcmParser.expr_xor_return retval = new ObjcmParser.expr_xor_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_XOR371=null;
        ObjcmParser.expr_and_wrapper_return expr_and_wrapper370 =null;

        ObjcmParser.simple_expr_wrapper_return simple_expr_wrapper372 =null;


        Object L_XOR371_tree=null;

        try {
            // Objcm.g:666:2: ( expr_and_wrapper ( L_XOR simple_expr_wrapper )* )
            // Objcm.g:666:4: expr_and_wrapper ( L_XOR simple_expr_wrapper )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_expr_and_wrapper_in_expr_xor3425);
            expr_and_wrapper370=expr_and_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, expr_and_wrapper370.getTree());

            // Objcm.g:666:21: ( L_XOR simple_expr_wrapper )*
            loop88:
            do {
                int alt88=2;
                int LA88_0 = input.LA(1);

                if ( (LA88_0==L_XOR) ) {
                    alt88=1;
                }


                switch (alt88) {
            	case 1 :
            	    // Objcm.g:666:22: L_XOR simple_expr_wrapper
            	    {
            	    L_XOR371=(Token)match(input,L_XOR,FOLLOW_L_XOR_in_expr_xor3428); 
            	    L_XOR371_tree = 
            	    (Object)adaptor.create(L_XOR371)
            	    ;
            	    adaptor.addChild(root_0, L_XOR371_tree);


            	    pushFollow(FOLLOW_simple_expr_wrapper_in_expr_xor3430);
            	    simple_expr_wrapper372=simple_expr_wrapper();

            	    state._fsp--;

            	    adaptor.addChild(root_0, simple_expr_wrapper372.getTree());

            	    }
            	    break;

            	default :
            	    break loop88;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_xor"


    public static class expr_and_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_and_wrapper"
    // Objcm.g:668:1: expr_and_wrapper : expr_and -> ^( EXPR_AND expr_and ) ;
    public final ObjcmParser.expr_and_wrapper_return expr_and_wrapper() throws RecognitionException {
        ObjcmParser.expr_and_wrapper_return retval = new ObjcmParser.expr_and_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_and_return expr_and373 =null;


        RewriteRuleSubtreeStream stream_expr_and=new RewriteRuleSubtreeStream(adaptor,"rule expr_and");
        try {
            // Objcm.g:669:2: ( expr_and -> ^( EXPR_AND expr_and ) )
            // Objcm.g:669:4: expr_and
            {
            pushFollow(FOLLOW_expr_and_in_expr_and_wrapper3442);
            expr_and373=expr_and();

            state._fsp--;

            stream_expr_and.add(expr_and373.getTree());

            // AST REWRITE
            // elements: expr_and
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 669:13: -> ^( EXPR_AND expr_and )
            {
                // Objcm.g:669:16: ^( EXPR_AND expr_and )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_AND, "EXPR_AND")
                , root_1);

                adaptor.addChild(root_1, stream_expr_and.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_and_wrapper"


    public static class expr_and_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_and"
    // Objcm.g:671:1: expr_and : expr_eq_wrapper ( L_AND simple_expr_wrapper )* ;
    public final ObjcmParser.expr_and_return expr_and() throws RecognitionException {
        ObjcmParser.expr_and_return retval = new ObjcmParser.expr_and_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_AND375=null;
        ObjcmParser.expr_eq_wrapper_return expr_eq_wrapper374 =null;

        ObjcmParser.simple_expr_wrapper_return simple_expr_wrapper376 =null;


        Object L_AND375_tree=null;

        try {
            // Objcm.g:672:2: ( expr_eq_wrapper ( L_AND simple_expr_wrapper )* )
            // Objcm.g:672:4: expr_eq_wrapper ( L_AND simple_expr_wrapper )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_expr_eq_wrapper_in_expr_and3460);
            expr_eq_wrapper374=expr_eq_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, expr_eq_wrapper374.getTree());

            // Objcm.g:672:20: ( L_AND simple_expr_wrapper )*
            loop89:
            do {
                int alt89=2;
                int LA89_0 = input.LA(1);

                if ( (LA89_0==L_AND) ) {
                    alt89=1;
                }


                switch (alt89) {
            	case 1 :
            	    // Objcm.g:672:21: L_AND simple_expr_wrapper
            	    {
            	    L_AND375=(Token)match(input,L_AND,FOLLOW_L_AND_in_expr_and3463); 
            	    L_AND375_tree = 
            	    (Object)adaptor.create(L_AND375)
            	    ;
            	    adaptor.addChild(root_0, L_AND375_tree);


            	    pushFollow(FOLLOW_simple_expr_wrapper_in_expr_and3465);
            	    simple_expr_wrapper376=simple_expr_wrapper();

            	    state._fsp--;

            	    adaptor.addChild(root_0, simple_expr_wrapper376.getTree());

            	    }
            	    break;

            	default :
            	    break loop89;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_and"


    public static class expr_eq_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_eq_wrapper"
    // Objcm.g:674:1: expr_eq_wrapper : expr_eq -> ^( EXPR_EQ expr_eq ) ;
    public final ObjcmParser.expr_eq_wrapper_return expr_eq_wrapper() throws RecognitionException {
        ObjcmParser.expr_eq_wrapper_return retval = new ObjcmParser.expr_eq_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_eq_return expr_eq377 =null;


        RewriteRuleSubtreeStream stream_expr_eq=new RewriteRuleSubtreeStream(adaptor,"rule expr_eq");
        try {
            // Objcm.g:675:2: ( expr_eq -> ^( EXPR_EQ expr_eq ) )
            // Objcm.g:675:4: expr_eq
            {
            pushFollow(FOLLOW_expr_eq_in_expr_eq_wrapper3477);
            expr_eq377=expr_eq();

            state._fsp--;

            stream_expr_eq.add(expr_eq377.getTree());

            // AST REWRITE
            // elements: expr_eq
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 675:12: -> ^( EXPR_EQ expr_eq )
            {
                // Objcm.g:675:15: ^( EXPR_EQ expr_eq )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_EQ, "EXPR_EQ")
                , root_1);

                adaptor.addChild(root_1, stream_expr_eq.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_eq_wrapper"


    public static class expr_eq_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_eq"
    // Objcm.g:677:1: expr_eq : expr_cond_wrapper ( ( L_EQ_EQ | L_NEQ ) simple_expr_wrapper )* ;
    public final ObjcmParser.expr_eq_return expr_eq() throws RecognitionException {
        ObjcmParser.expr_eq_return retval = new ObjcmParser.expr_eq_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set379=null;
        ObjcmParser.expr_cond_wrapper_return expr_cond_wrapper378 =null;

        ObjcmParser.simple_expr_wrapper_return simple_expr_wrapper380 =null;


        Object set379_tree=null;

        try {
            // Objcm.g:678:2: ( expr_cond_wrapper ( ( L_EQ_EQ | L_NEQ ) simple_expr_wrapper )* )
            // Objcm.g:678:4: expr_cond_wrapper ( ( L_EQ_EQ | L_NEQ ) simple_expr_wrapper )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_expr_cond_wrapper_in_expr_eq3495);
            expr_cond_wrapper378=expr_cond_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, expr_cond_wrapper378.getTree());

            // Objcm.g:678:22: ( ( L_EQ_EQ | L_NEQ ) simple_expr_wrapper )*
            loop90:
            do {
                int alt90=2;
                int LA90_0 = input.LA(1);

                if ( (LA90_0==L_EQ_EQ||LA90_0==L_NEQ) ) {
                    alt90=1;
                }


                switch (alt90) {
            	case 1 :
            	    // Objcm.g:678:23: ( L_EQ_EQ | L_NEQ ) simple_expr_wrapper
            	    {
            	    set379=(Token)input.LT(1);

            	    if ( input.LA(1)==L_EQ_EQ||input.LA(1)==L_NEQ ) {
            	        input.consume();
            	        adaptor.addChild(root_0, 
            	        (Object)adaptor.create(set379)
            	        );
            	        state.errorRecovery=false;
            	    }
            	    else {
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    pushFollow(FOLLOW_simple_expr_wrapper_in_expr_eq3506);
            	    simple_expr_wrapper380=simple_expr_wrapper();

            	    state._fsp--;

            	    adaptor.addChild(root_0, simple_expr_wrapper380.getTree());

            	    }
            	    break;

            	default :
            	    break loop90;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_eq"


    public static class expr_cond_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_cond_wrapper"
    // Objcm.g:680:1: expr_cond_wrapper : expr_cond -> ^( EXPR_COND expr_cond ) ;
    public final ObjcmParser.expr_cond_wrapper_return expr_cond_wrapper() throws RecognitionException {
        ObjcmParser.expr_cond_wrapper_return retval = new ObjcmParser.expr_cond_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_cond_return expr_cond381 =null;


        RewriteRuleSubtreeStream stream_expr_cond=new RewriteRuleSubtreeStream(adaptor,"rule expr_cond");
        try {
            // Objcm.g:681:2: ( expr_cond -> ^( EXPR_COND expr_cond ) )
            // Objcm.g:681:4: expr_cond
            {
            pushFollow(FOLLOW_expr_cond_in_expr_cond_wrapper3517);
            expr_cond381=expr_cond();

            state._fsp--;

            stream_expr_cond.add(expr_cond381.getTree());

            // AST REWRITE
            // elements: expr_cond
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 681:14: -> ^( EXPR_COND expr_cond )
            {
                // Objcm.g:681:17: ^( EXPR_COND expr_cond )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_COND, "EXPR_COND")
                , root_1);

                adaptor.addChild(root_1, stream_expr_cond.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_cond_wrapper"


    public static class expr_cond_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_cond"
    // Objcm.g:683:1: expr_cond : expr_mov_wrapper ( ( L_LESS | L_MORE | L_LESS_EQ | L_MORE_EQ ) simple_expr_wrapper )* ;
    public final ObjcmParser.expr_cond_return expr_cond() throws RecognitionException {
        ObjcmParser.expr_cond_return retval = new ObjcmParser.expr_cond_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set383=null;
        ObjcmParser.expr_mov_wrapper_return expr_mov_wrapper382 =null;

        ObjcmParser.simple_expr_wrapper_return simple_expr_wrapper384 =null;


        Object set383_tree=null;

        try {
            // Objcm.g:684:2: ( expr_mov_wrapper ( ( L_LESS | L_MORE | L_LESS_EQ | L_MORE_EQ ) simple_expr_wrapper )* )
            // Objcm.g:684:4: expr_mov_wrapper ( ( L_LESS | L_MORE | L_LESS_EQ | L_MORE_EQ ) simple_expr_wrapper )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_expr_mov_wrapper_in_expr_cond3534);
            expr_mov_wrapper382=expr_mov_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, expr_mov_wrapper382.getTree());

            // Objcm.g:684:21: ( ( L_LESS | L_MORE | L_LESS_EQ | L_MORE_EQ ) simple_expr_wrapper )*
            loop91:
            do {
                int alt91=2;
                int LA91_0 = input.LA(1);

                if ( ((LA91_0 >= L_LESS && LA91_0 <= L_LESS_EQ)||(LA91_0 >= L_MORE && LA91_0 <= L_MORE_EQ)) ) {
                    alt91=1;
                }


                switch (alt91) {
            	case 1 :
            	    // Objcm.g:684:22: ( L_LESS | L_MORE | L_LESS_EQ | L_MORE_EQ ) simple_expr_wrapper
            	    {
            	    set383=(Token)input.LT(1);

            	    if ( (input.LA(1) >= L_LESS && input.LA(1) <= L_LESS_EQ)||(input.LA(1) >= L_MORE && input.LA(1) <= L_MORE_EQ) ) {
            	        input.consume();
            	        adaptor.addChild(root_0, 
            	        (Object)adaptor.create(set383)
            	        );
            	        state.errorRecovery=false;
            	    }
            	    else {
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    pushFollow(FOLLOW_simple_expr_wrapper_in_expr_cond3553);
            	    simple_expr_wrapper384=simple_expr_wrapper();

            	    state._fsp--;

            	    adaptor.addChild(root_0, simple_expr_wrapper384.getTree());

            	    }
            	    break;

            	default :
            	    break loop91;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_cond"


    public static class expr_mov_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_mov_wrapper"
    // Objcm.g:686:1: expr_mov_wrapper : expr_mov -> ^( EXPR_MOV expr_mov ) ;
    public final ObjcmParser.expr_mov_wrapper_return expr_mov_wrapper() throws RecognitionException {
        ObjcmParser.expr_mov_wrapper_return retval = new ObjcmParser.expr_mov_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_mov_return expr_mov385 =null;


        RewriteRuleSubtreeStream stream_expr_mov=new RewriteRuleSubtreeStream(adaptor,"rule expr_mov");
        try {
            // Objcm.g:687:2: ( expr_mov -> ^( EXPR_MOV expr_mov ) )
            // Objcm.g:687:4: expr_mov
            {
            pushFollow(FOLLOW_expr_mov_in_expr_mov_wrapper3564);
            expr_mov385=expr_mov();

            state._fsp--;

            stream_expr_mov.add(expr_mov385.getTree());

            // AST REWRITE
            // elements: expr_mov
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 687:13: -> ^( EXPR_MOV expr_mov )
            {
                // Objcm.g:687:16: ^( EXPR_MOV expr_mov )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_MOV, "EXPR_MOV")
                , root_1);

                adaptor.addChild(root_1, stream_expr_mov.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_mov_wrapper"


    public static class expr_mov_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_mov"
    // Objcm.g:689:1: expr_mov : expr_add_wrapper ( ( L_LEFT | L_RIGHT ) simple_expr_wrapper )* ;
    public final ObjcmParser.expr_mov_return expr_mov() throws RecognitionException {
        ObjcmParser.expr_mov_return retval = new ObjcmParser.expr_mov_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set387=null;
        ObjcmParser.expr_add_wrapper_return expr_add_wrapper386 =null;

        ObjcmParser.simple_expr_wrapper_return simple_expr_wrapper388 =null;


        Object set387_tree=null;

        try {
            // Objcm.g:690:2: ( expr_add_wrapper ( ( L_LEFT | L_RIGHT ) simple_expr_wrapper )* )
            // Objcm.g:690:4: expr_add_wrapper ( ( L_LEFT | L_RIGHT ) simple_expr_wrapper )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_expr_add_wrapper_in_expr_mov3582);
            expr_add_wrapper386=expr_add_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, expr_add_wrapper386.getTree());

            // Objcm.g:690:21: ( ( L_LEFT | L_RIGHT ) simple_expr_wrapper )*
            loop92:
            do {
                int alt92=2;
                int LA92_0 = input.LA(1);

                if ( (LA92_0==L_LEFT||LA92_0==L_RIGHT) ) {
                    alt92=1;
                }


                switch (alt92) {
            	case 1 :
            	    // Objcm.g:690:22: ( L_LEFT | L_RIGHT ) simple_expr_wrapper
            	    {
            	    set387=(Token)input.LT(1);

            	    if ( input.LA(1)==L_LEFT||input.LA(1)==L_RIGHT ) {
            	        input.consume();
            	        adaptor.addChild(root_0, 
            	        (Object)adaptor.create(set387)
            	        );
            	        state.errorRecovery=false;
            	    }
            	    else {
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    pushFollow(FOLLOW_simple_expr_wrapper_in_expr_mov3593);
            	    simple_expr_wrapper388=simple_expr_wrapper();

            	    state._fsp--;

            	    adaptor.addChild(root_0, simple_expr_wrapper388.getTree());

            	    }
            	    break;

            	default :
            	    break loop92;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_mov"


    public static class expr_add_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_add_wrapper"
    // Objcm.g:692:1: expr_add_wrapper : expr_add -> ^( EXPR_ADD expr_add ) ;
    public final ObjcmParser.expr_add_wrapper_return expr_add_wrapper() throws RecognitionException {
        ObjcmParser.expr_add_wrapper_return retval = new ObjcmParser.expr_add_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_add_return expr_add389 =null;


        RewriteRuleSubtreeStream stream_expr_add=new RewriteRuleSubtreeStream(adaptor,"rule expr_add");
        try {
            // Objcm.g:693:2: ( expr_add -> ^( EXPR_ADD expr_add ) )
            // Objcm.g:693:4: expr_add
            {
            pushFollow(FOLLOW_expr_add_in_expr_add_wrapper3605);
            expr_add389=expr_add();

            state._fsp--;

            stream_expr_add.add(expr_add389.getTree());

            // AST REWRITE
            // elements: expr_add
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 693:13: -> ^( EXPR_ADD expr_add )
            {
                // Objcm.g:693:16: ^( EXPR_ADD expr_add )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_ADD, "EXPR_ADD")
                , root_1);

                adaptor.addChild(root_1, stream_expr_add.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_add_wrapper"


    public static class expr_add_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_add"
    // Objcm.g:695:1: expr_add : expr_mult_wrapper ( ( L_PLUS | L_MINUS ) simple_expr_wrapper )* ;
    public final ObjcmParser.expr_add_return expr_add() throws RecognitionException {
        ObjcmParser.expr_add_return retval = new ObjcmParser.expr_add_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set391=null;
        ObjcmParser.expr_mult_wrapper_return expr_mult_wrapper390 =null;

        ObjcmParser.simple_expr_wrapper_return simple_expr_wrapper392 =null;


        Object set391_tree=null;

        try {
            // Objcm.g:696:2: ( expr_mult_wrapper ( ( L_PLUS | L_MINUS ) simple_expr_wrapper )* )
            // Objcm.g:696:4: expr_mult_wrapper ( ( L_PLUS | L_MINUS ) simple_expr_wrapper )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_expr_mult_wrapper_in_expr_add3622);
            expr_mult_wrapper390=expr_mult_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, expr_mult_wrapper390.getTree());

            // Objcm.g:696:22: ( ( L_PLUS | L_MINUS ) simple_expr_wrapper )*
            loop93:
            do {
                int alt93=2;
                int LA93_0 = input.LA(1);

                if ( (LA93_0==L_MINUS||LA93_0==L_PLUS) ) {
                    alt93=1;
                }


                switch (alt93) {
            	case 1 :
            	    // Objcm.g:696:23: ( L_PLUS | L_MINUS ) simple_expr_wrapper
            	    {
            	    set391=(Token)input.LT(1);

            	    if ( input.LA(1)==L_MINUS||input.LA(1)==L_PLUS ) {
            	        input.consume();
            	        adaptor.addChild(root_0, 
            	        (Object)adaptor.create(set391)
            	        );
            	        state.errorRecovery=false;
            	    }
            	    else {
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    pushFollow(FOLLOW_simple_expr_wrapper_in_expr_add3633);
            	    simple_expr_wrapper392=simple_expr_wrapper();

            	    state._fsp--;

            	    adaptor.addChild(root_0, simple_expr_wrapper392.getTree());

            	    }
            	    break;

            	default :
            	    break loop93;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_add"


    public static class expr_mult_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_mult_wrapper"
    // Objcm.g:698:1: expr_mult_wrapper : expr_mult -> ^( EXPR_MULT expr_mult ) ;
    public final ObjcmParser.expr_mult_wrapper_return expr_mult_wrapper() throws RecognitionException {
        ObjcmParser.expr_mult_wrapper_return retval = new ObjcmParser.expr_mult_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_mult_return expr_mult393 =null;


        RewriteRuleSubtreeStream stream_expr_mult=new RewriteRuleSubtreeStream(adaptor,"rule expr_mult");
        try {
            // Objcm.g:699:2: ( expr_mult -> ^( EXPR_MULT expr_mult ) )
            // Objcm.g:699:4: expr_mult
            {
            pushFollow(FOLLOW_expr_mult_in_expr_mult_wrapper3644);
            expr_mult393=expr_mult();

            state._fsp--;

            stream_expr_mult.add(expr_mult393.getTree());

            // AST REWRITE
            // elements: expr_mult
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 699:14: -> ^( EXPR_MULT expr_mult )
            {
                // Objcm.g:699:17: ^( EXPR_MULT expr_mult )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_MULT, "EXPR_MULT")
                , root_1);

                adaptor.addChild(root_1, stream_expr_mult.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_mult_wrapper"


    public static class expr_mult_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_mult"
    // Objcm.g:701:1: expr_mult : expr_type_wrapper ( ( ASTERISK | L_DIV | L_PERC ) simple_expr_wrapper )* ;
    public final ObjcmParser.expr_mult_return expr_mult() throws RecognitionException {
        ObjcmParser.expr_mult_return retval = new ObjcmParser.expr_mult_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set395=null;
        ObjcmParser.expr_type_wrapper_return expr_type_wrapper394 =null;

        ObjcmParser.simple_expr_wrapper_return simple_expr_wrapper396 =null;


        Object set395_tree=null;

        try {
            // Objcm.g:702:2: ( expr_type_wrapper ( ( ASTERISK | L_DIV | L_PERC ) simple_expr_wrapper )* )
            // Objcm.g:702:4: expr_type_wrapper ( ( ASTERISK | L_DIV | L_PERC ) simple_expr_wrapper )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_expr_type_wrapper_in_expr_mult3661);
            expr_type_wrapper394=expr_type_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, expr_type_wrapper394.getTree());

            // Objcm.g:702:22: ( ( ASTERISK | L_DIV | L_PERC ) simple_expr_wrapper )*
            loop94:
            do {
                int alt94=2;
                int LA94_0 = input.LA(1);

                if ( (LA94_0==ASTERISK||LA94_0==L_DIV||LA94_0==L_PERC) ) {
                    alt94=1;
                }


                switch (alt94) {
            	case 1 :
            	    // Objcm.g:702:23: ( ASTERISK | L_DIV | L_PERC ) simple_expr_wrapper
            	    {
            	    set395=(Token)input.LT(1);

            	    if ( input.LA(1)==ASTERISK||input.LA(1)==L_DIV||input.LA(1)==L_PERC ) {
            	        input.consume();
            	        adaptor.addChild(root_0, 
            	        (Object)adaptor.create(set395)
            	        );
            	        state.errorRecovery=false;
            	    }
            	    else {
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    pushFollow(FOLLOW_simple_expr_wrapper_in_expr_mult3676);
            	    simple_expr_wrapper396=simple_expr_wrapper();

            	    state._fsp--;

            	    adaptor.addChild(root_0, simple_expr_wrapper396.getTree());

            	    }
            	    break;

            	default :
            	    break loop94;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_mult"


    public static class expr_type_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_type_wrapper"
    // Objcm.g:704:1: expr_type_wrapper : expr_type -> ^( EXPR_TYPE expr_type ) ;
    public final ObjcmParser.expr_type_wrapper_return expr_type_wrapper() throws RecognitionException {
        ObjcmParser.expr_type_wrapper_return retval = new ObjcmParser.expr_type_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_type_return expr_type397 =null;


        RewriteRuleSubtreeStream stream_expr_type=new RewriteRuleSubtreeStream(adaptor,"rule expr_type");
        try {
            // Objcm.g:705:2: ( expr_type -> ^( EXPR_TYPE expr_type ) )
            // Objcm.g:705:4: expr_type
            {
            pushFollow(FOLLOW_expr_type_in_expr_type_wrapper3688);
            expr_type397=expr_type();

            state._fsp--;

            stream_expr_type.add(expr_type397.getTree());

            // AST REWRITE
            // elements: expr_type
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 705:14: -> ^( EXPR_TYPE expr_type )
            {
                // Objcm.g:705:17: ^( EXPR_TYPE expr_type )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_TYPE, "EXPR_TYPE")
                , root_1);

                adaptor.addChild(root_1, stream_expr_type.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_type_wrapper"


    public static class expr_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_type"
    // Objcm.g:707:1: expr_type : ( type_convertion )? expr_unname ;
    public final ObjcmParser.expr_type_return expr_type() throws RecognitionException {
        ObjcmParser.expr_type_return retval = new ObjcmParser.expr_type_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.type_convertion_return type_convertion398 =null;

        ObjcmParser.expr_unname_return expr_unname399 =null;



        try {
            // Objcm.g:708:2: ( ( type_convertion )? expr_unname )
            // Objcm.g:708:4: ( type_convertion )? expr_unname
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:708:4: ( type_convertion )?
            int alt95=2;
            alt95 = dfa95.predict(input);
            switch (alt95) {
                case 1 :
                    // Objcm.g:708:4: type_convertion
                    {
                    pushFollow(FOLLOW_type_convertion_in_expr_type3705);
                    type_convertion398=type_convertion();

                    state._fsp--;

                    adaptor.addChild(root_0, type_convertion398.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_expr_unname_in_expr_type3708);
            expr_unname399=expr_unname();

            state._fsp--;

            adaptor.addChild(root_0, expr_unname399.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_type"


    public static class expr_unname_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_unname"
    // Objcm.g:710:1: expr_unname : ( ASTERISK ( type_convertion )? )? expr_addr ;
    public final ObjcmParser.expr_unname_return expr_unname() throws RecognitionException {
        ObjcmParser.expr_unname_return retval = new ObjcmParser.expr_unname_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ASTERISK400=null;
        ObjcmParser.type_convertion_return type_convertion401 =null;

        ObjcmParser.expr_addr_return expr_addr402 =null;


        Object ASTERISK400_tree=null;

        try {
            // Objcm.g:711:2: ( ( ASTERISK ( type_convertion )? )? expr_addr )
            // Objcm.g:711:4: ( ASTERISK ( type_convertion )? )? expr_addr
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:711:4: ( ASTERISK ( type_convertion )? )?
            int alt97=2;
            int LA97_0 = input.LA(1);

            if ( (LA97_0==ASTERISK) ) {
                alt97=1;
            }
            switch (alt97) {
                case 1 :
                    // Objcm.g:711:5: ASTERISK ( type_convertion )?
                    {
                    ASTERISK400=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_expr_unname3719); 
                    ASTERISK400_tree = 
                    (Object)adaptor.create(ASTERISK400)
                    ;
                    adaptor.addChild(root_0, ASTERISK400_tree);


                    // Objcm.g:711:14: ( type_convertion )?
                    int alt96=2;
                    alt96 = dfa96.predict(input);
                    switch (alt96) {
                        case 1 :
                            // Objcm.g:711:14: type_convertion
                            {
                            pushFollow(FOLLOW_type_convertion_in_expr_unname3721);
                            type_convertion401=type_convertion();

                            state._fsp--;

                            adaptor.addChild(root_0, type_convertion401.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }


            pushFollow(FOLLOW_expr_addr_in_expr_unname3726);
            expr_addr402=expr_addr();

            state._fsp--;

            adaptor.addChild(root_0, expr_addr402.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_unname"


    public static class expr_addr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_addr"
    // Objcm.g:713:1: expr_addr : ( L_AND )? expr_sign ;
    public final ObjcmParser.expr_addr_return expr_addr() throws RecognitionException {
        ObjcmParser.expr_addr_return retval = new ObjcmParser.expr_addr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_AND403=null;
        ObjcmParser.expr_sign_return expr_sign404 =null;


        Object L_AND403_tree=null;

        try {
            // Objcm.g:714:2: ( ( L_AND )? expr_sign )
            // Objcm.g:714:4: ( L_AND )? expr_sign
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:714:4: ( L_AND )?
            int alt98=2;
            int LA98_0 = input.LA(1);

            if ( (LA98_0==L_AND) ) {
                alt98=1;
            }
            switch (alt98) {
                case 1 :
                    // Objcm.g:714:4: L_AND
                    {
                    L_AND403=(Token)match(input,L_AND,FOLLOW_L_AND_in_expr_addr3736); 
                    L_AND403_tree = 
                    (Object)adaptor.create(L_AND403)
                    ;
                    adaptor.addChild(root_0, L_AND403_tree);


                    }
                    break;

            }


            pushFollow(FOLLOW_expr_sign_in_expr_addr3739);
            expr_sign404=expr_sign();

            state._fsp--;

            adaptor.addChild(root_0, expr_sign404.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_addr"


    public static class expr_sign_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_sign"
    // Objcm.g:716:1: expr_sign : ( L_MINUS | L_PLUS )? expr_not_wrapper ;
    public final ObjcmParser.expr_sign_return expr_sign() throws RecognitionException {
        ObjcmParser.expr_sign_return retval = new ObjcmParser.expr_sign_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set405=null;
        ObjcmParser.expr_not_wrapper_return expr_not_wrapper406 =null;


        Object set405_tree=null;

        try {
            // Objcm.g:717:2: ( ( L_MINUS | L_PLUS )? expr_not_wrapper )
            // Objcm.g:717:4: ( L_MINUS | L_PLUS )? expr_not_wrapper
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:717:4: ( L_MINUS | L_PLUS )?
            int alt99=2;
            int LA99_0 = input.LA(1);

            if ( (LA99_0==L_MINUS||LA99_0==L_PLUS) ) {
                alt99=1;
            }
            switch (alt99) {
                case 1 :
                    // Objcm.g:
                    {
                    set405=(Token)input.LT(1);

                    if ( input.LA(1)==L_MINUS||input.LA(1)==L_PLUS ) {
                        input.consume();
                        adaptor.addChild(root_0, 
                        (Object)adaptor.create(set405)
                        );
                        state.errorRecovery=false;
                    }
                    else {
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    }
                    break;

            }


            pushFollow(FOLLOW_expr_not_wrapper_in_expr_sign3758);
            expr_not_wrapper406=expr_not_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, expr_not_wrapper406.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_sign"


    public static class expr_not_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_not_wrapper"
    // Objcm.g:719:1: expr_not_wrapper : expr_not -> ^( EXPR_NOT expr_not ) ;
    public final ObjcmParser.expr_not_wrapper_return expr_not_wrapper() throws RecognitionException {
        ObjcmParser.expr_not_wrapper_return retval = new ObjcmParser.expr_not_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_not_return expr_not407 =null;


        RewriteRuleSubtreeStream stream_expr_not=new RewriteRuleSubtreeStream(adaptor,"rule expr_not");
        try {
            // Objcm.g:720:2: ( expr_not -> ^( EXPR_NOT expr_not ) )
            // Objcm.g:720:4: expr_not
            {
            pushFollow(FOLLOW_expr_not_in_expr_not_wrapper3768);
            expr_not407=expr_not();

            state._fsp--;

            stream_expr_not.add(expr_not407.getTree());

            // AST REWRITE
            // elements: expr_not
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 720:13: -> ^( EXPR_NOT expr_not )
            {
                // Objcm.g:720:16: ^( EXPR_NOT expr_not )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_NOT, "EXPR_NOT")
                , root_1);

                adaptor.addChild(root_1, stream_expr_not.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_not_wrapper"


    public static class expr_not_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_not"
    // Objcm.g:722:1: expr_not : ( L_NOT )? expr_not2 ;
    public final ObjcmParser.expr_not_return expr_not() throws RecognitionException {
        ObjcmParser.expr_not_return retval = new ObjcmParser.expr_not_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_NOT408=null;
        ObjcmParser.expr_not2_return expr_not2409 =null;


        Object L_NOT408_tree=null;

        try {
            // Objcm.g:723:2: ( ( L_NOT )? expr_not2 )
            // Objcm.g:723:4: ( L_NOT )? expr_not2
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:723:4: ( L_NOT )?
            int alt100=2;
            int LA100_0 = input.LA(1);

            if ( (LA100_0==L_NOT) ) {
                alt100=1;
            }
            switch (alt100) {
                case 1 :
                    // Objcm.g:723:4: L_NOT
                    {
                    L_NOT408=(Token)match(input,L_NOT,FOLLOW_L_NOT_in_expr_not3787); 
                    L_NOT408_tree = 
                    (Object)adaptor.create(L_NOT408)
                    ;
                    adaptor.addChild(root_0, L_NOT408_tree);


                    }
                    break;

            }


            pushFollow(FOLLOW_expr_not2_in_expr_not3790);
            expr_not2409=expr_not2();

            state._fsp--;

            adaptor.addChild(root_0, expr_not2409.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_not"


    public static class expr_not2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_not2"
    // Objcm.g:725:1: expr_not2 : ( L_TILDA )? expr_size_of ;
    public final ObjcmParser.expr_not2_return expr_not2() throws RecognitionException {
        ObjcmParser.expr_not2_return retval = new ObjcmParser.expr_not2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_TILDA410=null;
        ObjcmParser.expr_size_of_return expr_size_of411 =null;


        Object L_TILDA410_tree=null;

        try {
            // Objcm.g:726:2: ( ( L_TILDA )? expr_size_of )
            // Objcm.g:726:4: ( L_TILDA )? expr_size_of
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:726:4: ( L_TILDA )?
            int alt101=2;
            int LA101_0 = input.LA(1);

            if ( (LA101_0==L_TILDA) ) {
                alt101=1;
            }
            switch (alt101) {
                case 1 :
                    // Objcm.g:726:4: L_TILDA
                    {
                    L_TILDA410=(Token)match(input,L_TILDA,FOLLOW_L_TILDA_in_expr_not23800); 
                    L_TILDA410_tree = 
                    (Object)adaptor.create(L_TILDA410)
                    ;
                    adaptor.addChild(root_0, L_TILDA410_tree);


                    }
                    break;

            }


            pushFollow(FOLLOW_expr_size_of_in_expr_not23803);
            expr_size_of411=expr_size_of();

            state._fsp--;

            adaptor.addChild(root_0, expr_size_of411.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_not2"


    public static class expr_size_of_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_size_of"
    // Objcm.g:728:1: expr_size_of : ( SIZEOF )? expr_xcrement ;
    public final ObjcmParser.expr_size_of_return expr_size_of() throws RecognitionException {
        ObjcmParser.expr_size_of_return retval = new ObjcmParser.expr_size_of_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SIZEOF412=null;
        ObjcmParser.expr_xcrement_return expr_xcrement413 =null;


        Object SIZEOF412_tree=null;

        try {
            // Objcm.g:729:2: ( ( SIZEOF )? expr_xcrement )
            // Objcm.g:729:4: ( SIZEOF )? expr_xcrement
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:729:4: ( SIZEOF )?
            int alt102=2;
            int LA102_0 = input.LA(1);

            if ( (LA102_0==SIZEOF) ) {
                alt102=1;
            }
            switch (alt102) {
                case 1 :
                    // Objcm.g:729:4: SIZEOF
                    {
                    SIZEOF412=(Token)match(input,SIZEOF,FOLLOW_SIZEOF_in_expr_size_of3813); 
                    SIZEOF412_tree = 
                    (Object)adaptor.create(SIZEOF412)
                    ;
                    adaptor.addChild(root_0, SIZEOF412_tree);


                    }
                    break;

            }


            pushFollow(FOLLOW_expr_xcrement_in_expr_size_of3816);
            expr_xcrement413=expr_xcrement();

            state._fsp--;

            adaptor.addChild(root_0, expr_xcrement413.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_size_of"


    public static class expr_xcrement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_xcrement"
    // Objcm.g:731:1: expr_xcrement : ( L_PLUS_PLUS | L_MINUS_MINUS )? object_wrapped1 ;
    public final ObjcmParser.expr_xcrement_return expr_xcrement() throws RecognitionException {
        ObjcmParser.expr_xcrement_return retval = new ObjcmParser.expr_xcrement_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set414=null;
        ObjcmParser.object_wrapped1_return object_wrapped1415 =null;


        Object set414_tree=null;

        try {
            // Objcm.g:732:2: ( ( L_PLUS_PLUS | L_MINUS_MINUS )? object_wrapped1 )
            // Objcm.g:732:4: ( L_PLUS_PLUS | L_MINUS_MINUS )? object_wrapped1
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:732:4: ( L_PLUS_PLUS | L_MINUS_MINUS )?
            int alt103=2;
            int LA103_0 = input.LA(1);

            if ( (LA103_0==L_MINUS_MINUS||LA103_0==L_PLUS_PLUS) ) {
                alt103=1;
            }
            switch (alt103) {
                case 1 :
                    // Objcm.g:
                    {
                    set414=(Token)input.LT(1);

                    if ( input.LA(1)==L_MINUS_MINUS||input.LA(1)==L_PLUS_PLUS ) {
                        input.consume();
                        adaptor.addChild(root_0, 
                        (Object)adaptor.create(set414)
                        );
                        state.errorRecovery=false;
                    }
                    else {
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    }
                    break;

            }


            pushFollow(FOLLOW_object_wrapped1_in_expr_xcrement3835);
            object_wrapped1415=object_wrapped1();

            state._fsp--;

            adaptor.addChild(root_0, object_wrapped1415.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_xcrement"


    public static class object_wrapped1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "object_wrapped1"
    // Objcm.g:734:1: object_wrapped1 : object_wrapped2 ( L_PLUS_PLUS | L_MINUS_MINUS )? ;
    public final ObjcmParser.object_wrapped1_return object_wrapped1() throws RecognitionException {
        ObjcmParser.object_wrapped1_return retval = new ObjcmParser.object_wrapped1_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set417=null;
        ObjcmParser.object_wrapped2_return object_wrapped2416 =null;


        Object set417_tree=null;

        try {
            // Objcm.g:735:2: ( object_wrapped2 ( L_PLUS_PLUS | L_MINUS_MINUS )? )
            // Objcm.g:735:4: object_wrapped2 ( L_PLUS_PLUS | L_MINUS_MINUS )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_object_wrapped2_in_object_wrapped13845);
            object_wrapped2416=object_wrapped2();

            state._fsp--;

            adaptor.addChild(root_0, object_wrapped2416.getTree());

            // Objcm.g:735:20: ( L_PLUS_PLUS | L_MINUS_MINUS )?
            int alt104=2;
            int LA104_0 = input.LA(1);

            if ( (LA104_0==L_MINUS_MINUS||LA104_0==L_PLUS_PLUS) ) {
                alt104=1;
            }
            switch (alt104) {
                case 1 :
                    // Objcm.g:
                    {
                    set417=(Token)input.LT(1);

                    if ( input.LA(1)==L_MINUS_MINUS||input.LA(1)==L_PLUS_PLUS ) {
                        input.consume();
                        adaptor.addChild(root_0, 
                        (Object)adaptor.create(set417)
                        );
                        state.errorRecovery=false;
                    }
                    else {
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "object_wrapped1"


    public static class object_wrapped2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "object_wrapped2"
    // Objcm.g:738:1: object_wrapped2 : ( ( 'unsigned' )? object_name ( generic )? | method_call_wrapper ( id_part_end )? | L_BR classical_expr_wrp R_BR ( id_part_end )? | const_expr_wrapper | a_started );
    public final ObjcmParser.object_wrapped2_return object_wrapped2() throws RecognitionException {
        ObjcmParser.object_wrapped2_return retval = new ObjcmParser.object_wrapped2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal418=null;
        Token L_BR423=null;
        Token R_BR425=null;
        ObjcmParser.object_name_return object_name419 =null;

        ObjcmParser.generic_return generic420 =null;

        ObjcmParser.method_call_wrapper_return method_call_wrapper421 =null;

        ObjcmParser.id_part_end_return id_part_end422 =null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp424 =null;

        ObjcmParser.id_part_end_return id_part_end426 =null;

        ObjcmParser.const_expr_wrapper_return const_expr_wrapper427 =null;

        ObjcmParser.a_started_return a_started428 =null;


        Object string_literal418_tree=null;
        Object L_BR423_tree=null;
        Object R_BR425_tree=null;

        try {
            // Objcm.g:739:2: ( ( 'unsigned' )? object_name ( generic )? | method_call_wrapper ( id_part_end )? | L_BR classical_expr_wrp R_BR ( id_part_end )? | const_expr_wrapper | a_started )
            int alt109=5;
            switch ( input.LA(1) ) {
            case ID:
            case 182:
            case 185:
            case 193:
            case 196:
            case 201:
                {
                alt109=1;
                }
                break;
            case L_KBR:
                {
                alt109=2;
                }
                break;
            case L_BR:
                {
                alt109=3;
                }
                break;
            case NUMBER:
            case STRING_LITERAL:
            case STRING_LITERAL2:
            case STRING_LITERAL3:
            case 179:
            case 195:
                {
                alt109=4;
                }
                break;
            case 166:
            case 173:
            case 175:
                {
                alt109=5;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 109, 0, input);

                throw nvae;

            }

            switch (alt109) {
                case 1 :
                    // Objcm.g:739:5: ( 'unsigned' )? object_name ( generic )?
                    {
                    root_0 = (Object)adaptor.nil();


                    // Objcm.g:739:5: ( 'unsigned' )?
                    int alt105=2;
                    int LA105_0 = input.LA(1);

                    if ( (LA105_0==201) ) {
                        alt105=1;
                    }
                    switch (alt105) {
                        case 1 :
                            // Objcm.g:739:5: 'unsigned'
                            {
                            string_literal418=(Token)match(input,201,FOLLOW_201_in_object_wrapped23866); 
                            string_literal418_tree = 
                            (Object)adaptor.create(string_literal418)
                            ;
                            adaptor.addChild(root_0, string_literal418_tree);


                            }
                            break;

                    }


                    pushFollow(FOLLOW_object_name_in_object_wrapped23869);
                    object_name419=object_name();

                    state._fsp--;

                    adaptor.addChild(root_0, object_name419.getTree());

                    // Objcm.g:739:29: ( generic )?
                    int alt106=2;
                    alt106 = dfa106.predict(input);
                    switch (alt106) {
                        case 1 :
                            // Objcm.g:739:29: generic
                            {
                            pushFollow(FOLLOW_generic_in_object_wrapped23871);
                            generic420=generic();

                            state._fsp--;

                            adaptor.addChild(root_0, generic420.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // Objcm.g:740:4: method_call_wrapper ( id_part_end )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_method_call_wrapper_in_object_wrapped23877);
                    method_call_wrapper421=method_call_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, method_call_wrapper421.getTree());

                    // Objcm.g:740:24: ( id_part_end )?
                    int alt107=2;
                    int LA107_0 = input.LA(1);

                    if ( (LA107_0==DOT||LA107_0==163) ) {
                        alt107=1;
                    }
                    switch (alt107) {
                        case 1 :
                            // Objcm.g:740:24: id_part_end
                            {
                            pushFollow(FOLLOW_id_part_end_in_object_wrapped23879);
                            id_part_end422=id_part_end();

                            state._fsp--;

                            adaptor.addChild(root_0, id_part_end422.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // Objcm.g:741:4: L_BR classical_expr_wrp R_BR ( id_part_end )?
                    {
                    root_0 = (Object)adaptor.nil();


                    L_BR423=(Token)match(input,L_BR,FOLLOW_L_BR_in_object_wrapped23885); 
                    L_BR423_tree = 
                    (Object)adaptor.create(L_BR423)
                    ;
                    adaptor.addChild(root_0, L_BR423_tree);


                    pushFollow(FOLLOW_classical_expr_wrp_in_object_wrapped23887);
                    classical_expr_wrp424=classical_expr_wrp();

                    state._fsp--;

                    adaptor.addChild(root_0, classical_expr_wrp424.getTree());

                    R_BR425=(Token)match(input,R_BR,FOLLOW_R_BR_in_object_wrapped23889); 
                    R_BR425_tree = 
                    (Object)adaptor.create(R_BR425)
                    ;
                    adaptor.addChild(root_0, R_BR425_tree);


                    // Objcm.g:741:33: ( id_part_end )?
                    int alt108=2;
                    int LA108_0 = input.LA(1);

                    if ( (LA108_0==DOT||LA108_0==163) ) {
                        alt108=1;
                    }
                    switch (alt108) {
                        case 1 :
                            // Objcm.g:741:33: id_part_end
                            {
                            pushFollow(FOLLOW_id_part_end_in_object_wrapped23891);
                            id_part_end426=id_part_end();

                            state._fsp--;

                            adaptor.addChild(root_0, id_part_end426.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 4 :
                    // Objcm.g:742:4: const_expr_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_const_expr_wrapper_in_object_wrapped23897);
                    const_expr_wrapper427=const_expr_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, const_expr_wrapper427.getTree());

                    }
                    break;
                case 5 :
                    // Objcm.g:743:4: a_started
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_a_started_in_object_wrapped23902);
                    a_started428=a_started();

                    state._fsp--;

                    adaptor.addChild(root_0, a_started428.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "object_wrapped2"


    public static class function_brackets_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "function_brackets_wrapper"
    // Objcm.g:746:1: function_brackets_wrapper : function_brackets -> ^( FUNCTION function_brackets ) ;
    public final ObjcmParser.function_brackets_wrapper_return function_brackets_wrapper() throws RecognitionException {
        ObjcmParser.function_brackets_wrapper_return retval = new ObjcmParser.function_brackets_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.function_brackets_return function_brackets429 =null;


        RewriteRuleSubtreeStream stream_function_brackets=new RewriteRuleSubtreeStream(adaptor,"rule function_brackets");
        try {
            // Objcm.g:747:2: ( function_brackets -> ^( FUNCTION function_brackets ) )
            // Objcm.g:747:4: function_brackets
            {
            pushFollow(FOLLOW_function_brackets_in_function_brackets_wrapper3914);
            function_brackets429=function_brackets();

            state._fsp--;

            stream_function_brackets.add(function_brackets429.getTree());

            // AST REWRITE
            // elements: function_brackets
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 747:22: -> ^( FUNCTION function_brackets )
            {
                // Objcm.g:747:25: ^( FUNCTION function_brackets )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FUNCTION, "FUNCTION")
                , root_1);

                adaptor.addChild(root_1, stream_function_brackets.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "function_brackets_wrapper"


    public static class function_brackets_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "function_brackets"
    // Objcm.g:749:1: function_brackets : L_BR ( classical_expr_wrp ( COMMA classical_expr_wrp )* )? R_BR ;
    public final ObjcmParser.function_brackets_return function_brackets() throws RecognitionException {
        ObjcmParser.function_brackets_return retval = new ObjcmParser.function_brackets_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_BR430=null;
        Token COMMA432=null;
        Token R_BR434=null;
        ObjcmParser.classical_expr_wrp_return classical_expr_wrp431 =null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp433 =null;


        Object L_BR430_tree=null;
        Object COMMA432_tree=null;
        Object R_BR434_tree=null;

        try {
            // Objcm.g:750:2: ( L_BR ( classical_expr_wrp ( COMMA classical_expr_wrp )* )? R_BR )
            // Objcm.g:750:4: L_BR ( classical_expr_wrp ( COMMA classical_expr_wrp )* )? R_BR
            {
            root_0 = (Object)adaptor.nil();


            L_BR430=(Token)match(input,L_BR,FOLLOW_L_BR_in_function_brackets3933); 
            L_BR430_tree = 
            (Object)adaptor.create(L_BR430)
            ;
            adaptor.addChild(root_0, L_BR430_tree);


            // Objcm.g:750:9: ( classical_expr_wrp ( COMMA classical_expr_wrp )* )?
            int alt111=2;
            int LA111_0 = input.LA(1);

            if ( (LA111_0==ASTERISK||LA111_0==ID||LA111_0==L_AND||LA111_0==L_BR||LA111_0==L_KBR||LA111_0==L_MINUS||LA111_0==L_MINUS_MINUS||LA111_0==L_NOT||LA111_0==L_PLUS||LA111_0==L_PLUS_PLUS||LA111_0==L_TILDA||LA111_0==NUMBER||LA111_0==SIZEOF||(LA111_0 >= STRING_LITERAL && LA111_0 <= STRING_LITERAL3)||LA111_0==166||LA111_0==173||LA111_0==175||LA111_0==179||LA111_0==182||LA111_0==185||LA111_0==193||(LA111_0 >= 195 && LA111_0 <= 196)||LA111_0==201) ) {
                alt111=1;
            }
            switch (alt111) {
                case 1 :
                    // Objcm.g:750:10: classical_expr_wrp ( COMMA classical_expr_wrp )*
                    {
                    pushFollow(FOLLOW_classical_expr_wrp_in_function_brackets3936);
                    classical_expr_wrp431=classical_expr_wrp();

                    state._fsp--;

                    adaptor.addChild(root_0, classical_expr_wrp431.getTree());

                    // Objcm.g:750:29: ( COMMA classical_expr_wrp )*
                    loop110:
                    do {
                        int alt110=2;
                        int LA110_0 = input.LA(1);

                        if ( (LA110_0==COMMA) ) {
                            alt110=1;
                        }


                        switch (alt110) {
                    	case 1 :
                    	    // Objcm.g:750:30: COMMA classical_expr_wrp
                    	    {
                    	    COMMA432=(Token)match(input,COMMA,FOLLOW_COMMA_in_function_brackets3939); 
                    	    COMMA432_tree = 
                    	    (Object)adaptor.create(COMMA432)
                    	    ;
                    	    adaptor.addChild(root_0, COMMA432_tree);


                    	    pushFollow(FOLLOW_classical_expr_wrp_in_function_brackets3941);
                    	    classical_expr_wrp433=classical_expr_wrp();

                    	    state._fsp--;

                    	    adaptor.addChild(root_0, classical_expr_wrp433.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop110;
                        }
                    } while (true);


                    }
                    break;

            }


            R_BR434=(Token)match(input,R_BR,FOLLOW_R_BR_in_function_brackets3947); 
            R_BR434_tree = 
            (Object)adaptor.create(R_BR434)
            ;
            adaptor.addChild(root_0, R_BR434_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "function_brackets"


    public static class index_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "index_wrapper"
    // Objcm.g:752:1: index_wrapper : index -> ^( INDEX index ) ;
    public final ObjcmParser.index_wrapper_return index_wrapper() throws RecognitionException {
        ObjcmParser.index_wrapper_return retval = new ObjcmParser.index_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.index_return index435 =null;


        RewriteRuleSubtreeStream stream_index=new RewriteRuleSubtreeStream(adaptor,"rule index");
        try {
            // Objcm.g:753:2: ( index -> ^( INDEX index ) )
            // Objcm.g:753:4: index
            {
            pushFollow(FOLLOW_index_in_index_wrapper3957);
            index435=index();

            state._fsp--;

            stream_index.add(index435.getTree());

            // AST REWRITE
            // elements: index
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 753:10: -> ^( INDEX index )
            {
                // Objcm.g:753:13: ^( INDEX index )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(INDEX, "INDEX")
                , root_1);

                adaptor.addChild(root_1, stream_index.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "index_wrapper"


    public static class index_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "index"
    // Objcm.g:755:1: index : L_KBR ( index_number_wrapper )? R_KBR ;
    public final ObjcmParser.index_return index() throws RecognitionException {
        ObjcmParser.index_return retval = new ObjcmParser.index_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_KBR436=null;
        Token R_KBR438=null;
        ObjcmParser.index_number_wrapper_return index_number_wrapper437 =null;


        Object L_KBR436_tree=null;
        Object R_KBR438_tree=null;

        try {
            // Objcm.g:755:7: ( L_KBR ( index_number_wrapper )? R_KBR )
            // Objcm.g:755:9: L_KBR ( index_number_wrapper )? R_KBR
            {
            root_0 = (Object)adaptor.nil();


            L_KBR436=(Token)match(input,L_KBR,FOLLOW_L_KBR_in_index3974); 
            L_KBR436_tree = 
            (Object)adaptor.create(L_KBR436)
            ;
            adaptor.addChild(root_0, L_KBR436_tree);


            // Objcm.g:755:15: ( index_number_wrapper )?
            int alt112=2;
            int LA112_0 = input.LA(1);

            if ( (LA112_0==ASTERISK||LA112_0==ID||LA112_0==L_AND||LA112_0==L_BR||LA112_0==L_KBR||LA112_0==L_MINUS||LA112_0==L_MINUS_MINUS||LA112_0==L_NOT||LA112_0==L_PLUS||LA112_0==L_PLUS_PLUS||LA112_0==L_TILDA||LA112_0==NUMBER||LA112_0==SIZEOF||(LA112_0 >= STRING_LITERAL && LA112_0 <= STRING_LITERAL3)||LA112_0==166||LA112_0==173||LA112_0==175||LA112_0==179||LA112_0==182||LA112_0==185||LA112_0==193||(LA112_0 >= 195 && LA112_0 <= 196)||LA112_0==201) ) {
                alt112=1;
            }
            switch (alt112) {
                case 1 :
                    // Objcm.g:755:15: index_number_wrapper
                    {
                    pushFollow(FOLLOW_index_number_wrapper_in_index3976);
                    index_number_wrapper437=index_number_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, index_number_wrapper437.getTree());

                    }
                    break;

            }


            R_KBR438=(Token)match(input,R_KBR,FOLLOW_R_KBR_in_index3979); 
            R_KBR438_tree = 
            (Object)adaptor.create(R_KBR438)
            ;
            adaptor.addChild(root_0, R_KBR438_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "index"


    public static class index_number_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "index_number_wrapper"
    // Objcm.g:757:1: index_number_wrapper : classical_expr_wrp -> ^( INDEX_NUMBER classical_expr_wrp ) ;
    public final ObjcmParser.index_number_wrapper_return index_number_wrapper() throws RecognitionException {
        ObjcmParser.index_number_wrapper_return retval = new ObjcmParser.index_number_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp439 =null;


        RewriteRuleSubtreeStream stream_classical_expr_wrp=new RewriteRuleSubtreeStream(adaptor,"rule classical_expr_wrp");
        try {
            // Objcm.g:758:2: ( classical_expr_wrp -> ^( INDEX_NUMBER classical_expr_wrp ) )
            // Objcm.g:758:4: classical_expr_wrp
            {
            pushFollow(FOLLOW_classical_expr_wrp_in_index_number_wrapper3988);
            classical_expr_wrp439=classical_expr_wrp();

            state._fsp--;

            stream_classical_expr_wrp.add(classical_expr_wrp439.getTree());

            // AST REWRITE
            // elements: classical_expr_wrp
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 758:23: -> ^( INDEX_NUMBER classical_expr_wrp )
            {
                // Objcm.g:758:26: ^( INDEX_NUMBER classical_expr_wrp )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(INDEX_NUMBER, "INDEX_NUMBER")
                , root_1);

                adaptor.addChild(root_1, stream_classical_expr_wrp.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "index_number_wrapper"


    public static class struct_init_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "struct_init"
    // Objcm.g:760:1: struct_init : L_BR ( STRUCT_PREFIX )? ID R_BR L_FBR struct_init_line ( COMMA struct_init_line )* R_FBR ;
    public final ObjcmParser.struct_init_return struct_init() throws RecognitionException {
        ObjcmParser.struct_init_return retval = new ObjcmParser.struct_init_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_BR440=null;
        Token STRUCT_PREFIX441=null;
        Token ID442=null;
        Token R_BR443=null;
        Token L_FBR444=null;
        Token COMMA446=null;
        Token R_FBR448=null;
        ObjcmParser.struct_init_line_return struct_init_line445 =null;

        ObjcmParser.struct_init_line_return struct_init_line447 =null;


        Object L_BR440_tree=null;
        Object STRUCT_PREFIX441_tree=null;
        Object ID442_tree=null;
        Object R_BR443_tree=null;
        Object L_FBR444_tree=null;
        Object COMMA446_tree=null;
        Object R_FBR448_tree=null;

        try {
            // Objcm.g:761:2: ( L_BR ( STRUCT_PREFIX )? ID R_BR L_FBR struct_init_line ( COMMA struct_init_line )* R_FBR )
            // Objcm.g:761:4: L_BR ( STRUCT_PREFIX )? ID R_BR L_FBR struct_init_line ( COMMA struct_init_line )* R_FBR
            {
            root_0 = (Object)adaptor.nil();


            L_BR440=(Token)match(input,L_BR,FOLLOW_L_BR_in_struct_init4005); 
            L_BR440_tree = 
            (Object)adaptor.create(L_BR440)
            ;
            adaptor.addChild(root_0, L_BR440_tree);


            // Objcm.g:761:10: ( STRUCT_PREFIX )?
            int alt113=2;
            int LA113_0 = input.LA(1);

            if ( (LA113_0==STRUCT_PREFIX) ) {
                alt113=1;
            }
            switch (alt113) {
                case 1 :
                    // Objcm.g:761:10: STRUCT_PREFIX
                    {
                    STRUCT_PREFIX441=(Token)match(input,STRUCT_PREFIX,FOLLOW_STRUCT_PREFIX_in_struct_init4008); 
                    STRUCT_PREFIX441_tree = 
                    (Object)adaptor.create(STRUCT_PREFIX441)
                    ;
                    adaptor.addChild(root_0, STRUCT_PREFIX441_tree);


                    }
                    break;

            }


            ID442=(Token)match(input,ID,FOLLOW_ID_in_struct_init4011); 
            ID442_tree = 
            (Object)adaptor.create(ID442)
            ;
            adaptor.addChild(root_0, ID442_tree);


            R_BR443=(Token)match(input,R_BR,FOLLOW_R_BR_in_struct_init4014); 
            R_BR443_tree = 
            (Object)adaptor.create(R_BR443)
            ;
            adaptor.addChild(root_0, R_BR443_tree);


            L_FBR444=(Token)match(input,L_FBR,FOLLOW_L_FBR_in_struct_init4017); 
            L_FBR444_tree = 
            (Object)adaptor.create(L_FBR444)
            ;
            adaptor.addChild(root_0, L_FBR444_tree);


            pushFollow(FOLLOW_struct_init_line_in_struct_init4023);
            struct_init_line445=struct_init_line();

            state._fsp--;

            adaptor.addChild(root_0, struct_init_line445.getTree());

            // Objcm.g:762:21: ( COMMA struct_init_line )*
            loop114:
            do {
                int alt114=2;
                int LA114_0 = input.LA(1);

                if ( (LA114_0==COMMA) ) {
                    alt114=1;
                }


                switch (alt114) {
            	case 1 :
            	    // Objcm.g:762:22: COMMA struct_init_line
            	    {
            	    COMMA446=(Token)match(input,COMMA,FOLLOW_COMMA_in_struct_init4026); 
            	    COMMA446_tree = 
            	    (Object)adaptor.create(COMMA446)
            	    ;
            	    adaptor.addChild(root_0, COMMA446_tree);


            	    pushFollow(FOLLOW_struct_init_line_in_struct_init4029);
            	    struct_init_line447=struct_init_line();

            	    state._fsp--;

            	    adaptor.addChild(root_0, struct_init_line447.getTree());

            	    }
            	    break;

            	default :
            	    break loop114;
                }
            } while (true);


            R_FBR448=(Token)match(input,R_FBR,FOLLOW_R_FBR_in_struct_init4035); 
            R_FBR448_tree = 
            (Object)adaptor.create(R_FBR448)
            ;
            adaptor.addChild(root_0, R_FBR448_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "struct_init"


    public static class struct_init2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "struct_init2"
    // Objcm.g:766:1: struct_init2 : L_FBR struct_init_line ( COMMA struct_init_line )* R_FBR ;
    public final ObjcmParser.struct_init2_return struct_init2() throws RecognitionException {
        ObjcmParser.struct_init2_return retval = new ObjcmParser.struct_init2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_FBR449=null;
        Token COMMA451=null;
        Token R_FBR453=null;
        ObjcmParser.struct_init_line_return struct_init_line450 =null;

        ObjcmParser.struct_init_line_return struct_init_line452 =null;


        Object L_FBR449_tree=null;
        Object COMMA451_tree=null;
        Object R_FBR453_tree=null;

        try {
            // Objcm.g:767:2: ( L_FBR struct_init_line ( COMMA struct_init_line )* R_FBR )
            // Objcm.g:767:4: L_FBR struct_init_line ( COMMA struct_init_line )* R_FBR
            {
            root_0 = (Object)adaptor.nil();


            L_FBR449=(Token)match(input,L_FBR,FOLLOW_L_FBR_in_struct_init24049); 
            L_FBR449_tree = 
            (Object)adaptor.create(L_FBR449)
            ;
            adaptor.addChild(root_0, L_FBR449_tree);


            pushFollow(FOLLOW_struct_init_line_in_struct_init24055);
            struct_init_line450=struct_init_line();

            state._fsp--;

            adaptor.addChild(root_0, struct_init_line450.getTree());

            // Objcm.g:768:21: ( COMMA struct_init_line )*
            loop115:
            do {
                int alt115=2;
                int LA115_0 = input.LA(1);

                if ( (LA115_0==COMMA) ) {
                    alt115=1;
                }


                switch (alt115) {
            	case 1 :
            	    // Objcm.g:768:22: COMMA struct_init_line
            	    {
            	    COMMA451=(Token)match(input,COMMA,FOLLOW_COMMA_in_struct_init24058); 
            	    COMMA451_tree = 
            	    (Object)adaptor.create(COMMA451)
            	    ;
            	    adaptor.addChild(root_0, COMMA451_tree);


            	    pushFollow(FOLLOW_struct_init_line_in_struct_init24061);
            	    struct_init_line452=struct_init_line();

            	    state._fsp--;

            	    adaptor.addChild(root_0, struct_init_line452.getTree());

            	    }
            	    break;

            	default :
            	    break loop115;
                }
            } while (true);


            R_FBR453=(Token)match(input,R_FBR,FOLLOW_R_FBR_in_struct_init24067); 
            R_FBR453_tree = 
            (Object)adaptor.create(R_FBR453)
            ;
            adaptor.addChild(root_0, R_FBR453_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "struct_init2"


    public static class struct_init_line_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "struct_init_line"
    // Objcm.g:772:1: struct_init_line : ( struct_init_var | struct_init_expression );
    public final ObjcmParser.struct_init_line_return struct_init_line() throws RecognitionException {
        ObjcmParser.struct_init_line_return retval = new ObjcmParser.struct_init_line_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.struct_init_var_return struct_init_var454 =null;

        ObjcmParser.struct_init_expression_return struct_init_expression455 =null;



        try {
            // Objcm.g:773:2: ( struct_init_var | struct_init_expression )
            int alt116=2;
            int LA116_0 = input.LA(1);

            if ( (LA116_0==DOT) ) {
                alt116=1;
            }
            else if ( (LA116_0==ASTERISK||LA116_0==ID||LA116_0==L_AND||LA116_0==L_BR||LA116_0==L_KBR||LA116_0==L_MINUS||LA116_0==L_MINUS_MINUS||LA116_0==L_NOT||LA116_0==L_PLUS||LA116_0==L_PLUS_PLUS||LA116_0==L_TILDA||LA116_0==NUMBER||LA116_0==SIZEOF||(LA116_0 >= STRING_LITERAL && LA116_0 <= STRING_LITERAL3)||LA116_0==166||LA116_0==173||LA116_0==175||LA116_0==179||LA116_0==182||LA116_0==185||LA116_0==193||(LA116_0 >= 195 && LA116_0 <= 196)||LA116_0==201) ) {
                alt116=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 116, 0, input);

                throw nvae;

            }
            switch (alt116) {
                case 1 :
                    // Objcm.g:773:4: struct_init_var
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_struct_init_var_in_struct_init_line4080);
                    struct_init_var454=struct_init_var();

                    state._fsp--;

                    adaptor.addChild(root_0, struct_init_var454.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:774:4: struct_init_expression
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_struct_init_expression_in_struct_init_line4085);
                    struct_init_expression455=struct_init_expression();

                    state._fsp--;

                    adaptor.addChild(root_0, struct_init_expression455.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "struct_init_line"


    public static class struct_init_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "struct_init_expression"
    // Objcm.g:777:1: struct_init_expression : classical_expr_wrp ;
    public final ObjcmParser.struct_init_expression_return struct_init_expression() throws RecognitionException {
        ObjcmParser.struct_init_expression_return retval = new ObjcmParser.struct_init_expression_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp456 =null;



        try {
            // Objcm.g:778:2: ( classical_expr_wrp )
            // Objcm.g:778:4: classical_expr_wrp
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_classical_expr_wrp_in_struct_init_expression4098);
            classical_expr_wrp456=classical_expr_wrp();

            state._fsp--;

            adaptor.addChild(root_0, classical_expr_wrp456.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "struct_init_expression"


    public static class struct_init_method_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "struct_init_method"
    // Objcm.g:780:1: struct_init_method : classical_expr_wrp ;
    public final ObjcmParser.struct_init_method_return struct_init_method() throws RecognitionException {
        ObjcmParser.struct_init_method_return retval = new ObjcmParser.struct_init_method_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp457 =null;



        try {
            // Objcm.g:781:2: ( classical_expr_wrp )
            // Objcm.g:781:4: classical_expr_wrp
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_classical_expr_wrp_in_struct_init_method4109);
            classical_expr_wrp457=classical_expr_wrp();

            state._fsp--;

            adaptor.addChild(root_0, classical_expr_wrp457.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "struct_init_method"


    public static class struct_init_var_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "struct_init_var"
    // Objcm.g:783:1: struct_init_var : ( DOT id_part )+ L_EQ ( in_q_brackets | expression ) ;
    public final ObjcmParser.struct_init_var_return struct_init_var() throws RecognitionException {
        ObjcmParser.struct_init_var_return retval = new ObjcmParser.struct_init_var_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token DOT458=null;
        Token L_EQ460=null;
        ObjcmParser.id_part_return id_part459 =null;

        ObjcmParser.in_q_brackets_return in_q_brackets461 =null;

        ObjcmParser.expression_return expression462 =null;


        Object DOT458_tree=null;
        Object L_EQ460_tree=null;

        try {
            // Objcm.g:784:2: ( ( DOT id_part )+ L_EQ ( in_q_brackets | expression ) )
            // Objcm.g:784:4: ( DOT id_part )+ L_EQ ( in_q_brackets | expression )
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:784:4: ( DOT id_part )+
            int cnt117=0;
            loop117:
            do {
                int alt117=2;
                int LA117_0 = input.LA(1);

                if ( (LA117_0==DOT) ) {
                    alt117=1;
                }


                switch (alt117) {
            	case 1 :
            	    // Objcm.g:784:5: DOT id_part
            	    {
            	    DOT458=(Token)match(input,DOT,FOLLOW_DOT_in_struct_init_var4121); 
            	    DOT458_tree = 
            	    (Object)adaptor.create(DOT458)
            	    ;
            	    adaptor.addChild(root_0, DOT458_tree);


            	    pushFollow(FOLLOW_id_part_in_struct_init_var4123);
            	    id_part459=id_part();

            	    state._fsp--;

            	    adaptor.addChild(root_0, id_part459.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt117 >= 1 ) break loop117;
                        EarlyExitException eee =
                            new EarlyExitException(117, input);
                        throw eee;
                }
                cnt117++;
            } while (true);


            L_EQ460=(Token)match(input,L_EQ,FOLLOW_L_EQ_in_struct_init_var4128); 
            L_EQ460_tree = 
            (Object)adaptor.create(L_EQ460)
            ;
            adaptor.addChild(root_0, L_EQ460_tree);


            // Objcm.g:784:26: ( in_q_brackets | expression )
            int alt118=2;
            int LA118_0 = input.LA(1);

            if ( (LA118_0==L_FBR) ) {
                alt118=1;
            }
            else if ( (LA118_0==ASTERISK||LA118_0==ID||LA118_0==L_AND||LA118_0==L_BR||LA118_0==L_KBR||LA118_0==L_MINUS||LA118_0==L_MINUS_MINUS||LA118_0==L_NOT||LA118_0==L_PLUS||LA118_0==L_PLUS_PLUS||LA118_0==L_TILDA||LA118_0==NUMBER||LA118_0==SIZEOF||(LA118_0 >= STRING_LITERAL && LA118_0 <= STRING_LITERAL3)||LA118_0==166||LA118_0==173||LA118_0==175||LA118_0==179||LA118_0==182||LA118_0==185||LA118_0==193||(LA118_0 >= 195 && LA118_0 <= 196)||LA118_0==201) ) {
                alt118=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 118, 0, input);

                throw nvae;

            }
            switch (alt118) {
                case 1 :
                    // Objcm.g:784:27: in_q_brackets
                    {
                    pushFollow(FOLLOW_in_q_brackets_in_struct_init_var4132);
                    in_q_brackets461=in_q_brackets();

                    state._fsp--;

                    adaptor.addChild(root_0, in_q_brackets461.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:784:43: expression
                    {
                    pushFollow(FOLLOW_expression_in_struct_init_var4136);
                    expression462=expression();

                    state._fsp--;

                    adaptor.addChild(root_0, expression462.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "struct_init_var"


    public static class a_started_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "a_started"
    // Objcm.g:786:1: a_started : ( a_selector_wrapper | a_encode_wrapper | a_protocol_wrapper );
    public final ObjcmParser.a_started_return a_started() throws RecognitionException {
        ObjcmParser.a_started_return retval = new ObjcmParser.a_started_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.a_selector_wrapper_return a_selector_wrapper463 =null;

        ObjcmParser.a_encode_wrapper_return a_encode_wrapper464 =null;

        ObjcmParser.a_protocol_wrapper_return a_protocol_wrapper465 =null;



        try {
            // Objcm.g:787:2: ( a_selector_wrapper | a_encode_wrapper | a_protocol_wrapper )
            int alt119=3;
            switch ( input.LA(1) ) {
            case 175:
                {
                alt119=1;
                }
                break;
            case 166:
                {
                alt119=2;
                }
                break;
            case 173:
                {
                alt119=3;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 119, 0, input);

                throw nvae;

            }

            switch (alt119) {
                case 1 :
                    // Objcm.g:787:4: a_selector_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_a_selector_wrapper_in_a_started4148);
                    a_selector_wrapper463=a_selector_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, a_selector_wrapper463.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:788:4: a_encode_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_a_encode_wrapper_in_a_started4153);
                    a_encode_wrapper464=a_encode_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, a_encode_wrapper464.getTree());

                    }
                    break;
                case 3 :
                    // Objcm.g:789:4: a_protocol_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_a_protocol_wrapper_in_a_started4158);
                    a_protocol_wrapper465=a_protocol_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, a_protocol_wrapper465.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "a_started"


    public static class typeof_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typeof"
    // Objcm.g:792:1: typeof : '__typeof__' L_BR ID R_BR ;
    public final ObjcmParser.typeof_return typeof() throws RecognitionException {
        ObjcmParser.typeof_return retval = new ObjcmParser.typeof_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal466=null;
        Token L_BR467=null;
        Token ID468=null;
        Token R_BR469=null;

        Object string_literal466_tree=null;
        Object L_BR467_tree=null;
        Object ID468_tree=null;
        Object R_BR469_tree=null;

        try {
            // Objcm.g:792:8: ( '__typeof__' L_BR ID R_BR )
            // Objcm.g:792:10: '__typeof__' L_BR ID R_BR
            {
            root_0 = (Object)adaptor.nil();


            string_literal466=(Token)match(input,181,FOLLOW_181_in_typeof4168); 
            string_literal466_tree = 
            (Object)adaptor.create(string_literal466)
            ;
            adaptor.addChild(root_0, string_literal466_tree);


            L_BR467=(Token)match(input,L_BR,FOLLOW_L_BR_in_typeof4171); 
            L_BR467_tree = 
            (Object)adaptor.create(L_BR467)
            ;
            adaptor.addChild(root_0, L_BR467_tree);


            ID468=(Token)match(input,ID,FOLLOW_ID_in_typeof4174); 
            ID468_tree = 
            (Object)adaptor.create(ID468)
            ;
            adaptor.addChild(root_0, ID468_tree);


            R_BR469=(Token)match(input,R_BR,FOLLOW_R_BR_in_typeof4177); 
            R_BR469_tree = 
            (Object)adaptor.create(R_BR469)
            ;
            adaptor.addChild(root_0, R_BR469_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typeof"


    public static class a_selector_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "a_selector_wrapper"
    // Objcm.g:794:1: a_selector_wrapper : a_selector -> ^( SELECTOR a_selector ) ;
    public final ObjcmParser.a_selector_wrapper_return a_selector_wrapper() throws RecognitionException {
        ObjcmParser.a_selector_wrapper_return retval = new ObjcmParser.a_selector_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.a_selector_return a_selector470 =null;


        RewriteRuleSubtreeStream stream_a_selector=new RewriteRuleSubtreeStream(adaptor,"rule a_selector");
        try {
            // Objcm.g:795:2: ( a_selector -> ^( SELECTOR a_selector ) )
            // Objcm.g:795:4: a_selector
            {
            pushFollow(FOLLOW_a_selector_in_a_selector_wrapper4188);
            a_selector470=a_selector();

            state._fsp--;

            stream_a_selector.add(a_selector470.getTree());

            // AST REWRITE
            // elements: a_selector
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 795:15: -> ^( SELECTOR a_selector )
            {
                // Objcm.g:795:18: ^( SELECTOR a_selector )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SELECTOR, "SELECTOR")
                , root_1);

                adaptor.addChild(root_1, stream_a_selector.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "a_selector_wrapper"


    public static class a_selector_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "a_selector"
    // Objcm.g:797:1: a_selector : '@selector' L_BR a_selector_value_wrapper R_BR ;
    public final ObjcmParser.a_selector_return a_selector() throws RecognitionException {
        ObjcmParser.a_selector_return retval = new ObjcmParser.a_selector_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal471=null;
        Token L_BR472=null;
        Token R_BR474=null;
        ObjcmParser.a_selector_value_wrapper_return a_selector_value_wrapper473 =null;


        Object string_literal471_tree=null;
        Object L_BR472_tree=null;
        Object R_BR474_tree=null;

        try {
            // Objcm.g:797:11: ( '@selector' L_BR a_selector_value_wrapper R_BR )
            // Objcm.g:797:13: '@selector' L_BR a_selector_value_wrapper R_BR
            {
            root_0 = (Object)adaptor.nil();


            string_literal471=(Token)match(input,175,FOLLOW_175_in_a_selector4205); 
            string_literal471_tree = 
            (Object)adaptor.create(string_literal471)
            ;
            adaptor.addChild(root_0, string_literal471_tree);


            L_BR472=(Token)match(input,L_BR,FOLLOW_L_BR_in_a_selector4207); 
            L_BR472_tree = 
            (Object)adaptor.create(L_BR472)
            ;
            adaptor.addChild(root_0, L_BR472_tree);


            pushFollow(FOLLOW_a_selector_value_wrapper_in_a_selector4209);
            a_selector_value_wrapper473=a_selector_value_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, a_selector_value_wrapper473.getTree());

            R_BR474=(Token)match(input,R_BR,FOLLOW_R_BR_in_a_selector4211); 
            R_BR474_tree = 
            (Object)adaptor.create(R_BR474)
            ;
            adaptor.addChild(root_0, R_BR474_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "a_selector"


    public static class a_protocol_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "a_protocol_wrapper"
    // Objcm.g:799:1: a_protocol_wrapper : a_protocol -> ^( PROTOCOL a_protocol ) ;
    public final ObjcmParser.a_protocol_wrapper_return a_protocol_wrapper() throws RecognitionException {
        ObjcmParser.a_protocol_wrapper_return retval = new ObjcmParser.a_protocol_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.a_protocol_return a_protocol475 =null;


        RewriteRuleSubtreeStream stream_a_protocol=new RewriteRuleSubtreeStream(adaptor,"rule a_protocol");
        try {
            // Objcm.g:800:2: ( a_protocol -> ^( PROTOCOL a_protocol ) )
            // Objcm.g:800:4: a_protocol
            {
            pushFollow(FOLLOW_a_protocol_in_a_protocol_wrapper4221);
            a_protocol475=a_protocol();

            state._fsp--;

            stream_a_protocol.add(a_protocol475.getTree());

            // AST REWRITE
            // elements: a_protocol
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 800:15: -> ^( PROTOCOL a_protocol )
            {
                // Objcm.g:800:18: ^( PROTOCOL a_protocol )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PROTOCOL, "PROTOCOL")
                , root_1);

                adaptor.addChild(root_1, stream_a_protocol.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "a_protocol_wrapper"


    public static class a_protocol_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "a_protocol"
    // Objcm.g:802:1: a_protocol : '@protocol' L_BR a_selector_value_wrapper R_BR ;
    public final ObjcmParser.a_protocol_return a_protocol() throws RecognitionException {
        ObjcmParser.a_protocol_return retval = new ObjcmParser.a_protocol_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal476=null;
        Token L_BR477=null;
        Token R_BR479=null;
        ObjcmParser.a_selector_value_wrapper_return a_selector_value_wrapper478 =null;


        Object string_literal476_tree=null;
        Object L_BR477_tree=null;
        Object R_BR479_tree=null;

        try {
            // Objcm.g:803:2: ( '@protocol' L_BR a_selector_value_wrapper R_BR )
            // Objcm.g:803:4: '@protocol' L_BR a_selector_value_wrapper R_BR
            {
            root_0 = (Object)adaptor.nil();


            string_literal476=(Token)match(input,173,FOLLOW_173_in_a_protocol4239); 
            string_literal476_tree = 
            (Object)adaptor.create(string_literal476)
            ;
            adaptor.addChild(root_0, string_literal476_tree);


            L_BR477=(Token)match(input,L_BR,FOLLOW_L_BR_in_a_protocol4241); 
            L_BR477_tree = 
            (Object)adaptor.create(L_BR477)
            ;
            adaptor.addChild(root_0, L_BR477_tree);


            pushFollow(FOLLOW_a_selector_value_wrapper_in_a_protocol4243);
            a_selector_value_wrapper478=a_selector_value_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, a_selector_value_wrapper478.getTree());

            R_BR479=(Token)match(input,R_BR,FOLLOW_R_BR_in_a_protocol4245); 
            R_BR479_tree = 
            (Object)adaptor.create(R_BR479)
            ;
            adaptor.addChild(root_0, R_BR479_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "a_protocol"


    public static class a_encode_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "a_encode_wrapper"
    // Objcm.g:805:1: a_encode_wrapper : a_encode -> ^( ENCODE a_encode ) ;
    public final ObjcmParser.a_encode_wrapper_return a_encode_wrapper() throws RecognitionException {
        ObjcmParser.a_encode_wrapper_return retval = new ObjcmParser.a_encode_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.a_encode_return a_encode480 =null;


        RewriteRuleSubtreeStream stream_a_encode=new RewriteRuleSubtreeStream(adaptor,"rule a_encode");
        try {
            // Objcm.g:806:2: ( a_encode -> ^( ENCODE a_encode ) )
            // Objcm.g:806:4: a_encode
            {
            pushFollow(FOLLOW_a_encode_in_a_encode_wrapper4255);
            a_encode480=a_encode();

            state._fsp--;

            stream_a_encode.add(a_encode480.getTree());

            // AST REWRITE
            // elements: a_encode
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 806:13: -> ^( ENCODE a_encode )
            {
                // Objcm.g:806:16: ^( ENCODE a_encode )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(ENCODE, "ENCODE")
                , root_1);

                adaptor.addChild(root_1, stream_a_encode.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "a_encode_wrapper"


    public static class a_selector_value_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "a_selector_value_wrapper"
    // Objcm.g:808:1: a_selector_value_wrapper : a_selector_value -> ^( SELECTOR_VALUE a_selector_value ) ;
    public final ObjcmParser.a_selector_value_wrapper_return a_selector_value_wrapper() throws RecognitionException {
        ObjcmParser.a_selector_value_wrapper_return retval = new ObjcmParser.a_selector_value_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.a_selector_value_return a_selector_value481 =null;


        RewriteRuleSubtreeStream stream_a_selector_value=new RewriteRuleSubtreeStream(adaptor,"rule a_selector_value");
        try {
            // Objcm.g:809:2: ( a_selector_value -> ^( SELECTOR_VALUE a_selector_value ) )
            // Objcm.g:809:4: a_selector_value
            {
            pushFollow(FOLLOW_a_selector_value_in_a_selector_value_wrapper4272);
            a_selector_value481=a_selector_value();

            state._fsp--;

            stream_a_selector_value.add(a_selector_value481.getTree());

            // AST REWRITE
            // elements: a_selector_value
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 809:21: -> ^( SELECTOR_VALUE a_selector_value )
            {
                // Objcm.g:809:24: ^( SELECTOR_VALUE a_selector_value )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SELECTOR_VALUE, "SELECTOR_VALUE")
                , root_1);

                adaptor.addChild(root_1, stream_a_selector_value.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "a_selector_value_wrapper"


    public static class a_selector_value_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "a_selector_value"
    // Objcm.g:811:1: a_selector_value : ID ( COLON ( ID COLON )* )? ;
    public final ObjcmParser.a_selector_value_return a_selector_value() throws RecognitionException {
        ObjcmParser.a_selector_value_return retval = new ObjcmParser.a_selector_value_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID482=null;
        Token COLON483=null;
        Token ID484=null;
        Token COLON485=null;

        Object ID482_tree=null;
        Object COLON483_tree=null;
        Object ID484_tree=null;
        Object COLON485_tree=null;

        try {
            // Objcm.g:812:2: ( ID ( COLON ( ID COLON )* )? )
            // Objcm.g:812:5: ID ( COLON ( ID COLON )* )?
            {
            root_0 = (Object)adaptor.nil();


            ID482=(Token)match(input,ID,FOLLOW_ID_in_a_selector_value4291); 
            ID482_tree = 
            (Object)adaptor.create(ID482)
            ;
            adaptor.addChild(root_0, ID482_tree);


            // Objcm.g:812:9: ( COLON ( ID COLON )* )?
            int alt121=2;
            int LA121_0 = input.LA(1);

            if ( (LA121_0==COLON) ) {
                alt121=1;
            }
            switch (alt121) {
                case 1 :
                    // Objcm.g:812:10: COLON ( ID COLON )*
                    {
                    COLON483=(Token)match(input,COLON,FOLLOW_COLON_in_a_selector_value4295); 
                    COLON483_tree = 
                    (Object)adaptor.create(COLON483)
                    ;
                    adaptor.addChild(root_0, COLON483_tree);


                    // Objcm.g:812:17: ( ID COLON )*
                    loop120:
                    do {
                        int alt120=2;
                        int LA120_0 = input.LA(1);

                        if ( (LA120_0==ID) ) {
                            alt120=1;
                        }


                        switch (alt120) {
                    	case 1 :
                    	    // Objcm.g:812:18: ID COLON
                    	    {
                    	    ID484=(Token)match(input,ID,FOLLOW_ID_in_a_selector_value4299); 
                    	    ID484_tree = 
                    	    (Object)adaptor.create(ID484)
                    	    ;
                    	    adaptor.addChild(root_0, ID484_tree);


                    	    COLON485=(Token)match(input,COLON,FOLLOW_COLON_in_a_selector_value4302); 
                    	    COLON485_tree = 
                    	    (Object)adaptor.create(COLON485)
                    	    ;
                    	    adaptor.addChild(root_0, COLON485_tree);


                    	    }
                    	    break;

                    	default :
                    	    break loop120;
                        }
                    } while (true);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "a_selector_value"


    public static class a_encode_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "a_encode"
    // Objcm.g:814:1: a_encode : '@encode' L_BR (~ ( R_BR ) )+ R_BR ;
    public final ObjcmParser.a_encode_return a_encode() throws RecognitionException {
        ObjcmParser.a_encode_return retval = new ObjcmParser.a_encode_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal486=null;
        Token L_BR487=null;
        Token set488=null;
        Token R_BR489=null;

        Object string_literal486_tree=null;
        Object L_BR487_tree=null;
        Object set488_tree=null;
        Object R_BR489_tree=null;

        try {
            // Objcm.g:814:9: ( '@encode' L_BR (~ ( R_BR ) )+ R_BR )
            // Objcm.g:814:11: '@encode' L_BR (~ ( R_BR ) )+ R_BR
            {
            root_0 = (Object)adaptor.nil();


            string_literal486=(Token)match(input,166,FOLLOW_166_in_a_encode4313); 
            string_literal486_tree = 
            (Object)adaptor.create(string_literal486)
            ;
            adaptor.addChild(root_0, string_literal486_tree);


            L_BR487=(Token)match(input,L_BR,FOLLOW_L_BR_in_a_encode4315); 
            L_BR487_tree = 
            (Object)adaptor.create(L_BR487)
            ;
            adaptor.addChild(root_0, L_BR487_tree);


            // Objcm.g:814:26: (~ ( R_BR ) )+
            int cnt122=0;
            loop122:
            do {
                int alt122=2;
                int LA122_0 = input.LA(1);

                if ( ((LA122_0 >= ARRAY_INIT && LA122_0 <= RETURN_STMT)||(LA122_0 >= R_FBR && LA122_0 <= 202)) ) {
                    alt122=1;
                }


                switch (alt122) {
            	case 1 :
            	    // Objcm.g:
            	    {
            	    set488=(Token)input.LT(1);

            	    if ( (input.LA(1) >= ARRAY_INIT && input.LA(1) <= RETURN_STMT)||(input.LA(1) >= R_FBR && input.LA(1) <= 202) ) {
            	        input.consume();
            	        adaptor.addChild(root_0, 
            	        (Object)adaptor.create(set488)
            	        );
            	        state.errorRecovery=false;
            	    }
            	    else {
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt122 >= 1 ) break loop122;
                        EarlyExitException eee =
                            new EarlyExitException(122, input);
                        throw eee;
                }
                cnt122++;
            } while (true);


            R_BR489=(Token)match(input,R_BR,FOLLOW_R_BR_in_a_encode4323); 
            R_BR489_tree = 
            (Object)adaptor.create(R_BR489)
            ;
            adaptor.addChild(root_0, R_BR489_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "a_encode"


    public static class const_expr_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "const_expr_wrapper"
    // Objcm.g:816:1: const_expr_wrapper : const_expr -> ^( CONST_EXPR const_expr ) ;
    public final ObjcmParser.const_expr_wrapper_return const_expr_wrapper() throws RecognitionException {
        ObjcmParser.const_expr_wrapper_return retval = new ObjcmParser.const_expr_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.const_expr_return const_expr490 =null;


        RewriteRuleSubtreeStream stream_const_expr=new RewriteRuleSubtreeStream(adaptor,"rule const_expr");
        try {
            // Objcm.g:817:2: ( const_expr -> ^( CONST_EXPR const_expr ) )
            // Objcm.g:817:4: const_expr
            {
            pushFollow(FOLLOW_const_expr_in_const_expr_wrapper4332);
            const_expr490=const_expr();

            state._fsp--;

            stream_const_expr.add(const_expr490.getTree());

            // AST REWRITE
            // elements: const_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 817:15: -> ^( CONST_EXPR const_expr )
            {
                // Objcm.g:817:18: ^( CONST_EXPR const_expr )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CONST_EXPR, "CONST_EXPR")
                , root_1);

                adaptor.addChild(root_1, stream_const_expr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "const_expr_wrapper"


    public static class const_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "const_expr"
    // Objcm.g:819:1: const_expr : ( NUMBER | STRING_LITERAL | STRING_LITERAL2 | STRING_LITERAL3 | null_stmt );
    public final ObjcmParser.const_expr_return const_expr() throws RecognitionException {
        ObjcmParser.const_expr_return retval = new ObjcmParser.const_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token NUMBER491=null;
        Token STRING_LITERAL492=null;
        Token STRING_LITERAL2493=null;
        Token STRING_LITERAL3494=null;
        ObjcmParser.null_stmt_return null_stmt495 =null;


        Object NUMBER491_tree=null;
        Object STRING_LITERAL492_tree=null;
        Object STRING_LITERAL2493_tree=null;
        Object STRING_LITERAL3494_tree=null;

        try {
            // Objcm.g:820:2: ( NUMBER | STRING_LITERAL | STRING_LITERAL2 | STRING_LITERAL3 | null_stmt )
            int alt123=5;
            switch ( input.LA(1) ) {
            case NUMBER:
                {
                alt123=1;
                }
                break;
            case STRING_LITERAL:
                {
                alt123=2;
                }
                break;
            case STRING_LITERAL2:
                {
                alt123=3;
                }
                break;
            case STRING_LITERAL3:
                {
                alt123=4;
                }
                break;
            case 179:
            case 195:
                {
                alt123=5;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 123, 0, input);

                throw nvae;

            }

            switch (alt123) {
                case 1 :
                    // Objcm.g:820:5: NUMBER
                    {
                    root_0 = (Object)adaptor.nil();


                    NUMBER491=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_const_expr4351); 
                    NUMBER491_tree = 
                    (Object)adaptor.create(NUMBER491)
                    ;
                    adaptor.addChild(root_0, NUMBER491_tree);


                    }
                    break;
                case 2 :
                    // Objcm.g:820:14: STRING_LITERAL
                    {
                    root_0 = (Object)adaptor.nil();


                    STRING_LITERAL492=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_const_expr4355); 
                    STRING_LITERAL492_tree = 
                    (Object)adaptor.create(STRING_LITERAL492)
                    ;
                    adaptor.addChild(root_0, STRING_LITERAL492_tree);


                    }
                    break;
                case 3 :
                    // Objcm.g:820:31: STRING_LITERAL2
                    {
                    root_0 = (Object)adaptor.nil();


                    STRING_LITERAL2493=(Token)match(input,STRING_LITERAL2,FOLLOW_STRING_LITERAL2_in_const_expr4359); 
                    STRING_LITERAL2493_tree = 
                    (Object)adaptor.create(STRING_LITERAL2493)
                    ;
                    adaptor.addChild(root_0, STRING_LITERAL2493_tree);


                    }
                    break;
                case 4 :
                    // Objcm.g:820:49: STRING_LITERAL3
                    {
                    root_0 = (Object)adaptor.nil();


                    STRING_LITERAL3494=(Token)match(input,STRING_LITERAL3,FOLLOW_STRING_LITERAL3_in_const_expr4363); 
                    STRING_LITERAL3494_tree = 
                    (Object)adaptor.create(STRING_LITERAL3494)
                    ;
                    adaptor.addChild(root_0, STRING_LITERAL3494_tree);


                    }
                    break;
                case 5 :
                    // Objcm.g:820:67: null_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_null_stmt_in_const_expr4367);
                    null_stmt495=null_stmt();

                    state._fsp--;

                    adaptor.addChild(root_0, null_stmt495.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "const_expr"


    public static class string_literal3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "string_literal3"
    // Objcm.g:828:1: string_literal3 : STRING_LITERAL3 ;
    public final ObjcmParser.string_literal3_return string_literal3() throws RecognitionException {
        ObjcmParser.string_literal3_return retval = new ObjcmParser.string_literal3_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STRING_LITERAL3496=null;

        Object STRING_LITERAL3496_tree=null;

        try {
            // Objcm.g:829:2: ( STRING_LITERAL3 )
            // Objcm.g:829:4: STRING_LITERAL3
            {
            root_0 = (Object)adaptor.nil();


            STRING_LITERAL3496=(Token)match(input,STRING_LITERAL3,FOLLOW_STRING_LITERAL3_in_string_literal34385); 
            STRING_LITERAL3496_tree = 
            (Object)adaptor.create(STRING_LITERAL3496)
            ;
            adaptor.addChild(root_0, STRING_LITERAL3496_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "string_literal3"


    public static class method_brackets_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_brackets"
    // Objcm.g:831:1: method_brackets : L_BR ( expression ( COMMA classical_expr_wrp )* )? R_BR ;
    public final ObjcmParser.method_brackets_return method_brackets() throws RecognitionException {
        ObjcmParser.method_brackets_return retval = new ObjcmParser.method_brackets_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_BR497=null;
        Token COMMA499=null;
        Token R_BR501=null;
        ObjcmParser.expression_return expression498 =null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp500 =null;


        Object L_BR497_tree=null;
        Object COMMA499_tree=null;
        Object R_BR501_tree=null;

        try {
            // Objcm.g:832:2: ( L_BR ( expression ( COMMA classical_expr_wrp )* )? R_BR )
            // Objcm.g:832:4: L_BR ( expression ( COMMA classical_expr_wrp )* )? R_BR
            {
            root_0 = (Object)adaptor.nil();


            L_BR497=(Token)match(input,L_BR,FOLLOW_L_BR_in_method_brackets4395); 
            L_BR497_tree = 
            (Object)adaptor.create(L_BR497)
            ;
            adaptor.addChild(root_0, L_BR497_tree);


            // Objcm.g:832:10: ( expression ( COMMA classical_expr_wrp )* )?
            int alt125=2;
            int LA125_0 = input.LA(1);

            if ( (LA125_0==ASTERISK||LA125_0==ID||LA125_0==L_AND||LA125_0==L_BR||LA125_0==L_KBR||LA125_0==L_MINUS||LA125_0==L_MINUS_MINUS||LA125_0==L_NOT||LA125_0==L_PLUS||LA125_0==L_PLUS_PLUS||LA125_0==L_TILDA||LA125_0==NUMBER||LA125_0==SIZEOF||(LA125_0 >= STRING_LITERAL && LA125_0 <= STRING_LITERAL3)||LA125_0==166||LA125_0==173||LA125_0==175||LA125_0==179||LA125_0==182||LA125_0==185||LA125_0==193||(LA125_0 >= 195 && LA125_0 <= 196)||LA125_0==201) ) {
                alt125=1;
            }
            switch (alt125) {
                case 1 :
                    // Objcm.g:832:11: expression ( COMMA classical_expr_wrp )*
                    {
                    pushFollow(FOLLOW_expression_in_method_brackets4399);
                    expression498=expression();

                    state._fsp--;

                    adaptor.addChild(root_0, expression498.getTree());

                    // Objcm.g:832:23: ( COMMA classical_expr_wrp )*
                    loop124:
                    do {
                        int alt124=2;
                        int LA124_0 = input.LA(1);

                        if ( (LA124_0==COMMA) ) {
                            alt124=1;
                        }


                        switch (alt124) {
                    	case 1 :
                    	    // Objcm.g:832:24: COMMA classical_expr_wrp
                    	    {
                    	    COMMA499=(Token)match(input,COMMA,FOLLOW_COMMA_in_method_brackets4403); 
                    	    COMMA499_tree = 
                    	    (Object)adaptor.create(COMMA499)
                    	    ;
                    	    adaptor.addChild(root_0, COMMA499_tree);


                    	    pushFollow(FOLLOW_classical_expr_wrp_in_method_brackets4406);
                    	    classical_expr_wrp500=classical_expr_wrp();

                    	    state._fsp--;

                    	    adaptor.addChild(root_0, classical_expr_wrp500.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop124;
                        }
                    } while (true);


                    }
                    break;

            }


            R_BR501=(Token)match(input,R_BR,FOLLOW_R_BR_in_method_brackets4412); 
            R_BR501_tree = 
            (Object)adaptor.create(R_BR501)
            ;
            adaptor.addChild(root_0, R_BR501_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_brackets"


    public static class func_pointer1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "func_pointer1"
    // Objcm.g:834:1: func_pointer1 : type_internal ( ASTERISK )? L_BR ( ASTERISK )? type_internal R_BR ( func_pointer_params )? ;
    public final ObjcmParser.func_pointer1_return func_pointer1() throws RecognitionException {
        ObjcmParser.func_pointer1_return retval = new ObjcmParser.func_pointer1_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ASTERISK503=null;
        Token L_BR504=null;
        Token ASTERISK505=null;
        Token R_BR507=null;
        ObjcmParser.type_internal_return type_internal502 =null;

        ObjcmParser.type_internal_return type_internal506 =null;

        ObjcmParser.func_pointer_params_return func_pointer_params508 =null;


        Object ASTERISK503_tree=null;
        Object L_BR504_tree=null;
        Object ASTERISK505_tree=null;
        Object R_BR507_tree=null;

        try {
            // Objcm.g:835:2: ( type_internal ( ASTERISK )? L_BR ( ASTERISK )? type_internal R_BR ( func_pointer_params )? )
            // Objcm.g:835:4: type_internal ( ASTERISK )? L_BR ( ASTERISK )? type_internal R_BR ( func_pointer_params )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_type_internal_in_func_pointer14422);
            type_internal502=type_internal();

            state._fsp--;

            adaptor.addChild(root_0, type_internal502.getTree());

            // Objcm.g:835:19: ( ASTERISK )?
            int alt126=2;
            int LA126_0 = input.LA(1);

            if ( (LA126_0==ASTERISK) ) {
                alt126=1;
            }
            switch (alt126) {
                case 1 :
                    // Objcm.g:835:19: ASTERISK
                    {
                    ASTERISK503=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_func_pointer14425); 
                    ASTERISK503_tree = 
                    (Object)adaptor.create(ASTERISK503)
                    ;
                    adaptor.addChild(root_0, ASTERISK503_tree);


                    }
                    break;

            }


            L_BR504=(Token)match(input,L_BR,FOLLOW_L_BR_in_func_pointer14428); 
            L_BR504_tree = 
            (Object)adaptor.create(L_BR504)
            ;
            adaptor.addChild(root_0, L_BR504_tree);


            // Objcm.g:835:34: ( ASTERISK )?
            int alt127=2;
            int LA127_0 = input.LA(1);

            if ( (LA127_0==ASTERISK) ) {
                alt127=1;
            }
            switch (alt127) {
                case 1 :
                    // Objcm.g:835:34: ASTERISK
                    {
                    ASTERISK505=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_func_pointer14430); 
                    ASTERISK505_tree = 
                    (Object)adaptor.create(ASTERISK505)
                    ;
                    adaptor.addChild(root_0, ASTERISK505_tree);


                    }
                    break;

            }


            pushFollow(FOLLOW_type_internal_in_func_pointer14433);
            type_internal506=type_internal();

            state._fsp--;

            adaptor.addChild(root_0, type_internal506.getTree());

            R_BR507=(Token)match(input,R_BR,FOLLOW_R_BR_in_func_pointer14436); 
            R_BR507_tree = 
            (Object)adaptor.create(R_BR507)
            ;
            adaptor.addChild(root_0, R_BR507_tree);


            // Objcm.g:835:65: ( func_pointer_params )?
            int alt128=2;
            int LA128_0 = input.LA(1);

            if ( (LA128_0==L_BR) ) {
                alt128=1;
            }
            switch (alt128) {
                case 1 :
                    // Objcm.g:835:65: func_pointer_params
                    {
                    pushFollow(FOLLOW_func_pointer_params_in_func_pointer14439);
                    func_pointer_params508=func_pointer_params();

                    state._fsp--;

                    adaptor.addChild(root_0, func_pointer_params508.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "func_pointer1"


    public static class func_pointer2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "func_pointer2"
    // Objcm.g:838:1: func_pointer2 : L_BR type_internal L_BR ASTERISK R_BR func_pointer_params R_BR ;
    public final ObjcmParser.func_pointer2_return func_pointer2() throws RecognitionException {
        ObjcmParser.func_pointer2_return retval = new ObjcmParser.func_pointer2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_BR509=null;
        Token L_BR511=null;
        Token ASTERISK512=null;
        Token R_BR513=null;
        Token R_BR515=null;
        ObjcmParser.type_internal_return type_internal510 =null;

        ObjcmParser.func_pointer_params_return func_pointer_params514 =null;


        Object L_BR509_tree=null;
        Object L_BR511_tree=null;
        Object ASTERISK512_tree=null;
        Object R_BR513_tree=null;
        Object R_BR515_tree=null;

        try {
            // Objcm.g:839:2: ( L_BR type_internal L_BR ASTERISK R_BR func_pointer_params R_BR )
            // Objcm.g:839:4: L_BR type_internal L_BR ASTERISK R_BR func_pointer_params R_BR
            {
            root_0 = (Object)adaptor.nil();


            L_BR509=(Token)match(input,L_BR,FOLLOW_L_BR_in_func_pointer24452); 
            L_BR509_tree = 
            (Object)adaptor.create(L_BR509)
            ;
            adaptor.addChild(root_0, L_BR509_tree);


            pushFollow(FOLLOW_type_internal_in_func_pointer24455);
            type_internal510=type_internal();

            state._fsp--;

            adaptor.addChild(root_0, type_internal510.getTree());

            L_BR511=(Token)match(input,L_BR,FOLLOW_L_BR_in_func_pointer24457); 
            L_BR511_tree = 
            (Object)adaptor.create(L_BR511)
            ;
            adaptor.addChild(root_0, L_BR511_tree);


            ASTERISK512=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_func_pointer24460); 
            ASTERISK512_tree = 
            (Object)adaptor.create(ASTERISK512)
            ;
            adaptor.addChild(root_0, ASTERISK512_tree);


            R_BR513=(Token)match(input,R_BR,FOLLOW_R_BR_in_func_pointer24463); 
            R_BR513_tree = 
            (Object)adaptor.create(R_BR513)
            ;
            adaptor.addChild(root_0, R_BR513_tree);


            pushFollow(FOLLOW_func_pointer_params_in_func_pointer24466);
            func_pointer_params514=func_pointer_params();

            state._fsp--;

            adaptor.addChild(root_0, func_pointer_params514.getTree());

            R_BR515=(Token)match(input,R_BR,FOLLOW_R_BR_in_func_pointer24469); 
            R_BR515_tree = 
            (Object)adaptor.create(R_BR515)
            ;
            adaptor.addChild(root_0, R_BR515_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "func_pointer2"


    public static class func_pointer_params_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "func_pointer_params"
    // Objcm.g:842:1: func_pointer_params : L_BR ID ( ASTERISK )* ( COMMA ID ( ASTERISK )* )* R_BR ;
    public final ObjcmParser.func_pointer_params_return func_pointer_params() throws RecognitionException {
        ObjcmParser.func_pointer_params_return retval = new ObjcmParser.func_pointer_params_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_BR516=null;
        Token ID517=null;
        Token ASTERISK518=null;
        Token COMMA519=null;
        Token ID520=null;
        Token ASTERISK521=null;
        Token R_BR522=null;

        Object L_BR516_tree=null;
        Object ID517_tree=null;
        Object ASTERISK518_tree=null;
        Object COMMA519_tree=null;
        Object ID520_tree=null;
        Object ASTERISK521_tree=null;
        Object R_BR522_tree=null;

        try {
            // Objcm.g:843:2: ( L_BR ID ( ASTERISK )* ( COMMA ID ( ASTERISK )* )* R_BR )
            // Objcm.g:843:4: L_BR ID ( ASTERISK )* ( COMMA ID ( ASTERISK )* )* R_BR
            {
            root_0 = (Object)adaptor.nil();


            L_BR516=(Token)match(input,L_BR,FOLLOW_L_BR_in_func_pointer_params4482); 
            L_BR516_tree = 
            (Object)adaptor.create(L_BR516)
            ;
            adaptor.addChild(root_0, L_BR516_tree);


            ID517=(Token)match(input,ID,FOLLOW_ID_in_func_pointer_params4485); 
            ID517_tree = 
            (Object)adaptor.create(ID517)
            ;
            adaptor.addChild(root_0, ID517_tree);


            // Objcm.g:843:14: ( ASTERISK )*
            loop129:
            do {
                int alt129=2;
                int LA129_0 = input.LA(1);

                if ( (LA129_0==ASTERISK) ) {
                    alt129=1;
                }


                switch (alt129) {
            	case 1 :
            	    // Objcm.g:843:14: ASTERISK
            	    {
            	    ASTERISK518=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_func_pointer_params4488); 
            	    ASTERISK518_tree = 
            	    (Object)adaptor.create(ASTERISK518)
            	    ;
            	    adaptor.addChild(root_0, ASTERISK518_tree);


            	    }
            	    break;

            	default :
            	    break loop129;
                }
            } while (true);


            // Objcm.g:843:24: ( COMMA ID ( ASTERISK )* )*
            loop131:
            do {
                int alt131=2;
                int LA131_0 = input.LA(1);

                if ( (LA131_0==COMMA) ) {
                    alt131=1;
                }


                switch (alt131) {
            	case 1 :
            	    // Objcm.g:843:25: COMMA ID ( ASTERISK )*
            	    {
            	    COMMA519=(Token)match(input,COMMA,FOLLOW_COMMA_in_func_pointer_params4492); 
            	    COMMA519_tree = 
            	    (Object)adaptor.create(COMMA519)
            	    ;
            	    adaptor.addChild(root_0, COMMA519_tree);


            	    ID520=(Token)match(input,ID,FOLLOW_ID_in_func_pointer_params4495); 
            	    ID520_tree = 
            	    (Object)adaptor.create(ID520)
            	    ;
            	    adaptor.addChild(root_0, ID520_tree);


            	    // Objcm.g:843:36: ( ASTERISK )*
            	    loop130:
            	    do {
            	        int alt130=2;
            	        int LA130_0 = input.LA(1);

            	        if ( (LA130_0==ASTERISK) ) {
            	            alt130=1;
            	        }


            	        switch (alt130) {
            	    	case 1 :
            	    	    // Objcm.g:843:36: ASTERISK
            	    	    {
            	    	    ASTERISK521=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_func_pointer_params4498); 
            	    	    ASTERISK521_tree = 
            	    	    (Object)adaptor.create(ASTERISK521)
            	    	    ;
            	    	    adaptor.addChild(root_0, ASTERISK521_tree);


            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop130;
            	        }
            	    } while (true);


            	    }
            	    break;

            	default :
            	    break loop131;
                }
            } while (true);


            R_BR522=(Token)match(input,R_BR,FOLLOW_R_BR_in_func_pointer_params4503); 
            R_BR522_tree = 
            (Object)adaptor.create(R_BR522)
            ;
            adaptor.addChild(root_0, R_BR522_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "func_pointer_params"


    public static class method_start_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_start"
    // Objcm.g:845:1: method_start : ID ( method_brackets )? ;
    public final ObjcmParser.method_start_return method_start() throws RecognitionException {
        ObjcmParser.method_start_return retval = new ObjcmParser.method_start_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID523=null;
        ObjcmParser.method_brackets_return method_brackets524 =null;


        Object ID523_tree=null;

        try {
            // Objcm.g:846:2: ( ID ( method_brackets )? )
            // Objcm.g:846:4: ID ( method_brackets )?
            {
            root_0 = (Object)adaptor.nil();


            ID523=(Token)match(input,ID,FOLLOW_ID_in_method_start4514); 
            ID523_tree = 
            (Object)adaptor.create(ID523)
            ;
            adaptor.addChild(root_0, ID523_tree);


            // Objcm.g:846:7: ( method_brackets )?
            int alt132=2;
            int LA132_0 = input.LA(1);

            if ( (LA132_0==L_BR) ) {
                alt132=1;
            }
            switch (alt132) {
                case 1 :
                    // Objcm.g:846:7: method_brackets
                    {
                    pushFollow(FOLLOW_method_brackets_in_method_start4516);
                    method_brackets524=method_brackets();

                    state._fsp--;

                    adaptor.addChild(root_0, method_brackets524.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_start"


    public static class in_q_brackets_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "in_q_brackets"
    // Objcm.g:848:1: in_q_brackets : L_FBR q_brackets_source R_FBR ;
    public final ObjcmParser.in_q_brackets_return in_q_brackets() throws RecognitionException {
        ObjcmParser.in_q_brackets_return retval = new ObjcmParser.in_q_brackets_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_FBR525=null;
        Token R_FBR527=null;
        ObjcmParser.q_brackets_source_return q_brackets_source526 =null;


        Object L_FBR525_tree=null;
        Object R_FBR527_tree=null;

        try {
            // Objcm.g:849:2: ( L_FBR q_brackets_source R_FBR )
            // Objcm.g:849:4: L_FBR q_brackets_source R_FBR
            {
            root_0 = (Object)adaptor.nil();


            L_FBR525=(Token)match(input,L_FBR,FOLLOW_L_FBR_in_in_q_brackets4527); 
            L_FBR525_tree = 
            (Object)adaptor.create(L_FBR525)
            ;
            adaptor.addChild(root_0, L_FBR525_tree);


            pushFollow(FOLLOW_q_brackets_source_in_in_q_brackets4530);
            q_brackets_source526=q_brackets_source();

            state._fsp--;

            adaptor.addChild(root_0, q_brackets_source526.getTree());

            R_FBR527=(Token)match(input,R_FBR,FOLLOW_R_FBR_in_in_q_brackets4532); 
            R_FBR527_tree = 
            (Object)adaptor.create(R_FBR527)
            ;
            adaptor.addChild(root_0, R_FBR527_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "in_q_brackets"


    public static class q_brackets_source_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "q_brackets_source"
    // Objcm.g:852:1: q_brackets_source : ( q_source | q_br_source );
    public final ObjcmParser.q_brackets_source_return q_brackets_source() throws RecognitionException {
        ObjcmParser.q_brackets_source_return retval = new ObjcmParser.q_brackets_source_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.q_source_return q_source528 =null;

        ObjcmParser.q_br_source_return q_br_source529 =null;



        try {
            // Objcm.g:853:2: ( q_source | q_br_source )
            int alt133=2;
            int LA133_0 = input.LA(1);

            if ( (LA133_0==ASTERISK||LA133_0==ID||LA133_0==L_AND||LA133_0==L_BR||LA133_0==L_KBR||LA133_0==L_MINUS||LA133_0==L_MINUS_MINUS||LA133_0==L_NOT||LA133_0==L_PLUS||LA133_0==L_PLUS_PLUS||LA133_0==L_TILDA||LA133_0==NUMBER||LA133_0==R_FBR||LA133_0==SIZEOF||(LA133_0 >= STRING_LITERAL && LA133_0 <= STRING_LITERAL3)||LA133_0==166||LA133_0==173||LA133_0==175||LA133_0==179||LA133_0==182||LA133_0==185||LA133_0==193||(LA133_0 >= 195 && LA133_0 <= 196)||LA133_0==201) ) {
                alt133=1;
            }
            else if ( (LA133_0==L_FBR) ) {
                alt133=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 133, 0, input);

                throw nvae;

            }
            switch (alt133) {
                case 1 :
                    // Objcm.g:853:4: q_source
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_q_source_in_q_brackets_source4544);
                    q_source528=q_source();

                    state._fsp--;

                    adaptor.addChild(root_0, q_source528.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:854:4: q_br_source
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_q_br_source_in_q_brackets_source4549);
                    q_br_source529=q_br_source();

                    state._fsp--;

                    adaptor.addChild(root_0, q_br_source529.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "q_brackets_source"


    public static class q_br_source_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "q_br_source"
    // Objcm.g:857:1: q_br_source : in_q_brackets ( COMMA in_q_brackets )* ( COMMA )? ;
    public final ObjcmParser.q_br_source_return q_br_source() throws RecognitionException {
        ObjcmParser.q_br_source_return retval = new ObjcmParser.q_br_source_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA531=null;
        Token COMMA533=null;
        ObjcmParser.in_q_brackets_return in_q_brackets530 =null;

        ObjcmParser.in_q_brackets_return in_q_brackets532 =null;


        Object COMMA531_tree=null;
        Object COMMA533_tree=null;

        try {
            // Objcm.g:858:2: ( in_q_brackets ( COMMA in_q_brackets )* ( COMMA )? )
            // Objcm.g:858:4: in_q_brackets ( COMMA in_q_brackets )* ( COMMA )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_in_q_brackets_in_q_br_source4562);
            in_q_brackets530=in_q_brackets();

            state._fsp--;

            adaptor.addChild(root_0, in_q_brackets530.getTree());

            // Objcm.g:858:19: ( COMMA in_q_brackets )*
            loop134:
            do {
                int alt134=2;
                int LA134_0 = input.LA(1);

                if ( (LA134_0==COMMA) ) {
                    int LA134_1 = input.LA(2);

                    if ( (LA134_1==L_FBR) ) {
                        alt134=1;
                    }


                }


                switch (alt134) {
            	case 1 :
            	    // Objcm.g:858:20: COMMA in_q_brackets
            	    {
            	    COMMA531=(Token)match(input,COMMA,FOLLOW_COMMA_in_q_br_source4566); 
            	    COMMA531_tree = 
            	    (Object)adaptor.create(COMMA531)
            	    ;
            	    adaptor.addChild(root_0, COMMA531_tree);


            	    pushFollow(FOLLOW_in_q_brackets_in_q_br_source4569);
            	    in_q_brackets532=in_q_brackets();

            	    state._fsp--;

            	    adaptor.addChild(root_0, in_q_brackets532.getTree());

            	    }
            	    break;

            	default :
            	    break loop134;
                }
            } while (true);


            // Objcm.g:858:43: ( COMMA )?
            int alt135=2;
            int LA135_0 = input.LA(1);

            if ( (LA135_0==COMMA) ) {
                alt135=1;
            }
            switch (alt135) {
                case 1 :
                    // Objcm.g:858:43: COMMA
                    {
                    COMMA533=(Token)match(input,COMMA,FOLLOW_COMMA_in_q_br_source4573); 
                    COMMA533_tree = 
                    (Object)adaptor.create(COMMA533)
                    ;
                    adaptor.addChild(root_0, COMMA533_tree);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "q_br_source"


    public static class q_source_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "q_source"
    // Objcm.g:861:1: q_source : ( expression ( COMMA expression )* )? ;
    public final ObjcmParser.q_source_return q_source() throws RecognitionException {
        ObjcmParser.q_source_return retval = new ObjcmParser.q_source_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA535=null;
        ObjcmParser.expression_return expression534 =null;

        ObjcmParser.expression_return expression536 =null;


        Object COMMA535_tree=null;

        try {
            // Objcm.g:861:9: ( ( expression ( COMMA expression )* )? )
            // Objcm.g:861:11: ( expression ( COMMA expression )* )?
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:861:11: ( expression ( COMMA expression )* )?
            int alt137=2;
            int LA137_0 = input.LA(1);

            if ( (LA137_0==ASTERISK||LA137_0==ID||LA137_0==L_AND||LA137_0==L_BR||LA137_0==L_KBR||LA137_0==L_MINUS||LA137_0==L_MINUS_MINUS||LA137_0==L_NOT||LA137_0==L_PLUS||LA137_0==L_PLUS_PLUS||LA137_0==L_TILDA||LA137_0==NUMBER||LA137_0==SIZEOF||(LA137_0 >= STRING_LITERAL && LA137_0 <= STRING_LITERAL3)||LA137_0==166||LA137_0==173||LA137_0==175||LA137_0==179||LA137_0==182||LA137_0==185||LA137_0==193||(LA137_0 >= 195 && LA137_0 <= 196)||LA137_0==201) ) {
                alt137=1;
            }
            switch (alt137) {
                case 1 :
                    // Objcm.g:861:12: expression ( COMMA expression )*
                    {
                    pushFollow(FOLLOW_expression_in_q_source4585);
                    expression534=expression();

                    state._fsp--;

                    adaptor.addChild(root_0, expression534.getTree());

                    // Objcm.g:861:24: ( COMMA expression )*
                    loop136:
                    do {
                        int alt136=2;
                        int LA136_0 = input.LA(1);

                        if ( (LA136_0==COMMA) ) {
                            alt136=1;
                        }


                        switch (alt136) {
                    	case 1 :
                    	    // Objcm.g:861:25: COMMA expression
                    	    {
                    	    COMMA535=(Token)match(input,COMMA,FOLLOW_COMMA_in_q_source4589); 
                    	    COMMA535_tree = 
                    	    (Object)adaptor.create(COMMA535)
                    	    ;
                    	    adaptor.addChild(root_0, COMMA535_tree);


                    	    pushFollow(FOLLOW_expression_in_q_source4592);
                    	    expression536=expression();

                    	    state._fsp--;

                    	    adaptor.addChild(root_0, expression536.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop136;
                        }
                    } while (true);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "q_source"


    public static class simple_method_call_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "simple_method_call"
    // Objcm.g:864:1: simple_method_call : ID ( method_brackets )? ;
    public final ObjcmParser.simple_method_call_return simple_method_call() throws RecognitionException {
        ObjcmParser.simple_method_call_return retval = new ObjcmParser.simple_method_call_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID537=null;
        ObjcmParser.method_brackets_return method_brackets538 =null;


        Object ID537_tree=null;

        try {
            // Objcm.g:865:2: ( ID ( method_brackets )? )
            // Objcm.g:865:4: ID ( method_brackets )?
            {
            root_0 = (Object)adaptor.nil();


            ID537=(Token)match(input,ID,FOLLOW_ID_in_simple_method_call4609); 
            ID537_tree = 
            (Object)adaptor.create(ID537)
            ;
            adaptor.addChild(root_0, ID537_tree);


            // Objcm.g:865:7: ( method_brackets )?
            int alt138=2;
            int LA138_0 = input.LA(1);

            if ( (LA138_0==L_BR) ) {
                alt138=1;
            }
            switch (alt138) {
                case 1 :
                    // Objcm.g:865:7: method_brackets
                    {
                    pushFollow(FOLLOW_method_brackets_in_simple_method_call4611);
                    method_brackets538=method_brackets();

                    state._fsp--;

                    adaptor.addChild(root_0, method_brackets538.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "simple_method_call"


    public static class index_brackets_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "index_brackets"
    // Objcm.g:867:1: index_brackets : L_KBR classical_expr_wrp R_KBR ;
    public final ObjcmParser.index_brackets_return index_brackets() throws RecognitionException {
        ObjcmParser.index_brackets_return retval = new ObjcmParser.index_brackets_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_KBR539=null;
        Token R_KBR541=null;
        ObjcmParser.classical_expr_wrp_return classical_expr_wrp540 =null;


        Object L_KBR539_tree=null;
        Object R_KBR541_tree=null;

        try {
            // Objcm.g:868:2: ( L_KBR classical_expr_wrp R_KBR )
            // Objcm.g:868:4: L_KBR classical_expr_wrp R_KBR
            {
            root_0 = (Object)adaptor.nil();


            L_KBR539=(Token)match(input,L_KBR,FOLLOW_L_KBR_in_index_brackets4627); 
            L_KBR539_tree = 
            (Object)adaptor.create(L_KBR539)
            ;
            adaptor.addChild(root_0, L_KBR539_tree);


            pushFollow(FOLLOW_classical_expr_wrp_in_index_brackets4630);
            classical_expr_wrp540=classical_expr_wrp();

            state._fsp--;

            adaptor.addChild(root_0, classical_expr_wrp540.getTree());

            R_KBR541=(Token)match(input,R_KBR,FOLLOW_R_KBR_in_index_brackets4632); 
            R_KBR541_tree = 
            (Object)adaptor.create(R_KBR541)
            ;
            adaptor.addChild(root_0, R_KBR541_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "index_brackets"


    public static class interface_declaration_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "interface_declaration_wrapper"
    // Objcm.g:875:1: interface_declaration_wrapper : interface_declaration -> ^( INTERFACE interface_declaration ) ;
    public final ObjcmParser.interface_declaration_wrapper_return interface_declaration_wrapper() throws RecognitionException {
        ObjcmParser.interface_declaration_wrapper_return retval = new ObjcmParser.interface_declaration_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.interface_declaration_return interface_declaration542 =null;


        RewriteRuleSubtreeStream stream_interface_declaration=new RewriteRuleSubtreeStream(adaptor,"rule interface_declaration");
        try {
            // Objcm.g:876:2: ( interface_declaration -> ^( INTERFACE interface_declaration ) )
            // Objcm.g:876:4: interface_declaration
            {
            pushFollow(FOLLOW_interface_declaration_in_interface_declaration_wrapper4646);
            interface_declaration542=interface_declaration();

            state._fsp--;

            stream_interface_declaration.add(interface_declaration542.getTree());

            // AST REWRITE
            // elements: interface_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 876:26: -> ^( INTERFACE interface_declaration )
            {
                // Objcm.g:876:29: ^( INTERFACE interface_declaration )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(INTERFACE, "INTERFACE")
                , root_1);

                adaptor.addChild(root_1, stream_interface_declaration.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_declaration_wrapper"


    public static class interface_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "interface_declaration"
    // Objcm.g:878:1: interface_declaration : '@interface' name ( interface_category )? ( super_class )? ( annotated_block | interface_methods | interface_fields )+ '@end' ;
    public final ObjcmParser.interface_declaration_return interface_declaration() throws RecognitionException {
        ObjcmParser.interface_declaration_return retval = new ObjcmParser.interface_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal543=null;
        Token string_literal550=null;
        ObjcmParser.name_return name544 =null;

        ObjcmParser.interface_category_return interface_category545 =null;

        ObjcmParser.super_class_return super_class546 =null;

        ObjcmParser.annotated_block_return annotated_block547 =null;

        ObjcmParser.interface_methods_return interface_methods548 =null;

        ObjcmParser.interface_fields_return interface_fields549 =null;


        Object string_literal543_tree=null;
        Object string_literal550_tree=null;

        try {
            // Objcm.g:879:2: ( '@interface' name ( interface_category )? ( super_class )? ( annotated_block | interface_methods | interface_fields )+ '@end' )
            // Objcm.g:879:4: '@interface' name ( interface_category )? ( super_class )? ( annotated_block | interface_methods | interface_fields )+ '@end'
            {
            root_0 = (Object)adaptor.nil();


            string_literal543=(Token)match(input,170,FOLLOW_170_in_interface_declaration4664); 
            string_literal543_tree = 
            (Object)adaptor.create(string_literal543)
            ;
            adaptor.addChild(root_0, string_literal543_tree);


            pushFollow(FOLLOW_name_in_interface_declaration4667);
            name544=name();

            state._fsp--;

            adaptor.addChild(root_0, name544.getTree());

            // Objcm.g:879:24: ( interface_category )?
            int alt139=2;
            int LA139_0 = input.LA(1);

            if ( (LA139_0==L_BR) ) {
                alt139=1;
            }
            switch (alt139) {
                case 1 :
                    // Objcm.g:879:24: interface_category
                    {
                    pushFollow(FOLLOW_interface_category_in_interface_declaration4670);
                    interface_category545=interface_category();

                    state._fsp--;

                    adaptor.addChild(root_0, interface_category545.getTree());

                    }
                    break;

            }


            // Objcm.g:879:44: ( super_class )?
            int alt140=2;
            int LA140_0 = input.LA(1);

            if ( (LA140_0==COLON) ) {
                alt140=1;
            }
            switch (alt140) {
                case 1 :
                    // Objcm.g:879:45: super_class
                    {
                    pushFollow(FOLLOW_super_class_in_interface_declaration4674);
                    super_class546=super_class();

                    state._fsp--;

                    adaptor.addChild(root_0, super_class546.getTree());

                    }
                    break;

            }


            // Objcm.g:880:3: ( annotated_block | interface_methods | interface_fields )+
            int cnt141=0;
            loop141:
            do {
                int alt141=4;
                switch ( input.LA(1) ) {
                case L_FBR:
                    {
                    alt141=1;
                    }
                    break;
                case ENUM_PREFIX:
                case L_MINUS:
                case L_PLUS:
                    {
                    alt141=2;
                    }
                    break;
                case ID:
                case VOID:
                case 172:
                    {
                    alt141=3;
                    }
                    break;

                }

                switch (alt141) {
            	case 1 :
            	    // Objcm.g:880:4: annotated_block
            	    {
            	    pushFollow(FOLLOW_annotated_block_in_interface_declaration4681);
            	    annotated_block547=annotated_block();

            	    state._fsp--;

            	    adaptor.addChild(root_0, annotated_block547.getTree());

            	    }
            	    break;
            	case 2 :
            	    // Objcm.g:880:22: interface_methods
            	    {
            	    pushFollow(FOLLOW_interface_methods_in_interface_declaration4685);
            	    interface_methods548=interface_methods();

            	    state._fsp--;

            	    adaptor.addChild(root_0, interface_methods548.getTree());

            	    }
            	    break;
            	case 3 :
            	    // Objcm.g:880:42: interface_fields
            	    {
            	    pushFollow(FOLLOW_interface_fields_in_interface_declaration4689);
            	    interface_fields549=interface_fields();

            	    state._fsp--;

            	    adaptor.addChild(root_0, interface_fields549.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt141 >= 1 ) break loop141;
                        EarlyExitException eee =
                            new EarlyExitException(141, input);
                        throw eee;
                }
                cnt141++;
            } while (true);


            string_literal550=(Token)match(input,167,FOLLOW_167_in_interface_declaration4698); 
            string_literal550_tree = 
            (Object)adaptor.create(string_literal550)
            ;
            adaptor.addChild(root_0, string_literal550_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_declaration"


    public static class annotated_block_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "annotated_block"
    // Objcm.g:884:1: annotated_block : L_FBR ( annotated_block_internal )* R_FBR ;
    public final ObjcmParser.annotated_block_return annotated_block() throws RecognitionException {
        ObjcmParser.annotated_block_return retval = new ObjcmParser.annotated_block_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_FBR551=null;
        Token R_FBR553=null;
        ObjcmParser.annotated_block_internal_return annotated_block_internal552 =null;


        Object L_FBR551_tree=null;
        Object R_FBR553_tree=null;

        try {
            // Objcm.g:885:2: ( L_FBR ( annotated_block_internal )* R_FBR )
            // Objcm.g:885:4: L_FBR ( annotated_block_internal )* R_FBR
            {
            root_0 = (Object)adaptor.nil();


            L_FBR551=(Token)match(input,L_FBR,FOLLOW_L_FBR_in_annotated_block4709); 
            L_FBR551_tree = 
            (Object)adaptor.create(L_FBR551)
            ;
            adaptor.addChild(root_0, L_FBR551_tree);


            // Objcm.g:886:3: ( annotated_block_internal )*
            loop142:
            do {
                int alt142=2;
                int LA142_0 = input.LA(1);

                if ( (LA142_0==ID||LA142_0==VOID||LA142_0==171||LA142_0==174||LA142_0==200) ) {
                    alt142=1;
                }


                switch (alt142) {
            	case 1 :
            	    // Objcm.g:886:3: annotated_block_internal
            	    {
            	    pushFollow(FOLLOW_annotated_block_internal_in_annotated_block4714);
            	    annotated_block_internal552=annotated_block_internal();

            	    state._fsp--;

            	    adaptor.addChild(root_0, annotated_block_internal552.getTree());

            	    }
            	    break;

            	default :
            	    break loop142;
                }
            } while (true);


            R_FBR553=(Token)match(input,R_FBR,FOLLOW_R_FBR_in_annotated_block4719); 
            R_FBR553_tree = 
            (Object)adaptor.create(R_FBR553)
            ;
            adaptor.addChild(root_0, R_FBR553_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "annotated_block"


    public static class annotated_block_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "annotated_block_internal"
    // Objcm.g:890:1: annotated_block_internal : ( block_annotation | public_block_internal );
    public final ObjcmParser.annotated_block_internal_return annotated_block_internal() throws RecognitionException {
        ObjcmParser.annotated_block_internal_return retval = new ObjcmParser.annotated_block_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.block_annotation_return block_annotation554 =null;

        ObjcmParser.public_block_internal_return public_block_internal555 =null;



        try {
            // Objcm.g:891:2: ( block_annotation | public_block_internal )
            int alt143=2;
            int LA143_0 = input.LA(1);

            if ( (LA143_0==171||LA143_0==174) ) {
                alt143=1;
            }
            else if ( (LA143_0==ID||LA143_0==VOID||LA143_0==200) ) {
                alt143=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 143, 0, input);

                throw nvae;

            }
            switch (alt143) {
                case 1 :
                    // Objcm.g:891:4: block_annotation
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_block_annotation_in_annotated_block_internal4732);
                    block_annotation554=block_annotation();

                    state._fsp--;

                    adaptor.addChild(root_0, block_annotation554.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:892:5: public_block_internal
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_public_block_internal_in_annotated_block_internal4739);
                    public_block_internal555=public_block_internal();

                    state._fsp--;

                    adaptor.addChild(root_0, public_block_internal555.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "annotated_block_internal"


    public static class block_annotation_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_annotation"
    // Objcm.g:895:1: block_annotation : ( '@public' | '@private' );
    public final ObjcmParser.block_annotation_return block_annotation() throws RecognitionException {
        ObjcmParser.block_annotation_return retval = new ObjcmParser.block_annotation_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set556=null;

        Object set556_tree=null;

        try {
            // Objcm.g:896:2: ( '@public' | '@private' )
            // Objcm.g:
            {
            root_0 = (Object)adaptor.nil();


            set556=(Token)input.LT(1);

            if ( input.LA(1)==171||input.LA(1)==174 ) {
                input.consume();
                adaptor.addChild(root_0, 
                (Object)adaptor.create(set556)
                );
                state.errorRecovery=false;
            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_annotation"


    public static class public_block_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "public_block_internal"
    // Objcm.g:900:1: public_block_internal : ( simple_field_declaration | union_declaration );
    public final ObjcmParser.public_block_internal_return public_block_internal() throws RecognitionException {
        ObjcmParser.public_block_internal_return retval = new ObjcmParser.public_block_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.simple_field_declaration_return simple_field_declaration557 =null;

        ObjcmParser.union_declaration_return union_declaration558 =null;



        try {
            // Objcm.g:901:2: ( simple_field_declaration | union_declaration )
            int alt144=2;
            int LA144_0 = input.LA(1);

            if ( (LA144_0==ID||LA144_0==VOID) ) {
                alt144=1;
            }
            else if ( (LA144_0==200) ) {
                alt144=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 144, 0, input);

                throw nvae;

            }
            switch (alt144) {
                case 1 :
                    // Objcm.g:901:4: simple_field_declaration
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_simple_field_declaration_in_public_block_internal4774);
                    simple_field_declaration557=simple_field_declaration();

                    state._fsp--;

                    adaptor.addChild(root_0, simple_field_declaration557.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:902:4: union_declaration
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_union_declaration_in_public_block_internal4779);
                    union_declaration558=union_declaration();

                    state._fsp--;

                    adaptor.addChild(root_0, union_declaration558.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "public_block_internal"


    public static class simple_field_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "simple_field_declaration"
    // Objcm.g:905:1: simple_field_declaration : field_type name SEMICOLON ;
    public final ObjcmParser.simple_field_declaration_return simple_field_declaration() throws RecognitionException {
        ObjcmParser.simple_field_declaration_return retval = new ObjcmParser.simple_field_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON561=null;
        ObjcmParser.field_type_return field_type559 =null;

        ObjcmParser.name_return name560 =null;


        Object SEMICOLON561_tree=null;

        try {
            // Objcm.g:906:2: ( field_type name SEMICOLON )
            // Objcm.g:906:4: field_type name SEMICOLON
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_field_type_in_simple_field_declaration4791);
            field_type559=field_type();

            state._fsp--;

            adaptor.addChild(root_0, field_type559.getTree());

            pushFollow(FOLLOW_name_in_simple_field_declaration4793);
            name560=name();

            state._fsp--;

            adaptor.addChild(root_0, name560.getTree());

            SEMICOLON561=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_simple_field_declaration4796); 
            SEMICOLON561_tree = 
            (Object)adaptor.create(SEMICOLON561)
            ;
            adaptor.addChild(root_0, SEMICOLON561_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "simple_field_declaration"


    public static class union_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "union_declaration"
    // Objcm.g:909:1: union_declaration : 'union' L_FBR ( simple_field_declaration )+ R_FBR ID SEMICOLON ;
    public final ObjcmParser.union_declaration_return union_declaration() throws RecognitionException {
        ObjcmParser.union_declaration_return retval = new ObjcmParser.union_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal562=null;
        Token L_FBR563=null;
        Token R_FBR565=null;
        Token ID566=null;
        Token SEMICOLON567=null;
        ObjcmParser.simple_field_declaration_return simple_field_declaration564 =null;


        Object string_literal562_tree=null;
        Object L_FBR563_tree=null;
        Object R_FBR565_tree=null;
        Object ID566_tree=null;
        Object SEMICOLON567_tree=null;

        try {
            // Objcm.g:910:2: ( 'union' L_FBR ( simple_field_declaration )+ R_FBR ID SEMICOLON )
            // Objcm.g:910:4: 'union' L_FBR ( simple_field_declaration )+ R_FBR ID SEMICOLON
            {
            root_0 = (Object)adaptor.nil();


            string_literal562=(Token)match(input,200,FOLLOW_200_in_union_declaration4809); 
            string_literal562_tree = 
            (Object)adaptor.create(string_literal562)
            ;
            adaptor.addChild(root_0, string_literal562_tree);


            L_FBR563=(Token)match(input,L_FBR,FOLLOW_L_FBR_in_union_declaration4812); 
            L_FBR563_tree = 
            (Object)adaptor.create(L_FBR563)
            ;
            adaptor.addChild(root_0, L_FBR563_tree);


            // Objcm.g:911:4: ( simple_field_declaration )+
            int cnt145=0;
            loop145:
            do {
                int alt145=2;
                int LA145_0 = input.LA(1);

                if ( (LA145_0==ID||LA145_0==VOID) ) {
                    alt145=1;
                }


                switch (alt145) {
            	case 1 :
            	    // Objcm.g:911:4: simple_field_declaration
            	    {
            	    pushFollow(FOLLOW_simple_field_declaration_in_union_declaration4818);
            	    simple_field_declaration564=simple_field_declaration();

            	    state._fsp--;

            	    adaptor.addChild(root_0, simple_field_declaration564.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt145 >= 1 ) break loop145;
                        EarlyExitException eee =
                            new EarlyExitException(145, input);
                        throw eee;
                }
                cnt145++;
            } while (true);


            R_FBR565=(Token)match(input,R_FBR,FOLLOW_R_FBR_in_union_declaration4823); 
            R_FBR565_tree = 
            (Object)adaptor.create(R_FBR565)
            ;
            adaptor.addChild(root_0, R_FBR565_tree);


            ID566=(Token)match(input,ID,FOLLOW_ID_in_union_declaration4826); 
            ID566_tree = 
            (Object)adaptor.create(ID566)
            ;
            adaptor.addChild(root_0, ID566_tree);


            SEMICOLON567=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_union_declaration4829); 
            SEMICOLON567_tree = 
            (Object)adaptor.create(SEMICOLON567)
            ;
            adaptor.addChild(root_0, SEMICOLON567_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "union_declaration"


    public static class super_class_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "super_class"
    // Objcm.g:915:1: super_class : COLON ID -> ^( SUPER_CLASS ID ) ;
    public final ObjcmParser.super_class_return super_class() throws RecognitionException {
        ObjcmParser.super_class_return retval = new ObjcmParser.super_class_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COLON568=null;
        Token ID569=null;

        Object COLON568_tree=null;
        Object ID569_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // Objcm.g:916:2: ( COLON ID -> ^( SUPER_CLASS ID ) )
            // Objcm.g:916:4: COLON ID
            {
            COLON568=(Token)match(input,COLON,FOLLOW_COLON_in_super_class4843);  
            stream_COLON.add(COLON568);


            ID569=(Token)match(input,ID,FOLLOW_ID_in_super_class4846);  
            stream_ID.add(ID569);


            // AST REWRITE
            // elements: ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 916:15: -> ^( SUPER_CLASS ID )
            {
                // Objcm.g:916:18: ^( SUPER_CLASS ID )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SUPER_CLASS, "SUPER_CLASS")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "super_class"


    public static class interface_category_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "interface_category"
    // Objcm.g:918:1: interface_category : L_BR ( ID )? R_BR -> ^( CATEGORY L_BR ( ID )? R_BR ) ;
    public final ObjcmParser.interface_category_return interface_category() throws RecognitionException {
        ObjcmParser.interface_category_return retval = new ObjcmParser.interface_category_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_BR570=null;
        Token ID571=null;
        Token R_BR572=null;

        Object L_BR570_tree=null;
        Object ID571_tree=null;
        Object R_BR572_tree=null;
        RewriteRuleTokenStream stream_R_BR=new RewriteRuleTokenStream(adaptor,"token R_BR");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleTokenStream stream_L_BR=new RewriteRuleTokenStream(adaptor,"token L_BR");

        try {
            // Objcm.g:919:2: ( L_BR ( ID )? R_BR -> ^( CATEGORY L_BR ( ID )? R_BR ) )
            // Objcm.g:919:4: L_BR ( ID )? R_BR
            {
            L_BR570=(Token)match(input,L_BR,FOLLOW_L_BR_in_interface_category4866);  
            stream_L_BR.add(L_BR570);


            // Objcm.g:919:10: ( ID )?
            int alt146=2;
            int LA146_0 = input.LA(1);

            if ( (LA146_0==ID) ) {
                alt146=1;
            }
            switch (alt146) {
                case 1 :
                    // Objcm.g:919:10: ID
                    {
                    ID571=(Token)match(input,ID,FOLLOW_ID_in_interface_category4869);  
                    stream_ID.add(ID571);


                    }
                    break;

            }


            R_BR572=(Token)match(input,R_BR,FOLLOW_R_BR_in_interface_category4873);  
            stream_R_BR.add(R_BR572);


            // AST REWRITE
            // elements: L_BR, R_BR, ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 919:20: -> ^( CATEGORY L_BR ( ID )? R_BR )
            {
                // Objcm.g:919:23: ^( CATEGORY L_BR ( ID )? R_BR )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CATEGORY, "CATEGORY")
                , root_1);

                adaptor.addChild(root_1, 
                stream_L_BR.nextNode()
                );

                // Objcm.g:919:40: ( ID )?
                if ( stream_ID.hasNext() ) {
                    adaptor.addChild(root_1, 
                    stream_ID.nextNode()
                    );

                }
                stream_ID.reset();

                adaptor.addChild(root_1, 
                stream_R_BR.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_category"


    public static class interface_fields_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "interface_fields"
    // Objcm.g:921:1: interface_fields : ( interface_field_wrapper )+ ;
    public final ObjcmParser.interface_fields_return interface_fields() throws RecognitionException {
        ObjcmParser.interface_fields_return retval = new ObjcmParser.interface_fields_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.interface_field_wrapper_return interface_field_wrapper573 =null;



        try {
            // Objcm.g:922:2: ( ( interface_field_wrapper )+ )
            // Objcm.g:922:4: ( interface_field_wrapper )+
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:922:4: ( interface_field_wrapper )+
            int cnt147=0;
            loop147:
            do {
                int alt147=2;
                int LA147_0 = input.LA(1);

                if ( (LA147_0==172) ) {
                    alt147=1;
                }
                else if ( (LA147_0==ID||LA147_0==VOID) ) {
                    alt147=1;
                }


                switch (alt147) {
            	case 1 :
            	    // Objcm.g:922:4: interface_field_wrapper
            	    {
            	    pushFollow(FOLLOW_interface_field_wrapper_in_interface_fields4902);
            	    interface_field_wrapper573=interface_field_wrapper();

            	    state._fsp--;

            	    adaptor.addChild(root_0, interface_field_wrapper573.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt147 >= 1 ) break loop147;
                        EarlyExitException eee =
                            new EarlyExitException(147, input);
                        throw eee;
                }
                cnt147++;
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_fields"


    public static class interface_field_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "interface_field_wrapper"
    // Objcm.g:924:1: interface_field_wrapper : interface_field -> ^( FIELD interface_field ) ;
    public final ObjcmParser.interface_field_wrapper_return interface_field_wrapper() throws RecognitionException {
        ObjcmParser.interface_field_wrapper_return retval = new ObjcmParser.interface_field_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.interface_field_return interface_field574 =null;


        RewriteRuleSubtreeStream stream_interface_field=new RewriteRuleSubtreeStream(adaptor,"rule interface_field");
        try {
            // Objcm.g:925:2: ( interface_field -> ^( FIELD interface_field ) )
            // Objcm.g:925:4: interface_field
            {
            pushFollow(FOLLOW_interface_field_in_interface_field_wrapper4913);
            interface_field574=interface_field();

            state._fsp--;

            stream_interface_field.add(interface_field574.getTree());

            // AST REWRITE
            // elements: interface_field
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 925:20: -> ^( FIELD interface_field )
            {
                // Objcm.g:925:23: ^( FIELD interface_field )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FIELD, "FIELD")
                , root_1);

                adaptor.addChild(root_1, stream_interface_field.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_field_wrapper"


    public static class interface_field_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "interface_field"
    // Objcm.g:927:1: interface_field : ( property_prefix )? interface_field_declaration ;
    public final ObjcmParser.interface_field_return interface_field() throws RecognitionException {
        ObjcmParser.interface_field_return retval = new ObjcmParser.interface_field_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.property_prefix_return property_prefix575 =null;

        ObjcmParser.interface_field_declaration_return interface_field_declaration576 =null;



        try {
            // Objcm.g:928:2: ( ( property_prefix )? interface_field_declaration )
            // Objcm.g:928:4: ( property_prefix )? interface_field_declaration
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:928:4: ( property_prefix )?
            int alt148=2;
            int LA148_0 = input.LA(1);

            if ( (LA148_0==172) ) {
                alt148=1;
            }
            switch (alt148) {
                case 1 :
                    // Objcm.g:928:4: property_prefix
                    {
                    pushFollow(FOLLOW_property_prefix_in_interface_field4932);
                    property_prefix575=property_prefix();

                    state._fsp--;

                    adaptor.addChild(root_0, property_prefix575.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_interface_field_declaration_in_interface_field4935);
            interface_field_declaration576=interface_field_declaration();

            state._fsp--;

            adaptor.addChild(root_0, interface_field_declaration576.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_field"


    public static class interface_field_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "interface_field_declaration"
    // Objcm.g:930:1: interface_field_declaration : field_type name SEMICOLON ;
    public final ObjcmParser.interface_field_declaration_return interface_field_declaration() throws RecognitionException {
        ObjcmParser.interface_field_declaration_return retval = new ObjcmParser.interface_field_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON579=null;
        ObjcmParser.field_type_return field_type577 =null;

        ObjcmParser.name_return name578 =null;


        Object SEMICOLON579_tree=null;

        try {
            // Objcm.g:931:2: ( field_type name SEMICOLON )
            // Objcm.g:931:4: field_type name SEMICOLON
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_field_type_in_interface_field_declaration4946);
            field_type577=field_type();

            state._fsp--;

            adaptor.addChild(root_0, field_type577.getTree());

            pushFollow(FOLLOW_name_in_interface_field_declaration4948);
            name578=name();

            state._fsp--;

            adaptor.addChild(root_0, name578.getTree());

            SEMICOLON579=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_interface_field_declaration4950); 
            SEMICOLON579_tree = 
            (Object)adaptor.create(SEMICOLON579)
            ;
            adaptor.addChild(root_0, SEMICOLON579_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_field_declaration"


    public static class property_prefix_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "property_prefix"
    // Objcm.g:933:1: property_prefix : '@property' L_BR property ( COMMA property )* R_BR ;
    public final ObjcmParser.property_prefix_return property_prefix() throws RecognitionException {
        ObjcmParser.property_prefix_return retval = new ObjcmParser.property_prefix_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal580=null;
        Token L_BR581=null;
        Token COMMA583=null;
        Token R_BR585=null;
        ObjcmParser.property_return property582 =null;

        ObjcmParser.property_return property584 =null;


        Object string_literal580_tree=null;
        Object L_BR581_tree=null;
        Object COMMA583_tree=null;
        Object R_BR585_tree=null;

        try {
            // Objcm.g:934:2: ( '@property' L_BR property ( COMMA property )* R_BR )
            // Objcm.g:934:4: '@property' L_BR property ( COMMA property )* R_BR
            {
            root_0 = (Object)adaptor.nil();


            string_literal580=(Token)match(input,172,FOLLOW_172_in_property_prefix4961); 
            string_literal580_tree = 
            (Object)adaptor.create(string_literal580)
            ;
            adaptor.addChild(root_0, string_literal580_tree);


            L_BR581=(Token)match(input,L_BR,FOLLOW_L_BR_in_property_prefix4963); 
            L_BR581_tree = 
            (Object)adaptor.create(L_BR581)
            ;
            adaptor.addChild(root_0, L_BR581_tree);


            pushFollow(FOLLOW_property_in_property_prefix4965);
            property582=property();

            state._fsp--;

            adaptor.addChild(root_0, property582.getTree());

            // Objcm.g:934:30: ( COMMA property )*
            loop149:
            do {
                int alt149=2;
                int LA149_0 = input.LA(1);

                if ( (LA149_0==COMMA) ) {
                    alt149=1;
                }


                switch (alt149) {
            	case 1 :
            	    // Objcm.g:934:31: COMMA property
            	    {
            	    COMMA583=(Token)match(input,COMMA,FOLLOW_COMMA_in_property_prefix4968); 
            	    COMMA583_tree = 
            	    (Object)adaptor.create(COMMA583)
            	    ;
            	    adaptor.addChild(root_0, COMMA583_tree);


            	    pushFollow(FOLLOW_property_in_property_prefix4970);
            	    property584=property();

            	    state._fsp--;

            	    adaptor.addChild(root_0, property584.getTree());

            	    }
            	    break;

            	default :
            	    break loop149;
                }
            } while (true);


            R_BR585=(Token)match(input,R_BR,FOLLOW_R_BR_in_property_prefix4974); 
            R_BR585_tree = 
            (Object)adaptor.create(R_BR585)
            ;
            adaptor.addChild(root_0, R_BR585_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "property_prefix"


    public static class property_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "property"
    // Objcm.g:936:1: property : ( 'readwrite' | 'assign' | 'copy' );
    public final ObjcmParser.property_return property() throws RecognitionException {
        ObjcmParser.property_return retval = new ObjcmParser.property_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set586=null;

        Object set586_tree=null;

        try {
            // Objcm.g:936:9: ( 'readwrite' | 'assign' | 'copy' )
            // Objcm.g:
            {
            root_0 = (Object)adaptor.nil();


            set586=(Token)input.LT(1);

            if ( input.LA(1)==182||input.LA(1)==185||input.LA(1)==196 ) {
                input.consume();
                adaptor.addChild(root_0, 
                (Object)adaptor.create(set586)
                );
                state.errorRecovery=false;
            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "property"


    public static class interface_methods_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "interface_methods"
    // Objcm.g:941:1: interface_methods : ( enum_declaration | interface_method )+ ;
    public final ObjcmParser.interface_methods_return interface_methods() throws RecognitionException {
        ObjcmParser.interface_methods_return retval = new ObjcmParser.interface_methods_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.enum_declaration_return enum_declaration587 =null;

        ObjcmParser.interface_method_return interface_method588 =null;



        try {
            // Objcm.g:942:2: ( ( enum_declaration | interface_method )+ )
            // Objcm.g:942:4: ( enum_declaration | interface_method )+
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:942:4: ( enum_declaration | interface_method )+
            int cnt150=0;
            loop150:
            do {
                int alt150=3;
                int LA150_0 = input.LA(1);

                if ( (LA150_0==ENUM_PREFIX) ) {
                    alt150=1;
                }
                else if ( (LA150_0==L_MINUS||LA150_0==L_PLUS) ) {
                    alt150=2;
                }


                switch (alt150) {
            	case 1 :
            	    // Objcm.g:942:5: enum_declaration
            	    {
            	    pushFollow(FOLLOW_enum_declaration_in_interface_methods5007);
            	    enum_declaration587=enum_declaration();

            	    state._fsp--;

            	    adaptor.addChild(root_0, enum_declaration587.getTree());

            	    }
            	    break;
            	case 2 :
            	    // Objcm.g:942:24: interface_method
            	    {
            	    pushFollow(FOLLOW_interface_method_in_interface_methods5011);
            	    interface_method588=interface_method();

            	    state._fsp--;

            	    adaptor.addChild(root_0, interface_method588.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt150 >= 1 ) break loop150;
                        EarlyExitException eee =
                            new EarlyExitException(150, input);
                        throw eee;
                }
                cnt150++;
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_methods"


    public static class interface_method_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "interface_method"
    // Objcm.g:944:1: interface_method : method_header -> ^( METHOD method_header ) ;
    public final ObjcmParser.interface_method_return interface_method() throws RecognitionException {
        ObjcmParser.interface_method_return retval = new ObjcmParser.interface_method_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_header_return method_header589 =null;


        RewriteRuleSubtreeStream stream_method_header=new RewriteRuleSubtreeStream(adaptor,"rule method_header");
        try {
            // Objcm.g:945:2: ( method_header -> ^( METHOD method_header ) )
            // Objcm.g:945:4: method_header
            {
            pushFollow(FOLLOW_method_header_in_interface_method5025);
            method_header589=method_header();

            state._fsp--;

            stream_method_header.add(method_header589.getTree());

            // AST REWRITE
            // elements: method_header
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 945:18: -> ^( METHOD method_header )
            {
                // Objcm.g:945:21: ^( METHOD method_header )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD, "METHOD")
                , root_1);

                adaptor.addChild(root_1, stream_method_header.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_method"


    public static class method_header_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_header"
    // Objcm.g:947:1: method_header : method_header_body ( SEMICOLON )? ;
    public final ObjcmParser.method_header_return method_header() throws RecognitionException {
        ObjcmParser.method_header_return retval = new ObjcmParser.method_header_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON591=null;
        ObjcmParser.method_header_body_return method_header_body590 =null;


        Object SEMICOLON591_tree=null;

        try {
            // Objcm.g:948:2: ( method_header_body ( SEMICOLON )? )
            // Objcm.g:948:4: method_header_body ( SEMICOLON )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_method_header_body_in_method_header5044);
            method_header_body590=method_header_body();

            state._fsp--;

            adaptor.addChild(root_0, method_header_body590.getTree());

            // Objcm.g:948:23: ( SEMICOLON )?
            int alt151=2;
            int LA151_0 = input.LA(1);

            if ( (LA151_0==SEMICOLON) ) {
                alt151=1;
            }
            switch (alt151) {
                case 1 :
                    // Objcm.g:948:23: SEMICOLON
                    {
                    SEMICOLON591=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_method_header5046); 
                    SEMICOLON591_tree = 
                    (Object)adaptor.create(SEMICOLON591)
                    ;
                    adaptor.addChild(root_0, SEMICOLON591_tree);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_header"


    public static class method_header_body_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_header_body"
    // Objcm.g:950:1: method_header_body : method_modifier_wrapper ( method_type )? name ( method_params )? ( va_args_wrapper )? ;
    public final ObjcmParser.method_header_body_return method_header_body() throws RecognitionException {
        ObjcmParser.method_header_body_return retval = new ObjcmParser.method_header_body_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_modifier_wrapper_return method_modifier_wrapper592 =null;

        ObjcmParser.method_type_return method_type593 =null;

        ObjcmParser.name_return name594 =null;

        ObjcmParser.method_params_return method_params595 =null;

        ObjcmParser.va_args_wrapper_return va_args_wrapper596 =null;



        try {
            // Objcm.g:951:2: ( method_modifier_wrapper ( method_type )? name ( method_params )? ( va_args_wrapper )? )
            // Objcm.g:951:4: method_modifier_wrapper ( method_type )? name ( method_params )? ( va_args_wrapper )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_method_modifier_wrapper_in_method_header_body5056);
            method_modifier_wrapper592=method_modifier_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, method_modifier_wrapper592.getTree());

            // Objcm.g:951:29: ( method_type )?
            int alt152=2;
            int LA152_0 = input.LA(1);

            if ( (LA152_0==L_BR) ) {
                alt152=1;
            }
            switch (alt152) {
                case 1 :
                    // Objcm.g:951:29: method_type
                    {
                    pushFollow(FOLLOW_method_type_in_method_header_body5059);
                    method_type593=method_type();

                    state._fsp--;

                    adaptor.addChild(root_0, method_type593.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_name_in_method_header_body5063);
            name594=name();

            state._fsp--;

            adaptor.addChild(root_0, name594.getTree());

            // Objcm.g:951:49: ( method_params )?
            int alt153=2;
            alt153 = dfa153.predict(input);
            switch (alt153) {
                case 1 :
                    // Objcm.g:951:49: method_params
                    {
                    pushFollow(FOLLOW_method_params_in_method_header_body5066);
                    method_params595=method_params();

                    state._fsp--;

                    adaptor.addChild(root_0, method_params595.getTree());

                    }
                    break;

            }


            // Objcm.g:951:64: ( va_args_wrapper )?
            int alt154=2;
            int LA154_0 = input.LA(1);

            if ( (LA154_0==COMMA) ) {
                alt154=1;
            }
            switch (alt154) {
                case 1 :
                    // Objcm.g:951:64: va_args_wrapper
                    {
                    pushFollow(FOLLOW_va_args_wrapper_in_method_header_body5069);
                    va_args_wrapper596=va_args_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, va_args_wrapper596.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_header_body"


    public static class va_args_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "va_args_wrapper"
    // Objcm.g:953:1: va_args_wrapper : va_args -> ^( VA_ARGS va_args ) ;
    public final ObjcmParser.va_args_wrapper_return va_args_wrapper() throws RecognitionException {
        ObjcmParser.va_args_wrapper_return retval = new ObjcmParser.va_args_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.va_args_return va_args597 =null;


        RewriteRuleSubtreeStream stream_va_args=new RewriteRuleSubtreeStream(adaptor,"rule va_args");
        try {
            // Objcm.g:954:2: ( va_args -> ^( VA_ARGS va_args ) )
            // Objcm.g:954:4: va_args
            {
            pushFollow(FOLLOW_va_args_in_va_args_wrapper5079);
            va_args597=va_args();

            state._fsp--;

            stream_va_args.add(va_args597.getTree());

            // AST REWRITE
            // elements: va_args
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 954:12: -> ^( VA_ARGS va_args )
            {
                // Objcm.g:954:15: ^( VA_ARGS va_args )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(VA_ARGS, "VA_ARGS")
                , root_1);

                adaptor.addChild(root_1, stream_va_args.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "va_args_wrapper"


    public static class va_args_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "va_args"
    // Objcm.g:956:1: va_args : COMMA '...' ( SEMICOLON )? ;
    public final ObjcmParser.va_args_return va_args() throws RecognitionException {
        ObjcmParser.va_args_return retval = new ObjcmParser.va_args_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA598=null;
        Token string_literal599=null;
        Token SEMICOLON600=null;

        Object COMMA598_tree=null;
        Object string_literal599_tree=null;
        Object SEMICOLON600_tree=null;

        try {
            // Objcm.g:956:9: ( COMMA '...' ( SEMICOLON )? )
            // Objcm.g:956:11: COMMA '...' ( SEMICOLON )?
            {
            root_0 = (Object)adaptor.nil();


            COMMA598=(Token)match(input,COMMA,FOLLOW_COMMA_in_va_args5096); 
            COMMA598_tree = 
            (Object)adaptor.create(COMMA598)
            ;
            adaptor.addChild(root_0, COMMA598_tree);


            string_literal599=(Token)match(input,164,FOLLOW_164_in_va_args5099); 
            string_literal599_tree = 
            (Object)adaptor.create(string_literal599)
            ;
            adaptor.addChild(root_0, string_literal599_tree);


            // Objcm.g:956:25: ( SEMICOLON )?
            int alt155=2;
            int LA155_0 = input.LA(1);

            if ( (LA155_0==SEMICOLON) ) {
                alt155=1;
            }
            switch (alt155) {
                case 1 :
                    // Objcm.g:956:25: SEMICOLON
                    {
                    SEMICOLON600=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_va_args5102); 
                    SEMICOLON600_tree = 
                    (Object)adaptor.create(SEMICOLON600)
                    ;
                    adaptor.addChild(root_0, SEMICOLON600_tree);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "va_args"


    public static class method_header_body2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_header_body2"
    // Objcm.g:958:1: method_header_body2 : method_type name ( method_params2 )? ;
    public final ObjcmParser.method_header_body2_return method_header_body2() throws RecognitionException {
        ObjcmParser.method_header_body2_return retval = new ObjcmParser.method_header_body2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_type_return method_type601 =null;

        ObjcmParser.name_return name602 =null;

        ObjcmParser.method_params2_return method_params2603 =null;



        try {
            // Objcm.g:959:2: ( method_type name ( method_params2 )? )
            // Objcm.g:959:4: method_type name ( method_params2 )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_method_type_in_method_header_body25113);
            method_type601=method_type();

            state._fsp--;

            adaptor.addChild(root_0, method_type601.getTree());

            pushFollow(FOLLOW_name_in_method_header_body25115);
            name602=name();

            state._fsp--;

            adaptor.addChild(root_0, name602.getTree());

            // Objcm.g:959:22: ( method_params2 )?
            int alt156=2;
            int LA156_0 = input.LA(1);

            if ( (LA156_0==L_BR) ) {
                alt156=1;
            }
            switch (alt156) {
                case 1 :
                    // Objcm.g:959:22: method_params2
                    {
                    pushFollow(FOLLOW_method_params2_in_method_header_body25118);
                    method_params2603=method_params2();

                    state._fsp--;

                    adaptor.addChild(root_0, method_params2603.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_header_body2"


    public static class method_header_body3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_header_body3"
    // Objcm.g:961:1: method_header_body3 : method_params2 ;
    public final ObjcmParser.method_header_body3_return method_header_body3() throws RecognitionException {
        ObjcmParser.method_header_body3_return retval = new ObjcmParser.method_header_body3_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_params2_return method_params2604 =null;



        try {
            // Objcm.g:962:2: ( method_params2 )
            // Objcm.g:962:4: method_params2
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_method_params2_in_method_header_body35128);
            method_params2604=method_params2();

            state._fsp--;

            adaptor.addChild(root_0, method_params2604.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_header_body3"


    public static class method_modifier_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_modifier_wrapper"
    // Objcm.g:964:1: method_modifier_wrapper : method_modifier -> ^( MODIFIER method_modifier ) ;
    public final ObjcmParser.method_modifier_wrapper_return method_modifier_wrapper() throws RecognitionException {
        ObjcmParser.method_modifier_wrapper_return retval = new ObjcmParser.method_modifier_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_modifier_return method_modifier605 =null;


        RewriteRuleSubtreeStream stream_method_modifier=new RewriteRuleSubtreeStream(adaptor,"rule method_modifier");
        try {
            // Objcm.g:965:2: ( method_modifier -> ^( MODIFIER method_modifier ) )
            // Objcm.g:965:4: method_modifier
            {
            pushFollow(FOLLOW_method_modifier_in_method_modifier_wrapper5137);
            method_modifier605=method_modifier();

            state._fsp--;

            stream_method_modifier.add(method_modifier605.getTree());

            // AST REWRITE
            // elements: method_modifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 965:20: -> ^( MODIFIER method_modifier )
            {
                // Objcm.g:965:23: ^( MODIFIER method_modifier )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(MODIFIER, "MODIFIER")
                , root_1);

                adaptor.addChild(root_1, stream_method_modifier.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_modifier_wrapper"


    public static class method_modifier_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_modifier"
    // Objcm.g:967:1: method_modifier : ( '+' | '-' );
    public final ObjcmParser.method_modifier_return method_modifier() throws RecognitionException {
        ObjcmParser.method_modifier_return retval = new ObjcmParser.method_modifier_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set606=null;

        Object set606_tree=null;

        try {
            // Objcm.g:968:2: ( '+' | '-' )
            // Objcm.g:
            {
            root_0 = (Object)adaptor.nil();


            set606=(Token)input.LT(1);

            if ( input.LA(1)==L_MINUS||input.LA(1)==L_PLUS ) {
                input.consume();
                adaptor.addChild(root_0, 
                (Object)adaptor.create(set606)
                );
                state.errorRecovery=false;
            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_modifier"


    public static class method_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_type"
    // Objcm.g:970:1: method_type : ( L_BR ( STRUCT_PREFIX )? type_internal ( generic )? ( ASTERISK )* R_BR -> ^( TYPE type_internal ) | L_BR ( CONST_PREFIX )? ( known_types )? ( ID )* ( generic )? ( ASTERISK )* R_BR -> ^( TYPE ( ID )+ ) );
    public final ObjcmParser.method_type_return method_type() throws RecognitionException {
        ObjcmParser.method_type_return retval = new ObjcmParser.method_type_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_BR607=null;
        Token STRUCT_PREFIX608=null;
        Token ASTERISK611=null;
        Token R_BR612=null;
        Token L_BR613=null;
        Token CONST_PREFIX614=null;
        Token ID616=null;
        Token ASTERISK618=null;
        Token R_BR619=null;
        ObjcmParser.type_internal_return type_internal609 =null;

        ObjcmParser.generic_return generic610 =null;

        ObjcmParser.known_types_return known_types615 =null;

        ObjcmParser.generic_return generic617 =null;


        Object L_BR607_tree=null;
        Object STRUCT_PREFIX608_tree=null;
        Object ASTERISK611_tree=null;
        Object R_BR612_tree=null;
        Object L_BR613_tree=null;
        Object CONST_PREFIX614_tree=null;
        Object ID616_tree=null;
        Object ASTERISK618_tree=null;
        Object R_BR619_tree=null;
        RewriteRuleTokenStream stream_R_BR=new RewriteRuleTokenStream(adaptor,"token R_BR");
        RewriteRuleTokenStream stream_STRUCT_PREFIX=new RewriteRuleTokenStream(adaptor,"token STRUCT_PREFIX");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleTokenStream stream_L_BR=new RewriteRuleTokenStream(adaptor,"token L_BR");
        RewriteRuleTokenStream stream_ASTERISK=new RewriteRuleTokenStream(adaptor,"token ASTERISK");
        RewriteRuleTokenStream stream_CONST_PREFIX=new RewriteRuleTokenStream(adaptor,"token CONST_PREFIX");
        RewriteRuleSubtreeStream stream_generic=new RewriteRuleSubtreeStream(adaptor,"rule generic");
        RewriteRuleSubtreeStream stream_type_internal=new RewriteRuleSubtreeStream(adaptor,"rule type_internal");
        RewriteRuleSubtreeStream stream_known_types=new RewriteRuleSubtreeStream(adaptor,"rule known_types");
        try {
            // Objcm.g:971:2: ( L_BR ( STRUCT_PREFIX )? type_internal ( generic )? ( ASTERISK )* R_BR -> ^( TYPE type_internal ) | L_BR ( CONST_PREFIX )? ( known_types )? ( ID )* ( generic )? ( ASTERISK )* R_BR -> ^( TYPE ( ID )+ ) )
            int alt165=2;
            int LA165_0 = input.LA(1);

            if ( (LA165_0==L_BR) ) {
                switch ( input.LA(2) ) {
                case STRUCT_PREFIX:
                    {
                    alt165=1;
                    }
                    break;
                case VOID:
                    {
                    switch ( input.LA(3) ) {
                    case L_KBR:
                        {
                        alt165=1;
                        }
                        break;
                    case L_LESS:
                        {
                        int LA165_11 = input.LA(4);

                        if ( (LA165_11==ID) ) {
                            alt165=1;
                        }
                        else {
                            NoViableAltException nvae =
                                new NoViableAltException("", 165, 11, input);

                            throw nvae;

                        }
                        }
                        break;
                    case ASTERISK:
                        {
                        int LA165_12 = input.LA(4);

                        if ( (LA165_12==R_BR) ) {
                            alt165=1;
                        }
                        else if ( (LA165_12==ASTERISK) ) {
                            alt165=1;
                        }
                        else {
                            NoViableAltException nvae =
                                new NoViableAltException("", 165, 12, input);

                            throw nvae;

                        }
                        }
                        break;
                    case R_BR:
                        {
                        alt165=1;
                        }
                        break;
                    case ID:
                        {
                        alt165=2;
                        }
                        break;
                    default:
                        NoViableAltException nvae =
                            new NoViableAltException("", 165, 3, input);

                        throw nvae;

                    }

                    }
                    break;
                case ASTERISK:
                case CONST_PREFIX:
                case L_LESS:
                case R_BR:
                case 201:
                    {
                    alt165=2;
                    }
                    break;
                case ID:
                    {
                    switch ( input.LA(3) ) {
                    case L_KBR:
                        {
                        alt165=1;
                        }
                        break;
                    case L_LESS:
                        {
                        int LA165_16 = input.LA(4);

                        if ( (LA165_16==ID) ) {
                            alt165=1;
                        }
                        else {
                            NoViableAltException nvae =
                                new NoViableAltException("", 165, 16, input);

                            throw nvae;

                        }
                        }
                        break;
                    case ASTERISK:
                        {
                        int LA165_17 = input.LA(4);

                        if ( (LA165_17==R_BR) ) {
                            alt165=1;
                        }
                        else if ( (LA165_17==ASTERISK) ) {
                            alt165=1;
                        }
                        else {
                            NoViableAltException nvae =
                                new NoViableAltException("", 165, 17, input);

                            throw nvae;

                        }
                        }
                        break;
                    case R_BR:
                        {
                        alt165=1;
                        }
                        break;
                    case ID:
                        {
                        alt165=2;
                        }
                        break;
                    default:
                        NoViableAltException nvae =
                            new NoViableAltException("", 165, 5, input);

                        throw nvae;

                    }

                    }
                    break;
                default:
                    NoViableAltException nvae =
                        new NoViableAltException("", 165, 1, input);

                    throw nvae;

                }

            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 165, 0, input);

                throw nvae;

            }
            switch (alt165) {
                case 1 :
                    // Objcm.g:971:4: L_BR ( STRUCT_PREFIX )? type_internal ( generic )? ( ASTERISK )* R_BR
                    {
                    L_BR607=(Token)match(input,L_BR,FOLLOW_L_BR_in_method_type5169);  
                    stream_L_BR.add(L_BR607);


                    // Objcm.g:971:10: ( STRUCT_PREFIX )?
                    int alt157=2;
                    int LA157_0 = input.LA(1);

                    if ( (LA157_0==STRUCT_PREFIX) ) {
                        alt157=1;
                    }
                    switch (alt157) {
                        case 1 :
                            // Objcm.g:971:10: STRUCT_PREFIX
                            {
                            STRUCT_PREFIX608=(Token)match(input,STRUCT_PREFIX,FOLLOW_STRUCT_PREFIX_in_method_type5172);  
                            stream_STRUCT_PREFIX.add(STRUCT_PREFIX608);


                            }
                            break;

                    }


                    pushFollow(FOLLOW_type_internal_in_method_type5175);
                    type_internal609=type_internal();

                    state._fsp--;

                    stream_type_internal.add(type_internal609.getTree());

                    // Objcm.g:971:40: ( generic )?
                    int alt158=2;
                    int LA158_0 = input.LA(1);

                    if ( (LA158_0==L_LESS) ) {
                        alt158=1;
                    }
                    switch (alt158) {
                        case 1 :
                            // Objcm.g:971:40: generic
                            {
                            pushFollow(FOLLOW_generic_in_method_type5178);
                            generic610=generic();

                            state._fsp--;

                            stream_generic.add(generic610.getTree());

                            }
                            break;

                    }


                    // Objcm.g:971:49: ( ASTERISK )*
                    loop159:
                    do {
                        int alt159=2;
                        int LA159_0 = input.LA(1);

                        if ( (LA159_0==ASTERISK) ) {
                            alt159=1;
                        }


                        switch (alt159) {
                    	case 1 :
                    	    // Objcm.g:971:49: ASTERISK
                    	    {
                    	    ASTERISK611=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_method_type5181);  
                    	    stream_ASTERISK.add(ASTERISK611);


                    	    }
                    	    break;

                    	default :
                    	    break loop159;
                        }
                    } while (true);


                    R_BR612=(Token)match(input,R_BR,FOLLOW_R_BR_in_method_type5184);  
                    stream_R_BR.add(R_BR612);


                    // AST REWRITE
                    // elements: type_internal
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 971:64: -> ^( TYPE type_internal )
                    {
                        // Objcm.g:971:67: ^( TYPE type_internal )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(TYPE, "TYPE")
                        , root_1);

                        adaptor.addChild(root_1, stream_type_internal.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 2 :
                    // Objcm.g:972:5: L_BR ( CONST_PREFIX )? ( known_types )? ( ID )* ( generic )? ( ASTERISK )* R_BR
                    {
                    L_BR613=(Token)match(input,L_BR,FOLLOW_L_BR_in_method_type5198);  
                    stream_L_BR.add(L_BR613);


                    // Objcm.g:972:11: ( CONST_PREFIX )?
                    int alt160=2;
                    int LA160_0 = input.LA(1);

                    if ( (LA160_0==CONST_PREFIX) ) {
                        alt160=1;
                    }
                    switch (alt160) {
                        case 1 :
                            // Objcm.g:972:11: CONST_PREFIX
                            {
                            CONST_PREFIX614=(Token)match(input,CONST_PREFIX,FOLLOW_CONST_PREFIX_in_method_type5201);  
                            stream_CONST_PREFIX.add(CONST_PREFIX614);


                            }
                            break;

                    }


                    // Objcm.g:972:25: ( known_types )?
                    int alt161=2;
                    int LA161_0 = input.LA(1);

                    if ( (LA161_0==VOID||LA161_0==201) ) {
                        alt161=1;
                    }
                    switch (alt161) {
                        case 1 :
                            // Objcm.g:972:25: known_types
                            {
                            pushFollow(FOLLOW_known_types_in_method_type5204);
                            known_types615=known_types();

                            state._fsp--;

                            stream_known_types.add(known_types615.getTree());

                            }
                            break;

                    }


                    // Objcm.g:972:38: ( ID )*
                    loop162:
                    do {
                        int alt162=2;
                        int LA162_0 = input.LA(1);

                        if ( (LA162_0==ID) ) {
                            alt162=1;
                        }


                        switch (alt162) {
                    	case 1 :
                    	    // Objcm.g:972:38: ID
                    	    {
                    	    ID616=(Token)match(input,ID,FOLLOW_ID_in_method_type5207);  
                    	    stream_ID.add(ID616);


                    	    }
                    	    break;

                    	default :
                    	    break loop162;
                        }
                    } while (true);


                    // Objcm.g:972:42: ( generic )?
                    int alt163=2;
                    int LA163_0 = input.LA(1);

                    if ( (LA163_0==L_LESS) ) {
                        alt163=1;
                    }
                    switch (alt163) {
                        case 1 :
                            // Objcm.g:972:42: generic
                            {
                            pushFollow(FOLLOW_generic_in_method_type5210);
                            generic617=generic();

                            state._fsp--;

                            stream_generic.add(generic617.getTree());

                            }
                            break;

                    }


                    // Objcm.g:972:51: ( ASTERISK )*
                    loop164:
                    do {
                        int alt164=2;
                        int LA164_0 = input.LA(1);

                        if ( (LA164_0==ASTERISK) ) {
                            alt164=1;
                        }


                        switch (alt164) {
                    	case 1 :
                    	    // Objcm.g:972:51: ASTERISK
                    	    {
                    	    ASTERISK618=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_method_type5213);  
                    	    stream_ASTERISK.add(ASTERISK618);


                    	    }
                    	    break;

                    	default :
                    	    break loop164;
                        }
                    } while (true);


                    R_BR619=(Token)match(input,R_BR,FOLLOW_R_BR_in_method_type5216);  
                    stream_R_BR.add(R_BR619);


                    // AST REWRITE
                    // elements: ID
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 972:66: -> ^( TYPE ( ID )+ )
                    {
                        // Objcm.g:972:69: ^( TYPE ( ID )+ )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(TYPE, "TYPE")
                        , root_1);

                        if ( !(stream_ID.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_ID.hasNext() ) {
                            adaptor.addChild(root_1, 
                            stream_ID.nextNode()
                            );

                        }
                        stream_ID.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_type"


    public static class type_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_internal"
    // Objcm.g:975:1: type_internal : type_internal1 ( L_KBR R_KBR )? ;
    public final ObjcmParser.type_internal_return type_internal() throws RecognitionException {
        ObjcmParser.type_internal_return retval = new ObjcmParser.type_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_KBR621=null;
        Token R_KBR622=null;
        ObjcmParser.type_internal1_return type_internal1620 =null;


        Object L_KBR621_tree=null;
        Object R_KBR622_tree=null;

        try {
            // Objcm.g:976:2: ( type_internal1 ( L_KBR R_KBR )? )
            // Objcm.g:976:4: type_internal1 ( L_KBR R_KBR )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_type_internal1_in_type_internal5241);
            type_internal1620=type_internal1();

            state._fsp--;

            adaptor.addChild(root_0, type_internal1620.getTree());

            // Objcm.g:976:19: ( L_KBR R_KBR )?
            int alt166=2;
            int LA166_0 = input.LA(1);

            if ( (LA166_0==L_KBR) ) {
                int LA166_1 = input.LA(2);

                if ( (LA166_1==R_KBR) ) {
                    alt166=1;
                }
            }
            switch (alt166) {
                case 1 :
                    // Objcm.g:976:20: L_KBR R_KBR
                    {
                    L_KBR621=(Token)match(input,L_KBR,FOLLOW_L_KBR_in_type_internal5244); 
                    L_KBR621_tree = 
                    (Object)adaptor.create(L_KBR621)
                    ;
                    adaptor.addChild(root_0, L_KBR621_tree);


                    R_KBR622=(Token)match(input,R_KBR,FOLLOW_R_KBR_in_type_internal5247); 
                    R_KBR622_tree = 
                    (Object)adaptor.create(R_KBR622)
                    ;
                    adaptor.addChild(root_0, R_KBR622_tree);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_internal"


    public static class type_internal1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_internal1"
    // Objcm.g:979:1: type_internal1 : ( VOID | ID );
    public final ObjcmParser.type_internal1_return type_internal1() throws RecognitionException {
        ObjcmParser.type_internal1_return retval = new ObjcmParser.type_internal1_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set623=null;

        Object set623_tree=null;

        try {
            // Objcm.g:980:2: ( VOID | ID )
            // Objcm.g:
            {
            root_0 = (Object)adaptor.nil();


            set623=(Token)input.LT(1);

            if ( input.LA(1)==ID||input.LA(1)==VOID ) {
                input.consume();
                adaptor.addChild(root_0, 
                (Object)adaptor.create(set623)
                );
                state.errorRecovery=false;
            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_internal1"


    public static class generic_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "generic"
    // Objcm.g:984:1: generic : L_LESS generic_internal L_MORE -> ^( GENERIC generic_internal ) ;
    public final ObjcmParser.generic_return generic() throws RecognitionException {
        ObjcmParser.generic_return retval = new ObjcmParser.generic_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_LESS624=null;
        Token L_MORE626=null;
        ObjcmParser.generic_internal_return generic_internal625 =null;


        Object L_LESS624_tree=null;
        Object L_MORE626_tree=null;
        RewriteRuleTokenStream stream_L_MORE=new RewriteRuleTokenStream(adaptor,"token L_MORE");
        RewriteRuleTokenStream stream_L_LESS=new RewriteRuleTokenStream(adaptor,"token L_LESS");
        RewriteRuleSubtreeStream stream_generic_internal=new RewriteRuleSubtreeStream(adaptor,"rule generic_internal");
        try {
            // Objcm.g:984:8: ( L_LESS generic_internal L_MORE -> ^( GENERIC generic_internal ) )
            // Objcm.g:984:11: L_LESS generic_internal L_MORE
            {
            L_LESS624=(Token)match(input,L_LESS,FOLLOW_L_LESS_in_generic5281);  
            stream_L_LESS.add(L_LESS624);


            pushFollow(FOLLOW_generic_internal_in_generic5283);
            generic_internal625=generic_internal();

            state._fsp--;

            stream_generic_internal.add(generic_internal625.getTree());

            L_MORE626=(Token)match(input,L_MORE,FOLLOW_L_MORE_in_generic5285);  
            stream_L_MORE.add(L_MORE626);


            // AST REWRITE
            // elements: generic_internal
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 984:42: -> ^( GENERIC generic_internal )
            {
                // Objcm.g:984:45: ^( GENERIC generic_internal )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(GENERIC, "GENERIC")
                , root_1);

                adaptor.addChild(root_1, stream_generic_internal.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "generic"


    public static class generic_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "generic_internal"
    // Objcm.g:986:1: generic_internal : ID ( ASTERISK )* ( COMMA ID ( ASTERISK )* )* ;
    public final ObjcmParser.generic_internal_return generic_internal() throws RecognitionException {
        ObjcmParser.generic_internal_return retval = new ObjcmParser.generic_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID627=null;
        Token ASTERISK628=null;
        Token COMMA629=null;
        Token ID630=null;
        Token ASTERISK631=null;

        Object ID627_tree=null;
        Object ASTERISK628_tree=null;
        Object COMMA629_tree=null;
        Object ID630_tree=null;
        Object ASTERISK631_tree=null;

        try {
            // Objcm.g:987:2: ( ID ( ASTERISK )* ( COMMA ID ( ASTERISK )* )* )
            // Objcm.g:987:5: ID ( ASTERISK )* ( COMMA ID ( ASTERISK )* )*
            {
            root_0 = (Object)adaptor.nil();


            ID627=(Token)match(input,ID,FOLLOW_ID_in_generic_internal5304); 
            ID627_tree = 
            (Object)adaptor.create(ID627)
            ;
            adaptor.addChild(root_0, ID627_tree);


            // Objcm.g:987:8: ( ASTERISK )*
            loop167:
            do {
                int alt167=2;
                int LA167_0 = input.LA(1);

                if ( (LA167_0==ASTERISK) ) {
                    alt167=1;
                }


                switch (alt167) {
            	case 1 :
            	    // Objcm.g:987:8: ASTERISK
            	    {
            	    ASTERISK628=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_generic_internal5306); 
            	    ASTERISK628_tree = 
            	    (Object)adaptor.create(ASTERISK628)
            	    ;
            	    adaptor.addChild(root_0, ASTERISK628_tree);


            	    }
            	    break;

            	default :
            	    break loop167;
                }
            } while (true);


            // Objcm.g:987:18: ( COMMA ID ( ASTERISK )* )*
            loop169:
            do {
                int alt169=2;
                int LA169_0 = input.LA(1);

                if ( (LA169_0==COMMA) ) {
                    alt169=1;
                }


                switch (alt169) {
            	case 1 :
            	    // Objcm.g:987:19: COMMA ID ( ASTERISK )*
            	    {
            	    COMMA629=(Token)match(input,COMMA,FOLLOW_COMMA_in_generic_internal5310); 
            	    COMMA629_tree = 
            	    (Object)adaptor.create(COMMA629)
            	    ;
            	    adaptor.addChild(root_0, COMMA629_tree);


            	    ID630=(Token)match(input,ID,FOLLOW_ID_in_generic_internal5313); 
            	    ID630_tree = 
            	    (Object)adaptor.create(ID630)
            	    ;
            	    adaptor.addChild(root_0, ID630_tree);


            	    // Objcm.g:987:30: ( ASTERISK )*
            	    loop168:
            	    do {
            	        int alt168=2;
            	        int LA168_0 = input.LA(1);

            	        if ( (LA168_0==ASTERISK) ) {
            	            alt168=1;
            	        }


            	        switch (alt168) {
            	    	case 1 :
            	    	    // Objcm.g:987:30: ASTERISK
            	    	    {
            	    	    ASTERISK631=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_generic_internal5316); 
            	    	    ASTERISK631_tree = 
            	    	    (Object)adaptor.create(ASTERISK631)
            	    	    ;
            	    	    adaptor.addChild(root_0, ASTERISK631_tree);


            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop168;
            	        }
            	    } while (true);


            	    }
            	    break;

            	default :
            	    break loop169;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "generic_internal"


    public static class method_params2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_params2"
    // Objcm.g:989:1: method_params2 : L_BR method_param_wrapper2 ( COMMA method_param_wrapper2 )* R_BR ;
    public final ObjcmParser.method_params2_return method_params2() throws RecognitionException {
        ObjcmParser.method_params2_return retval = new ObjcmParser.method_params2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_BR632=null;
        Token COMMA634=null;
        Token R_BR636=null;
        ObjcmParser.method_param_wrapper2_return method_param_wrapper2633 =null;

        ObjcmParser.method_param_wrapper2_return method_param_wrapper2635 =null;


        Object L_BR632_tree=null;
        Object COMMA634_tree=null;
        Object R_BR636_tree=null;

        try {
            // Objcm.g:990:2: ( L_BR method_param_wrapper2 ( COMMA method_param_wrapper2 )* R_BR )
            // Objcm.g:990:4: L_BR method_param_wrapper2 ( COMMA method_param_wrapper2 )* R_BR
            {
            root_0 = (Object)adaptor.nil();


            L_BR632=(Token)match(input,L_BR,FOLLOW_L_BR_in_method_params25328); 
            L_BR632_tree = 
            (Object)adaptor.create(L_BR632)
            ;
            adaptor.addChild(root_0, L_BR632_tree);


            pushFollow(FOLLOW_method_param_wrapper2_in_method_params25331);
            method_param_wrapper2633=method_param_wrapper2();

            state._fsp--;

            adaptor.addChild(root_0, method_param_wrapper2633.getTree());

            // Objcm.g:990:33: ( COMMA method_param_wrapper2 )*
            loop170:
            do {
                int alt170=2;
                int LA170_0 = input.LA(1);

                if ( (LA170_0==COMMA) ) {
                    alt170=1;
                }


                switch (alt170) {
            	case 1 :
            	    // Objcm.g:990:34: COMMA method_param_wrapper2
            	    {
            	    COMMA634=(Token)match(input,COMMA,FOLLOW_COMMA_in_method_params25335); 
            	    COMMA634_tree = 
            	    (Object)adaptor.create(COMMA634)
            	    ;
            	    adaptor.addChild(root_0, COMMA634_tree);


            	    pushFollow(FOLLOW_method_param_wrapper2_in_method_params25338);
            	    method_param_wrapper2635=method_param_wrapper2();

            	    state._fsp--;

            	    adaptor.addChild(root_0, method_param_wrapper2635.getTree());

            	    }
            	    break;

            	default :
            	    break loop170;
                }
            } while (true);


            R_BR636=(Token)match(input,R_BR,FOLLOW_R_BR_in_method_params25342); 
            R_BR636_tree = 
            (Object)adaptor.create(R_BR636)
            ;
            adaptor.addChild(root_0, R_BR636_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_params2"


    public static class method_param_wrapper2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_param_wrapper2"
    // Objcm.g:993:1: method_param_wrapper2 : method_param2 -> ^( PARAM method_param2 ) ;
    public final ObjcmParser.method_param_wrapper2_return method_param_wrapper2() throws RecognitionException {
        ObjcmParser.method_param_wrapper2_return retval = new ObjcmParser.method_param_wrapper2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_param2_return method_param2637 =null;


        RewriteRuleSubtreeStream stream_method_param2=new RewriteRuleSubtreeStream(adaptor,"rule method_param2");
        try {
            // Objcm.g:994:2: ( method_param2 -> ^( PARAM method_param2 ) )
            // Objcm.g:994:4: method_param2
            {
            pushFollow(FOLLOW_method_param2_in_method_param_wrapper25353);
            method_param2637=method_param2();

            state._fsp--;

            stream_method_param2.add(method_param2637.getTree());

            // AST REWRITE
            // elements: method_param2
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 994:18: -> ^( PARAM method_param2 )
            {
                // Objcm.g:994:21: ^( PARAM method_param2 )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PARAM, "PARAM")
                , root_1);

                adaptor.addChild(root_1, stream_method_param2.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_param_wrapper2"


    public static class method_param2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_param2"
    // Objcm.g:996:1: method_param2 : ( CONST_PREFIX )? ( ENUM_PREFIX )? ( STRUCT_PREFIX )? ( 'unsigned' )? field_type ( name )? ( indexed )? ;
    public final ObjcmParser.method_param2_return method_param2() throws RecognitionException {
        ObjcmParser.method_param2_return retval = new ObjcmParser.method_param2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token CONST_PREFIX638=null;
        Token ENUM_PREFIX639=null;
        Token STRUCT_PREFIX640=null;
        Token string_literal641=null;
        ObjcmParser.field_type_return field_type642 =null;

        ObjcmParser.name_return name643 =null;

        ObjcmParser.indexed_return indexed644 =null;


        Object CONST_PREFIX638_tree=null;
        Object ENUM_PREFIX639_tree=null;
        Object STRUCT_PREFIX640_tree=null;
        Object string_literal641_tree=null;

        try {
            // Objcm.g:997:2: ( ( CONST_PREFIX )? ( ENUM_PREFIX )? ( STRUCT_PREFIX )? ( 'unsigned' )? field_type ( name )? ( indexed )? )
            // Objcm.g:997:4: ( CONST_PREFIX )? ( ENUM_PREFIX )? ( STRUCT_PREFIX )? ( 'unsigned' )? field_type ( name )? ( indexed )?
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:997:4: ( CONST_PREFIX )?
            int alt171=2;
            int LA171_0 = input.LA(1);

            if ( (LA171_0==CONST_PREFIX) ) {
                alt171=1;
            }
            switch (alt171) {
                case 1 :
                    // Objcm.g:997:4: CONST_PREFIX
                    {
                    CONST_PREFIX638=(Token)match(input,CONST_PREFIX,FOLLOW_CONST_PREFIX_in_method_param25371); 
                    CONST_PREFIX638_tree = 
                    (Object)adaptor.create(CONST_PREFIX638)
                    ;
                    adaptor.addChild(root_0, CONST_PREFIX638_tree);


                    }
                    break;

            }


            // Objcm.g:997:18: ( ENUM_PREFIX )?
            int alt172=2;
            int LA172_0 = input.LA(1);

            if ( (LA172_0==ENUM_PREFIX) ) {
                alt172=1;
            }
            switch (alt172) {
                case 1 :
                    // Objcm.g:997:18: ENUM_PREFIX
                    {
                    ENUM_PREFIX639=(Token)match(input,ENUM_PREFIX,FOLLOW_ENUM_PREFIX_in_method_param25374); 
                    ENUM_PREFIX639_tree = 
                    (Object)adaptor.create(ENUM_PREFIX639)
                    ;
                    adaptor.addChild(root_0, ENUM_PREFIX639_tree);


                    }
                    break;

            }


            // Objcm.g:997:31: ( STRUCT_PREFIX )?
            int alt173=2;
            int LA173_0 = input.LA(1);

            if ( (LA173_0==STRUCT_PREFIX) ) {
                alt173=1;
            }
            switch (alt173) {
                case 1 :
                    // Objcm.g:997:31: STRUCT_PREFIX
                    {
                    STRUCT_PREFIX640=(Token)match(input,STRUCT_PREFIX,FOLLOW_STRUCT_PREFIX_in_method_param25377); 
                    STRUCT_PREFIX640_tree = 
                    (Object)adaptor.create(STRUCT_PREFIX640)
                    ;
                    adaptor.addChild(root_0, STRUCT_PREFIX640_tree);


                    }
                    break;

            }


            // Objcm.g:997:46: ( 'unsigned' )?
            int alt174=2;
            int LA174_0 = input.LA(1);

            if ( (LA174_0==201) ) {
                alt174=1;
            }
            switch (alt174) {
                case 1 :
                    // Objcm.g:997:46: 'unsigned'
                    {
                    string_literal641=(Token)match(input,201,FOLLOW_201_in_method_param25380); 
                    string_literal641_tree = 
                    (Object)adaptor.create(string_literal641)
                    ;
                    adaptor.addChild(root_0, string_literal641_tree);


                    }
                    break;

            }


            pushFollow(FOLLOW_field_type_in_method_param25383);
            field_type642=field_type();

            state._fsp--;

            adaptor.addChild(root_0, field_type642.getTree());

            // Objcm.g:997:69: ( name )?
            int alt175=2;
            int LA175_0 = input.LA(1);

            if ( (LA175_0==ID||LA175_0==182||LA175_0==185||LA175_0==193||LA175_0==196) ) {
                alt175=1;
            }
            switch (alt175) {
                case 1 :
                    // Objcm.g:997:69: name
                    {
                    pushFollow(FOLLOW_name_in_method_param25385);
                    name643=name();

                    state._fsp--;

                    adaptor.addChild(root_0, name643.getTree());

                    }
                    break;

            }


            // Objcm.g:997:75: ( indexed )?
            int alt176=2;
            int LA176_0 = input.LA(1);

            if ( (LA176_0==L_KBR) ) {
                alt176=1;
            }
            switch (alt176) {
                case 1 :
                    // Objcm.g:997:75: indexed
                    {
                    pushFollow(FOLLOW_indexed_in_method_param25388);
                    indexed644=indexed();

                    state._fsp--;

                    adaptor.addChild(root_0, indexed644.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_param2"


    public static class indexed_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "indexed"
    // Objcm.g:999:1: indexed : L_KBR ( NUMBER )? R_KBR ;
    public final ObjcmParser.indexed_return indexed() throws RecognitionException {
        ObjcmParser.indexed_return retval = new ObjcmParser.indexed_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_KBR645=null;
        Token NUMBER646=null;
        Token R_KBR647=null;

        Object L_KBR645_tree=null;
        Object NUMBER646_tree=null;
        Object R_KBR647_tree=null;

        try {
            // Objcm.g:999:9: ( L_KBR ( NUMBER )? R_KBR )
            // Objcm.g:999:11: L_KBR ( NUMBER )? R_KBR
            {
            root_0 = (Object)adaptor.nil();


            L_KBR645=(Token)match(input,L_KBR,FOLLOW_L_KBR_in_indexed5398); 
            L_KBR645_tree = 
            (Object)adaptor.create(L_KBR645)
            ;
            adaptor.addChild(root_0, L_KBR645_tree);


            // Objcm.g:999:17: ( NUMBER )?
            int alt177=2;
            int LA177_0 = input.LA(1);

            if ( (LA177_0==NUMBER) ) {
                alt177=1;
            }
            switch (alt177) {
                case 1 :
                    // Objcm.g:999:17: NUMBER
                    {
                    NUMBER646=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_indexed5400); 
                    NUMBER646_tree = 
                    (Object)adaptor.create(NUMBER646)
                    ;
                    adaptor.addChild(root_0, NUMBER646_tree);


                    }
                    break;

            }


            R_KBR647=(Token)match(input,R_KBR,FOLLOW_R_KBR_in_indexed5403); 
            R_KBR647_tree = 
            (Object)adaptor.create(R_KBR647)
            ;
            adaptor.addChild(root_0, R_KBR647_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "indexed"


    public static class method_params_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_params"
    // Objcm.g:1001:1: method_params : ( method_param )+ -> ( ^( PARAM method_param ) )+ ;
    public final ObjcmParser.method_params_return method_params() throws RecognitionException {
        ObjcmParser.method_params_return retval = new ObjcmParser.method_params_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_param_return method_param648 =null;


        RewriteRuleSubtreeStream stream_method_param=new RewriteRuleSubtreeStream(adaptor,"rule method_param");
        try {
            // Objcm.g:1002:2: ( ( method_param )+ -> ( ^( PARAM method_param ) )+ )
            // Objcm.g:1002:4: ( method_param )+
            {
            // Objcm.g:1002:4: ( method_param )+
            int cnt178=0;
            loop178:
            do {
                int alt178=2;
                alt178 = dfa178.predict(input);
                switch (alt178) {
            	case 1 :
            	    // Objcm.g:1002:4: method_param
            	    {
            	    pushFollow(FOLLOW_method_param_in_method_params5413);
            	    method_param648=method_param();

            	    state._fsp--;

            	    stream_method_param.add(method_param648.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt178 >= 1 ) break loop178;
                        EarlyExitException eee =
                            new EarlyExitException(178, input);
                        throw eee;
                }
                cnt178++;
            } while (true);


            // AST REWRITE
            // elements: method_param
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1002:18: -> ( ^( PARAM method_param ) )+
            {
                if ( !(stream_method_param.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_method_param.hasNext() ) {
                    // Objcm.g:1002:21: ^( PARAM method_param )
                    {
                    Object root_1 = (Object)adaptor.nil();
                    root_1 = (Object)adaptor.becomeRoot(
                    (Object)adaptor.create(PARAM, "PARAM")
                    , root_1);

                    adaptor.addChild(root_1, stream_method_param.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_method_param.reset();

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_params"


    public static class method_param_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_param"
    // Objcm.g:1004:1: method_param : ( ( prefix )? | COLON ) ( method_type )? name ;
    public final ObjcmParser.method_param_return method_param() throws RecognitionException {
        ObjcmParser.method_param_return retval = new ObjcmParser.method_param_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COLON650=null;
        ObjcmParser.prefix_return prefix649 =null;

        ObjcmParser.method_type_return method_type651 =null;

        ObjcmParser.name_return name652 =null;


        Object COLON650_tree=null;

        try {
            // Objcm.g:1005:2: ( ( ( prefix )? | COLON ) ( method_type )? name )
            // Objcm.g:1005:4: ( ( prefix )? | COLON ) ( method_type )? name
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:1005:4: ( ( prefix )? | COLON )
            int alt180=2;
            int LA180_0 = input.LA(1);

            if ( (LA180_0==ID||LA180_0==L_BR||LA180_0==182||LA180_0==185||LA180_0==193||LA180_0==196) ) {
                alt180=1;
            }
            else if ( (LA180_0==COLON) ) {
                alt180=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 180, 0, input);

                throw nvae;

            }
            switch (alt180) {
                case 1 :
                    // Objcm.g:1005:5: ( prefix )?
                    {
                    // Objcm.g:1005:5: ( prefix )?
                    int alt179=2;
                    int LA179_0 = input.LA(1);

                    if ( (LA179_0==ID) ) {
                        int LA179_1 = input.LA(2);

                        if ( (LA179_1==COLON) ) {
                            alt179=1;
                        }
                    }
                    switch (alt179) {
                        case 1 :
                            // Objcm.g:1005:5: prefix
                            {
                            pushFollow(FOLLOW_prefix_in_method_param5435);
                            prefix649=prefix();

                            state._fsp--;

                            adaptor.addChild(root_0, prefix649.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // Objcm.g:1005:15: COLON
                    {
                    COLON650=(Token)match(input,COLON,FOLLOW_COLON_in_method_param5440); 
                    COLON650_tree = 
                    (Object)adaptor.create(COLON650)
                    ;
                    adaptor.addChild(root_0, COLON650_tree);


                    }
                    break;

            }


            // Objcm.g:1005:22: ( method_type )?
            int alt181=2;
            int LA181_0 = input.LA(1);

            if ( (LA181_0==L_BR) ) {
                alt181=1;
            }
            switch (alt181) {
                case 1 :
                    // Objcm.g:1005:22: method_type
                    {
                    pushFollow(FOLLOW_method_type_in_method_param5443);
                    method_type651=method_type();

                    state._fsp--;

                    adaptor.addChild(root_0, method_type651.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_name_in_method_param5446);
            name652=name();

            state._fsp--;

            adaptor.addChild(root_0, name652.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_param"


    public static class prefix_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "prefix"
    // Objcm.g:1008:1: prefix : ID COLON -> ^( PREFIX ID COLON ) ;
    public final ObjcmParser.prefix_return prefix() throws RecognitionException {
        ObjcmParser.prefix_return retval = new ObjcmParser.prefix_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID653=null;
        Token COLON654=null;

        Object ID653_tree=null;
        Object COLON654_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // Objcm.g:1008:8: ( ID COLON -> ^( PREFIX ID COLON ) )
            // Objcm.g:1008:10: ID COLON
            {
            ID653=(Token)match(input,ID,FOLLOW_ID_in_prefix5458);  
            stream_ID.add(ID653);


            COLON654=(Token)match(input,COLON,FOLLOW_COLON_in_prefix5460);  
            stream_COLON.add(COLON654);


            // AST REWRITE
            // elements: ID, COLON
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1008:19: -> ^( PREFIX ID COLON )
            {
                // Objcm.g:1008:22: ^( PREFIX ID COLON )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PREFIX, "PREFIX")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                adaptor.addChild(root_1, 
                stream_COLON.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "prefix"


    public static class incomplete_prefix_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "incomplete_prefix"
    // Objcm.g:1010:1: incomplete_prefix : COLON -> ^( INCOMPLETE_PREFIX COLON ) ;
    public final ObjcmParser.incomplete_prefix_return incomplete_prefix() throws RecognitionException {
        ObjcmParser.incomplete_prefix_return retval = new ObjcmParser.incomplete_prefix_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COLON655=null;

        Object COLON655_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");

        try {
            // Objcm.g:1011:2: ( COLON -> ^( INCOMPLETE_PREFIX COLON ) )
            // Objcm.g:1011:4: COLON
            {
            COLON655=(Token)match(input,COLON,FOLLOW_COLON_in_incomplete_prefix5479);  
            stream_COLON.add(COLON655);


            // AST REWRITE
            // elements: COLON
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1011:10: -> ^( INCOMPLETE_PREFIX COLON )
            {
                // Objcm.g:1011:13: ^( INCOMPLETE_PREFIX COLON )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(INCOMPLETE_PREFIX, "INCOMPLETE_PREFIX")
                , root_1);

                adaptor.addChild(root_1, 
                stream_COLON.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "incomplete_prefix"


    public static class typedef_struct_declaration_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typedef_struct_declaration_wrapper"
    // Objcm.g:1018:1: typedef_struct_declaration_wrapper : typedef_struct_declaration -> ^( TYPEDEF_STRUCT typedef_struct_declaration ) ;
    public final ObjcmParser.typedef_struct_declaration_wrapper_return typedef_struct_declaration_wrapper() throws RecognitionException {
        ObjcmParser.typedef_struct_declaration_wrapper_return retval = new ObjcmParser.typedef_struct_declaration_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.typedef_struct_declaration_return typedef_struct_declaration656 =null;


        RewriteRuleSubtreeStream stream_typedef_struct_declaration=new RewriteRuleSubtreeStream(adaptor,"rule typedef_struct_declaration");
        try {
            // Objcm.g:1019:2: ( typedef_struct_declaration -> ^( TYPEDEF_STRUCT typedef_struct_declaration ) )
            // Objcm.g:1019:4: typedef_struct_declaration
            {
            pushFollow(FOLLOW_typedef_struct_declaration_in_typedef_struct_declaration_wrapper5501);
            typedef_struct_declaration656=typedef_struct_declaration();

            state._fsp--;

            stream_typedef_struct_declaration.add(typedef_struct_declaration656.getTree());

            // AST REWRITE
            // elements: typedef_struct_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1019:31: -> ^( TYPEDEF_STRUCT typedef_struct_declaration )
            {
                // Objcm.g:1019:34: ^( TYPEDEF_STRUCT typedef_struct_declaration )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TYPEDEF_STRUCT, "TYPEDEF_STRUCT")
                , root_1);

                adaptor.addChild(root_1, stream_typedef_struct_declaration.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typedef_struct_declaration_wrapper"


    public static class typedef_struct_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typedef_struct_declaration"
    // Objcm.g:1023:1: typedef_struct_declaration : STRUCT_PREFIX ( name )? L_FBR ( typedef_struct_body )+ R_FBR ( name )? ( SEMICOLON )? ;
    public final ObjcmParser.typedef_struct_declaration_return typedef_struct_declaration() throws RecognitionException {
        ObjcmParser.typedef_struct_declaration_return retval = new ObjcmParser.typedef_struct_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STRUCT_PREFIX657=null;
        Token L_FBR659=null;
        Token R_FBR661=null;
        Token SEMICOLON663=null;
        ObjcmParser.name_return name658 =null;

        ObjcmParser.typedef_struct_body_return typedef_struct_body660 =null;

        ObjcmParser.name_return name662 =null;


        Object STRUCT_PREFIX657_tree=null;
        Object L_FBR659_tree=null;
        Object R_FBR661_tree=null;
        Object SEMICOLON663_tree=null;

        try {
            // Objcm.g:1024:2: ( STRUCT_PREFIX ( name )? L_FBR ( typedef_struct_body )+ R_FBR ( name )? ( SEMICOLON )? )
            // Objcm.g:1024:4: STRUCT_PREFIX ( name )? L_FBR ( typedef_struct_body )+ R_FBR ( name )? ( SEMICOLON )?
            {
            root_0 = (Object)adaptor.nil();


            STRUCT_PREFIX657=(Token)match(input,STRUCT_PREFIX,FOLLOW_STRUCT_PREFIX_in_typedef_struct_declaration5522); 
            STRUCT_PREFIX657_tree = 
            (Object)adaptor.create(STRUCT_PREFIX657)
            ;
            adaptor.addChild(root_0, STRUCT_PREFIX657_tree);


            // Objcm.g:1024:18: ( name )?
            int alt182=2;
            int LA182_0 = input.LA(1);

            if ( (LA182_0==ID||LA182_0==182||LA182_0==185||LA182_0==193||LA182_0==196) ) {
                alt182=1;
            }
            switch (alt182) {
                case 1 :
                    // Objcm.g:1024:18: name
                    {
                    pushFollow(FOLLOW_name_in_typedef_struct_declaration5524);
                    name658=name();

                    state._fsp--;

                    adaptor.addChild(root_0, name658.getTree());

                    }
                    break;

            }


            L_FBR659=(Token)match(input,L_FBR,FOLLOW_L_FBR_in_typedef_struct_declaration5528); 
            L_FBR659_tree = 
            (Object)adaptor.create(L_FBR659)
            ;
            adaptor.addChild(root_0, L_FBR659_tree);


            // Objcm.g:1026:3: ( typedef_struct_body )+
            int cnt183=0;
            loop183:
            do {
                int alt183=2;
                int LA183_0 = input.LA(1);

                if ( (LA183_0==ID||LA183_0==VOID) ) {
                    alt183=1;
                }


                switch (alt183) {
            	case 1 :
            	    // Objcm.g:1026:3: typedef_struct_body
            	    {
            	    pushFollow(FOLLOW_typedef_struct_body_in_typedef_struct_declaration5533);
            	    typedef_struct_body660=typedef_struct_body();

            	    state._fsp--;

            	    adaptor.addChild(root_0, typedef_struct_body660.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt183 >= 1 ) break loop183;
                        EarlyExitException eee =
                            new EarlyExitException(183, input);
                        throw eee;
                }
                cnt183++;
            } while (true);


            R_FBR661=(Token)match(input,R_FBR,FOLLOW_R_FBR_in_typedef_struct_declaration5537); 
            R_FBR661_tree = 
            (Object)adaptor.create(R_FBR661)
            ;
            adaptor.addChild(root_0, R_FBR661_tree);


            // Objcm.g:1027:9: ( name )?
            int alt184=2;
            int LA184_0 = input.LA(1);

            if ( (LA184_0==ID) ) {
                int LA184_1 = input.LA(2);

                if ( (LA184_1==EOF||LA184_1==CONST_PREFIX||LA184_1==ENUM_PREFIX||LA184_1==L_MINUS||LA184_1==L_PLUS||LA184_1==SEMICOLON||LA184_1==STATIC_PREFIX||LA184_1==STRUCT_PREFIX||LA184_1==VOID||LA184_1==167||(LA184_1 >= 169 && LA184_1 <= 170)||LA184_1==176||LA184_1==189||LA184_1==199) ) {
                    alt184=1;
                }
                else if ( (LA184_1==ID) ) {
                    int LA184_23 = input.LA(3);

                    if ( (LA184_23==L_KBR) ) {
                        int LA184_38 = input.LA(4);

                        if ( (LA184_38==R_KBR) ) {
                            alt184=1;
                        }
                    }
                    else if ( (LA184_23==ASTERISK||LA184_23==ID||LA184_23==L_LESS||LA184_23==182||LA184_23==185||LA184_23==193||LA184_23==196) ) {
                        alt184=1;
                    }
                }
            }
            else if ( (LA184_0==182||LA184_0==185||LA184_0==193||LA184_0==196) ) {
                alt184=1;
            }
            switch (alt184) {
                case 1 :
                    // Objcm.g:1027:9: name
                    {
                    pushFollow(FOLLOW_name_in_typedef_struct_declaration5540);
                    name662=name();

                    state._fsp--;

                    adaptor.addChild(root_0, name662.getTree());

                    }
                    break;

            }


            // Objcm.g:1027:15: ( SEMICOLON )?
            int alt185=2;
            int LA185_0 = input.LA(1);

            if ( (LA185_0==SEMICOLON) ) {
                alt185=1;
            }
            switch (alt185) {
                case 1 :
                    // Objcm.g:1027:15: SEMICOLON
                    {
                    SEMICOLON663=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_typedef_struct_declaration5543); 
                    SEMICOLON663_tree = 
                    (Object)adaptor.create(SEMICOLON663)
                    ;
                    adaptor.addChild(root_0, SEMICOLON663_tree);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typedef_struct_declaration"


    public static class typedef_struct_body_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typedef_struct_body"
    // Objcm.g:1030:1: typedef_struct_body : typedef_struct_declaration_element_wrapper ;
    public final ObjcmParser.typedef_struct_body_return typedef_struct_body() throws RecognitionException {
        ObjcmParser.typedef_struct_body_return retval = new ObjcmParser.typedef_struct_body_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.typedef_struct_declaration_element_wrapper_return typedef_struct_declaration_element_wrapper664 =null;



        try {
            // Objcm.g:1031:2: ( typedef_struct_declaration_element_wrapper )
            // Objcm.g:1031:4: typedef_struct_declaration_element_wrapper
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_typedef_struct_declaration_element_wrapper_in_typedef_struct_body5556);
            typedef_struct_declaration_element_wrapper664=typedef_struct_declaration_element_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, typedef_struct_declaration_element_wrapper664.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typedef_struct_body"


    public static class typedef_struct_declaration_element_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typedef_struct_declaration_element_wrapper"
    // Objcm.g:1034:1: typedef_struct_declaration_element_wrapper : struct_field -> ^( STRUCT_FIELD struct_field ) ;
    public final ObjcmParser.typedef_struct_declaration_element_wrapper_return typedef_struct_declaration_element_wrapper() throws RecognitionException {
        ObjcmParser.typedef_struct_declaration_element_wrapper_return retval = new ObjcmParser.typedef_struct_declaration_element_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.struct_field_return struct_field665 =null;


        RewriteRuleSubtreeStream stream_struct_field=new RewriteRuleSubtreeStream(adaptor,"rule struct_field");
        try {
            // Objcm.g:1035:2: ( struct_field -> ^( STRUCT_FIELD struct_field ) )
            // Objcm.g:1035:4: struct_field
            {
            pushFollow(FOLLOW_struct_field_in_typedef_struct_declaration_element_wrapper5568);
            struct_field665=struct_field();

            state._fsp--;

            stream_struct_field.add(struct_field665.getTree());

            // AST REWRITE
            // elements: struct_field
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1035:17: -> ^( STRUCT_FIELD struct_field )
            {
                // Objcm.g:1035:20: ^( STRUCT_FIELD struct_field )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(STRUCT_FIELD, "STRUCT_FIELD")
                , root_1);

                adaptor.addChild(root_1, stream_struct_field.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typedef_struct_declaration_element_wrapper"


    public static class struct_field_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "struct_field"
    // Objcm.g:1037:1: struct_field : field_type name ( COMMA name )* SEMICOLON ;
    public final ObjcmParser.struct_field_return struct_field() throws RecognitionException {
        ObjcmParser.struct_field_return retval = new ObjcmParser.struct_field_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA668=null;
        Token SEMICOLON670=null;
        ObjcmParser.field_type_return field_type666 =null;

        ObjcmParser.name_return name667 =null;

        ObjcmParser.name_return name669 =null;


        Object COMMA668_tree=null;
        Object SEMICOLON670_tree=null;

        try {
            // Objcm.g:1038:2: ( field_type name ( COMMA name )* SEMICOLON )
            // Objcm.g:1038:4: field_type name ( COMMA name )* SEMICOLON
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_field_type_in_struct_field5586);
            field_type666=field_type();

            state._fsp--;

            adaptor.addChild(root_0, field_type666.getTree());

            pushFollow(FOLLOW_name_in_struct_field5588);
            name667=name();

            state._fsp--;

            adaptor.addChild(root_0, name667.getTree());

            // Objcm.g:1038:21: ( COMMA name )*
            loop186:
            do {
                int alt186=2;
                int LA186_0 = input.LA(1);

                if ( (LA186_0==COMMA) ) {
                    alt186=1;
                }


                switch (alt186) {
            	case 1 :
            	    // Objcm.g:1038:22: COMMA name
            	    {
            	    COMMA668=(Token)match(input,COMMA,FOLLOW_COMMA_in_struct_field5592); 
            	    COMMA668_tree = 
            	    (Object)adaptor.create(COMMA668)
            	    ;
            	    adaptor.addChild(root_0, COMMA668_tree);


            	    pushFollow(FOLLOW_name_in_struct_field5595);
            	    name669=name();

            	    state._fsp--;

            	    adaptor.addChild(root_0, name669.getTree());

            	    }
            	    break;

            	default :
            	    break loop186;
                }
            } while (true);


            SEMICOLON670=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_struct_field5599); 
            SEMICOLON670_tree = 
            (Object)adaptor.create(SEMICOLON670)
            ;
            adaptor.addChild(root_0, SEMICOLON670_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "struct_field"


    public static class typedef_declaration_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typedef_declaration_wrapper"
    // Objcm.g:1045:1: typedef_declaration_wrapper : typedef_declaration -> ^( TYPEDEF typedef_declaration ) ;
    public final ObjcmParser.typedef_declaration_wrapper_return typedef_declaration_wrapper() throws RecognitionException {
        ObjcmParser.typedef_declaration_wrapper_return retval = new ObjcmParser.typedef_declaration_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.typedef_declaration_return typedef_declaration671 =null;


        RewriteRuleSubtreeStream stream_typedef_declaration=new RewriteRuleSubtreeStream(adaptor,"rule typedef_declaration");
        try {
            // Objcm.g:1046:2: ( typedef_declaration -> ^( TYPEDEF typedef_declaration ) )
            // Objcm.g:1046:4: typedef_declaration
            {
            pushFollow(FOLLOW_typedef_declaration_in_typedef_declaration_wrapper5615);
            typedef_declaration671=typedef_declaration();

            state._fsp--;

            stream_typedef_declaration.add(typedef_declaration671.getTree());

            // AST REWRITE
            // elements: typedef_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1046:24: -> ^( TYPEDEF typedef_declaration )
            {
                // Objcm.g:1046:27: ^( TYPEDEF typedef_declaration )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TYPEDEF, "TYPEDEF")
                , root_1);

                adaptor.addChild(root_1, stream_typedef_declaration.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typedef_declaration_wrapper"


    public static class enum_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "enum_declaration"
    // Objcm.g:1049:1: enum_declaration : typedef_declaration -> ^( ENUM typedef_declaration ) ;
    public final ObjcmParser.enum_declaration_return enum_declaration() throws RecognitionException {
        ObjcmParser.enum_declaration_return retval = new ObjcmParser.enum_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.typedef_declaration_return typedef_declaration672 =null;


        RewriteRuleSubtreeStream stream_typedef_declaration=new RewriteRuleSubtreeStream(adaptor,"rule typedef_declaration");
        try {
            // Objcm.g:1050:2: ( typedef_declaration -> ^( ENUM typedef_declaration ) )
            // Objcm.g:1050:4: typedef_declaration
            {
            pushFollow(FOLLOW_typedef_declaration_in_enum_declaration5635);
            typedef_declaration672=typedef_declaration();

            state._fsp--;

            stream_typedef_declaration.add(typedef_declaration672.getTree());

            // AST REWRITE
            // elements: typedef_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1050:24: -> ^( ENUM typedef_declaration )
            {
                // Objcm.g:1050:27: ^( ENUM typedef_declaration )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(ENUM, "ENUM")
                , root_1);

                adaptor.addChild(root_1, stream_typedef_declaration.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "enum_declaration"


    public static class typedef_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typedef_declaration"
    // Objcm.g:1052:1: typedef_declaration : ENUM_PREFIX ( name )? L_FBR typedef_declaration_element_wrapper ( COMMA typedef_declaration_element_wrapper )* R_FBR ( name )? SEMICOLON ;
    public final ObjcmParser.typedef_declaration_return typedef_declaration() throws RecognitionException {
        ObjcmParser.typedef_declaration_return retval = new ObjcmParser.typedef_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ENUM_PREFIX673=null;
        Token L_FBR675=null;
        Token COMMA677=null;
        Token R_FBR679=null;
        Token SEMICOLON681=null;
        ObjcmParser.name_return name674 =null;

        ObjcmParser.typedef_declaration_element_wrapper_return typedef_declaration_element_wrapper676 =null;

        ObjcmParser.typedef_declaration_element_wrapper_return typedef_declaration_element_wrapper678 =null;

        ObjcmParser.name_return name680 =null;


        Object ENUM_PREFIX673_tree=null;
        Object L_FBR675_tree=null;
        Object COMMA677_tree=null;
        Object R_FBR679_tree=null;
        Object SEMICOLON681_tree=null;

        try {
            // Objcm.g:1053:2: ( ENUM_PREFIX ( name )? L_FBR typedef_declaration_element_wrapper ( COMMA typedef_declaration_element_wrapper )* R_FBR ( name )? SEMICOLON )
            // Objcm.g:1053:5: ENUM_PREFIX ( name )? L_FBR typedef_declaration_element_wrapper ( COMMA typedef_declaration_element_wrapper )* R_FBR ( name )? SEMICOLON
            {
            root_0 = (Object)adaptor.nil();


            ENUM_PREFIX673=(Token)match(input,ENUM_PREFIX,FOLLOW_ENUM_PREFIX_in_typedef_declaration5655); 
            ENUM_PREFIX673_tree = 
            (Object)adaptor.create(ENUM_PREFIX673)
            ;
            adaptor.addChild(root_0, ENUM_PREFIX673_tree);


            // Objcm.g:1053:17: ( name )?
            int alt187=2;
            int LA187_0 = input.LA(1);

            if ( (LA187_0==ID||LA187_0==182||LA187_0==185||LA187_0==193||LA187_0==196) ) {
                alt187=1;
            }
            switch (alt187) {
                case 1 :
                    // Objcm.g:1053:17: name
                    {
                    pushFollow(FOLLOW_name_in_typedef_declaration5657);
                    name674=name();

                    state._fsp--;

                    adaptor.addChild(root_0, name674.getTree());

                    }
                    break;

            }


            L_FBR675=(Token)match(input,L_FBR,FOLLOW_L_FBR_in_typedef_declaration5660); 
            L_FBR675_tree = 
            (Object)adaptor.create(L_FBR675)
            ;
            adaptor.addChild(root_0, L_FBR675_tree);


            pushFollow(FOLLOW_typedef_declaration_element_wrapper_in_typedef_declaration5663);
            typedef_declaration_element_wrapper676=typedef_declaration_element_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, typedef_declaration_element_wrapper676.getTree());

            // Objcm.g:1053:67: ( COMMA typedef_declaration_element_wrapper )*
            loop188:
            do {
                int alt188=2;
                int LA188_0 = input.LA(1);

                if ( (LA188_0==COMMA) ) {
                    alt188=1;
                }


                switch (alt188) {
            	case 1 :
            	    // Objcm.g:1053:68: COMMA typedef_declaration_element_wrapper
            	    {
            	    COMMA677=(Token)match(input,COMMA,FOLLOW_COMMA_in_typedef_declaration5667); 
            	    COMMA677_tree = 
            	    (Object)adaptor.create(COMMA677)
            	    ;
            	    adaptor.addChild(root_0, COMMA677_tree);


            	    pushFollow(FOLLOW_typedef_declaration_element_wrapper_in_typedef_declaration5670);
            	    typedef_declaration_element_wrapper678=typedef_declaration_element_wrapper();

            	    state._fsp--;

            	    adaptor.addChild(root_0, typedef_declaration_element_wrapper678.getTree());

            	    }
            	    break;

            	default :
            	    break loop188;
                }
            } while (true);


            R_FBR679=(Token)match(input,R_FBR,FOLLOW_R_FBR_in_typedef_declaration5674); 
            R_FBR679_tree = 
            (Object)adaptor.create(R_FBR679)
            ;
            adaptor.addChild(root_0, R_FBR679_tree);


            // Objcm.g:1053:120: ( name )?
            int alt189=2;
            int LA189_0 = input.LA(1);

            if ( (LA189_0==ID||LA189_0==182||LA189_0==185||LA189_0==193||LA189_0==196) ) {
                alt189=1;
            }
            switch (alt189) {
                case 1 :
                    // Objcm.g:1053:120: name
                    {
                    pushFollow(FOLLOW_name_in_typedef_declaration5677);
                    name680=name();

                    state._fsp--;

                    adaptor.addChild(root_0, name680.getTree());

                    }
                    break;

            }


            SEMICOLON681=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_typedef_declaration5680); 
            SEMICOLON681_tree = 
            (Object)adaptor.create(SEMICOLON681)
            ;
            adaptor.addChild(root_0, SEMICOLON681_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typedef_declaration"


    public static class typedef_declaration_element_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typedef_declaration_element_wrapper"
    // Objcm.g:1055:1: typedef_declaration_element_wrapper : typedef_declaration_element -> ^( TYPEDEF_ELEMENT typedef_declaration_element ) ;
    public final ObjcmParser.typedef_declaration_element_wrapper_return typedef_declaration_element_wrapper() throws RecognitionException {
        ObjcmParser.typedef_declaration_element_wrapper_return retval = new ObjcmParser.typedef_declaration_element_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.typedef_declaration_element_return typedef_declaration_element682 =null;


        RewriteRuleSubtreeStream stream_typedef_declaration_element=new RewriteRuleSubtreeStream(adaptor,"rule typedef_declaration_element");
        try {
            // Objcm.g:1056:2: ( typedef_declaration_element -> ^( TYPEDEF_ELEMENT typedef_declaration_element ) )
            // Objcm.g:1056:4: typedef_declaration_element
            {
            pushFollow(FOLLOW_typedef_declaration_element_in_typedef_declaration_element_wrapper5690);
            typedef_declaration_element682=typedef_declaration_element();

            state._fsp--;

            stream_typedef_declaration_element.add(typedef_declaration_element682.getTree());

            // AST REWRITE
            // elements: typedef_declaration_element
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1056:32: -> ^( TYPEDEF_ELEMENT typedef_declaration_element )
            {
                // Objcm.g:1056:35: ^( TYPEDEF_ELEMENT typedef_declaration_element )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TYPEDEF_ELEMENT, "TYPEDEF_ELEMENT")
                , root_1);

                adaptor.addChild(root_1, stream_typedef_declaration_element.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typedef_declaration_element_wrapper"


    public static class typedef_declaration_element_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typedef_declaration_element"
    // Objcm.g:1059:1: typedef_declaration_element : ( ID ( L_EQ ( ID | NUMBER ) )? | NUMBER L_EQ NUMBER );
    public final ObjcmParser.typedef_declaration_element_return typedef_declaration_element() throws RecognitionException {
        ObjcmParser.typedef_declaration_element_return retval = new ObjcmParser.typedef_declaration_element_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID683=null;
        Token L_EQ684=null;
        Token set685=null;
        Token NUMBER686=null;
        Token L_EQ687=null;
        Token NUMBER688=null;

        Object ID683_tree=null;
        Object L_EQ684_tree=null;
        Object set685_tree=null;
        Object NUMBER686_tree=null;
        Object L_EQ687_tree=null;
        Object NUMBER688_tree=null;

        try {
            // Objcm.g:1060:2: ( ID ( L_EQ ( ID | NUMBER ) )? | NUMBER L_EQ NUMBER )
            int alt191=2;
            int LA191_0 = input.LA(1);

            if ( (LA191_0==ID) ) {
                alt191=1;
            }
            else if ( (LA191_0==NUMBER) ) {
                alt191=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 191, 0, input);

                throw nvae;

            }
            switch (alt191) {
                case 1 :
                    // Objcm.g:1060:4: ID ( L_EQ ( ID | NUMBER ) )?
                    {
                    root_0 = (Object)adaptor.nil();


                    ID683=(Token)match(input,ID,FOLLOW_ID_in_typedef_declaration_element5709); 
                    ID683_tree = 
                    (Object)adaptor.create(ID683)
                    ;
                    adaptor.addChild(root_0, ID683_tree);


                    // Objcm.g:1060:8: ( L_EQ ( ID | NUMBER ) )?
                    int alt190=2;
                    int LA190_0 = input.LA(1);

                    if ( (LA190_0==L_EQ) ) {
                        alt190=1;
                    }
                    switch (alt190) {
                        case 1 :
                            // Objcm.g:1060:9: L_EQ ( ID | NUMBER )
                            {
                            L_EQ684=(Token)match(input,L_EQ,FOLLOW_L_EQ_in_typedef_declaration_element5713); 
                            L_EQ684_tree = 
                            (Object)adaptor.create(L_EQ684)
                            ;
                            adaptor.addChild(root_0, L_EQ684_tree);


                            set685=(Token)input.LT(1);

                            if ( input.LA(1)==ID||input.LA(1)==NUMBER ) {
                                input.consume();
                                adaptor.addChild(root_0, 
                                (Object)adaptor.create(set685)
                                );
                                state.errorRecovery=false;
                            }
                            else {
                                MismatchedSetException mse = new MismatchedSetException(null,input);
                                throw mse;
                            }


                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // Objcm.g:1061:4: NUMBER L_EQ NUMBER
                    {
                    root_0 = (Object)adaptor.nil();


                    NUMBER686=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_typedef_declaration_element5728); 
                    NUMBER686_tree = 
                    (Object)adaptor.create(NUMBER686)
                    ;
                    adaptor.addChild(root_0, NUMBER686_tree);


                    L_EQ687=(Token)match(input,L_EQ,FOLLOW_L_EQ_in_typedef_declaration_element5730); 
                    L_EQ687_tree = 
                    (Object)adaptor.create(L_EQ687)
                    ;
                    adaptor.addChild(root_0, L_EQ687_tree);


                    NUMBER688=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_typedef_declaration_element5732); 
                    NUMBER688_tree = 
                    (Object)adaptor.create(NUMBER688)
                    ;
                    adaptor.addChild(root_0, NUMBER688_tree);


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typedef_declaration_element"


    public static class field_declaration_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_declaration_wrapper"
    // Objcm.g:1068:1: field_declaration_wrapper : field_declaration -> ^( FIELD field_declaration ) ;
    public final ObjcmParser.field_declaration_wrapper_return field_declaration_wrapper() throws RecognitionException {
        ObjcmParser.field_declaration_wrapper_return retval = new ObjcmParser.field_declaration_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.field_declaration_return field_declaration689 =null;


        RewriteRuleSubtreeStream stream_field_declaration=new RewriteRuleSubtreeStream(adaptor,"rule field_declaration");
        try {
            // Objcm.g:1069:2: ( field_declaration -> ^( FIELD field_declaration ) )
            // Objcm.g:1069:4: field_declaration
            {
            pushFollow(FOLLOW_field_declaration_in_field_declaration_wrapper5746);
            field_declaration689=field_declaration();

            state._fsp--;

            stream_field_declaration.add(field_declaration689.getTree());

            // AST REWRITE
            // elements: field_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1069:22: -> ^( FIELD field_declaration )
            {
                // Objcm.g:1069:25: ^( FIELD field_declaration )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FIELD, "FIELD")
                , root_1);

                adaptor.addChild(root_1, stream_field_declaration.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_declaration_wrapper"


    public static class field_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_declaration"
    // Objcm.g:1071:1: field_declaration : field_modifier_wrapper field_type name field_declaration_end ;
    public final ObjcmParser.field_declaration_return field_declaration() throws RecognitionException {
        ObjcmParser.field_declaration_return retval = new ObjcmParser.field_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.field_modifier_wrapper_return field_modifier_wrapper690 =null;

        ObjcmParser.field_type_return field_type691 =null;

        ObjcmParser.name_return name692 =null;

        ObjcmParser.field_declaration_end_return field_declaration_end693 =null;



        try {
            // Objcm.g:1072:2: ( field_modifier_wrapper field_type name field_declaration_end )
            // Objcm.g:1072:4: field_modifier_wrapper field_type name field_declaration_end
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_field_modifier_wrapper_in_field_declaration5763);
            field_modifier_wrapper690=field_modifier_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, field_modifier_wrapper690.getTree());

            pushFollow(FOLLOW_field_type_in_field_declaration5766);
            field_type691=field_type();

            state._fsp--;

            adaptor.addChild(root_0, field_type691.getTree());

            pushFollow(FOLLOW_name_in_field_declaration5768);
            name692=name();

            state._fsp--;

            adaptor.addChild(root_0, name692.getTree());

            pushFollow(FOLLOW_field_declaration_end_in_field_declaration5770);
            field_declaration_end693=field_declaration_end();

            state._fsp--;

            adaptor.addChild(root_0, field_declaration_end693.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_declaration"


    public static class field_declaration_end_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_declaration_end"
    // Objcm.g:1074:1: field_declaration_end : ( value_set )? SEMICOLON ;
    public final ObjcmParser.field_declaration_end_return field_declaration_end() throws RecognitionException {
        ObjcmParser.field_declaration_end_return retval = new ObjcmParser.field_declaration_end_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON695=null;
        ObjcmParser.value_set_return value_set694 =null;


        Object SEMICOLON695_tree=null;

        try {
            // Objcm.g:1075:2: ( ( value_set )? SEMICOLON )
            // Objcm.g:1075:5: ( value_set )? SEMICOLON
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:1075:5: ( value_set )?
            int alt192=2;
            int LA192_0 = input.LA(1);

            if ( (LA192_0==L_EQ) ) {
                alt192=1;
            }
            switch (alt192) {
                case 1 :
                    // Objcm.g:1075:5: value_set
                    {
                    pushFollow(FOLLOW_value_set_in_field_declaration_end5781);
                    value_set694=value_set();

                    state._fsp--;

                    adaptor.addChild(root_0, value_set694.getTree());

                    }
                    break;

            }


            SEMICOLON695=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_field_declaration_end5784); 
            SEMICOLON695_tree = 
            (Object)adaptor.create(SEMICOLON695)
            ;
            adaptor.addChild(root_0, SEMICOLON695_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_declaration_end"


    public static class type_start_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_start_wrapper"
    // Objcm.g:1077:1: type_start_wrapper : type_start -> ^( M_TYPE_START type_start ) ;
    public final ObjcmParser.type_start_wrapper_return type_start_wrapper() throws RecognitionException {
        ObjcmParser.type_start_wrapper_return retval = new ObjcmParser.type_start_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.type_start_return type_start696 =null;


        RewriteRuleSubtreeStream stream_type_start=new RewriteRuleSubtreeStream(adaptor,"rule type_start");
        try {
            // Objcm.g:1078:2: ( type_start -> ^( M_TYPE_START type_start ) )
            // Objcm.g:1078:4: type_start
            {
            pushFollow(FOLLOW_type_start_in_type_start_wrapper5794);
            type_start696=type_start();

            state._fsp--;

            stream_type_start.add(type_start696.getTree());

            // AST REWRITE
            // elements: type_start
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1078:15: -> ^( M_TYPE_START type_start )
            {
                // Objcm.g:1078:18: ^( M_TYPE_START type_start )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(M_TYPE_START, "M_TYPE_START")
                , root_1);

                adaptor.addChild(root_1, stream_type_start.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_start_wrapper"


    public static class type_start_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_start"
    // Objcm.g:1080:1: type_start : ( CONST_PREFIX )? field_type name ( L_KBR R_KBR )? type_end ;
    public final ObjcmParser.type_start_return type_start() throws RecognitionException {
        ObjcmParser.type_start_return retval = new ObjcmParser.type_start_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token CONST_PREFIX697=null;
        Token L_KBR700=null;
        Token R_KBR701=null;
        ObjcmParser.field_type_return field_type698 =null;

        ObjcmParser.name_return name699 =null;

        ObjcmParser.type_end_return type_end702 =null;


        Object CONST_PREFIX697_tree=null;
        Object L_KBR700_tree=null;
        Object R_KBR701_tree=null;

        try {
            // Objcm.g:1081:2: ( ( CONST_PREFIX )? field_type name ( L_KBR R_KBR )? type_end )
            // Objcm.g:1081:4: ( CONST_PREFIX )? field_type name ( L_KBR R_KBR )? type_end
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:1081:4: ( CONST_PREFIX )?
            int alt193=2;
            int LA193_0 = input.LA(1);

            if ( (LA193_0==CONST_PREFIX) ) {
                alt193=1;
            }
            switch (alt193) {
                case 1 :
                    // Objcm.g:1081:4: CONST_PREFIX
                    {
                    CONST_PREFIX697=(Token)match(input,CONST_PREFIX,FOLLOW_CONST_PREFIX_in_type_start5811); 
                    CONST_PREFIX697_tree = 
                    (Object)adaptor.create(CONST_PREFIX697)
                    ;
                    adaptor.addChild(root_0, CONST_PREFIX697_tree);


                    }
                    break;

            }


            pushFollow(FOLLOW_field_type_in_type_start5814);
            field_type698=field_type();

            state._fsp--;

            adaptor.addChild(root_0, field_type698.getTree());

            pushFollow(FOLLOW_name_in_type_start5816);
            name699=name();

            state._fsp--;

            adaptor.addChild(root_0, name699.getTree());

            // Objcm.g:1081:34: ( L_KBR R_KBR )?
            int alt194=2;
            int LA194_0 = input.LA(1);

            if ( (LA194_0==L_KBR) ) {
                alt194=1;
            }
            switch (alt194) {
                case 1 :
                    // Objcm.g:1081:35: L_KBR R_KBR
                    {
                    L_KBR700=(Token)match(input,L_KBR,FOLLOW_L_KBR_in_type_start5819); 
                    L_KBR700_tree = 
                    (Object)adaptor.create(L_KBR700)
                    ;
                    adaptor.addChild(root_0, L_KBR700_tree);


                    R_KBR701=(Token)match(input,R_KBR,FOLLOW_R_KBR_in_type_start5821); 
                    R_KBR701_tree = 
                    (Object)adaptor.create(R_KBR701)
                    ;
                    adaptor.addChild(root_0, R_KBR701_tree);


                    }
                    break;

            }


            pushFollow(FOLLOW_type_end_in_type_start5825);
            type_end702=type_end();

            state._fsp--;

            adaptor.addChild(root_0, type_end702.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_start"


    public static class type_end_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_end"
    // Objcm.g:1083:1: type_end : ( field_declaration4 -> ^( FIELD field_declaration4 ) | method_declaration4 -> ^( STATIC_METHOD method_declaration4 ) );
    public final ObjcmParser.type_end_return type_end() throws RecognitionException {
        ObjcmParser.type_end_return retval = new ObjcmParser.type_end_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.field_declaration4_return field_declaration4703 =null;

        ObjcmParser.method_declaration4_return method_declaration4704 =null;


        RewriteRuleSubtreeStream stream_field_declaration4=new RewriteRuleSubtreeStream(adaptor,"rule field_declaration4");
        RewriteRuleSubtreeStream stream_method_declaration4=new RewriteRuleSubtreeStream(adaptor,"rule method_declaration4");
        try {
            // Objcm.g:1083:9: ( field_declaration4 -> ^( FIELD field_declaration4 ) | method_declaration4 -> ^( STATIC_METHOD method_declaration4 ) )
            int alt195=2;
            int LA195_0 = input.LA(1);

            if ( (LA195_0==L_EQ||LA195_0==SEMICOLON) ) {
                alt195=1;
            }
            else if ( (LA195_0==L_BR) ) {
                alt195=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 195, 0, input);

                throw nvae;

            }
            switch (alt195) {
                case 1 :
                    // Objcm.g:1083:11: field_declaration4
                    {
                    pushFollow(FOLLOW_field_declaration4_in_type_end5833);
                    field_declaration4703=field_declaration4();

                    state._fsp--;

                    stream_field_declaration4.add(field_declaration4703.getTree());

                    // AST REWRITE
                    // elements: field_declaration4
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1083:30: -> ^( FIELD field_declaration4 )
                    {
                        // Objcm.g:1083:33: ^( FIELD field_declaration4 )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(FIELD, "FIELD")
                        , root_1);

                        adaptor.addChild(root_1, stream_field_declaration4.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 2 :
                    // Objcm.g:1084:4: method_declaration4
                    {
                    pushFollow(FOLLOW_method_declaration4_in_type_end5846);
                    method_declaration4704=method_declaration4();

                    state._fsp--;

                    stream_method_declaration4.add(method_declaration4704.getTree());

                    // AST REWRITE
                    // elements: method_declaration4
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1084:24: -> ^( STATIC_METHOD method_declaration4 )
                    {
                        // Objcm.g:1084:27: ^( STATIC_METHOD method_declaration4 )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(STATIC_METHOD, "STATIC_METHOD")
                        , root_1);

                        adaptor.addChild(root_1, stream_method_declaration4.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_end"


    public static class field_declaration4_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_declaration4"
    // Objcm.g:1087:1: field_declaration4 : ( value_set )? SEMICOLON ;
    public final ObjcmParser.field_declaration4_return field_declaration4() throws RecognitionException {
        ObjcmParser.field_declaration4_return retval = new ObjcmParser.field_declaration4_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON706=null;
        ObjcmParser.value_set_return value_set705 =null;


        Object SEMICOLON706_tree=null;

        try {
            // Objcm.g:1088:2: ( ( value_set )? SEMICOLON )
            // Objcm.g:1088:5: ( value_set )? SEMICOLON
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:1088:5: ( value_set )?
            int alt196=2;
            int LA196_0 = input.LA(1);

            if ( (LA196_0==L_EQ) ) {
                alt196=1;
            }
            switch (alt196) {
                case 1 :
                    // Objcm.g:1088:5: value_set
                    {
                    pushFollow(FOLLOW_value_set_in_field_declaration45868);
                    value_set705=value_set();

                    state._fsp--;

                    adaptor.addChild(root_0, value_set705.getTree());

                    }
                    break;

            }


            SEMICOLON706=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_field_declaration45871); 
            SEMICOLON706_tree = 
            (Object)adaptor.create(SEMICOLON706)
            ;
            adaptor.addChild(root_0, SEMICOLON706_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_declaration4"


    public static class method_declaration4_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_declaration4"
    // Objcm.g:1091:1: method_declaration4 : method_params2 block_wrapper ;
    public final ObjcmParser.method_declaration4_return method_declaration4() throws RecognitionException {
        ObjcmParser.method_declaration4_return retval = new ObjcmParser.method_declaration4_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_params2_return method_params2707 =null;

        ObjcmParser.block_wrapper_return block_wrapper708 =null;



        try {
            // Objcm.g:1092:2: ( method_params2 block_wrapper )
            // Objcm.g:1092:5: method_params2 block_wrapper
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_method_params2_in_method_declaration45884);
            method_params2707=method_params2();

            state._fsp--;

            adaptor.addChild(root_0, method_params2707.getTree());

            pushFollow(FOLLOW_block_wrapper_in_method_declaration45889);
            block_wrapper708=block_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, block_wrapper708.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_declaration4"


    public static class field_modifier_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_modifier_wrapper"
    // Objcm.g:1096:1: field_modifier_wrapper : field_modifier -> ^( MODIFIER field_modifier ) ;
    public final ObjcmParser.field_modifier_wrapper_return field_modifier_wrapper() throws RecognitionException {
        ObjcmParser.field_modifier_wrapper_return retval = new ObjcmParser.field_modifier_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.field_modifier_return field_modifier709 =null;


        RewriteRuleSubtreeStream stream_field_modifier=new RewriteRuleSubtreeStream(adaptor,"rule field_modifier");
        try {
            // Objcm.g:1097:2: ( field_modifier -> ^( MODIFIER field_modifier ) )
            // Objcm.g:1097:4: field_modifier
            {
            pushFollow(FOLLOW_field_modifier_in_field_modifier_wrapper5901);
            field_modifier709=field_modifier();

            state._fsp--;

            stream_field_modifier.add(field_modifier709.getTree());

            // AST REWRITE
            // elements: field_modifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1097:19: -> ^( MODIFIER field_modifier )
            {
                // Objcm.g:1097:22: ^( MODIFIER field_modifier )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(MODIFIER, "MODIFIER")
                , root_1);

                adaptor.addChild(root_1, stream_field_modifier.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_modifier_wrapper"


    public static class field_modifier_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_modifier"
    // Objcm.g:1099:1: field_modifier : 'extern' ;
    public final ObjcmParser.field_modifier_return field_modifier() throws RecognitionException {
        ObjcmParser.field_modifier_return retval = new ObjcmParser.field_modifier_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal710=null;

        Object string_literal710_tree=null;

        try {
            // Objcm.g:1100:2: ( 'extern' )
            // Objcm.g:1100:4: 'extern'
            {
            root_0 = (Object)adaptor.nil();


            string_literal710=(Token)match(input,189,FOLLOW_189_in_field_modifier5919); 
            string_literal710_tree = 
            (Object)adaptor.create(string_literal710)
            ;
            adaptor.addChild(root_0, string_literal710_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_modifier"


    public static class field_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_type"
    // Objcm.g:1103:1: field_type : field_type_internal -> ^( TYPE field_type_internal ) ;
    public final ObjcmParser.field_type_return field_type() throws RecognitionException {
        ObjcmParser.field_type_return retval = new ObjcmParser.field_type_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.field_type_internal_return field_type_internal711 =null;


        RewriteRuleSubtreeStream stream_field_type_internal=new RewriteRuleSubtreeStream(adaptor,"rule field_type_internal");
        try {
            // Objcm.g:1104:2: ( field_type_internal -> ^( TYPE field_type_internal ) )
            // Objcm.g:1104:5: field_type_internal
            {
            pushFollow(FOLLOW_field_type_internal_in_field_type5931);
            field_type_internal711=field_type_internal();

            state._fsp--;

            stream_field_type_internal.add(field_type_internal711.getTree());

            // AST REWRITE
            // elements: field_type_internal
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1104:25: -> ^( TYPE field_type_internal )
            {
                // Objcm.g:1104:28: ^( TYPE field_type_internal )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TYPE, "TYPE")
                , root_1);

                adaptor.addChild(root_1, stream_field_type_internal.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_type"


    public static class field_type_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_type_internal"
    // Objcm.g:1106:1: field_type_internal : type_internal ( generic )? ( ASTERISK )* ;
    public final ObjcmParser.field_type_internal_return field_type_internal() throws RecognitionException {
        ObjcmParser.field_type_internal_return retval = new ObjcmParser.field_type_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ASTERISK714=null;
        ObjcmParser.type_internal_return type_internal712 =null;

        ObjcmParser.generic_return generic713 =null;


        Object ASTERISK714_tree=null;

        try {
            // Objcm.g:1107:2: ( type_internal ( generic )? ( ASTERISK )* )
            // Objcm.g:1107:4: type_internal ( generic )? ( ASTERISK )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_type_internal_in_field_type_internal5950);
            type_internal712=type_internal();

            state._fsp--;

            adaptor.addChild(root_0, type_internal712.getTree());

            // Objcm.g:1107:18: ( generic )?
            int alt197=2;
            int LA197_0 = input.LA(1);

            if ( (LA197_0==L_LESS) ) {
                alt197=1;
            }
            switch (alt197) {
                case 1 :
                    // Objcm.g:1107:18: generic
                    {
                    pushFollow(FOLLOW_generic_in_field_type_internal5952);
                    generic713=generic();

                    state._fsp--;

                    adaptor.addChild(root_0, generic713.getTree());

                    }
                    break;

            }


            // Objcm.g:1107:27: ( ASTERISK )*
            loop198:
            do {
                int alt198=2;
                int LA198_0 = input.LA(1);

                if ( (LA198_0==ASTERISK) ) {
                    alt198=1;
                }


                switch (alt198) {
            	case 1 :
            	    // Objcm.g:1107:27: ASTERISK
            	    {
            	    ASTERISK714=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_field_type_internal5955); 
            	    ASTERISK714_tree = 
            	    (Object)adaptor.create(ASTERISK714)
            	    ;
            	    adaptor.addChild(root_0, ASTERISK714_tree);


            	    }
            	    break;

            	default :
            	    break loop198;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_type_internal"


    public static class name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "name"
    // Objcm.g:1113:1: name : name_internal -> ^( NAME name_internal ) ;
    public final ObjcmParser.name_return name() throws RecognitionException {
        ObjcmParser.name_return retval = new ObjcmParser.name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.name_internal_return name_internal715 =null;


        RewriteRuleSubtreeStream stream_name_internal=new RewriteRuleSubtreeStream(adaptor,"rule name_internal");
        try {
            // Objcm.g:1113:6: ( name_internal -> ^( NAME name_internal ) )
            // Objcm.g:1113:8: name_internal
            {
            pushFollow(FOLLOW_name_internal_in_name5968);
            name_internal715=name_internal();

            state._fsp--;

            stream_name_internal.add(name_internal715.getTree());

            // AST REWRITE
            // elements: name_internal
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1113:22: -> ^( NAME name_internal )
            {
                // Objcm.g:1113:25: ^( NAME name_internal )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(NAME, "NAME")
                , root_1);

                adaptor.addChild(root_1, stream_name_internal.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "name"


    public static class name_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "name_internal"
    // Objcm.g:1116:1: name_internal : ( ID | 'in' | property );
    public final ObjcmParser.name_internal_return name_internal() throws RecognitionException {
        ObjcmParser.name_internal_return retval = new ObjcmParser.name_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID716=null;
        Token string_literal717=null;
        ObjcmParser.property_return property718 =null;


        Object ID716_tree=null;
        Object string_literal717_tree=null;

        try {
            // Objcm.g:1117:2: ( ID | 'in' | property )
            int alt199=3;
            switch ( input.LA(1) ) {
            case ID:
                {
                alt199=1;
                }
                break;
            case 193:
                {
                alt199=2;
                }
                break;
            case 182:
            case 185:
            case 196:
                {
                alt199=3;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 199, 0, input);

                throw nvae;

            }

            switch (alt199) {
                case 1 :
                    // Objcm.g:1117:4: ID
                    {
                    root_0 = (Object)adaptor.nil();


                    ID716=(Token)match(input,ID,FOLLOW_ID_in_name_internal5989); 
                    ID716_tree = 
                    (Object)adaptor.create(ID716)
                    ;
                    adaptor.addChild(root_0, ID716_tree);


                    }
                    break;
                case 2 :
                    // Objcm.g:1118:5: 'in'
                    {
                    root_0 = (Object)adaptor.nil();


                    string_literal717=(Token)match(input,193,FOLLOW_193_in_name_internal5996); 
                    string_literal717_tree = 
                    (Object)adaptor.create(string_literal717)
                    ;
                    adaptor.addChild(root_0, string_literal717_tree);


                    }
                    break;
                case 3 :
                    // Objcm.g:1119:5: property
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_property_in_name_internal6003);
                    property718=property();

                    state._fsp--;

                    adaptor.addChild(root_0, property718.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "name_internal"


    public static class value_set_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "value_set"
    // Objcm.g:1122:1: value_set : L_EQ value -> ^( VALUE value ) ;
    public final ObjcmParser.value_set_return value_set() throws RecognitionException {
        ObjcmParser.value_set_return retval = new ObjcmParser.value_set_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_EQ719=null;
        ObjcmParser.value_return value720 =null;


        Object L_EQ719_tree=null;
        RewriteRuleTokenStream stream_L_EQ=new RewriteRuleTokenStream(adaptor,"token L_EQ");
        RewriteRuleSubtreeStream stream_value=new RewriteRuleSubtreeStream(adaptor,"rule value");
        try {
            // Objcm.g:1123:2: ( L_EQ value -> ^( VALUE value ) )
            // Objcm.g:1123:4: L_EQ value
            {
            L_EQ719=(Token)match(input,L_EQ,FOLLOW_L_EQ_in_value_set6014);  
            stream_L_EQ.add(L_EQ719);


            pushFollow(FOLLOW_value_in_value_set6017);
            value720=value();

            state._fsp--;

            stream_value.add(value720.getTree());

            // AST REWRITE
            // elements: value
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1123:16: -> ^( VALUE value )
            {
                // Objcm.g:1123:19: ^( VALUE value )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(VALUE, "VALUE")
                , root_1);

                adaptor.addChild(root_1, stream_value.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "value_set"


    public static class value_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "value"
    // Objcm.g:1125:1: value : ( ID | string_value | null_stmt | array | NUMBER | struct_init2 );
    public final ObjcmParser.value_return value() throws RecognitionException {
        ObjcmParser.value_return retval = new ObjcmParser.value_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID721=null;
        Token NUMBER725=null;
        ObjcmParser.string_value_return string_value722 =null;

        ObjcmParser.null_stmt_return null_stmt723 =null;

        ObjcmParser.array_return array724 =null;

        ObjcmParser.struct_init2_return struct_init2726 =null;


        Object ID721_tree=null;
        Object NUMBER725_tree=null;

        try {
            // Objcm.g:1125:7: ( ID | string_value | null_stmt | array | NUMBER | struct_init2 )
            int alt200=6;
            alt200 = dfa200.predict(input);
            switch (alt200) {
                case 1 :
                    // Objcm.g:1125:9: ID
                    {
                    root_0 = (Object)adaptor.nil();


                    ID721=(Token)match(input,ID,FOLLOW_ID_in_value6033); 
                    ID721_tree = 
                    (Object)adaptor.create(ID721)
                    ;
                    adaptor.addChild(root_0, ID721_tree);


                    }
                    break;
                case 2 :
                    // Objcm.g:1125:14: string_value
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_string_value_in_value6037);
                    string_value722=string_value();

                    state._fsp--;

                    adaptor.addChild(root_0, string_value722.getTree());

                    }
                    break;
                case 3 :
                    // Objcm.g:1125:29: null_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_null_stmt_in_value6041);
                    null_stmt723=null_stmt();

                    state._fsp--;

                    adaptor.addChild(root_0, null_stmt723.getTree());

                    }
                    break;
                case 4 :
                    // Objcm.g:1125:41: array
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_array_in_value6045);
                    array724=array();

                    state._fsp--;

                    adaptor.addChild(root_0, array724.getTree());

                    }
                    break;
                case 5 :
                    // Objcm.g:1125:49: NUMBER
                    {
                    root_0 = (Object)adaptor.nil();


                    NUMBER725=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_value6049); 
                    NUMBER725_tree = 
                    (Object)adaptor.create(NUMBER725)
                    ;
                    adaptor.addChild(root_0, NUMBER725_tree);


                    }
                    break;
                case 6 :
                    // Objcm.g:1125:58: struct_init2
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_struct_init2_in_value6053);
                    struct_init2726=struct_init2();

                    state._fsp--;

                    adaptor.addChild(root_0, struct_init2726.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "value"


    public static class string_value_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "string_value"
    // Objcm.g:1127:1: string_value : STRING_LITERAL ;
    public final ObjcmParser.string_value_return string_value() throws RecognitionException {
        ObjcmParser.string_value_return retval = new ObjcmParser.string_value_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STRING_LITERAL727=null;

        Object STRING_LITERAL727_tree=null;

        try {
            // Objcm.g:1128:2: ( STRING_LITERAL )
            // Objcm.g:1128:4: STRING_LITERAL
            {
            root_0 = (Object)adaptor.nil();


            STRING_LITERAL727=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_string_value6063); 
            STRING_LITERAL727_tree = 
            (Object)adaptor.create(STRING_LITERAL727)
            ;
            adaptor.addChild(root_0, STRING_LITERAL727_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "string_value"


    public static class null_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "null_stmt"
    // Objcm.g:1130:1: null_stmt : ( 'nil' | 'Nil' );
    public final ObjcmParser.null_stmt_return null_stmt() throws RecognitionException {
        ObjcmParser.null_stmt_return retval = new ObjcmParser.null_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set728=null;

        Object set728_tree=null;

        try {
            // Objcm.g:1130:11: ( 'nil' | 'Nil' )
            // Objcm.g:
            {
            root_0 = (Object)adaptor.nil();


            set728=(Token)input.LT(1);

            if ( input.LA(1)==179||input.LA(1)==195 ) {
                input.consume();
                adaptor.addChild(root_0, 
                (Object)adaptor.create(set728)
                );
                state.errorRecovery=false;
            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "null_stmt"


    public static class array_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "array"
    // Objcm.g:1132:1: array : L_FBR value ( COMMA value )* R_FBR ;
    public final ObjcmParser.array_return array() throws RecognitionException {
        ObjcmParser.array_return retval = new ObjcmParser.array_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_FBR729=null;
        Token COMMA731=null;
        Token R_FBR733=null;
        ObjcmParser.value_return value730 =null;

        ObjcmParser.value_return value732 =null;


        Object L_FBR729_tree=null;
        Object COMMA731_tree=null;
        Object R_FBR733_tree=null;

        try {
            // Objcm.g:1132:7: ( L_FBR value ( COMMA value )* R_FBR )
            // Objcm.g:1132:9: L_FBR value ( COMMA value )* R_FBR
            {
            root_0 = (Object)adaptor.nil();


            L_FBR729=(Token)match(input,L_FBR,FOLLOW_L_FBR_in_array6084); 
            L_FBR729_tree = 
            (Object)adaptor.create(L_FBR729)
            ;
            adaptor.addChild(root_0, L_FBR729_tree);


            pushFollow(FOLLOW_value_in_array6087);
            value730=value();

            state._fsp--;

            adaptor.addChild(root_0, value730.getTree());

            // Objcm.g:1132:23: ( COMMA value )*
            loop201:
            do {
                int alt201=2;
                int LA201_0 = input.LA(1);

                if ( (LA201_0==COMMA) ) {
                    alt201=1;
                }


                switch (alt201) {
            	case 1 :
            	    // Objcm.g:1132:24: COMMA value
            	    {
            	    COMMA731=(Token)match(input,COMMA,FOLLOW_COMMA_in_array6091); 
            	    COMMA731_tree = 
            	    (Object)adaptor.create(COMMA731)
            	    ;
            	    adaptor.addChild(root_0, COMMA731_tree);


            	    pushFollow(FOLLOW_value_in_array6094);
            	    value732=value();

            	    state._fsp--;

            	    adaptor.addChild(root_0, value732.getTree());

            	    }
            	    break;

            	default :
            	    break loop201;
                }
            } while (true);


            R_FBR733=(Token)match(input,R_FBR,FOLLOW_R_FBR_in_array6098); 
            R_FBR733_tree = 
            (Object)adaptor.create(R_FBR733)
            ;
            adaptor.addChild(root_0, R_FBR733_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "array"

    // Delegated rules


    protected DFA29 dfa29 = new DFA29(this);
    protected DFA49 dfa49 = new DFA49(this);
    protected DFA56 dfa56 = new DFA56(this);
    protected DFA74 dfa74 = new DFA74(this);
    protected DFA78 dfa78 = new DFA78(this);
    protected DFA83 dfa83 = new DFA83(this);
    protected DFA95 dfa95 = new DFA95(this);
    protected DFA96 dfa96 = new DFA96(this);
    protected DFA106 dfa106 = new DFA106(this);
    protected DFA153 dfa153 = new DFA153(this);
    protected DFA178 dfa178 = new DFA178(this);
    protected DFA200 dfa200 = new DFA200(this);
    static final String DFA29_eotS =
        "\u01ab\uffff";
    static final String DFA29_eofS =
        "\u01ab\uffff";
    static final String DFA29_minS =
        "\1\6\15\uffff\1\6\33\uffff\3\6\2\uffff\2\6\2\66\2\uffff\1\6\12\uffff"+
        "\2\6\7\uffff\2\6\2\66\15\uffff\2\6\6\uffff\2\6\2\66\15\uffff\2\6"+
        "\u0136\uffff";
    static final String DFA29_maxS =
        "\1\u00ca\15\uffff\1\u00c4\33\uffff\3\u00c4\2\uffff\2\u00c9\2\u00c4"+
        "\2\uffff\1\u00c9\12\uffff\2\u00c9\7\uffff\2\u00c9\2\u00c4\15\uffff"+
        "\2\u00c9\6\uffff\2\u00c9\2\u00c4\15\uffff\2\u00c9\u0136\uffff";
    static final String DFA29_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\24\uffff\1\7\1\10\1\11\1\12\1\13"+
        "\1\14\1\15\1\uffff\1\16\1\17\1\20\1\21\1\22\1\23\1\24\34\uffff\1"+
        "\6\31\uffff\1\6\30\uffff\1\6\1\uffff\26\6\1\uffff\35\6\24\uffff"+
        "\26\6\11\uffff\3\6\12\uffff\110\6\11\uffff\3\6\12\uffff\110\6\11"+
        "\uffff\3\6\12\uffff";
    static final String DFA29_specialS =
        "\u01ab\uffff}>";
    static final String[] DFA29_transitionS = {
            "\1\6\2\uffff\1\41\11\uffff\1\5\6\uffff\1\44\33\uffff\1\6\11"+
            "\uffff\1\6\2\uffff\1\6\5\uffff\1\6\4\uffff\1\6\1\uffff\1\6\4"+
            "\uffff\1\6\5\uffff\1\6\1\uffff\1\6\3\uffff\1\6\16\uffff\1\6"+
            "\16\uffff\1\47\2\uffff\1\41\1\6\2\uffff\1\3\3\uffff\3\6\1\uffff"+
            "\1\43\17\uffff\1\46\7\uffff\1\6\6\uffff\1\6\1\uffff\1\6\1\uffff"+
            "\1\2\1\1\1\6\1\uffff\1\45\1\6\2\uffff\1\6\1\uffff\1\4\1\34\1"+
            "\51\1\37\1\50\1\33\1\6\1\uffff\2\6\1\36\1\35\2\uffff\1\16\1"+
            "\40",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\46\57\uffff\1\52\147\uffff\1\46\27\uffff\1\54\2\uffff\1"+
            "\54\7\uffff\1\53\2\uffff\1\54",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\65\11\uffff\1\106\1\101\5\uffff\1\61\36\uffff\1\6\11\uffff"+
            "\2\6\1\100\1\57\1\106\2\100\1\6\1\uffff\1\60\1\6\1\100\3\6\1"+
            "\100\3\6\1\100\1\6\1\uffff\1\6\1\100\1\6\1\106\1\100\1\6\1\100"+
            "\3\6\1\100\1\uffff\1\6\1\100\33\uffff\1\106\36\uffff\1\6\4\uffff"+
            "\1\62\22\uffff\1\6\2\uffff\1\6\7\uffff\1\6\2\uffff\1\6",
            "\1\106\11\uffff\1\140\1\133\5\uffff\1\113\36\uffff\1\106\11"+
            "\uffff\2\106\1\132\1\111\1\106\2\132\1\106\1\uffff\1\112\1\106"+
            "\1\132\3\106\1\132\3\106\1\132\1\106\1\uffff\1\106\1\132\2\106"+
            "\1\132\1\106\1\132\3\106\1\132\1\uffff\1\106\1\132\33\uffff"+
            "\1\140\36\uffff\1\106\4\uffff\1\114\22\uffff\1\106\2\uffff\1"+
            "\106\7\uffff\1\106\2\uffff\1\106",
            "\1\140\11\uffff\1\171\1\164\5\uffff\1\144\36\uffff\1\140\11"+
            "\uffff\2\140\1\163\1\142\1\140\2\163\1\140\1\uffff\1\143\1\140"+
            "\1\163\3\140\1\163\3\140\1\163\1\140\1\uffff\1\140\1\163\2\140"+
            "\1\163\1\140\1\163\3\140\1\163\1\uffff\1\140\1\163\33\uffff"+
            "\1\171\36\uffff\1\140\4\uffff\1\145\22\uffff\1\140\2\uffff\1"+
            "\140\7\uffff\1\140\2\uffff\1\140",
            "",
            "",
            "\1\174\57\uffff\1\u0084\11\uffff\1\175\2\uffff\1\173\5\uffff"+
            "\1\u0087\4\uffff\1\176\1\uffff\1\u0082\4\uffff\1\177\5\uffff"+
            "\1\176\1\uffff\1\u0082\3\uffff\1\u0080\16\uffff\1\u0088\11\uffff"+
            "\1\u0090\10\uffff\1\u0081\6\uffff\1\u0089\1\u008a\1\u008b\21"+
            "\uffff\1\46\7\uffff\1\u008e\6\uffff\1\u008f\1\uffff\1\u008d"+
            "\3\uffff\1\u008c\2\uffff\1\u0086\2\uffff\1\u0086\7\uffff\1\u0085"+
            "\1\uffff\1\u008c\1\u0086\4\uffff\1\u0083",
            "\1\u0094\57\uffff\1\u009c\11\uffff\1\u0095\2\uffff\1\u0093"+
            "\5\uffff\1\u009f\4\uffff\1\u0096\1\uffff\1\u009a\4\uffff\1\u0097"+
            "\5\uffff\1\u0096\1\uffff\1\u009a\3\uffff\1\u0098\16\uffff\1"+
            "\u00a0\13\uffff\1\u0092\6\uffff\1\u0099\6\uffff\1\u00a1\1\u00a2"+
            "\1\u00a3\31\uffff\1\u00a6\6\uffff\1\u00a7\1\uffff\1\u00a5\3"+
            "\uffff\1\u00a4\2\uffff\1\u009e\2\uffff\1\u009e\7\uffff\1\u009d"+
            "\1\uffff\1\u00a4\1\u009e\4\uffff\1\u009b",
            "\1\u00a8\177\uffff\1\u00aa\2\uffff\1\u00aa\7\uffff\1\u00a9"+
            "\2\uffff\1\u00aa",
            "\1\u00ab\177\uffff\1\u00ad\2\uffff\1\u00ad\7\uffff\1\u00ac"+
            "\2\uffff\1\u00ad",
            "",
            "",
            "\1\171\57\uffff\1\171\11\uffff\1\171\2\uffff\1\u00ae\5\uffff"+
            "\1\171\4\uffff\1\171\1\uffff\1\171\4\uffff\1\171\5\uffff\1\171"+
            "\1\uffff\1\171\3\uffff\1\171\16\uffff\1\171\22\uffff\1\171\6"+
            "\uffff\3\171\31\uffff\1\171\6\uffff\1\171\1\uffff\1\171\3\uffff"+
            "\1\171\2\uffff\1\171\2\uffff\1\171\7\uffff\1\171\1\uffff\2\171"+
            "\4\uffff\1\171",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u00c4\57\uffff\1\u00cc\11\uffff\1\u00c5\2\uffff\1\u00c3"+
            "\4\uffff\1\u00d8\1\u00cf\4\uffff\1\u00c6\1\uffff\1\u00ca\4\uffff"+
            "\1\u00c7\5\uffff\1\u00c6\1\uffff\1\u00ca\3\uffff\1\u00c8\16"+
            "\uffff\1\u00d0\22\uffff\1\u00c9\6\uffff\1\u00d1\1\u00d2\1\u00d3"+
            "\31\uffff\1\u00d6\6\uffff\1\u00d7\1\uffff\1\u00d5\3\uffff\1"+
            "\u00d4\2\uffff\1\u00ce\2\uffff\1\u00ce\7\uffff\1\u00cd\1\uffff"+
            "\1\u00d4\1\u00ce\4\uffff\1\u00cb",
            "\1\171\57\uffff\1\u00e2\11\uffff\1\171\2\uffff\1\171\5\uffff"+
            "\1\171\4\uffff\1\171\1\uffff\1\171\4\uffff\1\171\5\uffff\1\171"+
            "\1\uffff\1\171\3\uffff\1\171\16\uffff\1\171\22\uffff\1\171\6"+
            "\uffff\3\171\21\uffff\1\46\7\uffff\1\171\6\uffff\1\171\1\uffff"+
            "\1\171\3\uffff\1\171\2\uffff\1\u00e4\2\uffff\1\u00e4\7\uffff"+
            "\1\u00e3\1\uffff\1\171\1\u00e4\4\uffff\1\171",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u00f0\57\uffff\1\u00f8\11\uffff\1\u00f1\2\uffff\1\u00ef"+
            "\5\uffff\1\u00fb\4\uffff\1\u00f2\1\uffff\1\u00f6\4\uffff\1\u00f3"+
            "\5\uffff\1\u00f2\1\uffff\1\u00f6\3\uffff\1\u00f4\16\uffff\1"+
            "\u00fc\11\uffff\1\u0104\10\uffff\1\u00f5\6\uffff\1\u00fd\1\u00fe"+
            "\1\u00ff\31\uffff\1\u0102\6\uffff\1\u0103\1\uffff\1\u0101\3"+
            "\uffff\1\u0100\2\uffff\1\u00fa\2\uffff\1\u00fa\7\uffff\1\u00f9"+
            "\1\uffff\1\u0100\1\u00fa\4\uffff\1\u00f7",
            "\1\u0106\57\uffff\1\u010e\11\uffff\1\u0107\2\uffff\1\u0105"+
            "\5\uffff\1\u0111\4\uffff\1\u0108\1\uffff\1\u010c\4\uffff\1\u0109"+
            "\5\uffff\1\u0108\1\uffff\1\u010c\3\uffff\1\u010a\16\uffff\1"+
            "\u0112\13\uffff\1\u011a\6\uffff\1\u010b\6\uffff\1\u0113\1\u0114"+
            "\1\u0115\31\uffff\1\u0118\6\uffff\1\u0119\1\uffff\1\u0117\3"+
            "\uffff\1\u0116\2\uffff\1\u0110\2\uffff\1\u0110\7\uffff\1\u010f"+
            "\1\uffff\1\u0116\1\u0110\4\uffff\1\u010d",
            "\1\u011b\177\uffff\1\u011d\2\uffff\1\u011d\7\uffff\1\u011c"+
            "\2\uffff\1\u011d",
            "\1\u011e\177\uffff\1\u0120\2\uffff\1\u0120\7\uffff\1\u011f"+
            "\2\uffff\1\u0120",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0122\57\uffff\1\u012a\11\uffff\1\u0123\2\uffff\1\u0121"+
            "\4\uffff\1\u0136\1\u012d\4\uffff\1\u0124\1\uffff\1\u0128\4\uffff"+
            "\1\u0125\5\uffff\1\u0124\1\uffff\1\u0128\3\uffff\1\u0126\16"+
            "\uffff\1\u012e\22\uffff\1\u0127\6\uffff\1\u012f\1\u0130\1\u0131"+
            "\31\uffff\1\u0134\6\uffff\1\u0135\1\uffff\1\u0133\3\uffff\1"+
            "\u0132\2\uffff\1\u012c\2\uffff\1\u012c\7\uffff\1\u012b\1\uffff"+
            "\1\u0132\1\u012c\4\uffff\1\u0129",
            "\1\171\57\uffff\1\u0140\11\uffff\1\171\2\uffff\1\171\5\uffff"+
            "\1\171\4\uffff\1\171\1\uffff\1\171\4\uffff\1\171\5\uffff\1\171"+
            "\1\uffff\1\171\3\uffff\1\171\16\uffff\1\171\22\uffff\1\171\6"+
            "\uffff\3\171\21\uffff\1\46\7\uffff\1\171\6\uffff\1\171\1\uffff"+
            "\1\171\3\uffff\1\171\2\uffff\1\u0142\2\uffff\1\u0142\7\uffff"+
            "\1\u0141\1\uffff\1\171\1\u0142\4\uffff\1\171",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u014e\57\uffff\1\u0156\11\uffff\1\u014f\2\uffff\1\u014d"+
            "\5\uffff\1\u0159\4\uffff\1\u0150\1\uffff\1\u0154\4\uffff\1\u0151"+
            "\5\uffff\1\u0150\1\uffff\1\u0154\3\uffff\1\u0152\16\uffff\1"+
            "\u015a\11\uffff\1\u0162\10\uffff\1\u0153\6\uffff\1\u015b\1\u015c"+
            "\1\u015d\31\uffff\1\u0160\6\uffff\1\u0161\1\uffff\1\u015f\3"+
            "\uffff\1\u015e\2\uffff\1\u0158\2\uffff\1\u0158\7\uffff\1\u0157"+
            "\1\uffff\1\u015e\1\u0158\4\uffff\1\u0155",
            "\1\u0164\57\uffff\1\u016c\11\uffff\1\u0165\2\uffff\1\u0163"+
            "\5\uffff\1\u016f\4\uffff\1\u0166\1\uffff\1\u016a\4\uffff\1\u0167"+
            "\5\uffff\1\u0166\1\uffff\1\u016a\3\uffff\1\u0168\16\uffff\1"+
            "\u0170\13\uffff\1\u0178\6\uffff\1\u0169\6\uffff\1\u0171\1\u0172"+
            "\1\u0173\31\uffff\1\u0176\6\uffff\1\u0177\1\uffff\1\u0175\3"+
            "\uffff\1\u0174\2\uffff\1\u016e\2\uffff\1\u016e\7\uffff\1\u016d"+
            "\1\uffff\1\u0174\1\u016e\4\uffff\1\u016b",
            "\1\u0179\177\uffff\1\u017b\2\uffff\1\u017b\7\uffff\1\u017a"+
            "\2\uffff\1\u017b",
            "\1\u017c\177\uffff\1\u017e\2\uffff\1\u017e\7\uffff\1\u017d"+
            "\2\uffff\1\u017e",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0180\57\uffff\1\u0188\11\uffff\1\u0181\2\uffff\1\u017f"+
            "\4\uffff\1\u0194\1\u018b\4\uffff\1\u0182\1\uffff\1\u0186\4\uffff"+
            "\1\u0183\5\uffff\1\u0182\1\uffff\1\u0186\3\uffff\1\u0184\16"+
            "\uffff\1\u018c\22\uffff\1\u0185\6\uffff\1\u018d\1\u018e\1\u018f"+
            "\31\uffff\1\u0192\6\uffff\1\u0193\1\uffff\1\u0191\3\uffff\1"+
            "\u0190\2\uffff\1\u018a\2\uffff\1\u018a\7\uffff\1\u0189\1\uffff"+
            "\1\u0190\1\u018a\4\uffff\1\u0187",
            "\1\171\57\uffff\1\u019e\11\uffff\1\171\2\uffff\1\171\5\uffff"+
            "\1\171\4\uffff\1\171\1\uffff\1\171\4\uffff\1\171\5\uffff\1\171"+
            "\1\uffff\1\171\3\uffff\1\171\16\uffff\1\171\22\uffff\1\171\6"+
            "\uffff\3\171\21\uffff\1\46\7\uffff\1\171\6\uffff\1\171\1\uffff"+
            "\1\171\3\uffff\1\171\2\uffff\1\u01a0\2\uffff\1\u01a0\7\uffff"+
            "\1\u019f\1\uffff\1\171\1\u01a0\4\uffff\1\171",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA29_eot = DFA.unpackEncodedString(DFA29_eotS);
    static final short[] DFA29_eof = DFA.unpackEncodedString(DFA29_eofS);
    static final char[] DFA29_min = DFA.unpackEncodedStringToUnsignedChars(DFA29_minS);
    static final char[] DFA29_max = DFA.unpackEncodedStringToUnsignedChars(DFA29_maxS);
    static final short[] DFA29_accept = DFA.unpackEncodedString(DFA29_acceptS);
    static final short[] DFA29_special = DFA.unpackEncodedString(DFA29_specialS);
    static final short[][] DFA29_transition;

    static {
        int numStates = DFA29_transitionS.length;
        DFA29_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA29_transition[i] = DFA.unpackEncodedString(DFA29_transitionS[i]);
        }
    }

    class DFA29 extends DFA {

        public DFA29(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 29;
            this.eot = DFA29_eot;
            this.eof = DFA29_eof;
            this.min = DFA29_min;
            this.max = DFA29_max;
            this.accept = DFA29_accept;
            this.special = DFA29_special;
            this.transition = DFA29_transition;
        }
        public String getDescription() {
            return "284:1: block_internal : ( try_stmt | throw_stmt_wrapper | static_start_wrapper SEMICOLON | do_stmt | const_expression SEMICOLON | variable_init_wrapper | if_stmt_wrapper | else_stmt | switch_stmt_wrapper | return_stmt | for_stmt_wrapper | while_stmt_wrapper | single_operators | struct_variable SEMICOLON | enum_variable SEMICOLON | typeof_started SEMICOLON | known_type_started SEMICOLON | SEMICOLON | goto_wrapper | 'extern' );";
        }
    }
    static final String DFA49_eotS =
        "\u0210\uffff";
    static final String DFA49_eofS =
        "\u0210\uffff";
    static final String DFA49_minS =
        "\1\66\1\21\6\uffff\1\27\1\uffff\2\6\15\uffff\2\6\20\uffff\4\6\1"+
        "\66\1\6\20\uffff\1\6\10\66\3\6\1\66\5\6\3\103\u01ba\uffff";
    static final String DFA49_maxS =
        "\1\u00c4\1\u00c9\6\uffff\1\u00c9\1\uffff\2\u00c9\15\uffff\2\u00c9"+
        "\20\uffff\1\u00c9\5\u00c4\20\uffff\10\u00c9\1\u00c4\3\u00a3\1\u00c4"+
        "\5\172\3\103\u01ba\uffff";
    static final String DFA49_acceptS =
        "\2\uffff\1\2\2\uffff\1\3\1\1\120\uffff\25\1\1\uffff\1\1\10\uffff"+
        "\4\1\1\uffff\1\1\7\uffff\3\1\10\uffff\1\1\13\uffff\4\1\21\uffff"+
        "\4\1\21\uffff\4\1\21\uffff\6\1\20\uffff\u00a4\1\1\uffff\23\1\1\uffff"+
        "\23\1\1\uffff\24\1\1\uffff\16\1\1\uffff\16\1\1\uffff\16\1\1\uffff"+
        "\16\1\1\uffff\3\1";
    static final String DFA49_specialS =
        "\u0210\uffff}>";
    static final String[] DFA49_transitionS = {
            "\1\2\110\uffff\1\5\36\uffff\1\2\27\uffff\1\2\2\uffff\1\2\7\uffff"+
            "\1\1\2\uffff\1\2",
            "\1\2\5\uffff\1\2\36\uffff\1\6\13\uffff\1\2\1\13\1\uffff\2\2"+
            "\2\uffff\1\12\1\uffff\1\2\3\uffff\1\2\3\uffff\1\2\3\uffff\1"+
            "\2\2\uffff\1\2\1\uffff\1\2\3\uffff\1\2\2\uffff\1\2\14\uffff"+
            "\1\6\16\uffff\1\2\12\uffff\3\6\26\uffff\1\2\2\uffff\1\6\6\uffff"+
            "\1\6\1\uffff\1\6\3\uffff\1\6\2\uffff\1\6\2\uffff\1\6\7\uffff"+
            "\1\10\1\uffff\2\6\4\uffff\1\6",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\6\36\uffff\1\2\14\uffff\1\31\5\uffff\1\32\2\uffff\1\6\43"+
            "\uffff\1\2\11\uffff\1\6\17\uffff\3\2\26\uffff\1\6\2\uffff\1"+
            "\2\6\uffff\1\2\1\uffff\1\2\3\uffff\1\2\2\uffff\1\2\2\uffff\1"+
            "\2\7\uffff\1\2\1\uffff\2\2\4\uffff\1\2",
            "",
            "\1\2\57\uffff\1\54\11\uffff\1\2\2\uffff\1\53\5\uffff\1\57\4"+
            "\uffff\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3"+
            "\uffff\1\2\16\uffff\1\2\13\uffff\1\2\6\uffff\1\2\6\uffff\1\60"+
            "\2\2\31\uffff\1\2\6\uffff\1\2\1\uffff\1\2\3\uffff\1\2\2\uffff"+
            "\1\56\2\uffff\1\56\7\uffff\1\55\1\uffff\1\2\1\56\4\uffff\1\2",
            "\1\102\57\uffff\1\112\11\uffff\1\103\2\uffff\1\101\5\uffff"+
            "\1\115\4\uffff\1\104\1\uffff\1\110\4\uffff\1\105\5\uffff\1\104"+
            "\1\uffff\1\110\3\uffff\1\106\16\uffff\1\116\11\uffff\1\2\10"+
            "\uffff\1\107\6\uffff\1\117\1\120\1\121\31\uffff\1\124\6\uffff"+
            "\1\125\1\uffff\1\123\3\uffff\1\122\2\uffff\1\114\2\uffff\1\114"+
            "\7\uffff\1\113\1\uffff\1\122\1\114\4\uffff\1\111",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\130\57\uffff\1\140\11\uffff\1\131\2\uffff\1\127\5\uffff"+
            "\1\143\4\uffff\1\132\1\uffff\1\136\4\uffff\1\133\5\uffff\1\132"+
            "\1\uffff\1\136\3\uffff\1\134\16\uffff\1\144\11\uffff\1\6\10"+
            "\uffff\1\135\6\uffff\1\145\1\146\1\147\31\uffff\1\152\6\uffff"+
            "\1\153\1\uffff\1\151\3\uffff\1\150\2\uffff\1\142\2\uffff\1\142"+
            "\7\uffff\1\141\1\uffff\1\150\1\142\4\uffff\1\137",
            "\1\6\57\uffff\1\166\11\uffff\1\6\2\uffff\1\155\5\uffff\1\171"+
            "\4\uffff\1\6\1\uffff\1\6\4\uffff\1\6\5\uffff\1\6\1\uffff\1\6"+
            "\3\uffff\1\6\16\uffff\1\6\13\uffff\1\6\6\uffff\1\6\6\uffff\1"+
            "\173\2\6\31\uffff\1\6\6\uffff\1\6\1\uffff\1\6\3\uffff\1\6\2"+
            "\uffff\1\170\2\uffff\1\170\7\uffff\1\167\1\uffff\1\6\1\170\4"+
            "\uffff\1\6",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\2\14\uffff\1\u0083\42\uffff\1\u0085\11\uffff\1\2\2\uffff"+
            "\1\2\5\uffff\1\2\4\uffff\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff"+
            "\1\2\1\uffff\1\2\3\uffff\1\2\16\uffff\1\2\22\uffff\1\2\6\uffff"+
            "\3\2\21\uffff\1\u008e\7\uffff\1\2\6\uffff\1\2\1\uffff\1\2\3"+
            "\uffff\1\2\2\uffff\1\2\2\uffff\1\2\7\uffff\1\2\1\uffff\2\2\4"+
            "\uffff\1\u0084",
            "\1\2\20\uffff\1\u009c\36\uffff\1\6\11\uffff\3\2\1\u009a\4\2"+
            "\1\uffff\1\u009b\13\2\1\uffff\13\2\1\uffff\2\2\30\uffff\1\2"+
            "\46\uffff\1\u009d\22\uffff\1\6\2\uffff\1\6\12\uffff\1\6",
            "\1\2\20\uffff\1\u00b1\36\uffff\1\6\11\uffff\3\2\1\u00af\4\2"+
            "\1\uffff\1\u00b0\13\2\1\uffff\13\2\1\uffff\2\2\30\uffff\1\2"+
            "\46\uffff\1\u00b2\22\uffff\1\6\2\uffff\1\6\12\uffff\1\6",
            "\1\2\20\uffff\1\u00c6\36\uffff\1\6\11\uffff\3\2\1\u00c4\4\2"+
            "\1\uffff\1\u00c5\13\2\1\uffff\13\2\1\uffff\2\2\30\uffff\1\2"+
            "\46\uffff\1\u00c7\22\uffff\1\6\2\uffff\1\6\12\uffff\1\6",
            "\1\u00da\14\uffff\1\u00d9\5\uffff\1\u00dd\100\uffff\1\u00de"+
            "\53\uffff\1\u00dc\2\uffff\1\u00dc\7\uffff\1\u00db\2\uffff\1"+
            "\u00dc",
            "\1\2\57\uffff\1\6\11\uffff\3\2\1\uffff\4\2\2\uffff\13\2\1\uffff"+
            "\13\2\1\uffff\2\2\30\uffff\1\2\71\uffff\1\6\2\uffff\1\6\12\uffff"+
            "\1\6",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u00f3\14\uffff\1\u00ef\42\uffff\1\u00f1\11\uffff\1\u00f4"+
            "\2\uffff\1\u00f2\5\uffff\1\u00fd\4\uffff\1\u00f5\1\uffff\1\u00f9"+
            "\4\uffff\1\u00f6\5\uffff\1\u00f5\1\uffff\1\u00f9\3\uffff\1\u00f7"+
            "\16\uffff\1\u00fe\22\uffff\1\u00f8\6\uffff\1\u00ff\1\u0100\1"+
            "\u0101\21\uffff\1\u00fa\7\uffff\1\u0104\6\uffff\1\u0105\1\uffff"+
            "\1\u0103\3\uffff\1\u0102\2\uffff\1\u00fc\2\uffff\1\u00fc\7\uffff"+
            "\1\u00fb\1\uffff\1\u0102\1\u00fc\4\uffff\1\u00f0",
            "\1\u010e\11\uffff\1\u0107\2\uffff\1\u0106\5\uffff\1\u0111\4"+
            "\uffff\1\u0108\1\uffff\1\u010c\4\uffff\1\u0109\5\uffff\1\u0108"+
            "\1\uffff\1\u010c\3\uffff\1\u010a\16\uffff\1\u0112\22\uffff\1"+
            "\u010b\6\uffff\1\u0113\1\u0114\1\u0115\31\uffff\1\u0118\6\uffff"+
            "\1\u0119\1\uffff\1\u0117\3\uffff\1\u0116\2\uffff\1\u0110\2\uffff"+
            "\1\u0110\7\uffff\1\u010f\1\uffff\1\u0116\1\u0110\4\uffff\1\u010d",
            "\1\u0120\14\uffff\1\u0124\5\uffff\1\u0123\4\uffff\1\u011a\1"+
            "\uffff\1\u011e\4\uffff\1\u011b\5\uffff\1\u011a\1\uffff\1\u011e"+
            "\3\uffff\1\u011c\16\uffff\1\u0125\22\uffff\1\u011d\6\uffff\1"+
            "\u0126\1\u0127\1\u0128\31\uffff\1\u012b\6\uffff\1\u012c\1\uffff"+
            "\1\u012a\3\uffff\1\u0129\2\uffff\1\u0122\2\uffff\1\u0122\7\uffff"+
            "\1\u0121\1\uffff\1\u0129\1\u0122\4\uffff\1\u011f",
            "\1\u0132\14\uffff\1\u0136\5\uffff\1\u0135\6\uffff\1\u0130\4"+
            "\uffff\1\u012d\7\uffff\1\u0130\3\uffff\1\u012e\16\uffff\1\u0137"+
            "\22\uffff\1\u012f\6\uffff\1\u0138\1\u0139\1\u013a\31\uffff\1"+
            "\u013d\6\uffff\1\u013e\1\uffff\1\u013c\3\uffff\1\u013b\2\uffff"+
            "\1\u0134\2\uffff\1\u0134\7\uffff\1\u0133\1\uffff\1\u013b\1\u0134"+
            "\4\uffff\1\u0131",
            "\1\u0143\14\uffff\1\u0147\5\uffff\1\u0146\6\uffff\1\u0141\14"+
            "\uffff\1\u0141\3\uffff\1\u013f\16\uffff\1\u0148\22\uffff\1\u0140"+
            "\6\uffff\1\u0149\1\u014a\1\u014b\31\uffff\1\u014e\6\uffff\1"+
            "\u014f\1\uffff\1\u014d\3\uffff\1\u014c\2\uffff\1\u0145\2\uffff"+
            "\1\u0145\7\uffff\1\u0144\1\uffff\1\u014c\1\u0145\4\uffff\1\u0142",
            "\1\u0153\14\uffff\1\u0157\5\uffff\1\u0156\6\uffff\1\u0151\14"+
            "\uffff\1\u0151\22\uffff\1\u0158\22\uffff\1\u0150\6\uffff\1\u0159"+
            "\1\u015a\1\u015b\31\uffff\1\u015e\6\uffff\1\u015f\1\uffff\1"+
            "\u015d\3\uffff\1\u015c\2\uffff\1\u0155\2\uffff\1\u0155\7\uffff"+
            "\1\u0154\1\uffff\1\u015c\1\u0155\4\uffff\1\u0152",
            "\1\u0162\14\uffff\1\u0166\5\uffff\1\u0165\6\uffff\1\u0160\14"+
            "\uffff\1\u0160\22\uffff\1\u0167\31\uffff\1\u0168\1\u0169\1\u016a"+
            "\31\uffff\1\u016d\6\uffff\1\u016e\1\uffff\1\u016c\3\uffff\1"+
            "\u016b\2\uffff\1\u0164\2\uffff\1\u0164\7\uffff\1\u0163\1\uffff"+
            "\1\u016b\1\u0164\4\uffff\1\u0161",
            "\1\u0170\14\uffff\1\u0174\5\uffff\1\u0173\46\uffff\1\u0175"+
            "\31\uffff\1\u0176\1\u0177\1\u0178\31\uffff\1\u017b\6\uffff\1"+
            "\u017c\1\uffff\1\u017a\3\uffff\1\u0179\2\uffff\1\u0172\2\uffff"+
            "\1\u0172\7\uffff\1\u0171\1\uffff\1\u0179\1\u0172\4\uffff\1\u016f",
            "\1\u017d\177\uffff\1\u017f\2\uffff\1\u017f\7\uffff\1\u017e"+
            "\2\uffff\1\u017f",
            "\1\u0186\12\uffff\1\2\5\uffff\1\u0182\50\uffff\1\u018b\1\u018e"+
            "\1\u0191\1\u0180\1\u0186\2\u0191\1\u018a\1\uffff\1\u0181\1\u0188"+
            "\1\u0191\1\u0184\1\u0189\1\u0187\1\u0191\1\u0185\2\u0189\1\u0191"+
            "\1\u018a\1\uffff\1\u018d\1\u0191\1\u018f\1\u0186\1\u0191\1\u0187"+
            "\1\u0191\1\u0185\1\u0190\1\u0188\1\u0191\1\uffff\1\u018c\1\u0191"+
            "\26\uffff\1\u0192\50\uffff\1\u0183",
            "\1\u019a\12\uffff\1\2\5\uffff\1\u0196\50\uffff\1\u019f\1\u01a2"+
            "\1\u01a5\1\u0194\1\u019a\2\u01a5\1\u019e\1\uffff\1\u0195\1\u019c"+
            "\1\u01a5\1\u0198\1\u019d\1\u019b\1\u01a5\1\u0199\2\u019d\1\u01a5"+
            "\1\u019e\1\uffff\1\u01a1\1\u01a5\1\u01a3\1\u019a\1\u01a5\1\u019b"+
            "\1\u01a5\1\u0199\1\u01a4\1\u019c\1\u01a5\1\uffff\1\u01a0\1\u01a5"+
            "\26\uffff\1\u01a6\50\uffff\1\u0197",
            "\1\u01ae\12\uffff\1\2\5\uffff\1\u01aa\50\uffff\1\u01b3\1\u01b6"+
            "\1\u01b9\1\u01a8\1\u01ae\2\u01b9\1\u01b2\1\uffff\1\u01a9\1\u01b0"+
            "\1\u01b9\1\u01ac\1\u01b1\1\u01af\1\u01b9\1\u01ad\2\u01b1\1\u01b9"+
            "\1\u01b2\1\uffff\1\u01b5\1\u01b9\1\u01b7\1\u01ae\1\u01b9\1\u01af"+
            "\1\u01b9\1\u01ad\1\u01b8\1\u01b0\1\u01b9\1\uffff\1\u01b4\1\u01b9"+
            "\26\uffff\1\u01ba\50\uffff\1\u01ab",
            "\1\u01bd\14\uffff\1\u01bc\5\uffff\1\u01c0\100\uffff\1\u01c1"+
            "\53\uffff\1\u01bf\2\uffff\1\u01bf\7\uffff\1\u01be\2\uffff\1"+
            "\u01bf",
            "\1\u01c3\12\uffff\1\2\56\uffff\1\u01c8\1\u01cb\1\u01ce\1\uffff"+
            "\1\u01c3\2\u01ce\1\u01c7\2\uffff\1\u01c5\1\u01ce\2\u01c6\1\u01c4"+
            "\1\u01ce\1\u01c2\2\u01c6\1\u01ce\1\u01c7\1\uffff\1\u01ca\1\u01ce"+
            "\1\u01cc\1\u01c3\1\u01ce\1\u01c4\1\u01ce\1\u01c2\1\u01cd\1\u01c5"+
            "\1\u01ce\1\uffff\1\u01c9\1\u01ce\26\uffff\1\u01cf",
            "\1\u01d2\12\uffff\1\2\56\uffff\1\u01d7\1\u01da\1\u01dd\1\uffff"+
            "\1\u01d2\2\u01dd\1\u01d6\2\uffff\1\u01d4\1\u01dd\2\u01d5\1\u01d3"+
            "\1\u01dd\1\u01d1\2\u01d5\1\u01dd\1\u01d6\1\uffff\1\u01d9\1\u01dd"+
            "\1\u01db\1\u01d2\1\u01dd\1\u01d3\1\u01dd\1\u01d1\1\u01dc\1\u01d4"+
            "\1\u01dd\1\uffff\1\u01d8\1\u01dd\26\uffff\1\u01de",
            "\1\u01e1\12\uffff\1\2\56\uffff\1\u01e6\1\u01e9\1\u01ec\1\uffff"+
            "\1\u01e1\2\u01ec\1\u01e5\2\uffff\1\u01e3\1\u01ec\2\u01e4\1\u01e2"+
            "\1\u01ec\1\u01e0\2\u01e4\1\u01ec\1\u01e5\1\uffff\1\u01e8\1\u01ec"+
            "\1\u01ea\1\u01e1\1\u01ec\1\u01e2\1\u01ec\1\u01e0\1\u01eb\1\u01e3"+
            "\1\u01ec\1\uffff\1\u01e7\1\u01ec\26\uffff\1\u01ed",
            "\1\u01f0\12\uffff\1\2\56\uffff\1\u01f5\1\u01f8\1\u01fb\1\uffff"+
            "\1\u01f0\2\u01fb\1\u01f4\2\uffff\1\u01f2\1\u01fb\2\u01f3\1\u01f1"+
            "\1\u01fb\1\u01ef\2\u01f3\1\u01fb\1\u01f4\1\uffff\1\u01f7\1\u01fb"+
            "\1\u01f9\1\u01f0\1\u01fb\1\u01f1\1\u01fb\1\u01ef\1\u01fa\1\u01f2"+
            "\1\u01fb\1\uffff\1\u01f6\1\u01fb\26\uffff\1\u01fc",
            "\1\u01ff\12\uffff\1\2\56\uffff\1\u0204\1\u0207\1\u020a\1\uffff"+
            "\1\u01ff\2\u020a\1\u0203\2\uffff\1\u0201\1\u020a\2\u0202\1\u0200"+
            "\1\u020a\1\u01fe\2\u0202\1\u020a\1\u0203\1\uffff\1\u0206\1\u020a"+
            "\1\u0208\1\u01ff\1\u020a\1\u0200\1\u020a\1\u01fe\1\u0209\1\u0201"+
            "\1\u020a\1\uffff\1\u0205\1\u020a\26\uffff\1\u020b",
            "\1\u020d",
            "\1\u020e",
            "\1\u020f",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA49_eot = DFA.unpackEncodedString(DFA49_eotS);
    static final short[] DFA49_eof = DFA.unpackEncodedString(DFA49_eofS);
    static final char[] DFA49_min = DFA.unpackEncodedStringToUnsignedChars(DFA49_minS);
    static final char[] DFA49_max = DFA.unpackEncodedStringToUnsignedChars(DFA49_maxS);
    static final short[] DFA49_accept = DFA.unpackEncodedString(DFA49_acceptS);
    static final short[] DFA49_special = DFA.unpackEncodedString(DFA49_specialS);
    static final short[][] DFA49_transition;

    static {
        int numStates = DFA49_transitionS.length;
        DFA49_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA49_transition[i] = DFA.unpackEncodedString(DFA49_transitionS[i]);
        }
    }

    class DFA49 extends DFA {

        public DFA49(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 49;
            this.eot = DFA49_eot;
            this.eof = DFA49_eof;
            this.min = DFA49_min;
            this.max = DFA49_max;
            this.accept = DFA49_accept;
            this.special = DFA49_special;
            this.transition = DFA49_transition;
        }
        public String getDescription() {
            return "449:22: ( for_stmt_int1 | ( full_expr2 ( for_stmt_int1 | for_stmt_int2 ) ) | for_stmt_int2 )";
        }
    }
    static final String DFA56_eotS =
        "\u0890\uffff";
    static final String DFA56_eofS =
        "\u0890\uffff";
    static final String DFA56_minS =
        "\1\66\3\6\1\uffff\2\6\2\66\1\6\7\uffff\2\6\2\66\10\uffff\2\6\2\66"+
        "\10\uffff\1\6\10\66\3\6\1\66\5\6\3\103\1\6\1\uffff\2\6\10\66\3\6"+
        "\1\66\5\6\3\103\6\6\6\uffff\1\6\10\66\3\6\1\66\5\6\3\103\2\6\10"+
        "\66\3\6\1\66\5\6\3\103\10\6\10\66\3\6\1\66\5\6\3\103\2\6\10\66\3"+
        "\6\1\66\5\6\3\103\7\6\u07ca\uffff";
    static final String DFA56_maxS =
        "\4\u00c4\1\uffff\2\u00c9\3\u00c4\7\uffff\2\u00c9\2\u00c4\10\uffff"+
        "\2\u00c9\2\u00c4\10\uffff\10\u00c9\1\u00c4\3\u00a3\1\u00c4\5\172"+
        "\3\103\1\u00c4\1\uffff\1\u00c4\10\u00c9\1\u00c4\3\u00a3\1\u00c4"+
        "\5\174\3\103\6\u00c4\6\uffff\10\u00c9\1\u00c4\3\u00a3\1\u00c4\5"+
        "\172\3\103\1\u00c4\10\u00c9\1\u00c4\3\u00a3\1\u00c4\5\174\3\103"+
        "\7\u00c4\10\u00c9\1\u00c4\3\u00a3\1\u00c4\5\172\3\103\1\u00c4\10"+
        "\u00c9\1\u00c4\3\u00a3\1\u00c4\5\174\3\103\7\u00c4\u07ca\uffff";
    static final String DFA56_acceptS =
        "\4\uffff\1\2\5\uffff\1\1\u00bb\uffff\53\1\1\uffff\u00f9\1\10\uffff"+
        "\1\1\1\uffff\2\1\4\uffff\1\1\3\uffff\u011b\1\5\uffff\2\1\3\uffff"+
        "\2\1\5\uffff\2\1\3\uffff\2\1\5\uffff\2\1\3\uffff\2\1\5\uffff\2\1"+
        "\3\uffff\2\1\5\uffff\2\1\3\uffff\2\1\5\uffff\2\1\3\uffff\u0124\1"+
        "\10\uffff\u011b\1\5\uffff\1\1\3\uffff\2\1\5\uffff\2\1\3\uffff\2"+
        "\1\5\uffff\2\1\3\uffff\2\1\5\uffff\2\1\3\uffff\2\1\5\uffff\2\1\3"+
        "\uffff\2\1\5\uffff\2\1\3\uffff\2\1\5\uffff\2\1\3\uffff\u0124\1\10"+
        "\uffff\u011b\1\5\uffff\1\1\3\uffff\2\1\5\uffff\2\1\3\uffff\2\1\5"+
        "\uffff\2\1\3\uffff\2\1\5\uffff\2\1\3\uffff\2\1\5\uffff\2\1\3\uffff"+
        "\2\1\5\uffff\2\1\3\uffff\2\1\5\uffff\2\1\3\uffff";
    static final String DFA56_specialS =
        "\u0890\uffff}>";
    static final String[] DFA56_transitionS = {
            "\1\1\147\uffff\1\4\27\uffff\1\3\2\uffff\1\3\7\uffff\1\2\2\uffff"+
            "\1\3",
            "\1\11\12\uffff\1\4\5\uffff\1\7\36\uffff\1\12\13\uffff\1\4\1"+
            "\5\1\uffff\2\4\2\uffff\1\6\1\uffff\1\4\3\uffff\1\4\3\uffff\1"+
            "\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\3\uffff\1\4\2\uffff\1"+
            "\4\33\uffff\1\4\36\uffff\1\12\4\uffff\1\10\22\uffff\1\12\2\uffff"+
            "\1\12\7\uffff\1\12\2\uffff\1\12",
            "\1\12\12\uffff\1\4\5\uffff\1\23\36\uffff\1\12\13\uffff\1\4"+
            "\1\21\1\uffff\2\4\2\uffff\1\22\1\uffff\1\4\3\uffff\1\4\3\uffff"+
            "\1\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\3\uffff\1\4\2\uffff"+
            "\1\4\33\uffff\1\4\36\uffff\1\12\4\uffff\1\24\22\uffff\1\12\2"+
            "\uffff\1\12\7\uffff\1\12\2\uffff\1\12",
            "\1\12\12\uffff\1\4\5\uffff\1\37\36\uffff\1\12\13\uffff\1\4"+
            "\1\35\1\uffff\2\4\2\uffff\1\36\1\uffff\1\4\3\uffff\1\4\3\uffff"+
            "\1\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\3\uffff\1\4\2\uffff"+
            "\1\4\33\uffff\1\4\36\uffff\1\12\4\uffff\1\40\22\uffff\1\12\2"+
            "\uffff\1\12\7\uffff\1\12\2\uffff\1\12",
            "",
            "\1\52\57\uffff\1\62\11\uffff\1\53\2\uffff\1\51\5\uffff\1\65"+
            "\4\uffff\1\54\1\uffff\1\60\4\uffff\1\55\5\uffff\1\54\1\uffff"+
            "\1\60\3\uffff\1\56\16\uffff\1\66\11\uffff\1\76\10\uffff\1\57"+
            "\6\uffff\1\67\1\70\1\71\21\uffff\1\4\7\uffff\1\74\6\uffff\1"+
            "\75\1\uffff\1\73\3\uffff\1\72\2\uffff\1\64\2\uffff\1\64\7\uffff"+
            "\1\63\1\uffff\1\72\1\64\4\uffff\1\61",
            "\1\102\57\uffff\1\112\11\uffff\1\103\2\uffff\1\101\5\uffff"+
            "\1\115\4\uffff\1\104\1\uffff\1\110\4\uffff\1\105\5\uffff\1\104"+
            "\1\uffff\1\110\3\uffff\1\106\16\uffff\1\116\13\uffff\1\100\6"+
            "\uffff\1\107\6\uffff\1\117\1\120\1\121\31\uffff\1\124\6\uffff"+
            "\1\125\1\uffff\1\123\3\uffff\1\122\2\uffff\1\114\2\uffff\1\114"+
            "\7\uffff\1\113\1\uffff\1\122\1\114\4\uffff\1\111",
            "\1\126\177\uffff\1\130\2\uffff\1\130\7\uffff\1\127\2\uffff"+
            "\1\130",
            "\1\131\177\uffff\1\133\2\uffff\1\133\7\uffff\1\132\2\uffff"+
            "\1\133",
            "\1\12\57\uffff\1\12\14\uffff\1\4\132\uffff\1\12\27\uffff\1"+
            "\12\2\uffff\1\12\7\uffff\1\12\2\uffff\1\12",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\143\57\uffff\1\153\11\uffff\1\144\2\uffff\1\142\5\uffff"+
            "\1\156\4\uffff\1\145\1\uffff\1\151\4\uffff\1\146\5\uffff\1\145"+
            "\1\uffff\1\151\3\uffff\1\147\16\uffff\1\157\11\uffff\1\167\10"+
            "\uffff\1\150\6\uffff\1\160\1\161\1\162\31\uffff\1\165\6\uffff"+
            "\1\166\1\uffff\1\164\3\uffff\1\163\2\uffff\1\155\2\uffff\1\155"+
            "\7\uffff\1\154\1\uffff\1\163\1\155\4\uffff\1\152",
            "\1\171\57\uffff\1\u0081\11\uffff\1\172\2\uffff\1\170\5\uffff"+
            "\1\u0084\4\uffff\1\173\1\uffff\1\177\4\uffff\1\174\5\uffff\1"+
            "\173\1\uffff\1\177\3\uffff\1\175\16\uffff\1\u0085\13\uffff\1"+
            "\u008d\6\uffff\1\176\6\uffff\1\u0086\1\u0087\1\u0088\31\uffff"+
            "\1\u008b\6\uffff\1\u008c\1\uffff\1\u008a\3\uffff\1\u0089\2\uffff"+
            "\1\u0083\2\uffff\1\u0083\7\uffff\1\u0082\1\uffff\1\u0089\1\u0083"+
            "\4\uffff\1\u0080",
            "\1\u008e\177\uffff\1\u0090\2\uffff\1\u0090\7\uffff\1\u008f"+
            "\2\uffff\1\u0090",
            "\1\u0091\177\uffff\1\u0093\2\uffff\1\u0093\7\uffff\1\u0092"+
            "\2\uffff\1\u0093",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0095\57\uffff\1\u009d\11\uffff\1\u0096\2\uffff\1\u0094"+
            "\5\uffff\1\u00a0\4\uffff\1\u0097\1\uffff\1\u009b\4\uffff\1\u0098"+
            "\5\uffff\1\u0097\1\uffff\1\u009b\3\uffff\1\u0099\16\uffff\1"+
            "\u00a1\11\uffff\1\u00a9\10\uffff\1\u009a\6\uffff\1\u00a2\1\u00a3"+
            "\1\u00a4\31\uffff\1\u00a7\6\uffff\1\u00a8\1\uffff\1\u00a6\3"+
            "\uffff\1\u00a5\2\uffff\1\u009f\2\uffff\1\u009f\7\uffff\1\u009e"+
            "\1\uffff\1\u00a5\1\u009f\4\uffff\1\u009c",
            "\1\u00ab\57\uffff\1\u00b3\11\uffff\1\u00ac\2\uffff\1\u00aa"+
            "\5\uffff\1\u00b6\4\uffff\1\u00ad\1\uffff\1\u00b1\4\uffff\1\u00ae"+
            "\5\uffff\1\u00ad\1\uffff\1\u00b1\3\uffff\1\u00af\16\uffff\1"+
            "\u00b7\13\uffff\1\u00bf\6\uffff\1\u00b0\6\uffff\1\u00b8\1\u00b9"+
            "\1\u00ba\31\uffff\1\u00bd\6\uffff\1\u00be\1\uffff\1\u00bc\3"+
            "\uffff\1\u00bb\2\uffff\1\u00b5\2\uffff\1\u00b5\7\uffff\1\u00b4"+
            "\1\uffff\1\u00bb\1\u00b5\4\uffff\1\u00b2",
            "\1\u00c0\177\uffff\1\u00c2\2\uffff\1\u00c2\7\uffff\1\u00c1"+
            "\2\uffff\1\u00c2",
            "\1\u00c3\177\uffff\1\u00c5\2\uffff\1\u00c5\7\uffff\1\u00c4"+
            "\2\uffff\1\u00c5",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u00ca\14\uffff\1\u00c6\42\uffff\1\u00c8\11\uffff\1\u00cb"+
            "\2\uffff\1\u00c9\5\uffff\1\u00d4\4\uffff\1\u00cc\1\uffff\1\u00d0"+
            "\4\uffff\1\u00cd\5\uffff\1\u00cc\1\uffff\1\u00d0\3\uffff\1\u00ce"+
            "\16\uffff\1\u00d5\22\uffff\1\u00cf\6\uffff\1\u00d6\1\u00d7\1"+
            "\u00d8\21\uffff\1\u00d1\7\uffff\1\u00db\6\uffff\1\u00dc\1\uffff"+
            "\1\u00da\3\uffff\1\u00d9\2\uffff\1\u00d3\2\uffff\1\u00d3\7\uffff"+
            "\1\u00d2\1\uffff\1\u00d9\1\u00d3\4\uffff\1\u00c7",
            "\1\u00e5\11\uffff\1\u00de\2\uffff\1\u00dd\5\uffff\1\u00e8\4"+
            "\uffff\1\u00df\1\uffff\1\u00e3\4\uffff\1\u00e0\5\uffff\1\u00df"+
            "\1\uffff\1\u00e3\3\uffff\1\u00e1\16\uffff\1\u00e9\22\uffff\1"+
            "\u00e2\6\uffff\1\u00ea\1\u00eb\1\u00ec\21\uffff\1\4\7\uffff"+
            "\1\u00ef\6\uffff\1\u00f0\1\uffff\1\u00ee\3\uffff\1\u00ed\2\uffff"+
            "\1\u00e7\2\uffff\1\u00e7\7\uffff\1\u00e6\1\uffff\1\u00ed\1\u00e7"+
            "\4\uffff\1\u00e4",
            "\1\u00f8\14\uffff\1\u00fc\5\uffff\1\u00fb\4\uffff\1\u00f2\1"+
            "\uffff\1\u00f6\4\uffff\1\u00f3\5\uffff\1\u00f2\1\uffff\1\u00f6"+
            "\3\uffff\1\u00f4\16\uffff\1\u00fd\22\uffff\1\u00f5\6\uffff\1"+
            "\u00fe\1\u00ff\1\u0100\31\uffff\1\u0103\6\uffff\1\u0104\1\uffff"+
            "\1\u0102\3\uffff\1\u0101\2\uffff\1\u00fa\2\uffff\1\u00fa\7\uffff"+
            "\1\u00f9\1\uffff\1\u0101\1\u00fa\4\uffff\1\u00f7",
            "\1\u010a\14\uffff\1\u010e\5\uffff\1\u010d\6\uffff\1\u0108\4"+
            "\uffff\1\u0105\7\uffff\1\u0108\3\uffff\1\u0106\16\uffff\1\u010f"+
            "\22\uffff\1\u0107\6\uffff\1\u0110\1\u0111\1\u0112\31\uffff\1"+
            "\u0115\6\uffff\1\u0116\1\uffff\1\u0114\3\uffff\1\u0113\2\uffff"+
            "\1\u010c\2\uffff\1\u010c\7\uffff\1\u010b\1\uffff\1\u0113\1\u010c"+
            "\4\uffff\1\u0109",
            "\1\u011b\14\uffff\1\u011f\5\uffff\1\u011e\6\uffff\1\u0119\14"+
            "\uffff\1\u0119\3\uffff\1\u0117\16\uffff\1\u0120\22\uffff\1\u0118"+
            "\6\uffff\1\u0121\1\u0122\1\u0123\31\uffff\1\u0126\6\uffff\1"+
            "\u0127\1\uffff\1\u0125\3\uffff\1\u0124\2\uffff\1\u011d\2\uffff"+
            "\1\u011d\7\uffff\1\u011c\1\uffff\1\u0124\1\u011d\4\uffff\1\u011a",
            "\1\u012b\14\uffff\1\u012f\5\uffff\1\u012e\6\uffff\1\u0129\14"+
            "\uffff\1\u0129\22\uffff\1\u0130\22\uffff\1\u0128\6\uffff\1\u0131"+
            "\1\u0132\1\u0133\31\uffff\1\u0136\6\uffff\1\u0137\1\uffff\1"+
            "\u0135\3\uffff\1\u0134\2\uffff\1\u012d\2\uffff\1\u012d\7\uffff"+
            "\1\u012c\1\uffff\1\u0134\1\u012d\4\uffff\1\u012a",
            "\1\u013a\14\uffff\1\u013e\5\uffff\1\u013d\6\uffff\1\u0138\14"+
            "\uffff\1\u0138\22\uffff\1\u013f\31\uffff\1\u0140\1\u0141\1\u0142"+
            "\31\uffff\1\u0145\6\uffff\1\u0146\1\uffff\1\u0144\3\uffff\1"+
            "\u0143\2\uffff\1\u013c\2\uffff\1\u013c\7\uffff\1\u013b\1\uffff"+
            "\1\u0143\1\u013c\4\uffff\1\u0139",
            "\1\u0148\14\uffff\1\u014c\5\uffff\1\u014b\46\uffff\1\u014d"+
            "\31\uffff\1\u014e\1\u014f\1\u0150\31\uffff\1\u0153\6\uffff\1"+
            "\u0154\1\uffff\1\u0152\3\uffff\1\u0151\2\uffff\1\u014a\2\uffff"+
            "\1\u014a\7\uffff\1\u0149\1\uffff\1\u0151\1\u014a\4\uffff\1\u0147",
            "\1\u0155\177\uffff\1\u0157\2\uffff\1\u0157\7\uffff\1\u0156"+
            "\2\uffff\1\u0157",
            "\1\u015e\12\uffff\1\u016a\5\uffff\1\u015a\50\uffff\1\u0163"+
            "\1\u0166\1\u0169\1\u0158\1\u015e\2\u0169\1\u0162\1\uffff\1\u0159"+
            "\1\u0160\1\u0169\1\u015c\1\u0161\1\u015f\1\u0169\1\u015d\2\u0161"+
            "\1\u0169\1\u0162\1\uffff\1\u0165\1\u0169\1\u0167\1\u015e\1\u0169"+
            "\1\u015f\1\u0169\1\u015d\1\u0168\1\u0160\1\u0169\1\uffff\1\u0164"+
            "\1\u0169\26\uffff\1\u016b\50\uffff\1\u015b",
            "\1\u0172\12\uffff\1\u017e\5\uffff\1\u016e\50\uffff\1\u0177"+
            "\1\u017a\1\u017d\1\u016c\1\u0172\2\u017d\1\u0176\1\uffff\1\u016d"+
            "\1\u0174\1\u017d\1\u0170\1\u0175\1\u0173\1\u017d\1\u0171\2\u0175"+
            "\1\u017d\1\u0176\1\uffff\1\u0179\1\u017d\1\u017b\1\u0172\1\u017d"+
            "\1\u0173\1\u017d\1\u0171\1\u017c\1\u0174\1\u017d\1\uffff\1\u0178"+
            "\1\u017d\26\uffff\1\u017f\50\uffff\1\u016f",
            "\1\u0186\12\uffff\1\u0192\5\uffff\1\u0182\50\uffff\1\u018b"+
            "\1\u018e\1\u0191\1\u0180\1\u0186\2\u0191\1\u018a\1\uffff\1\u0181"+
            "\1\u0188\1\u0191\1\u0184\1\u0189\1\u0187\1\u0191\1\u0185\2\u0189"+
            "\1\u0191\1\u018a\1\uffff\1\u018d\1\u0191\1\u018f\1\u0186\1\u0191"+
            "\1\u0187\1\u0191\1\u0185\1\u0190\1\u0188\1\u0191\1\uffff\1\u018c"+
            "\1\u0191\26\uffff\1\u0193\50\uffff\1\u0183",
            "\1\u0195\14\uffff\1\u0194\5\uffff\1\u0198\100\uffff\1\u0199"+
            "\53\uffff\1\u0197\2\uffff\1\u0197\7\uffff\1\u0196\2\uffff\1"+
            "\u0197",
            "\1\u019b\12\uffff\1\u01a7\56\uffff\1\u01a0\1\u01a3\1\u01a6"+
            "\1\uffff\1\u019b\2\u01a6\1\u019f\2\uffff\1\u019d\1\u01a6\2\u019e"+
            "\1\u019c\1\u01a6\1\u019a\2\u019e\1\u01a6\1\u019f\1\uffff\1\u01a2"+
            "\1\u01a6\1\u01a4\1\u019b\1\u01a6\1\u019c\1\u01a6\1\u019a\1\u01a5"+
            "\1\u019d\1\u01a6\1\uffff\1\u01a1\1\u01a6\26\uffff\1\u01a8",
            "\1\u01aa\12\uffff\1\u01b6\56\uffff\1\u01af\1\u01b2\1\u01b5"+
            "\1\uffff\1\u01aa\2\u01b5\1\u01ae\2\uffff\1\u01ac\1\u01b5\2\u01ad"+
            "\1\u01ab\1\u01b5\1\u01a9\2\u01ad\1\u01b5\1\u01ae\1\uffff\1\u01b1"+
            "\1\u01b5\1\u01b3\1\u01aa\1\u01b5\1\u01ab\1\u01b5\1\u01a9\1\u01b4"+
            "\1\u01ac\1\u01b5\1\uffff\1\u01b0\1\u01b5\26\uffff\1\u01b7",
            "\1\u01b9\12\uffff\1\u01c5\56\uffff\1\u01be\1\u01c1\1\u01c4"+
            "\1\uffff\1\u01b9\2\u01c4\1\u01bd\2\uffff\1\u01bb\1\u01c4\2\u01bc"+
            "\1\u01ba\1\u01c4\1\u01b8\2\u01bc\1\u01c4\1\u01bd\1\uffff\1\u01c0"+
            "\1\u01c4\1\u01c2\1\u01b9\1\u01c4\1\u01ba\1\u01c4\1\u01b8\1\u01c3"+
            "\1\u01bb\1\u01c4\1\uffff\1\u01bf\1\u01c4\26\uffff\1\u01c6",
            "\1\u01c8\12\uffff\1\u01d4\56\uffff\1\u01cd\1\u01d0\1\u01d3"+
            "\1\uffff\1\u01c8\2\u01d3\1\u01cc\2\uffff\1\u01ca\1\u01d3\2\u01cb"+
            "\1\u01c9\1\u01d3\1\u01c7\2\u01cb\1\u01d3\1\u01cc\1\uffff\1\u01cf"+
            "\1\u01d3\1\u01d1\1\u01c8\1\u01d3\1\u01c9\1\u01d3\1\u01c7\1\u01d2"+
            "\1\u01ca\1\u01d3\1\uffff\1\u01ce\1\u01d3\26\uffff\1\u01d5",
            "\1\u01d7\12\uffff\1\u01e3\56\uffff\1\u01dc\1\u01df\1\u01e2"+
            "\1\uffff\1\u01d7\2\u01e2\1\u01db\2\uffff\1\u01d9\1\u01e2\2\u01da"+
            "\1\u01d8\1\u01e2\1\u01d6\2\u01da\1\u01e2\1\u01db\1\uffff\1\u01de"+
            "\1\u01e2\1\u01e0\1\u01d7\1\u01e2\1\u01d8\1\u01e2\1\u01d6\1\u01e1"+
            "\1\u01d9\1\u01e2\1\uffff\1\u01dd\1\u01e2\26\uffff\1\u01e4",
            "\1\u01e5",
            "\1\u01e6",
            "\1\u01e7",
            "\1\12\12\uffff\1\4\5\uffff\1\u01e9\36\uffff\1\12\13\uffff\1"+
            "\4\2\uffff\2\4\2\uffff\1\u01e8\1\uffff\1\4\3\uffff\1\4\3\uffff"+
            "\1\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\3\uffff\1\4\2\uffff"+
            "\1\4\33\uffff\1\4\36\uffff\1\12\4\uffff\1\u01ea\22\uffff\1\12"+
            "\2\uffff\1\12\7\uffff\1\12\2\uffff\1\12",
            "",
            "\1\u01f3\12\uffff\1\4\5\uffff\1\u01f5\36\uffff\1\12\13\uffff"+
            "\2\4\1\uffff\2\4\2\uffff\1\u01fb\1\uffff\1\4\3\uffff\1\4\3\uffff"+
            "\1\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\3\uffff\1\4\2\uffff"+
            "\1\4\33\uffff\1\4\36\uffff\1\12\4\uffff\1\u01f6\22\uffff\1\12"+
            "\2\uffff\1\12\7\uffff\1\12\2\uffff\1\12",
            "\1\u0203\14\uffff\1\u01ff\42\uffff\1\u0201\11\uffff\1\u0204"+
            "\2\uffff\1\u0202\5\uffff\1\u020d\4\uffff\1\u0205\1\uffff\1\u0209"+
            "\4\uffff\1\u0206\5\uffff\1\u0205\1\uffff\1\u0209\3\uffff\1\u0207"+
            "\16\uffff\1\u020e\22\uffff\1\u0208\6\uffff\1\u020f\1\u0210\1"+
            "\u0211\21\uffff\1\u020a\7\uffff\1\u0214\6\uffff\1\u0215\1\uffff"+
            "\1\u0213\3\uffff\1\u0212\2\uffff\1\u020c\2\uffff\1\u020c\7\uffff"+
            "\1\u020b\1\uffff\1\u0212\1\u020c\4\uffff\1\u0200",
            "\1\u021e\11\uffff\1\u0217\2\uffff\1\u0216\5\uffff\1\u0221\4"+
            "\uffff\1\u0218\1\uffff\1\u021c\4\uffff\1\u0219\5\uffff\1\u0218"+
            "\1\uffff\1\u021c\3\uffff\1\u021a\16\uffff\1\u0222\22\uffff\1"+
            "\u021b\6\uffff\1\u0223\1\u0224\1\u0225\31\uffff\1\u0228\6\uffff"+
            "\1\u0229\1\uffff\1\u0227\3\uffff\1\u0226\2\uffff\1\u0220\2\uffff"+
            "\1\u0220\7\uffff\1\u021f\1\uffff\1\u0226\1\u0220\4\uffff\1\u021d",
            "\1\u0230\14\uffff\1\u0234\5\uffff\1\u0233\4\uffff\1\u022a\1"+
            "\uffff\1\u022e\4\uffff\1\u022b\5\uffff\1\u022a\1\uffff\1\u022e"+
            "\3\uffff\1\u022c\16\uffff\1\u0235\22\uffff\1\u022d\6\uffff\1"+
            "\u0236\1\u0237\1\u0238\31\uffff\1\u023b\6\uffff\1\u023c\1\uffff"+
            "\1\u023a\3\uffff\1\u0239\2\uffff\1\u0232\2\uffff\1\u0232\7\uffff"+
            "\1\u0231\1\uffff\1\u0239\1\u0232\4\uffff\1\u022f",
            "\1\u0242\14\uffff\1\u0246\5\uffff\1\u0245\6\uffff\1\u0240\4"+
            "\uffff\1\u023d\7\uffff\1\u0240\3\uffff\1\u023e\16\uffff\1\u0247"+
            "\22\uffff\1\u023f\6\uffff\1\u0248\1\u0249\1\u024a\31\uffff\1"+
            "\u024d\6\uffff\1\u024e\1\uffff\1\u024c\3\uffff\1\u024b\2\uffff"+
            "\1\u0244\2\uffff\1\u0244\7\uffff\1\u0243\1\uffff\1\u024b\1\u0244"+
            "\4\uffff\1\u0241",
            "\1\u0253\14\uffff\1\u0257\5\uffff\1\u0256\6\uffff\1\u0251\14"+
            "\uffff\1\u0251\3\uffff\1\u024f\16\uffff\1\u0258\22\uffff\1\u0250"+
            "\6\uffff\1\u0259\1\u025a\1\u025b\31\uffff\1\u025e\6\uffff\1"+
            "\u025f\1\uffff\1\u025d\3\uffff\1\u025c\2\uffff\1\u0255\2\uffff"+
            "\1\u0255\7\uffff\1\u0254\1\uffff\1\u025c\1\u0255\4\uffff\1\u0252",
            "\1\u0263\14\uffff\1\u0267\5\uffff\1\u0266\6\uffff\1\u0261\14"+
            "\uffff\1\u0261\22\uffff\1\u0268\22\uffff\1\u0260\6\uffff\1\u0269"+
            "\1\u026a\1\u026b\31\uffff\1\u026e\6\uffff\1\u026f\1\uffff\1"+
            "\u026d\3\uffff\1\u026c\2\uffff\1\u0265\2\uffff\1\u0265\7\uffff"+
            "\1\u0264\1\uffff\1\u026c\1\u0265\4\uffff\1\u0262",
            "\1\u0272\14\uffff\1\u0276\5\uffff\1\u0275\6\uffff\1\u0270\14"+
            "\uffff\1\u0270\22\uffff\1\u0277\31\uffff\1\u0278\1\u0279\1\u027a"+
            "\31\uffff\1\u027d\6\uffff\1\u027e\1\uffff\1\u027c\3\uffff\1"+
            "\u027b\2\uffff\1\u0274\2\uffff\1\u0274\7\uffff\1\u0273\1\uffff"+
            "\1\u027b\1\u0274\4\uffff\1\u0271",
            "\1\u0280\14\uffff\1\u0284\5\uffff\1\u0283\46\uffff\1\u0285"+
            "\31\uffff\1\u0286\1\u0287\1\u0288\31\uffff\1\u028b\6\uffff\1"+
            "\u028c\1\uffff\1\u028a\3\uffff\1\u0289\2\uffff\1\u0282\2\uffff"+
            "\1\u0282\7\uffff\1\u0281\1\uffff\1\u0289\1\u0282\4\uffff\1\u027f",
            "\1\u028d\177\uffff\1\u028f\2\uffff\1\u028f\7\uffff\1\u028e"+
            "\2\uffff\1\u028f",
            "\1\u0296\20\uffff\1\u0292\50\uffff\1\u029b\1\u029e\1\u02a1"+
            "\1\u0290\1\u0296\2\u02a1\1\u029a\1\uffff\1\u0291\1\u0298\1\u02a1"+
            "\1\u0294\1\u0299\1\u0297\1\u02a1\1\u0295\2\u0299\1\u02a1\1\u029a"+
            "\1\uffff\1\u029d\1\u02a1\1\u029f\1\u0296\1\u02a1\1\u0297\1\u02a1"+
            "\1\u0295\1\u02a0\1\u0298\1\u02a1\1\uffff\1\u029c\1\u02a1\30"+
            "\uffff\1\u02a2\46\uffff\1\u0293",
            "\1\u02a9\20\uffff\1\u02a5\50\uffff\1\u02ae\1\u02b1\1\u02b4"+
            "\1\u02a3\1\u02a9\2\u02b4\1\u02ad\1\uffff\1\u02a4\1\u02ab\1\u02b4"+
            "\1\u02a7\1\u02ac\1\u02aa\1\u02b4\1\u02a8\2\u02ac\1\u02b4\1\u02ad"+
            "\1\uffff\1\u02b0\1\u02b4\1\u02b2\1\u02a9\1\u02b4\1\u02aa\1\u02b4"+
            "\1\u02a8\1\u02b3\1\u02ab\1\u02b4\1\uffff\1\u02af\1\u02b4\30"+
            "\uffff\1\u02b5\46\uffff\1\u02a6",
            "\1\u02bc\20\uffff\1\u02b8\50\uffff\1\u02c1\1\u02c4\1\u02c7"+
            "\1\u02b6\1\u02bc\2\u02c7\1\u02c0\1\uffff\1\u02b7\1\u02be\1\u02c7"+
            "\1\u02ba\1\u02bf\1\u02bd\1\u02c7\1\u02bb\2\u02bf\1\u02c7\1\u02c0"+
            "\1\uffff\1\u02c3\1\u02c7\1\u02c5\1\u02bc\1\u02c7\1\u02bd\1\u02c7"+
            "\1\u02bb\1\u02c6\1\u02be\1\u02c7\1\uffff\1\u02c2\1\u02c7\30"+
            "\uffff\1\u02c8\46\uffff\1\u02b9",
            "\1\u02ca\14\uffff\1\u02c9\5\uffff\1\u02cd\100\uffff\1\u02ce"+
            "\53\uffff\1\u02cc\2\uffff\1\u02cc\7\uffff\1\u02cb\2\uffff\1"+
            "\u02cc",
            "\1\u02d0\71\uffff\1\u02d5\1\u02d8\1\u02db\1\uffff\1\u02d0\2"+
            "\u02db\1\u02d4\2\uffff\1\u02d2\1\u02db\2\u02d3\1\u02d1\1\u02db"+
            "\1\u02cf\2\u02d3\1\u02db\1\u02d4\1\uffff\1\u02d7\1\u02db\1\u02d9"+
            "\1\u02d0\1\u02db\1\u02d1\1\u02db\1\u02cf\1\u02da\1\u02d2\1\u02db"+
            "\1\uffff\1\u02d6\1\u02db\30\uffff\1\u02dc",
            "\1\u02de\71\uffff\1\u02e3\1\u02e6\1\u02e9\1\uffff\1\u02de\2"+
            "\u02e9\1\u02e2\2\uffff\1\u02e0\1\u02e9\2\u02e1\1\u02df\1\u02e9"+
            "\1\u02dd\2\u02e1\1\u02e9\1\u02e2\1\uffff\1\u02e5\1\u02e9\1\u02e7"+
            "\1\u02de\1\u02e9\1\u02df\1\u02e9\1\u02dd\1\u02e8\1\u02e0\1\u02e9"+
            "\1\uffff\1\u02e4\1\u02e9\30\uffff\1\u02ea",
            "\1\u02ec\71\uffff\1\u02f1\1\u02f4\1\u02f7\1\uffff\1\u02ec\2"+
            "\u02f7\1\u02f0\2\uffff\1\u02ee\1\u02f7\2\u02ef\1\u02ed\1\u02f7"+
            "\1\u02eb\2\u02ef\1\u02f7\1\u02f0\1\uffff\1\u02f3\1\u02f7\1\u02f5"+
            "\1\u02ec\1\u02f7\1\u02ed\1\u02f7\1\u02eb\1\u02f6\1\u02ee\1\u02f7"+
            "\1\uffff\1\u02f2\1\u02f7\30\uffff\1\u02f8",
            "\1\u02fa\71\uffff\1\u02ff\1\u0302\1\u0305\1\uffff\1\u02fa\2"+
            "\u0305\1\u02fe\2\uffff\1\u02fc\1\u0305\2\u02fd\1\u02fb\1\u0305"+
            "\1\u02f9\2\u02fd\1\u0305\1\u02fe\1\uffff\1\u0301\1\u0305\1\u0303"+
            "\1\u02fa\1\u0305\1\u02fb\1\u0305\1\u02f9\1\u0304\1\u02fc\1\u0305"+
            "\1\uffff\1\u0300\1\u0305\30\uffff\1\u0306",
            "\1\u0308\71\uffff\1\u030d\1\u0310\1\u0313\1\uffff\1\u0308\2"+
            "\u0313\1\u030c\2\uffff\1\u030a\1\u0313\2\u030b\1\u0309\1\u0313"+
            "\1\u0307\2\u030b\1\u0313\1\u030c\1\uffff\1\u030f\1\u0313\1\u0311"+
            "\1\u0308\1\u0313\1\u0309\1\u0313\1\u0307\1\u0312\1\u030a\1\u0313"+
            "\1\uffff\1\u030e\1\u0313\30\uffff\1\u0314",
            "\1\u0315",
            "\1\u0316",
            "\1\u0317",
            "\1\12\12\uffff\1\4\5\uffff\1\u031f\36\uffff\1\12\13\uffff\1"+
            "\4\1\u0318\1\uffff\2\4\2\uffff\1\u0319\1\uffff\1\4\3\uffff\1"+
            "\4\3\uffff\1\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\3\uffff\1"+
            "\4\2\uffff\1\4\33\uffff\1\4\36\uffff\1\12\4\uffff\1\u0320\22"+
            "\uffff\1\12\2\uffff\1\12\7\uffff\1\12\2\uffff\1\12",
            "\1\12\12\uffff\1\4\5\uffff\1\u032b\36\uffff\1\12\13\uffff\1"+
            "\4\1\u0324\1\uffff\2\4\2\uffff\1\u0325\1\uffff\1\4\3\uffff\1"+
            "\4\3\uffff\1\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\3\uffff\1"+
            "\4\2\uffff\1\4\33\uffff\1\4\36\uffff\1\12\4\uffff\1\u032c\22"+
            "\uffff\1\12\2\uffff\1\12\7\uffff\1\12\2\uffff\1\12",
            "\1\12\12\uffff\1\4\5\uffff\1\u0337\36\uffff\1\12\13\uffff\1"+
            "\4\1\u0330\1\uffff\2\4\2\uffff\1\u0331\1\uffff\1\4\3\uffff\1"+
            "\4\3\uffff\1\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\3\uffff\1"+
            "\4\2\uffff\1\4\33\uffff\1\4\36\uffff\1\12\4\uffff\1\u0338\22"+
            "\uffff\1\12\2\uffff\1\12\7\uffff\1\12\2\uffff\1\12",
            "\1\12\12\uffff\1\4\5\uffff\1\u0343\36\uffff\1\12\13\uffff\1"+
            "\4\1\u033c\1\uffff\2\4\2\uffff\1\u033d\1\uffff\1\4\3\uffff\1"+
            "\4\3\uffff\1\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\3\uffff\1"+
            "\4\2\uffff\1\4\33\uffff\1\4\36\uffff\1\12\4\uffff\1\u0344\22"+
            "\uffff\1\12\2\uffff\1\12\7\uffff\1\12\2\uffff\1\12",
            "\1\12\12\uffff\1\4\5\uffff\1\u034f\36\uffff\1\12\13\uffff\1"+
            "\4\1\u0348\1\uffff\2\4\2\uffff\1\u0349\1\uffff\1\4\3\uffff\1"+
            "\4\3\uffff\1\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\3\uffff\1"+
            "\4\2\uffff\1\4\33\uffff\1\4\36\uffff\1\12\4\uffff\1\u0350\22"+
            "\uffff\1\12\2\uffff\1\12\7\uffff\1\12\2\uffff\1\12",
            "\1\12\12\uffff\1\4\5\uffff\1\u035b\36\uffff\1\12\13\uffff\1"+
            "\4\1\u0354\1\uffff\2\4\2\uffff\1\u0355\1\uffff\1\4\3\uffff\1"+
            "\4\3\uffff\1\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\3\uffff\1"+
            "\4\2\uffff\1\4\33\uffff\1\4\36\uffff\1\12\4\uffff\1\u035c\22"+
            "\uffff\1\12\2\uffff\1\12\7\uffff\1\12\2\uffff\1\12",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0364\14\uffff\1\u0360\42\uffff\1\u0362\11\uffff\1\u0365"+
            "\2\uffff\1\u0363\5\uffff\1\u036e\4\uffff\1\u0366\1\uffff\1\u036a"+
            "\4\uffff\1\u0367\5\uffff\1\u0366\1\uffff\1\u036a\3\uffff\1\u0368"+
            "\16\uffff\1\u036f\22\uffff\1\u0369\6\uffff\1\u0370\1\u0371\1"+
            "\u0372\21\uffff\1\u036b\7\uffff\1\u0375\6\uffff\1\u0376\1\uffff"+
            "\1\u0374\3\uffff\1\u0373\2\uffff\1\u036d\2\uffff\1\u036d\7\uffff"+
            "\1\u036c\1\uffff\1\u0373\1\u036d\4\uffff\1\u0361",
            "\1\u037f\11\uffff\1\u0378\2\uffff\1\u0377\5\uffff\1\u0382\4"+
            "\uffff\1\u0379\1\uffff\1\u037d\4\uffff\1\u037a\5\uffff\1\u0379"+
            "\1\uffff\1\u037d\3\uffff\1\u037b\16\uffff\1\u0383\22\uffff\1"+
            "\u037c\6\uffff\1\u0384\1\u0385\1\u0386\31\uffff\1\u0389\6\uffff"+
            "\1\u038a\1\uffff\1\u0388\3\uffff\1\u0387\2\uffff\1\u0381\2\uffff"+
            "\1\u0381\7\uffff\1\u0380\1\uffff\1\u0387\1\u0381\4\uffff\1\u037e",
            "\1\u0391\14\uffff\1\u0395\5\uffff\1\u0394\4\uffff\1\u038b\1"+
            "\uffff\1\u038f\4\uffff\1\u038c\5\uffff\1\u038b\1\uffff\1\u038f"+
            "\3\uffff\1\u038d\16\uffff\1\u0396\22\uffff\1\u038e\6\uffff\1"+
            "\u0397\1\u0398\1\u0399\31\uffff\1\u039c\6\uffff\1\u039d\1\uffff"+
            "\1\u039b\3\uffff\1\u039a\2\uffff\1\u0393\2\uffff\1\u0393\7\uffff"+
            "\1\u0392\1\uffff\1\u039a\1\u0393\4\uffff\1\u0390",
            "\1\u03a3\14\uffff\1\u03a7\5\uffff\1\u03a6\6\uffff\1\u03a1\4"+
            "\uffff\1\u039e\7\uffff\1\u03a1\3\uffff\1\u039f\16\uffff\1\u03a8"+
            "\22\uffff\1\u03a0\6\uffff\1\u03a9\1\u03aa\1\u03ab\31\uffff\1"+
            "\u03ae\6\uffff\1\u03af\1\uffff\1\u03ad\3\uffff\1\u03ac\2\uffff"+
            "\1\u03a5\2\uffff\1\u03a5\7\uffff\1\u03a4\1\uffff\1\u03ac\1\u03a5"+
            "\4\uffff\1\u03a2",
            "\1\u03b4\14\uffff\1\u03b8\5\uffff\1\u03b7\6\uffff\1\u03b2\14"+
            "\uffff\1\u03b2\3\uffff\1\u03b0\16\uffff\1\u03b9\22\uffff\1\u03b1"+
            "\6\uffff\1\u03ba\1\u03bb\1\u03bc\31\uffff\1\u03bf\6\uffff\1"+
            "\u03c0\1\uffff\1\u03be\3\uffff\1\u03bd\2\uffff\1\u03b6\2\uffff"+
            "\1\u03b6\7\uffff\1\u03b5\1\uffff\1\u03bd\1\u03b6\4\uffff\1\u03b3",
            "\1\u03c4\14\uffff\1\u03c8\5\uffff\1\u03c7\6\uffff\1\u03c2\14"+
            "\uffff\1\u03c2\22\uffff\1\u03c9\22\uffff\1\u03c1\6\uffff\1\u03ca"+
            "\1\u03cb\1\u03cc\31\uffff\1\u03cf\6\uffff\1\u03d0\1\uffff\1"+
            "\u03ce\3\uffff\1\u03cd\2\uffff\1\u03c6\2\uffff\1\u03c6\7\uffff"+
            "\1\u03c5\1\uffff\1\u03cd\1\u03c6\4\uffff\1\u03c3",
            "\1\u03d3\14\uffff\1\u03d7\5\uffff\1\u03d6\6\uffff\1\u03d1\14"+
            "\uffff\1\u03d1\22\uffff\1\u03d8\31\uffff\1\u03d9\1\u03da\1\u03db"+
            "\31\uffff\1\u03de\6\uffff\1\u03df\1\uffff\1\u03dd\3\uffff\1"+
            "\u03dc\2\uffff\1\u03d5\2\uffff\1\u03d5\7\uffff\1\u03d4\1\uffff"+
            "\1\u03dc\1\u03d5\4\uffff\1\u03d2",
            "\1\u03e1\14\uffff\1\u03e5\5\uffff\1\u03e4\46\uffff\1\u03e6"+
            "\31\uffff\1\u03e7\1\u03e8\1\u03e9\31\uffff\1\u03ec\6\uffff\1"+
            "\u03ed\1\uffff\1\u03eb\3\uffff\1\u03ea\2\uffff\1\u03e3\2\uffff"+
            "\1\u03e3\7\uffff\1\u03e2\1\uffff\1\u03ea\1\u03e3\4\uffff\1\u03e0",
            "\1\u03ee\177\uffff\1\u03f0\2\uffff\1\u03f0\7\uffff\1\u03ef"+
            "\2\uffff\1\u03f0",
            "\1\u03f7\12\uffff\1\u0403\5\uffff\1\u03f3\50\uffff\1\u03fc"+
            "\1\u03ff\1\u0402\1\u03f1\1\u03f7\2\u0402\1\u03fb\1\uffff\1\u03f2"+
            "\1\u03f9\1\u0402\1\u03f5\1\u03fa\1\u03f8\1\u0402\1\u03f6\2\u03fa"+
            "\1\u0402\1\u03fb\1\uffff\1\u03fe\1\u0402\1\u0400\1\u03f7\1\u0402"+
            "\1\u03f8\1\u0402\1\u03f6\1\u0401\1\u03f9\1\u0402\1\uffff\1\u03fd"+
            "\1\u0402\26\uffff\1\u0404\50\uffff\1\u03f4",
            "\1\u040b\12\uffff\1\u0417\5\uffff\1\u0407\50\uffff\1\u0410"+
            "\1\u0413\1\u0416\1\u0405\1\u040b\2\u0416\1\u040f\1\uffff\1\u0406"+
            "\1\u040d\1\u0416\1\u0409\1\u040e\1\u040c\1\u0416\1\u040a\2\u040e"+
            "\1\u0416\1\u040f\1\uffff\1\u0412\1\u0416\1\u0414\1\u040b\1\u0416"+
            "\1\u040c\1\u0416\1\u040a\1\u0415\1\u040d\1\u0416\1\uffff\1\u0411"+
            "\1\u0416\26\uffff\1\u0418\50\uffff\1\u0408",
            "\1\u041f\12\uffff\1\u042b\5\uffff\1\u041b\50\uffff\1\u0424"+
            "\1\u0427\1\u042a\1\u0419\1\u041f\2\u042a\1\u0423\1\uffff\1\u041a"+
            "\1\u0421\1\u042a\1\u041d\1\u0422\1\u0420\1\u042a\1\u041e\2\u0422"+
            "\1\u042a\1\u0423\1\uffff\1\u0426\1\u042a\1\u0428\1\u041f\1\u042a"+
            "\1\u0420\1\u042a\1\u041e\1\u0429\1\u0421\1\u042a\1\uffff\1\u0425"+
            "\1\u042a\26\uffff\1\u042c\50\uffff\1\u041c",
            "\1\u042e\14\uffff\1\u042d\5\uffff\1\u0431\100\uffff\1\u0432"+
            "\53\uffff\1\u0430\2\uffff\1\u0430\7\uffff\1\u042f\2\uffff\1"+
            "\u0430",
            "\1\u0434\12\uffff\1\u0440\56\uffff\1\u0439\1\u043c\1\u043f"+
            "\1\uffff\1\u0434\2\u043f\1\u0438\2\uffff\1\u0436\1\u043f\2\u0437"+
            "\1\u0435\1\u043f\1\u0433\2\u0437\1\u043f\1\u0438\1\uffff\1\u043b"+
            "\1\u043f\1\u043d\1\u0434\1\u043f\1\u0435\1\u043f\1\u0433\1\u043e"+
            "\1\u0436\1\u043f\1\uffff\1\u043a\1\u043f\26\uffff\1\u0441",
            "\1\u0443\12\uffff\1\u044f\56\uffff\1\u0448\1\u044b\1\u044e"+
            "\1\uffff\1\u0443\2\u044e\1\u0447\2\uffff\1\u0445\1\u044e\2\u0446"+
            "\1\u0444\1\u044e\1\u0442\2\u0446\1\u044e\1\u0447\1\uffff\1\u044a"+
            "\1\u044e\1\u044c\1\u0443\1\u044e\1\u0444\1\u044e\1\u0442\1\u044d"+
            "\1\u0445\1\u044e\1\uffff\1\u0449\1\u044e\26\uffff\1\u0450",
            "\1\u0452\12\uffff\1\u045e\56\uffff\1\u0457\1\u045a\1\u045d"+
            "\1\uffff\1\u0452\2\u045d\1\u0456\2\uffff\1\u0454\1\u045d\2\u0455"+
            "\1\u0453\1\u045d\1\u0451\2\u0455\1\u045d\1\u0456\1\uffff\1\u0459"+
            "\1\u045d\1\u045b\1\u0452\1\u045d\1\u0453\1\u045d\1\u0451\1\u045c"+
            "\1\u0454\1\u045d\1\uffff\1\u0458\1\u045d\26\uffff\1\u045f",
            "\1\u0461\12\uffff\1\u046d\56\uffff\1\u0466\1\u0469\1\u046c"+
            "\1\uffff\1\u0461\2\u046c\1\u0465\2\uffff\1\u0463\1\u046c\2\u0464"+
            "\1\u0462\1\u046c\1\u0460\2\u0464\1\u046c\1\u0465\1\uffff\1\u0468"+
            "\1\u046c\1\u046a\1\u0461\1\u046c\1\u0462\1\u046c\1\u0460\1\u046b"+
            "\1\u0463\1\u046c\1\uffff\1\u0467\1\u046c\26\uffff\1\u046e",
            "\1\u0470\12\uffff\1\u047c\56\uffff\1\u0475\1\u0478\1\u047b"+
            "\1\uffff\1\u0470\2\u047b\1\u0474\2\uffff\1\u0472\1\u047b\2\u0473"+
            "\1\u0471\1\u047b\1\u046f\2\u0473\1\u047b\1\u0474\1\uffff\1\u0477"+
            "\1\u047b\1\u0479\1\u0470\1\u047b\1\u0471\1\u047b\1\u046f\1\u047a"+
            "\1\u0472\1\u047b\1\uffff\1\u0476\1\u047b\26\uffff\1\u047d",
            "\1\u047e",
            "\1\u047f",
            "\1\u0480",
            "\1\12\12\uffff\1\4\5\uffff\1\u0482\36\uffff\1\12\13\uffff\1"+
            "\4\2\uffff\2\4\2\uffff\1\u0481\1\uffff\1\4\3\uffff\1\4\3\uffff"+
            "\1\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\3\uffff\1\4\2\uffff"+
            "\1\4\33\uffff\1\4\36\uffff\1\12\4\uffff\1\u0483\22\uffff\1\12"+
            "\2\uffff\1\12\7\uffff\1\12\2\uffff\1\12",
            "\1\u0490\14\uffff\1\u048c\42\uffff\1\u048e\11\uffff\1\u0491"+
            "\2\uffff\1\u048f\5\uffff\1\u049a\4\uffff\1\u0492\1\uffff\1\u0496"+
            "\4\uffff\1\u0493\5\uffff\1\u0492\1\uffff\1\u0496\3\uffff\1\u0494"+
            "\16\uffff\1\u049b\22\uffff\1\u0495\6\uffff\1\u049c\1\u049d\1"+
            "\u049e\21\uffff\1\u0497\7\uffff\1\u04a1\6\uffff\1\u04a2\1\uffff"+
            "\1\u04a0\3\uffff\1\u049f\2\uffff\1\u0499\2\uffff\1\u0499\7\uffff"+
            "\1\u0498\1\uffff\1\u049f\1\u0499\4\uffff\1\u048d",
            "\1\u04ab\11\uffff\1\u04a4\2\uffff\1\u04a3\5\uffff\1\u04ae\4"+
            "\uffff\1\u04a5\1\uffff\1\u04a9\4\uffff\1\u04a6\5\uffff\1\u04a5"+
            "\1\uffff\1\u04a9\3\uffff\1\u04a7\16\uffff\1\u04af\22\uffff\1"+
            "\u04a8\6\uffff\1\u04b0\1\u04b1\1\u04b2\31\uffff\1\u04b5\6\uffff"+
            "\1\u04b6\1\uffff\1\u04b4\3\uffff\1\u04b3\2\uffff\1\u04ad\2\uffff"+
            "\1\u04ad\7\uffff\1\u04ac\1\uffff\1\u04b3\1\u04ad\4\uffff\1\u04aa",
            "\1\u04bd\14\uffff\1\u04c1\5\uffff\1\u04c0\4\uffff\1\u04b7\1"+
            "\uffff\1\u04bb\4\uffff\1\u04b8\5\uffff\1\u04b7\1\uffff\1\u04bb"+
            "\3\uffff\1\u04b9\16\uffff\1\u04c2\22\uffff\1\u04ba\6\uffff\1"+
            "\u04c3\1\u04c4\1\u04c5\31\uffff\1\u04c8\6\uffff\1\u04c9\1\uffff"+
            "\1\u04c7\3\uffff\1\u04c6\2\uffff\1\u04bf\2\uffff\1\u04bf\7\uffff"+
            "\1\u04be\1\uffff\1\u04c6\1\u04bf\4\uffff\1\u04bc",
            "\1\u04cf\14\uffff\1\u04d3\5\uffff\1\u04d2\6\uffff\1\u04cd\4"+
            "\uffff\1\u04ca\7\uffff\1\u04cd\3\uffff\1\u04cb\16\uffff\1\u04d4"+
            "\22\uffff\1\u04cc\6\uffff\1\u04d5\1\u04d6\1\u04d7\31\uffff\1"+
            "\u04da\6\uffff\1\u04db\1\uffff\1\u04d9\3\uffff\1\u04d8\2\uffff"+
            "\1\u04d1\2\uffff\1\u04d1\7\uffff\1\u04d0\1\uffff\1\u04d8\1\u04d1"+
            "\4\uffff\1\u04ce",
            "\1\u04e0\14\uffff\1\u04e4\5\uffff\1\u04e3\6\uffff\1\u04de\14"+
            "\uffff\1\u04de\3\uffff\1\u04dc\16\uffff\1\u04e5\22\uffff\1\u04dd"+
            "\6\uffff\1\u04e6\1\u04e7\1\u04e8\31\uffff\1\u04eb\6\uffff\1"+
            "\u04ec\1\uffff\1\u04ea\3\uffff\1\u04e9\2\uffff\1\u04e2\2\uffff"+
            "\1\u04e2\7\uffff\1\u04e1\1\uffff\1\u04e9\1\u04e2\4\uffff\1\u04df",
            "\1\u04f0\14\uffff\1\u04f4\5\uffff\1\u04f3\6\uffff\1\u04ee\14"+
            "\uffff\1\u04ee\22\uffff\1\u04f5\22\uffff\1\u04ed\6\uffff\1\u04f6"+
            "\1\u04f7\1\u04f8\31\uffff\1\u04fb\6\uffff\1\u04fc\1\uffff\1"+
            "\u04fa\3\uffff\1\u04f9\2\uffff\1\u04f2\2\uffff\1\u04f2\7\uffff"+
            "\1\u04f1\1\uffff\1\u04f9\1\u04f2\4\uffff\1\u04ef",
            "\1\u04ff\14\uffff\1\u0503\5\uffff\1\u0502\6\uffff\1\u04fd\14"+
            "\uffff\1\u04fd\22\uffff\1\u0504\31\uffff\1\u0505\1\u0506\1\u0507"+
            "\31\uffff\1\u050a\6\uffff\1\u050b\1\uffff\1\u0509\3\uffff\1"+
            "\u0508\2\uffff\1\u0501\2\uffff\1\u0501\7\uffff\1\u0500\1\uffff"+
            "\1\u0508\1\u0501\4\uffff\1\u04fe",
            "\1\u050d\14\uffff\1\u0511\5\uffff\1\u0510\46\uffff\1\u0512"+
            "\31\uffff\1\u0513\1\u0514\1\u0515\31\uffff\1\u0518\6\uffff\1"+
            "\u0519\1\uffff\1\u0517\3\uffff\1\u0516\2\uffff\1\u050f\2\uffff"+
            "\1\u050f\7\uffff\1\u050e\1\uffff\1\u0516\1\u050f\4\uffff\1\u050c",
            "\1\u051a\177\uffff\1\u051c\2\uffff\1\u051c\7\uffff\1\u051b"+
            "\2\uffff\1\u051c",
            "\1\u0523\20\uffff\1\u051f\50\uffff\1\u0528\1\u052b\1\u052e"+
            "\1\u051d\1\u0523\2\u052e\1\u0527\1\uffff\1\u051e\1\u0525\1\u052e"+
            "\1\u0521\1\u0526\1\u0524\1\u052e\1\u0522\2\u0526\1\u052e\1\u0527"+
            "\1\uffff\1\u052a\1\u052e\1\u052c\1\u0523\1\u052e\1\u0524\1\u052e"+
            "\1\u0522\1\u052d\1\u0525\1\u052e\1\uffff\1\u0529\1\u052e\30"+
            "\uffff\1\u052f\46\uffff\1\u0520",
            "\1\u0536\20\uffff\1\u0532\50\uffff\1\u053b\1\u053e\1\u0541"+
            "\1\u0530\1\u0536\2\u0541\1\u053a\1\uffff\1\u0531\1\u0538\1\u0541"+
            "\1\u0534\1\u0539\1\u0537\1\u0541\1\u0535\2\u0539\1\u0541\1\u053a"+
            "\1\uffff\1\u053d\1\u0541\1\u053f\1\u0536\1\u0541\1\u0537\1\u0541"+
            "\1\u0535\1\u0540\1\u0538\1\u0541\1\uffff\1\u053c\1\u0541\30"+
            "\uffff\1\u0542\46\uffff\1\u0533",
            "\1\u0549\20\uffff\1\u0545\50\uffff\1\u054e\1\u0551\1\u0554"+
            "\1\u0543\1\u0549\2\u0554\1\u054d\1\uffff\1\u0544\1\u054b\1\u0554"+
            "\1\u0547\1\u054c\1\u054a\1\u0554\1\u0548\2\u054c\1\u0554\1\u054d"+
            "\1\uffff\1\u0550\1\u0554\1\u0552\1\u0549\1\u0554\1\u054a\1\u0554"+
            "\1\u0548\1\u0553\1\u054b\1\u0554\1\uffff\1\u054f\1\u0554\30"+
            "\uffff\1\u0555\46\uffff\1\u0546",
            "\1\u0557\14\uffff\1\u0556\5\uffff\1\u055a\100\uffff\1\u055b"+
            "\53\uffff\1\u0559\2\uffff\1\u0559\7\uffff\1\u0558\2\uffff\1"+
            "\u0559",
            "\1\u055d\71\uffff\1\u0562\1\u0565\1\u0568\1\uffff\1\u055d\2"+
            "\u0568\1\u0561\2\uffff\1\u055f\1\u0568\2\u0560\1\u055e\1\u0568"+
            "\1\u055c\2\u0560\1\u0568\1\u0561\1\uffff\1\u0564\1\u0568\1\u0566"+
            "\1\u055d\1\u0568\1\u055e\1\u0568\1\u055c\1\u0567\1\u055f\1\u0568"+
            "\1\uffff\1\u0563\1\u0568\30\uffff\1\u0569",
            "\1\u056b\71\uffff\1\u0570\1\u0573\1\u0576\1\uffff\1\u056b\2"+
            "\u0576\1\u056f\2\uffff\1\u056d\1\u0576\2\u056e\1\u056c\1\u0576"+
            "\1\u056a\2\u056e\1\u0576\1\u056f\1\uffff\1\u0572\1\u0576\1\u0574"+
            "\1\u056b\1\u0576\1\u056c\1\u0576\1\u056a\1\u0575\1\u056d\1\u0576"+
            "\1\uffff\1\u0571\1\u0576\30\uffff\1\u0577",
            "\1\u0579\71\uffff\1\u057e\1\u0581\1\u0584\1\uffff\1\u0579\2"+
            "\u0584\1\u057d\2\uffff\1\u057b\1\u0584\2\u057c\1\u057a\1\u0584"+
            "\1\u0578\2\u057c\1\u0584\1\u057d\1\uffff\1\u0580\1\u0584\1\u0582"+
            "\1\u0579\1\u0584\1\u057a\1\u0584\1\u0578\1\u0583\1\u057b\1\u0584"+
            "\1\uffff\1\u057f\1\u0584\30\uffff\1\u0585",
            "\1\u0587\71\uffff\1\u058c\1\u058f\1\u0592\1\uffff\1\u0587\2"+
            "\u0592\1\u058b\2\uffff\1\u0589\1\u0592\2\u058a\1\u0588\1\u0592"+
            "\1\u0586\2\u058a\1\u0592\1\u058b\1\uffff\1\u058e\1\u0592\1\u0590"+
            "\1\u0587\1\u0592\1\u0588\1\u0592\1\u0586\1\u0591\1\u0589\1\u0592"+
            "\1\uffff\1\u058d\1\u0592\30\uffff\1\u0593",
            "\1\u0595\71\uffff\1\u059a\1\u059d\1\u05a0\1\uffff\1\u0595\2"+
            "\u05a0\1\u0599\2\uffff\1\u0597\1\u05a0\2\u0598\1\u0596\1\u05a0"+
            "\1\u0594\2\u0598\1\u05a0\1\u0599\1\uffff\1\u059c\1\u05a0\1\u059e"+
            "\1\u0595\1\u05a0\1\u0596\1\u05a0\1\u0594\1\u059f\1\u0597\1\u05a0"+
            "\1\uffff\1\u059b\1\u05a0\30\uffff\1\u05a1",
            "\1\u05a2",
            "\1\u05a3",
            "\1\u05a4",
            "\1\12\12\uffff\1\4\5\uffff\1\u05a5\36\uffff\1\12\13\uffff\1"+
            "\4\2\uffff\2\4\2\uffff\1\u05ac\1\uffff\1\4\3\uffff\1\4\3\uffff"+
            "\1\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\3\uffff\1\4\2\uffff"+
            "\1\4\33\uffff\1\4\36\uffff\1\12\4\uffff\1\u05a6\22\uffff\1\12"+
            "\2\uffff\1\12\7\uffff\1\12\2\uffff\1\12",
            "\1\12\12\uffff\1\4\5\uffff\1\u05b7\36\uffff\1\12\13\uffff\1"+
            "\4\1\u05b0\1\uffff\2\4\2\uffff\1\u05b1\1\uffff\1\4\3\uffff\1"+
            "\4\3\uffff\1\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\3\uffff\1"+
            "\4\2\uffff\1\4\33\uffff\1\4\36\uffff\1\12\4\uffff\1\u05b8\22"+
            "\uffff\1\12\2\uffff\1\12\7\uffff\1\12\2\uffff\1\12",
            "\1\12\12\uffff\1\4\5\uffff\1\u05c3\36\uffff\1\12\13\uffff\1"+
            "\4\1\u05bc\1\uffff\2\4\2\uffff\1\u05bd\1\uffff\1\4\3\uffff\1"+
            "\4\3\uffff\1\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\3\uffff\1"+
            "\4\2\uffff\1\4\33\uffff\1\4\36\uffff\1\12\4\uffff\1\u05c4\22"+
            "\uffff\1\12\2\uffff\1\12\7\uffff\1\12\2\uffff\1\12",
            "\1\12\12\uffff\1\4\5\uffff\1\u05cf\36\uffff\1\12\13\uffff\1"+
            "\4\1\u05c8\1\uffff\2\4\2\uffff\1\u05c9\1\uffff\1\4\3\uffff\1"+
            "\4\3\uffff\1\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\3\uffff\1"+
            "\4\2\uffff\1\4\33\uffff\1\4\36\uffff\1\12\4\uffff\1\u05d0\22"+
            "\uffff\1\12\2\uffff\1\12\7\uffff\1\12\2\uffff\1\12",
            "\1\12\12\uffff\1\4\5\uffff\1\u05db\36\uffff\1\12\13\uffff\1"+
            "\4\1\u05d4\1\uffff\2\4\2\uffff\1\u05d5\1\uffff\1\4\3\uffff\1"+
            "\4\3\uffff\1\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\3\uffff\1"+
            "\4\2\uffff\1\4\33\uffff\1\4\36\uffff\1\12\4\uffff\1\u05dc\22"+
            "\uffff\1\12\2\uffff\1\12\7\uffff\1\12\2\uffff\1\12",
            "\1\12\12\uffff\1\4\5\uffff\1\u05e7\36\uffff\1\12\13\uffff\1"+
            "\4\1\u05e0\1\uffff\2\4\2\uffff\1\u05e1\1\uffff\1\4\3\uffff\1"+
            "\4\3\uffff\1\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\3\uffff\1"+
            "\4\2\uffff\1\4\33\uffff\1\4\36\uffff\1\12\4\uffff\1\u05e8\22"+
            "\uffff\1\12\2\uffff\1\12\7\uffff\1\12\2\uffff\1\12",
            "\1\12\12\uffff\1\4\5\uffff\1\u05f3\36\uffff\1\12\13\uffff\1"+
            "\4\1\u05ec\1\uffff\2\4\2\uffff\1\u05ed\1\uffff\1\4\3\uffff\1"+
            "\4\3\uffff\1\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\3\uffff\1"+
            "\4\2\uffff\1\4\33\uffff\1\4\36\uffff\1\12\4\uffff\1\u05f4\22"+
            "\uffff\1\12\2\uffff\1\12\7\uffff\1\12\2\uffff\1\12",
            "\1\u05fc\14\uffff\1\u05f8\42\uffff\1\u05fa\11\uffff\1\u05fd"+
            "\2\uffff\1\u05fb\5\uffff\1\u0606\4\uffff\1\u05fe\1\uffff\1\u0602"+
            "\4\uffff\1\u05ff\5\uffff\1\u05fe\1\uffff\1\u0602\3\uffff\1\u0600"+
            "\16\uffff\1\u0607\22\uffff\1\u0601\6\uffff\1\u0608\1\u0609\1"+
            "\u060a\21\uffff\1\u0603\7\uffff\1\u060d\6\uffff\1\u060e\1\uffff"+
            "\1\u060c\3\uffff\1\u060b\2\uffff\1\u0605\2\uffff\1\u0605\7\uffff"+
            "\1\u0604\1\uffff\1\u060b\1\u0605\4\uffff\1\u05f9",
            "\1\u0617\11\uffff\1\u0610\2\uffff\1\u060f\5\uffff\1\u061a\4"+
            "\uffff\1\u0611\1\uffff\1\u0615\4\uffff\1\u0612\5\uffff\1\u0611"+
            "\1\uffff\1\u0615\3\uffff\1\u0613\16\uffff\1\u061b\22\uffff\1"+
            "\u0614\6\uffff\1\u061c\1\u061d\1\u061e\31\uffff\1\u0621\6\uffff"+
            "\1\u0622\1\uffff\1\u0620\3\uffff\1\u061f\2\uffff\1\u0619\2\uffff"+
            "\1\u0619\7\uffff\1\u0618\1\uffff\1\u061f\1\u0619\4\uffff\1\u0616",
            "\1\u0629\14\uffff\1\u062d\5\uffff\1\u062c\4\uffff\1\u0623\1"+
            "\uffff\1\u0627\4\uffff\1\u0624\5\uffff\1\u0623\1\uffff\1\u0627"+
            "\3\uffff\1\u0625\16\uffff\1\u062e\22\uffff\1\u0626\6\uffff\1"+
            "\u062f\1\u0630\1\u0631\31\uffff\1\u0634\6\uffff\1\u0635\1\uffff"+
            "\1\u0633\3\uffff\1\u0632\2\uffff\1\u062b\2\uffff\1\u062b\7\uffff"+
            "\1\u062a\1\uffff\1\u0632\1\u062b\4\uffff\1\u0628",
            "\1\u063b\14\uffff\1\u063f\5\uffff\1\u063e\6\uffff\1\u0639\4"+
            "\uffff\1\u0636\7\uffff\1\u0639\3\uffff\1\u0637\16\uffff\1\u0640"+
            "\22\uffff\1\u0638\6\uffff\1\u0641\1\u0642\1\u0643\31\uffff\1"+
            "\u0646\6\uffff\1\u0647\1\uffff\1\u0645\3\uffff\1\u0644\2\uffff"+
            "\1\u063d\2\uffff\1\u063d\7\uffff\1\u063c\1\uffff\1\u0644\1\u063d"+
            "\4\uffff\1\u063a",
            "\1\u064c\14\uffff\1\u0650\5\uffff\1\u064f\6\uffff\1\u064a\14"+
            "\uffff\1\u064a\3\uffff\1\u0648\16\uffff\1\u0651\22\uffff\1\u0649"+
            "\6\uffff\1\u0652\1\u0653\1\u0654\31\uffff\1\u0657\6\uffff\1"+
            "\u0658\1\uffff\1\u0656\3\uffff\1\u0655\2\uffff\1\u064e\2\uffff"+
            "\1\u064e\7\uffff\1\u064d\1\uffff\1\u0655\1\u064e\4\uffff\1\u064b",
            "\1\u065c\14\uffff\1\u0660\5\uffff\1\u065f\6\uffff\1\u065a\14"+
            "\uffff\1\u065a\22\uffff\1\u0661\22\uffff\1\u0659\6\uffff\1\u0662"+
            "\1\u0663\1\u0664\31\uffff\1\u0667\6\uffff\1\u0668\1\uffff\1"+
            "\u0666\3\uffff\1\u0665\2\uffff\1\u065e\2\uffff\1\u065e\7\uffff"+
            "\1\u065d\1\uffff\1\u0665\1\u065e\4\uffff\1\u065b",
            "\1\u066b\14\uffff\1\u066f\5\uffff\1\u066e\6\uffff\1\u0669\14"+
            "\uffff\1\u0669\22\uffff\1\u0670\31\uffff\1\u0671\1\u0672\1\u0673"+
            "\31\uffff\1\u0676\6\uffff\1\u0677\1\uffff\1\u0675\3\uffff\1"+
            "\u0674\2\uffff\1\u066d\2\uffff\1\u066d\7\uffff\1\u066c\1\uffff"+
            "\1\u0674\1\u066d\4\uffff\1\u066a",
            "\1\u0679\14\uffff\1\u067d\5\uffff\1\u067c\46\uffff\1\u067e"+
            "\31\uffff\1\u067f\1\u0680\1\u0681\31\uffff\1\u0684\6\uffff\1"+
            "\u0685\1\uffff\1\u0683\3\uffff\1\u0682\2\uffff\1\u067b\2\uffff"+
            "\1\u067b\7\uffff\1\u067a\1\uffff\1\u0682\1\u067b\4\uffff\1\u0678",
            "\1\u0686\177\uffff\1\u0688\2\uffff\1\u0688\7\uffff\1\u0687"+
            "\2\uffff\1\u0688",
            "\1\u068f\12\uffff\1\u069b\5\uffff\1\u068b\50\uffff\1\u0694"+
            "\1\u0697\1\u069a\1\u0689\1\u068f\2\u069a\1\u0693\1\uffff\1\u068a"+
            "\1\u0691\1\u069a\1\u068d\1\u0692\1\u0690\1\u069a\1\u068e\2\u0692"+
            "\1\u069a\1\u0693\1\uffff\1\u0696\1\u069a\1\u0698\1\u068f\1\u069a"+
            "\1\u0690\1\u069a\1\u068e\1\u0699\1\u0691\1\u069a\1\uffff\1\u0695"+
            "\1\u069a\26\uffff\1\u069c\50\uffff\1\u068c",
            "\1\u06a3\12\uffff\1\u06af\5\uffff\1\u069f\50\uffff\1\u06a8"+
            "\1\u06ab\1\u06ae\1\u069d\1\u06a3\2\u06ae\1\u06a7\1\uffff\1\u069e"+
            "\1\u06a5\1\u06ae\1\u06a1\1\u06a6\1\u06a4\1\u06ae\1\u06a2\2\u06a6"+
            "\1\u06ae\1\u06a7\1\uffff\1\u06aa\1\u06ae\1\u06ac\1\u06a3\1\u06ae"+
            "\1\u06a4\1\u06ae\1\u06a2\1\u06ad\1\u06a5\1\u06ae\1\uffff\1\u06a9"+
            "\1\u06ae\26\uffff\1\u06b0\50\uffff\1\u06a0",
            "\1\u06b7\12\uffff\1\u06c3\5\uffff\1\u06b3\50\uffff\1\u06bc"+
            "\1\u06bf\1\u06c2\1\u06b1\1\u06b7\2\u06c2\1\u06bb\1\uffff\1\u06b2"+
            "\1\u06b9\1\u06c2\1\u06b5\1\u06ba\1\u06b8\1\u06c2\1\u06b6\2\u06ba"+
            "\1\u06c2\1\u06bb\1\uffff\1\u06be\1\u06c2\1\u06c0\1\u06b7\1\u06c2"+
            "\1\u06b8\1\u06c2\1\u06b6\1\u06c1\1\u06b9\1\u06c2\1\uffff\1\u06bd"+
            "\1\u06c2\26\uffff\1\u06c4\50\uffff\1\u06b4",
            "\1\u06c6\14\uffff\1\u06c5\5\uffff\1\u06c9\100\uffff\1\u06ca"+
            "\53\uffff\1\u06c8\2\uffff\1\u06c8\7\uffff\1\u06c7\2\uffff\1"+
            "\u06c8",
            "\1\u06cc\12\uffff\1\u06d8\56\uffff\1\u06d1\1\u06d4\1\u06d7"+
            "\1\uffff\1\u06cc\2\u06d7\1\u06d0\2\uffff\1\u06ce\1\u06d7\2\u06cf"+
            "\1\u06cd\1\u06d7\1\u06cb\2\u06cf\1\u06d7\1\u06d0\1\uffff\1\u06d3"+
            "\1\u06d7\1\u06d5\1\u06cc\1\u06d7\1\u06cd\1\u06d7\1\u06cb\1\u06d6"+
            "\1\u06ce\1\u06d7\1\uffff\1\u06d2\1\u06d7\26\uffff\1\u06d9",
            "\1\u06db\12\uffff\1\u06e7\56\uffff\1\u06e0\1\u06e3\1\u06e6"+
            "\1\uffff\1\u06db\2\u06e6\1\u06df\2\uffff\1\u06dd\1\u06e6\2\u06de"+
            "\1\u06dc\1\u06e6\1\u06da\2\u06de\1\u06e6\1\u06df\1\uffff\1\u06e2"+
            "\1\u06e6\1\u06e4\1\u06db\1\u06e6\1\u06dc\1\u06e6\1\u06da\1\u06e5"+
            "\1\u06dd\1\u06e6\1\uffff\1\u06e1\1\u06e6\26\uffff\1\u06e8",
            "\1\u06ea\12\uffff\1\u06f6\56\uffff\1\u06ef\1\u06f2\1\u06f5"+
            "\1\uffff\1\u06ea\2\u06f5\1\u06ee\2\uffff\1\u06ec\1\u06f5\2\u06ed"+
            "\1\u06eb\1\u06f5\1\u06e9\2\u06ed\1\u06f5\1\u06ee\1\uffff\1\u06f1"+
            "\1\u06f5\1\u06f3\1\u06ea\1\u06f5\1\u06eb\1\u06f5\1\u06e9\1\u06f4"+
            "\1\u06ec\1\u06f5\1\uffff\1\u06f0\1\u06f5\26\uffff\1\u06f7",
            "\1\u06f9\12\uffff\1\u0705\56\uffff\1\u06fe\1\u0701\1\u0704"+
            "\1\uffff\1\u06f9\2\u0704\1\u06fd\2\uffff\1\u06fb\1\u0704\2\u06fc"+
            "\1\u06fa\1\u0704\1\u06f8\2\u06fc\1\u0704\1\u06fd\1\uffff\1\u0700"+
            "\1\u0704\1\u0702\1\u06f9\1\u0704\1\u06fa\1\u0704\1\u06f8\1\u0703"+
            "\1\u06fb\1\u0704\1\uffff\1\u06ff\1\u0704\26\uffff\1\u0706",
            "\1\u0708\12\uffff\1\u0714\56\uffff\1\u070d\1\u0710\1\u0713"+
            "\1\uffff\1\u0708\2\u0713\1\u070c\2\uffff\1\u070a\1\u0713\2\u070b"+
            "\1\u0709\1\u0713\1\u0707\2\u070b\1\u0713\1\u070c\1\uffff\1\u070f"+
            "\1\u0713\1\u0711\1\u0708\1\u0713\1\u0709\1\u0713\1\u0707\1\u0712"+
            "\1\u070a\1\u0713\1\uffff\1\u070e\1\u0713\26\uffff\1\u0715",
            "\1\u0716",
            "\1\u0717",
            "\1\u0718",
            "\1\12\12\uffff\1\4\5\uffff\1\u071a\36\uffff\1\12\13\uffff\1"+
            "\4\2\uffff\2\4\2\uffff\1\u0719\1\uffff\1\4\3\uffff\1\4\3\uffff"+
            "\1\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\3\uffff\1\4\2\uffff"+
            "\1\4\33\uffff\1\4\36\uffff\1\12\4\uffff\1\u071b\22\uffff\1\12"+
            "\2\uffff\1\12\7\uffff\1\12\2\uffff\1\12",
            "\1\u0728\14\uffff\1\u0724\42\uffff\1\u0726\11\uffff\1\u0729"+
            "\2\uffff\1\u0727\5\uffff\1\u0732\4\uffff\1\u072a\1\uffff\1\u072e"+
            "\4\uffff\1\u072b\5\uffff\1\u072a\1\uffff\1\u072e\3\uffff\1\u072c"+
            "\16\uffff\1\u0733\22\uffff\1\u072d\6\uffff\1\u0734\1\u0735\1"+
            "\u0736\21\uffff\1\u072f\7\uffff\1\u0739\6\uffff\1\u073a\1\uffff"+
            "\1\u0738\3\uffff\1\u0737\2\uffff\1\u0731\2\uffff\1\u0731\7\uffff"+
            "\1\u0730\1\uffff\1\u0737\1\u0731\4\uffff\1\u0725",
            "\1\u0743\11\uffff\1\u073c\2\uffff\1\u073b\5\uffff\1\u0746\4"+
            "\uffff\1\u073d\1\uffff\1\u0741\4\uffff\1\u073e\5\uffff\1\u073d"+
            "\1\uffff\1\u0741\3\uffff\1\u073f\16\uffff\1\u0747\22\uffff\1"+
            "\u0740\6\uffff\1\u0748\1\u0749\1\u074a\31\uffff\1\u074d\6\uffff"+
            "\1\u074e\1\uffff\1\u074c\3\uffff\1\u074b\2\uffff\1\u0745\2\uffff"+
            "\1\u0745\7\uffff\1\u0744\1\uffff\1\u074b\1\u0745\4\uffff\1\u0742",
            "\1\u0755\14\uffff\1\u0759\5\uffff\1\u0758\4\uffff\1\u074f\1"+
            "\uffff\1\u0753\4\uffff\1\u0750\5\uffff\1\u074f\1\uffff\1\u0753"+
            "\3\uffff\1\u0751\16\uffff\1\u075a\22\uffff\1\u0752\6\uffff\1"+
            "\u075b\1\u075c\1\u075d\31\uffff\1\u0760\6\uffff\1\u0761\1\uffff"+
            "\1\u075f\3\uffff\1\u075e\2\uffff\1\u0757\2\uffff\1\u0757\7\uffff"+
            "\1\u0756\1\uffff\1\u075e\1\u0757\4\uffff\1\u0754",
            "\1\u0767\14\uffff\1\u076b\5\uffff\1\u076a\6\uffff\1\u0765\4"+
            "\uffff\1\u0762\7\uffff\1\u0765\3\uffff\1\u0763\16\uffff\1\u076c"+
            "\22\uffff\1\u0764\6\uffff\1\u076d\1\u076e\1\u076f\31\uffff\1"+
            "\u0772\6\uffff\1\u0773\1\uffff\1\u0771\3\uffff\1\u0770\2\uffff"+
            "\1\u0769\2\uffff\1\u0769\7\uffff\1\u0768\1\uffff\1\u0770\1\u0769"+
            "\4\uffff\1\u0766",
            "\1\u0778\14\uffff\1\u077c\5\uffff\1\u077b\6\uffff\1\u0776\14"+
            "\uffff\1\u0776\3\uffff\1\u0774\16\uffff\1\u077d\22\uffff\1\u0775"+
            "\6\uffff\1\u077e\1\u077f\1\u0780\31\uffff\1\u0783\6\uffff\1"+
            "\u0784\1\uffff\1\u0782\3\uffff\1\u0781\2\uffff\1\u077a\2\uffff"+
            "\1\u077a\7\uffff\1\u0779\1\uffff\1\u0781\1\u077a\4\uffff\1\u0777",
            "\1\u0788\14\uffff\1\u078c\5\uffff\1\u078b\6\uffff\1\u0786\14"+
            "\uffff\1\u0786\22\uffff\1\u078d\22\uffff\1\u0785\6\uffff\1\u078e"+
            "\1\u078f\1\u0790\31\uffff\1\u0793\6\uffff\1\u0794\1\uffff\1"+
            "\u0792\3\uffff\1\u0791\2\uffff\1\u078a\2\uffff\1\u078a\7\uffff"+
            "\1\u0789\1\uffff\1\u0791\1\u078a\4\uffff\1\u0787",
            "\1\u0797\14\uffff\1\u079b\5\uffff\1\u079a\6\uffff\1\u0795\14"+
            "\uffff\1\u0795\22\uffff\1\u079c\31\uffff\1\u079d\1\u079e\1\u079f"+
            "\31\uffff\1\u07a2\6\uffff\1\u07a3\1\uffff\1\u07a1\3\uffff\1"+
            "\u07a0\2\uffff\1\u0799\2\uffff\1\u0799\7\uffff\1\u0798\1\uffff"+
            "\1\u07a0\1\u0799\4\uffff\1\u0796",
            "\1\u07a5\14\uffff\1\u07a9\5\uffff\1\u07a8\46\uffff\1\u07aa"+
            "\31\uffff\1\u07ab\1\u07ac\1\u07ad\31\uffff\1\u07b0\6\uffff\1"+
            "\u07b1\1\uffff\1\u07af\3\uffff\1\u07ae\2\uffff\1\u07a7\2\uffff"+
            "\1\u07a7\7\uffff\1\u07a6\1\uffff\1\u07ae\1\u07a7\4\uffff\1\u07a4",
            "\1\u07b2\177\uffff\1\u07b4\2\uffff\1\u07b4\7\uffff\1\u07b3"+
            "\2\uffff\1\u07b4",
            "\1\u07bb\20\uffff\1\u07b7\50\uffff\1\u07c0\1\u07c3\1\u07c6"+
            "\1\u07b5\1\u07bb\2\u07c6\1\u07bf\1\uffff\1\u07b6\1\u07bd\1\u07c6"+
            "\1\u07b9\1\u07be\1\u07bc\1\u07c6\1\u07ba\2\u07be\1\u07c6\1\u07bf"+
            "\1\uffff\1\u07c2\1\u07c6\1\u07c4\1\u07bb\1\u07c6\1\u07bc\1\u07c6"+
            "\1\u07ba\1\u07c5\1\u07bd\1\u07c6\1\uffff\1\u07c1\1\u07c6\30"+
            "\uffff\1\u07c7\46\uffff\1\u07b8",
            "\1\u07ce\20\uffff\1\u07ca\50\uffff\1\u07d3\1\u07d6\1\u07d9"+
            "\1\u07c8\1\u07ce\2\u07d9\1\u07d2\1\uffff\1\u07c9\1\u07d0\1\u07d9"+
            "\1\u07cc\1\u07d1\1\u07cf\1\u07d9\1\u07cd\2\u07d1\1\u07d9\1\u07d2"+
            "\1\uffff\1\u07d5\1\u07d9\1\u07d7\1\u07ce\1\u07d9\1\u07cf\1\u07d9"+
            "\1\u07cd\1\u07d8\1\u07d0\1\u07d9\1\uffff\1\u07d4\1\u07d9\30"+
            "\uffff\1\u07da\46\uffff\1\u07cb",
            "\1\u07e1\20\uffff\1\u07dd\50\uffff\1\u07e6\1\u07e9\1\u07ec"+
            "\1\u07db\1\u07e1\2\u07ec\1\u07e5\1\uffff\1\u07dc\1\u07e3\1\u07ec"+
            "\1\u07df\1\u07e4\1\u07e2\1\u07ec\1\u07e0\2\u07e4\1\u07ec\1\u07e5"+
            "\1\uffff\1\u07e8\1\u07ec\1\u07ea\1\u07e1\1\u07ec\1\u07e2\1\u07ec"+
            "\1\u07e0\1\u07eb\1\u07e3\1\u07ec\1\uffff\1\u07e7\1\u07ec\30"+
            "\uffff\1\u07ed\46\uffff\1\u07de",
            "\1\u07ef\14\uffff\1\u07ee\5\uffff\1\u07f2\100\uffff\1\u07f3"+
            "\53\uffff\1\u07f1\2\uffff\1\u07f1\7\uffff\1\u07f0\2\uffff\1"+
            "\u07f1",
            "\1\u07f5\71\uffff\1\u07fa\1\u07fd\1\u0800\1\uffff\1\u07f5\2"+
            "\u0800\1\u07f9\2\uffff\1\u07f7\1\u0800\2\u07f8\1\u07f6\1\u0800"+
            "\1\u07f4\2\u07f8\1\u0800\1\u07f9\1\uffff\1\u07fc\1\u0800\1\u07fe"+
            "\1\u07f5\1\u0800\1\u07f6\1\u0800\1\u07f4\1\u07ff\1\u07f7\1\u0800"+
            "\1\uffff\1\u07fb\1\u0800\30\uffff\1\u0801",
            "\1\u0803\71\uffff\1\u0808\1\u080b\1\u080e\1\uffff\1\u0803\2"+
            "\u080e\1\u0807\2\uffff\1\u0805\1\u080e\2\u0806\1\u0804\1\u080e"+
            "\1\u0802\2\u0806\1\u080e\1\u0807\1\uffff\1\u080a\1\u080e\1\u080c"+
            "\1\u0803\1\u080e\1\u0804\1\u080e\1\u0802\1\u080d\1\u0805\1\u080e"+
            "\1\uffff\1\u0809\1\u080e\30\uffff\1\u080f",
            "\1\u0811\71\uffff\1\u0816\1\u0819\1\u081c\1\uffff\1\u0811\2"+
            "\u081c\1\u0815\2\uffff\1\u0813\1\u081c\2\u0814\1\u0812\1\u081c"+
            "\1\u0810\2\u0814\1\u081c\1\u0815\1\uffff\1\u0818\1\u081c\1\u081a"+
            "\1\u0811\1\u081c\1\u0812\1\u081c\1\u0810\1\u081b\1\u0813\1\u081c"+
            "\1\uffff\1\u0817\1\u081c\30\uffff\1\u081d",
            "\1\u081f\71\uffff\1\u0824\1\u0827\1\u082a\1\uffff\1\u081f\2"+
            "\u082a\1\u0823\2\uffff\1\u0821\1\u082a\2\u0822\1\u0820\1\u082a"+
            "\1\u081e\2\u0822\1\u082a\1\u0823\1\uffff\1\u0826\1\u082a\1\u0828"+
            "\1\u081f\1\u082a\1\u0820\1\u082a\1\u081e\1\u0829\1\u0821\1\u082a"+
            "\1\uffff\1\u0825\1\u082a\30\uffff\1\u082b",
            "\1\u082d\71\uffff\1\u0832\1\u0835\1\u0838\1\uffff\1\u082d\2"+
            "\u0838\1\u0831\2\uffff\1\u082f\1\u0838\2\u0830\1\u082e\1\u0838"+
            "\1\u082c\2\u0830\1\u0838\1\u0831\1\uffff\1\u0834\1\u0838\1\u0836"+
            "\1\u082d\1\u0838\1\u082e\1\u0838\1\u082c\1\u0837\1\u082f\1\u0838"+
            "\1\uffff\1\u0833\1\u0838\30\uffff\1\u0839",
            "\1\u083a",
            "\1\u083b",
            "\1\u083c",
            "\1\12\12\uffff\1\4\5\uffff\1\u083d\36\uffff\1\12\13\uffff\1"+
            "\4\2\uffff\2\4\2\uffff\1\u0844\1\uffff\1\4\3\uffff\1\4\3\uffff"+
            "\1\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\3\uffff\1\4\2\uffff"+
            "\1\4\33\uffff\1\4\36\uffff\1\12\4\uffff\1\u083e\22\uffff\1\12"+
            "\2\uffff\1\12\7\uffff\1\12\2\uffff\1\12",
            "\1\12\12\uffff\1\4\5\uffff\1\u084f\36\uffff\1\12\13\uffff\1"+
            "\4\1\u0848\1\uffff\2\4\2\uffff\1\u0849\1\uffff\1\4\3\uffff\1"+
            "\4\3\uffff\1\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\3\uffff\1"+
            "\4\2\uffff\1\4\33\uffff\1\4\36\uffff\1\12\4\uffff\1\u0850\22"+
            "\uffff\1\12\2\uffff\1\12\7\uffff\1\12\2\uffff\1\12",
            "\1\12\12\uffff\1\4\5\uffff\1\u085b\36\uffff\1\12\13\uffff\1"+
            "\4\1\u0854\1\uffff\2\4\2\uffff\1\u0855\1\uffff\1\4\3\uffff\1"+
            "\4\3\uffff\1\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\3\uffff\1"+
            "\4\2\uffff\1\4\33\uffff\1\4\36\uffff\1\12\4\uffff\1\u085c\22"+
            "\uffff\1\12\2\uffff\1\12\7\uffff\1\12\2\uffff\1\12",
            "\1\12\12\uffff\1\4\5\uffff\1\u0867\36\uffff\1\12\13\uffff\1"+
            "\4\1\u0860\1\uffff\2\4\2\uffff\1\u0861\1\uffff\1\4\3\uffff\1"+
            "\4\3\uffff\1\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\3\uffff\1"+
            "\4\2\uffff\1\4\33\uffff\1\4\36\uffff\1\12\4\uffff\1\u0868\22"+
            "\uffff\1\12\2\uffff\1\12\7\uffff\1\12\2\uffff\1\12",
            "\1\12\12\uffff\1\4\5\uffff\1\u0873\36\uffff\1\12\13\uffff\1"+
            "\4\1\u086c\1\uffff\2\4\2\uffff\1\u086d\1\uffff\1\4\3\uffff\1"+
            "\4\3\uffff\1\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\3\uffff\1"+
            "\4\2\uffff\1\4\33\uffff\1\4\36\uffff\1\12\4\uffff\1\u0874\22"+
            "\uffff\1\12\2\uffff\1\12\7\uffff\1\12\2\uffff\1\12",
            "\1\12\12\uffff\1\4\5\uffff\1\u087f\36\uffff\1\12\13\uffff\1"+
            "\4\1\u0878\1\uffff\2\4\2\uffff\1\u0879\1\uffff\1\4\3\uffff\1"+
            "\4\3\uffff\1\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\3\uffff\1"+
            "\4\2\uffff\1\4\33\uffff\1\4\36\uffff\1\12\4\uffff\1\u0880\22"+
            "\uffff\1\12\2\uffff\1\12\7\uffff\1\12\2\uffff\1\12",
            "\1\12\12\uffff\1\4\5\uffff\1\u088b\36\uffff\1\12\13\uffff\1"+
            "\4\1\u0884\1\uffff\2\4\2\uffff\1\u0885\1\uffff\1\4\3\uffff\1"+
            "\4\3\uffff\1\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\3\uffff\1"+
            "\4\2\uffff\1\4\33\uffff\1\4\36\uffff\1\12\4\uffff\1\u088c\22"+
            "\uffff\1\12\2\uffff\1\12\7\uffff\1\12\2\uffff\1\12",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA56_eot = DFA.unpackEncodedString(DFA56_eotS);
    static final short[] DFA56_eof = DFA.unpackEncodedString(DFA56_eofS);
    static final char[] DFA56_min = DFA.unpackEncodedStringToUnsignedChars(DFA56_minS);
    static final char[] DFA56_max = DFA.unpackEncodedStringToUnsignedChars(DFA56_maxS);
    static final short[] DFA56_accept = DFA.unpackEncodedString(DFA56_acceptS);
    static final short[] DFA56_special = DFA.unpackEncodedString(DFA56_specialS);
    static final short[][] DFA56_transition;

    static {
        int numStates = DFA56_transitionS.length;
        DFA56_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA56_transition[i] = DFA.unpackEncodedString(DFA56_transitionS[i]);
        }
    }

    class DFA56 extends DFA {

        public DFA56(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 56;
            this.eot = DFA56_eot;
            this.eof = DFA56_eof;
            this.min = DFA56_min;
            this.max = DFA56_max;
            this.accept = DFA56_accept;
            this.special = DFA56_special;
            this.transition = DFA56_transition;
        }
        public String getDescription() {
            return "490:32: ( static_type_wrapper )?";
        }
    }
    static final String DFA74_eotS =
        "\147\uffff";
    static final String DFA74_eofS =
        "\147\uffff";
    static final String DFA74_minS =
        "\2\6\26\uffff\1\6\25\uffff\1\6\70\uffff";
    static final String DFA74_maxS =
        "\2\u00c9\26\uffff\1\u00a3\25\uffff\1\u00c9\70\uffff";
    static final String DFA74_acceptS =
        "\2\uffff\1\1\52\uffff\1\2\71\uffff";
    static final String DFA74_specialS =
        "\147\uffff}>";
    static final String[] DFA74_transitionS = {
            "\1\2\57\uffff\1\2\11\uffff\1\2\2\uffff\1\1\5\uffff\1\2\4\uffff"+
            "\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff"+
            "\1\2\16\uffff\1\2\22\uffff\1\2\6\uffff\3\2\31\uffff\1\2\6\uffff"+
            "\1\2\1\uffff\1\2\3\uffff\1\2\2\uffff\1\2\2\uffff\1\2\7\uffff"+
            "\1\2\1\uffff\2\2\4\uffff\1\2",
            "\1\2\14\uffff\1\2\42\uffff\1\30\11\uffff\1\2\2\uffff\1\2\5"+
            "\uffff\1\2\4\uffff\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1"+
            "\uffff\1\2\3\uffff\1\2\16\uffff\1\2\22\uffff\1\2\6\uffff\3\2"+
            "\1\uffff\1\55\17\uffff\1\2\7\uffff\1\2\6\uffff\1\2\1\uffff\1"+
            "\2\3\uffff\1\2\2\uffff\1\2\2\uffff\1\2\7\uffff\1\2\1\uffff\2"+
            "\2\4\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\2\20\uffff\1\2\50\uffff\10\2\1\uffff\14\2\1\uffff\13\2\1"+
            "\uffff\2\2\26\uffff\1\56\50\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\2\12\uffff\1\2\5\uffff\1\2\36\uffff\1\2\11\uffff\10\2\1"+
            "\55\33\2\14\uffff\1\2\11\uffff\2\2\7\uffff\1\2\6\uffff\3\2\26"+
            "\uffff\1\2\2\uffff\1\2\6\uffff\1\2\1\uffff\1\2\3\uffff\1\2\2"+
            "\uffff\1\2\2\uffff\1\2\7\uffff\1\2\1\uffff\2\2\4\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA74_eot = DFA.unpackEncodedString(DFA74_eotS);
    static final short[] DFA74_eof = DFA.unpackEncodedString(DFA74_eofS);
    static final char[] DFA74_min = DFA.unpackEncodedStringToUnsignedChars(DFA74_minS);
    static final char[] DFA74_max = DFA.unpackEncodedStringToUnsignedChars(DFA74_maxS);
    static final short[] DFA74_accept = DFA.unpackEncodedString(DFA74_acceptS);
    static final short[] DFA74_special = DFA.unpackEncodedString(DFA74_specialS);
    static final short[][] DFA74_transition;

    static {
        int numStates = DFA74_transitionS.length;
        DFA74_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA74_transition[i] = DFA.unpackEncodedString(DFA74_transitionS[i]);
        }
    }

    class DFA74 extends DFA {

        public DFA74(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 74;
            this.eot = DFA74_eot;
            this.eof = DFA74_eof;
            this.min = DFA74_min;
            this.max = DFA74_max;
            this.accept = DFA74_accept;
            this.special = DFA74_special;
            this.transition = DFA74_transition;
        }
        public String getDescription() {
            return "583:1: expression : ( classical_expr_wrp | struct_init );";
        }
    }
    static final String DFA78_eotS =
        "\164\uffff";
    static final String DFA78_eofS =
        "\164\uffff";
    static final String DFA78_minS =
        "\2\6\27\uffff\1\6\10\uffff\1\6\13\uffff\1\6\3\uffff\1\6\17\uffff"+
        "\1\174\61\uffff";
    static final String DFA78_maxS =
        "\2\u00c9\27\uffff\1\u00a3\10\uffff\1\172\13\uffff\1\u00c9\3\uffff"+
        "\1\u00c9\17\uffff\1\174\61\uffff";
    static final String DFA78_acceptS =
        "\2\uffff\1\1\23\uffff\1\2\57\uffff\1\3\1\1\25\uffff\1\1\25\uffff"+
        "\1\1";
    static final String DFA78_specialS =
        "\164\uffff}>";
    static final String[] DFA78_transitionS = {
            "\1\2\57\uffff\1\2\11\uffff\1\2\2\uffff\1\1\4\uffff\1\26\1\2"+
            "\4\uffff\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2"+
            "\3\uffff\1\2\16\uffff\1\2\22\uffff\1\2\6\uffff\3\2\31\uffff"+
            "\1\2\6\uffff\1\2\1\uffff\1\2\3\uffff\1\2\2\uffff\1\2\2\uffff"+
            "\1\2\7\uffff\1\2\1\uffff\2\2\4\uffff\1\2",
            "\1\2\14\uffff\1\2\42\uffff\1\31\11\uffff\1\2\2\uffff\1\2\5"+
            "\uffff\1\2\4\uffff\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1"+
            "\uffff\1\2\3\uffff\1\2\16\uffff\1\2\22\uffff\1\2\6\uffff\3\2"+
            "\21\uffff\1\42\7\uffff\1\2\6\uffff\1\2\1\uffff\1\2\3\uffff\1"+
            "\2\2\uffff\1\2\2\uffff\1\2\7\uffff\1\2\1\uffff\2\2\4\uffff\1"+
            "\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\2\20\uffff\1\2\50\uffff\3\2\1\62\4\2\1\uffff\1\56\13\2\1"+
            "\uffff\13\2\1\uffff\2\2\26\uffff\1\2\50\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\2\74\uffff\1\106\5\uffff\1\102\2\uffff\1\2\55\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\2\57\uffff\1\2\11\uffff\1\2\2\uffff\1\2\5\uffff\1\2\4\uffff"+
            "\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff"+
            "\1\2\16\uffff\1\2\13\uffff\1\107\6\uffff\1\2\6\uffff\3\2\31"+
            "\uffff\1\2\6\uffff\1\2\1\uffff\1\2\3\uffff\1\2\2\uffff\1\2\2"+
            "\uffff\1\2\7\uffff\1\2\1\uffff\2\2\4\uffff\1\2",
            "",
            "",
            "",
            "\1\135\57\uffff\1\2\11\uffff\1\2\2\uffff\1\2\5\uffff\1\2\4"+
            "\uffff\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3"+
            "\uffff\1\2\16\uffff\1\2\11\uffff\1\2\10\uffff\1\2\6\uffff\3"+
            "\2\31\uffff\1\2\6\uffff\1\2\1\uffff\1\2\3\uffff\1\2\2\uffff"+
            "\1\2\2\uffff\1\2\7\uffff\1\2\1\uffff\2\2\4\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\163",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA78_eot = DFA.unpackEncodedString(DFA78_eotS);
    static final short[] DFA78_eof = DFA.unpackEncodedString(DFA78_eofS);
    static final char[] DFA78_min = DFA.unpackEncodedStringToUnsignedChars(DFA78_minS);
    static final char[] DFA78_max = DFA.unpackEncodedStringToUnsignedChars(DFA78_maxS);
    static final short[] DFA78_accept = DFA.unpackEncodedString(DFA78_acceptS);
    static final short[] DFA78_special = DFA.unpackEncodedString(DFA78_specialS);
    static final short[][] DFA78_transition;

    static {
        int numStates = DFA78_transitionS.length;
        DFA78_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA78_transition[i] = DFA.unpackEncodedString(DFA78_transitionS[i]);
        }
    }

    class DFA78 extends DFA {

        public DFA78(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 78;
            this.eot = DFA78_eot;
            this.eof = DFA78_eof;
            this.min = DFA78_min;
            this.max = DFA78_max;
            this.accept = DFA78_accept;
            this.special = DFA78_special;
            this.transition = DFA78_transition;
        }
        public String getDescription() {
            return "601:19: ( classical_expr_wrp | array_init_wrapper | ( func_pointer2 ( method_call_wrapper )? ) )";
        }
    }
    static final String DFA83_eotS =
        "\155\uffff";
    static final String DFA83_eofS =
        "\155\uffff";
    static final String DFA83_minS =
        "\1\66\1\6\3\uffff\2\6\10\uffff\1\66\7\uffff\1\6\15\uffff\1\6\107"+
        "\uffff";
    static final String DFA83_maxS =
        "\1\u00c4\1\u00c1\3\uffff\2\u00c9\10\uffff\1\u00c9\7\uffff\1\u00a3"+
        "\15\uffff\1\u00c1\107\uffff";
    static final String DFA83_acceptS =
        "\2\uffff\1\1\1\uffff\1\2\76\uffff\1\1\15\uffff\1\1\21\uffff\1\1"+
        "\11\uffff";
    static final String DFA83_specialS =
        "\155\uffff}>";
    static final String[] DFA83_transitionS = {
            "\1\1\147\uffff\1\4\27\uffff\1\2\2\uffff\1\2\7\uffff\1\2\2\uffff"+
            "\1\2",
            "\1\4\12\uffff\1\2\5\uffff\1\2\52\uffff\1\2\1\5\1\uffff\2\2"+
            "\2\uffff\1\6\1\uffff\1\2\3\uffff\1\2\3\uffff\1\2\3\uffff\1\2"+
            "\2\uffff\1\2\1\uffff\1\2\3\uffff\1\2\2\uffff\1\2\33\uffff\1"+
            "\2\43\uffff\1\2\35\uffff\1\2",
            "",
            "",
            "",
            "\1\17\57\uffff\1\27\11\uffff\1\2\2\uffff\1\2\5\uffff\1\2\4"+
            "\uffff\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3"+
            "\uffff\1\2\16\uffff\1\2\11\uffff\1\2\10\uffff\1\2\6\uffff\3"+
            "\2\21\uffff\1\4\7\uffff\1\2\6\uffff\1\2\1\uffff\1\2\3\uffff"+
            "\1\2\2\uffff\1\2\2\uffff\1\2\7\uffff\1\2\1\uffff\2\2\4\uffff"+
            "\1\2",
            "\1\2\57\uffff\1\2\11\uffff\1\2\2\uffff\1\2\5\uffff\1\2\4\uffff"+
            "\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff"+
            "\1\2\16\uffff\1\2\13\uffff\1\45\6\uffff\1\2\6\uffff\3\2\31\uffff"+
            "\1\2\6\uffff\1\2\1\uffff\1\2\3\uffff\1\2\2\uffff\1\2\2\uffff"+
            "\1\2\7\uffff\1\2\1\uffff\2\2\4\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\103\11\uffff\1\2\2\uffff\1\2\5\uffff\1\2\4\uffff\1\2\1\uffff"+
            "\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff\1\2\16\uffff"+
            "\1\2\22\uffff\1\2\6\uffff\3\2\21\uffff\1\4\7\uffff\1\2\6\uffff"+
            "\1\2\1\uffff\1\2\3\uffff\1\2\2\uffff\1\2\2\uffff\1\2\7\uffff"+
            "\1\2\1\uffff\2\2\4\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\2\12\uffff\1\2\5\uffff\1\2\50\uffff\10\2\1\uffff\1\121\13"+
            "\2\1\uffff\13\2\1\uffff\2\2\26\uffff\1\143\50\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\4\12\uffff\1\143\5\uffff\1\143\52\uffff\1\143\1\4\1\uffff"+
            "\2\143\2\uffff\1\143\1\uffff\1\143\3\uffff\1\143\3\uffff\1\143"+
            "\3\uffff\1\143\2\uffff\1\143\1\uffff\1\143\3\uffff\1\143\2\uffff"+
            "\1\143\33\uffff\1\143\43\uffff\1\143\35\uffff\1\143",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA83_eot = DFA.unpackEncodedString(DFA83_eotS);
    static final short[] DFA83_eof = DFA.unpackEncodedString(DFA83_eofS);
    static final char[] DFA83_min = DFA.unpackEncodedStringToUnsignedChars(DFA83_minS);
    static final char[] DFA83_max = DFA.unpackEncodedStringToUnsignedChars(DFA83_maxS);
    static final short[] DFA83_accept = DFA.unpackEncodedString(DFA83_acceptS);
    static final short[] DFA83_special = DFA.unpackEncodedString(DFA83_specialS);
    static final short[][] DFA83_transition;

    static {
        int numStates = DFA83_transitionS.length;
        DFA83_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA83_transition[i] = DFA.unpackEncodedString(DFA83_transitionS[i]);
        }
    }

    class DFA83 extends DFA {

        public DFA83(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 83;
            this.eot = DFA83_eot;
            this.eof = DFA83_eof;
            this.min = DFA83_min;
            this.max = DFA83_max;
            this.accept = DFA83_accept;
            this.special = DFA83_special;
            this.transition = DFA83_transition;
        }
        public String getDescription() {
            return "625:4: ( object_name | func_pointer1 )";
        }
    }
    static final String DFA95_eotS =
        "\u00c3\uffff";
    static final String DFA95_eofS =
        "\64\uffff\1\2\u008e\uffff";
    static final String DFA95_minS =
        "\2\6\25\uffff\1\66\1\6\24\uffff\1\6\3\uffff\4\6\u008e\uffff";
    static final String DFA95_maxS =
        "\2\u00c9\25\uffff\1\u00c4\1\u00a3\24\uffff\1\u00a3\3\uffff\4\u00c9"+
        "\u008e\uffff";
    static final String DFA95_acceptS =
        "\2\uffff\1\2\23\uffff\1\1\56\uffff\4\1\20\uffff\1\1\25\uffff\1\1"+
        "\25\uffff\1\1\24\uffff\3\1\3\uffff\1\1\1\uffff\3\1\36\uffff";
    static final String DFA95_specialS =
        "\u00c3\uffff}>";
    static final String[] DFA95_transitionS = {
            "\1\2\57\uffff\1\2\11\uffff\1\2\2\uffff\1\1\5\uffff\1\2\4\uffff"+
            "\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff"+
            "\1\2\16\uffff\1\2\22\uffff\1\2\6\uffff\3\2\31\uffff\1\2\6\uffff"+
            "\1\2\1\uffff\1\2\3\uffff\1\2\2\uffff\1\2\2\uffff\1\2\7\uffff"+
            "\1\2\1\uffff\2\2\4\uffff\1\2",
            "\1\2\14\uffff\1\26\42\uffff\1\30\11\uffff\1\2\2\uffff\1\2\5"+
            "\uffff\1\2\4\uffff\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1"+
            "\uffff\1\2\3\uffff\1\2\16\uffff\1\2\22\uffff\1\2\6\uffff\3\2"+
            "\21\uffff\1\26\7\uffff\1\2\6\uffff\1\2\1\uffff\1\2\3\uffff\1"+
            "\2\2\uffff\1\2\2\uffff\1\2\7\uffff\1\2\1\uffff\2\2\4\uffff\1"+
            "\27",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\55\147\uffff\1\26\27\uffff\1\2\2\uffff\1\2\7\uffff\1\2\2"+
            "\uffff\1\2",
            "\1\63\20\uffff\1\2\50\uffff\10\2\1\uffff\1\61\2\2\1\62\10\2"+
            "\1\uffff\13\2\1\uffff\2\2\26\uffff\1\64\50\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\107\20\uffff\1\2\50\uffff\10\2\1\uffff\1\105\2\2\1\106\10"+
            "\2\1\uffff\13\2\1\uffff\2\2\26\uffff\1\110\50\uffff\1\2",
            "",
            "",
            "",
            "\1\2\57\uffff\1\2\11\uffff\1\2\2\uffff\1\2\5\uffff\1\2\4\uffff"+
            "\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff"+
            "\1\2\16\uffff\1\2\13\uffff\1\131\6\uffff\1\2\6\uffff\3\2\31"+
            "\uffff\1\2\6\uffff\1\2\1\uffff\1\2\3\uffff\1\2\2\uffff\1\2\2"+
            "\uffff\1\2\7\uffff\1\2\1\uffff\2\2\4\uffff\1\2",
            "\1\2\57\uffff\1\157\11\uffff\1\2\2\uffff\1\2\5\uffff\1\2\4"+
            "\uffff\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3"+
            "\uffff\1\2\16\uffff\1\2\22\uffff\1\2\6\uffff\3\2\31\uffff\1"+
            "\2\6\uffff\1\2\1\uffff\1\2\3\uffff\1\2\2\uffff\1\2\2\uffff\1"+
            "\2\7\uffff\1\2\1\uffff\2\2\4\uffff\1\2",
            "\1\u0085\57\uffff\1\2\11\uffff\1\2\2\uffff\1\2\5\uffff\1\2"+
            "\4\uffff\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2"+
            "\3\uffff\1\2\16\uffff\1\2\11\uffff\1\26\10\uffff\1\2\6\uffff"+
            "\3\2\31\uffff\1\2\6\uffff\1\2\1\uffff\1\2\3\uffff\1\2\2\uffff"+
            "\1\2\2\uffff\1\2\7\uffff\1\2\1\uffff\2\2\4\uffff\1\2",
            "\1\u009a\11\uffff\2\2\5\uffff\1\2\36\uffff\1\u00a2\11\uffff"+
            "\1\u009b\2\2\1\u00a4\4\2\1\uffff\1\u00a4\4\2\1\u009c\1\2\1\u00a0"+
            "\4\2\1\u009c\5\2\1\u009c\1\2\1\u00a0\3\2\1\u009c\2\2\14\uffff"+
            "\1\u00a4\11\uffff\3\2\2\uffff\1\2\3\uffff\1\u009c\6\uffff\3"+
            "\u00a4\21\uffff\1\2\4\uffff\1\2\2\uffff\1\u00a4\6\uffff\1\u00a4"+
            "\1\uffff\1\u00a4\3\uffff\1\u00a4\2\uffff\1\u00a4\2\uffff\1\u00a4"+
            "\7\uffff\1\u00a3\1\uffff\2\u00a4\4\uffff\1\u009c",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA95_eot = DFA.unpackEncodedString(DFA95_eotS);
    static final short[] DFA95_eof = DFA.unpackEncodedString(DFA95_eofS);
    static final char[] DFA95_min = DFA.unpackEncodedStringToUnsignedChars(DFA95_minS);
    static final char[] DFA95_max = DFA.unpackEncodedStringToUnsignedChars(DFA95_maxS);
    static final short[] DFA95_accept = DFA.unpackEncodedString(DFA95_acceptS);
    static final short[] DFA95_special = DFA.unpackEncodedString(DFA95_specialS);
    static final short[][] DFA95_transition;

    static {
        int numStates = DFA95_transitionS.length;
        DFA95_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA95_transition[i] = DFA.unpackEncodedString(DFA95_transitionS[i]);
        }
    }

    class DFA95 extends DFA {

        public DFA95(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 95;
            this.eot = DFA95_eot;
            this.eof = DFA95_eof;
            this.min = DFA95_min;
            this.max = DFA95_max;
            this.accept = DFA95_accept;
            this.special = DFA95_special;
            this.transition = DFA95_transition;
        }
        public String getDescription() {
            return "708:4: ( type_convertion )?";
        }
    }
    static final String DFA96_eotS =
        "\u00c1\uffff";
    static final String DFA96_eofS =
        "\63\uffff\1\2\u008d\uffff";
    static final String DFA96_minS =
        "\1\66\1\6\24\uffff\1\66\1\6\24\uffff\1\6\3\uffff\4\6\u008d\uffff";
    static final String DFA96_maxS =
        "\2\u00c9\24\uffff\1\u00c4\1\u00a3\24\uffff\1\u00a3\3\uffff\4\u00c9"+
        "\u008d\uffff";
    static final String DFA96_acceptS =
        "\2\uffff\1\2\22\uffff\1\1\56\uffff\4\1\20\uffff\1\1\25\uffff\1\1"+
        "\25\uffff\1\1\24\uffff\2\1\3\uffff\1\1\1\uffff\3\1\36\uffff";
    static final String DFA96_specialS =
        "\u00c1\uffff}>";
    static final String[] DFA96_transitionS = {
            "\1\2\11\uffff\1\2\2\uffff\1\1\5\uffff\1\2\4\uffff\1\2\1\uffff"+
            "\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff\1\2\16\uffff"+
            "\1\2\22\uffff\1\2\6\uffff\3\2\31\uffff\1\2\6\uffff\1\2\1\uffff"+
            "\1\2\3\uffff\1\2\2\uffff\1\2\2\uffff\1\2\7\uffff\1\2\1\uffff"+
            "\2\2\4\uffff\1\2",
            "\1\2\14\uffff\1\25\42\uffff\1\27\11\uffff\1\2\2\uffff\1\2\5"+
            "\uffff\1\2\4\uffff\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1"+
            "\uffff\1\2\3\uffff\1\2\16\uffff\1\2\22\uffff\1\2\6\uffff\3\2"+
            "\21\uffff\1\25\7\uffff\1\2\6\uffff\1\2\1\uffff\1\2\3\uffff\1"+
            "\2\2\uffff\1\2\2\uffff\1\2\7\uffff\1\2\1\uffff\2\2\4\uffff\1"+
            "\26",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\54\147\uffff\1\25\27\uffff\1\2\2\uffff\1\2\7\uffff\1\2\2"+
            "\uffff\1\2",
            "\1\62\20\uffff\1\2\50\uffff\10\2\1\uffff\1\60\2\2\1\61\10\2"+
            "\1\uffff\13\2\1\uffff\2\2\26\uffff\1\63\50\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\106\20\uffff\1\2\50\uffff\10\2\1\uffff\1\104\2\2\1\105\10"+
            "\2\1\uffff\13\2\1\uffff\2\2\26\uffff\1\107\50\uffff\1\2",
            "",
            "",
            "",
            "\1\2\57\uffff\1\2\11\uffff\1\2\2\uffff\1\2\5\uffff\1\2\4\uffff"+
            "\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff"+
            "\1\2\16\uffff\1\2\13\uffff\1\130\6\uffff\1\2\6\uffff\3\2\31"+
            "\uffff\1\2\6\uffff\1\2\1\uffff\1\2\3\uffff\1\2\2\uffff\1\2\2"+
            "\uffff\1\2\7\uffff\1\2\1\uffff\2\2\4\uffff\1\2",
            "\1\2\57\uffff\1\156\11\uffff\1\2\2\uffff\1\2\5\uffff\1\2\4"+
            "\uffff\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3"+
            "\uffff\1\2\16\uffff\1\2\22\uffff\1\2\6\uffff\3\2\31\uffff\1"+
            "\2\6\uffff\1\2\1\uffff\1\2\3\uffff\1\2\2\uffff\1\2\2\uffff\1"+
            "\2\7\uffff\1\2\1\uffff\2\2\4\uffff\1\2",
            "\1\u0084\57\uffff\1\2\11\uffff\1\2\2\uffff\1\2\5\uffff\1\2"+
            "\4\uffff\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2"+
            "\3\uffff\1\2\16\uffff\1\2\11\uffff\1\25\10\uffff\1\2\6\uffff"+
            "\3\2\31\uffff\1\2\6\uffff\1\2\1\uffff\1\2\3\uffff\1\2\2\uffff"+
            "\1\2\2\uffff\1\2\7\uffff\1\2\1\uffff\2\2\4\uffff\1\2",
            "\1\2\11\uffff\2\2\5\uffff\1\2\36\uffff\1\u00a0\11\uffff\1\u0099"+
            "\2\2\1\u00a2\4\2\1\uffff\1\u00a2\4\2\1\u009a\1\2\1\u009e\4\2"+
            "\1\u009a\5\2\1\u009a\1\2\1\u009e\3\2\1\u009a\2\2\14\uffff\1"+
            "\u00a2\11\uffff\3\2\2\uffff\1\2\3\uffff\1\u009a\6\uffff\3\u00a2"+
            "\21\uffff\1\2\4\uffff\1\2\2\uffff\1\u00a2\6\uffff\1\u00a2\1"+
            "\uffff\1\u00a2\3\uffff\1\u00a2\2\uffff\1\u00a2\2\uffff\1\u00a2"+
            "\7\uffff\1\u00a1\1\uffff\2\u00a2\4\uffff\1\u009a",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA96_eot = DFA.unpackEncodedString(DFA96_eotS);
    static final short[] DFA96_eof = DFA.unpackEncodedString(DFA96_eofS);
    static final char[] DFA96_min = DFA.unpackEncodedStringToUnsignedChars(DFA96_minS);
    static final char[] DFA96_max = DFA.unpackEncodedStringToUnsignedChars(DFA96_maxS);
    static final short[] DFA96_accept = DFA.unpackEncodedString(DFA96_acceptS);
    static final short[] DFA96_special = DFA.unpackEncodedString(DFA96_specialS);
    static final short[][] DFA96_transition;

    static {
        int numStates = DFA96_transitionS.length;
        DFA96_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA96_transition[i] = DFA.unpackEncodedString(DFA96_transitionS[i]);
        }
    }

    class DFA96 extends DFA {

        public DFA96(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 96;
            this.eot = DFA96_eot;
            this.eof = DFA96_eof;
            this.min = DFA96_min;
            this.max = DFA96_max;
            this.accept = DFA96_accept;
            this.special = DFA96_special;
            this.transition = DFA96_transition;
        }
        public String getDescription() {
            return "711:14: ( type_convertion )?";
        }
    }
    static final String DFA106_eotS =
        "\u00a4\uffff";
    static final String DFA106_eofS =
        "\1\2\31\uffff\1\2\26\uffff\1\116\162\uffff";
    static final String DFA106_minS =
        "\2\6\30\uffff\1\6\24\uffff\3\6\162\uffff";
    static final String DFA106_maxS =
        "\1\u00c4\1\u00c9\30\uffff\1\u00c4\24\uffff\3\u00c9\162\uffff";
    static final String DFA106_acceptS =
        "\2\uffff\1\2\113\uffff\1\1\1\uffff\1\1\24\uffff\1\1\30\uffff\3\1"+
        "\3\uffff\1\1\11\uffff\1\1\3\uffff\2\1\20\uffff";
    static final String DFA106_specialS =
        "\u00a4\uffff}>";
    static final String[] DFA106_transitionS = {
            "\1\2\11\uffff\2\2\44\uffff\1\2\11\uffff\3\2\1\uffff\4\2\2\uffff"+
            "\2\2\1\1\10\2\1\uffff\13\2\1\uffff\2\2\26\uffff\3\2\2\uffff"+
            "\1\2\36\uffff\1\2\27\uffff\1\2\2\uffff\1\2\7\uffff\1\2\2\uffff"+
            "\1\2",
            "\1\2\57\uffff\1\32\11\uffff\1\2\2\uffff\1\2\5\uffff\1\2\4\uffff"+
            "\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff"+
            "\1\2\16\uffff\1\2\22\uffff\1\2\6\uffff\3\2\31\uffff\1\2\6\uffff"+
            "\1\2\1\uffff\1\2\3\uffff\1\2\2\uffff\1\2\2\uffff\1\2\7\uffff"+
            "\1\2\1\uffff\2\2\4\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\57\11\uffff\1\2\1\60\5\uffff\1\2\36\uffff\1\2\11\uffff\10"+
            "\2\1\uffff\10\2\1\61\3\2\1\uffff\13\2\1\uffff\2\2\26\uffff\3"+
            "\2\2\uffff\1\2\36\uffff\1\2\4\uffff\1\2\22\uffff\1\2\2\uffff"+
            "\1\2\7\uffff\1\2\2\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\120\12\uffff\1\116\44\uffff\1\2\11\uffff\1\2\2\uffff\1\2"+
            "\5\uffff\1\2\4\uffff\1\2\1\uffff\1\2\1\116\3\uffff\1\2\5\uffff"+
            "\1\2\1\uffff\1\2\3\uffff\1\2\16\uffff\1\2\22\uffff\1\2\6\uffff"+
            "\3\2\31\uffff\1\2\6\uffff\1\2\1\uffff\1\2\3\uffff\1\2\2\uffff"+
            "\1\2\2\uffff\1\2\7\uffff\1\2\1\uffff\2\2\4\uffff\1\2",
            "\1\2\20\uffff\1\2\36\uffff\1\145\11\uffff\1\2\2\uffff\1\2\4"+
            "\uffff\2\2\4\uffff\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1"+
            "\uffff\1\2\3\uffff\1\2\16\uffff\1\2\22\uffff\1\2\6\uffff\3\2"+
            "\21\uffff\1\2\7\uffff\1\2\6\uffff\1\2\1\uffff\1\2\3\uffff\1"+
            "\2\2\uffff\1\2\2\uffff\1\2\7\uffff\1\2\1\uffff\2\2\4\uffff\1"+
            "\2",
            "\1\177\11\uffff\1\u008e\1\116\44\uffff\1\u008e\11\uffff\1\u0084"+
            "\2\116\1\2\1\u0093\3\116\1\uffff\1\2\4\116\1\u0080\1\116\1\176"+
            "\4\116\1\2\3\116\1\u0093\1\116\1\u0080\1\116\1\176\3\116\1\2"+
            "\2\116\14\uffff\1\2\11\uffff\1\116\2\u008e\2\uffff\1\116\3\uffff"+
            "\1\2\6\uffff\3\2\21\uffff\1\u0093\7\uffff\1\2\6\uffff\1\2\1"+
            "\uffff\1\2\3\uffff\1\2\2\uffff\1\u0093\2\uffff\1\u0093\7\uffff"+
            "\1\u0092\1\uffff\1\2\1\u0093\4\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA106_eot = DFA.unpackEncodedString(DFA106_eotS);
    static final short[] DFA106_eof = DFA.unpackEncodedString(DFA106_eofS);
    static final char[] DFA106_min = DFA.unpackEncodedStringToUnsignedChars(DFA106_minS);
    static final char[] DFA106_max = DFA.unpackEncodedStringToUnsignedChars(DFA106_maxS);
    static final short[] DFA106_accept = DFA.unpackEncodedString(DFA106_acceptS);
    static final short[] DFA106_special = DFA.unpackEncodedString(DFA106_specialS);
    static final short[][] DFA106_transition;

    static {
        int numStates = DFA106_transitionS.length;
        DFA106_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA106_transition[i] = DFA.unpackEncodedString(DFA106_transitionS[i]);
        }
    }

    class DFA106 extends DFA {

        public DFA106(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 106;
            this.eot = DFA106_eot;
            this.eof = DFA106_eof;
            this.min = DFA106_min;
            this.max = DFA106_max;
            this.accept = DFA106_accept;
            this.special = DFA106_special;
            this.transition = DFA106_transition;
        }
        public String getDescription() {
            return "739:29: ( generic )?";
        }
    }
    static final String DFA153_eotS =
        "\110\uffff";
    static final String DFA153_eofS =
        "\110\uffff";
    static final String DFA153_minS =
        "\1\20\1\6\24\uffff\1\6\2\uffff\2\20\55\uffff";
    static final String DFA153_maxS =
        "\2\u00c4\24\uffff\1\u00c4\2\uffff\2\u00c4\55\uffff";
    static final String DFA153_acceptS =
        "\2\uffff\1\1\3\uffff\1\2\37\uffff\1\1\10\uffff\1\1\14\uffff\1\1"+
        "\13\uffff";
    static final String DFA153_specialS =
        "\110\uffff}>";
    static final String[] DFA153_transitionS = {
            "\1\2\1\6\10\uffff\1\6\33\uffff\1\1\14\uffff\1\2\4\uffff\1\6"+
            "\5\uffff\1\6\14\uffff\1\6\43\uffff\1\6\36\uffff\1\6\10\uffff"+
            "\1\6\4\uffff\1\6\11\uffff\1\2\2\uffff\1\2\7\uffff\1\2\2\uffff"+
            "\1\2",
            "\1\6\11\uffff\2\2\10\uffff\1\2\33\uffff\1\26\14\uffff\1\2\4"+
            "\uffff\1\2\1\6\2\uffff\1\6\1\uffff\1\2\14\uffff\1\2\43\uffff"+
            "\1\2\36\uffff\1\2\10\uffff\1\2\4\uffff\1\2\11\uffff\1\32\2\uffff"+
            "\1\32\7\uffff\1\31\2\uffff\1\32",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\2\11\uffff\2\2\10\uffff\1\46\33\uffff\1\2\14\uffff\1\46"+
            "\4\uffff\1\46\1\2\2\uffff\1\2\1\uffff\1\46\14\uffff\1\46\43"+
            "\uffff\1\46\36\uffff\1\46\10\uffff\1\46\4\uffff\1\46\11\uffff"+
            "\1\2\2\uffff\1\2\7\uffff\1\2\2\uffff\1\2",
            "",
            "",
            "\1\57\1\46\10\uffff\1\57\33\uffff\1\57\14\uffff\1\57\4\uffff"+
            "\1\57\5\uffff\1\57\14\uffff\1\57\43\uffff\1\57\36\uffff\1\57"+
            "\10\uffff\1\57\4\uffff\1\57\11\uffff\1\57\2\uffff\1\57\7\uffff"+
            "\1\57\2\uffff\1\57",
            "\1\74\1\57\10\uffff\1\74\33\uffff\1\74\14\uffff\1\74\4\uffff"+
            "\1\74\5\uffff\1\74\14\uffff\1\74\43\uffff\1\74\36\uffff\1\74"+
            "\10\uffff\1\74\4\uffff\1\74\11\uffff\1\74\2\uffff\1\74\7\uffff"+
            "\1\74\2\uffff\1\74",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA153_eot = DFA.unpackEncodedString(DFA153_eotS);
    static final short[] DFA153_eof = DFA.unpackEncodedString(DFA153_eofS);
    static final char[] DFA153_min = DFA.unpackEncodedStringToUnsignedChars(DFA153_minS);
    static final char[] DFA153_max = DFA.unpackEncodedStringToUnsignedChars(DFA153_maxS);
    static final short[] DFA153_accept = DFA.unpackEncodedString(DFA153_acceptS);
    static final short[] DFA153_special = DFA.unpackEncodedString(DFA153_specialS);
    static final short[][] DFA153_transition;

    static {
        int numStates = DFA153_transitionS.length;
        DFA153_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA153_transition[i] = DFA.unpackEncodedString(DFA153_transitionS[i]);
        }
    }

    class DFA153 extends DFA {

        public DFA153(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 153;
            this.eot = DFA153_eot;
            this.eof = DFA153_eof;
            this.min = DFA153_min;
            this.max = DFA153_max;
            this.accept = DFA153_accept;
            this.special = DFA153_special;
            this.transition = DFA153_transition;
        }
        public String getDescription() {
            return "951:49: ( method_params )?";
        }
    }
    static final String DFA178_eotS =
        "\110\uffff";
    static final String DFA178_eofS =
        "\110\uffff";
    static final String DFA178_minS =
        "\1\20\7\uffff\1\6\11\uffff\1\6\2\20\63\uffff";
    static final String DFA178_maxS =
        "\1\u00c4\7\uffff\1\u00c4\11\uffff\3\u00c4\63\uffff";
    static final String DFA178_acceptS =
        "\1\uffff\1\2\10\uffff\1\1\24\uffff\1\1\16\uffff\1\1\14\uffff\1\1"+
        "\14\uffff";
    static final String DFA178_specialS =
        "\110\uffff}>";
    static final String[] DFA178_transitionS = {
            "\1\12\1\1\10\uffff\1\1\33\uffff\1\10\14\uffff\1\12\4\uffff\1"+
            "\1\5\uffff\1\1\14\uffff\1\1\43\uffff\1\1\36\uffff\1\1\10\uffff"+
            "\1\1\4\uffff\1\1\11\uffff\1\12\2\uffff\1\12\7\uffff\1\12\2\uffff"+
            "\1\12",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\1\11\uffff\2\12\10\uffff\1\12\33\uffff\1\22\14\uffff\1\12"+
            "\4\uffff\1\12\1\1\2\uffff\1\1\1\uffff\1\12\14\uffff\1\12\43"+
            "\uffff\1\12\36\uffff\1\12\10\uffff\1\12\4\uffff\1\12\11\uffff"+
            "\1\24\2\uffff\1\24\7\uffff\1\23\2\uffff\1\24",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\37\11\uffff\1\12\1\37\10\uffff\1\37\33\uffff\1\37\14\uffff"+
            "\1\37\4\uffff\2\37\2\uffff\1\37\1\uffff\1\37\14\uffff\1\37\43"+
            "\uffff\1\37\36\uffff\1\37\10\uffff\1\37\4\uffff\1\37\11\uffff"+
            "\1\37\2\uffff\1\37\7\uffff\1\37\2\uffff\1\37",
            "\2\56\10\uffff\1\56\33\uffff\1\56\14\uffff\1\56\4\uffff\1\56"+
            "\5\uffff\1\56\14\uffff\1\56\43\uffff\1\56\36\uffff\1\56\10\uffff"+
            "\1\56\4\uffff\1\56\11\uffff\1\56\2\uffff\1\56\7\uffff\1\56\2"+
            "\uffff\1\56",
            "\2\73\10\uffff\1\73\33\uffff\1\73\14\uffff\1\73\4\uffff\1\73"+
            "\5\uffff\1\73\14\uffff\1\73\43\uffff\1\73\36\uffff\1\73\10\uffff"+
            "\1\73\4\uffff\1\73\11\uffff\1\73\2\uffff\1\73\7\uffff\1\73\2"+
            "\uffff\1\73",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA178_eot = DFA.unpackEncodedString(DFA178_eotS);
    static final short[] DFA178_eof = DFA.unpackEncodedString(DFA178_eofS);
    static final char[] DFA178_min = DFA.unpackEncodedStringToUnsignedChars(DFA178_minS);
    static final char[] DFA178_max = DFA.unpackEncodedStringToUnsignedChars(DFA178_maxS);
    static final short[] DFA178_accept = DFA.unpackEncodedString(DFA178_acceptS);
    static final short[] DFA178_special = DFA.unpackEncodedString(DFA178_specialS);
    static final short[][] DFA178_transition;

    static {
        int numStates = DFA178_transitionS.length;
        DFA178_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA178_transition[i] = DFA.unpackEncodedString(DFA178_transitionS[i]);
        }
    }

    class DFA178 extends DFA {

        public DFA178(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 178;
            this.eot = DFA178_eot;
            this.eof = DFA178_eof;
            this.min = DFA178_min;
            this.max = DFA178_max;
            this.accept = DFA178_accept;
            this.special = DFA178_special;
            this.transition = DFA178_transition;
        }
        public String getDescription() {
            return "()+ loopback of 1002:4: ( method_param )+";
        }
    }
    static final String DFA200_eotS =
        "\u00ba\uffff";
    static final String DFA200_eofS =
        "\u00ba\uffff";
    static final String DFA200_minS =
        "\1\66\3\uffff\1\6\1\uffff\3\6\1\uffff\1\6\22\uffff\1\6\23\uffff"+
        "\1\6\16\uffff\1\6\16\uffff\1\6\152\uffff";
    static final String DFA200_maxS =
        "\1\u00c3\3\uffff\1\u00c9\1\uffff\1\u00a3\2\173\1\uffff\1\173\22"+
        "\uffff\1\u00c9\23\uffff\1\u00c9\16\uffff\1\u00c9\16\uffff\1\u00c9"+
        "\152\uffff";
    static final String DFA200_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\uffff\1\5\3\uffff\1\4\1\uffff\1\6\22\uffff"+
        "\1\4\23\uffff\1\4\16\uffff\1\4\16\uffff\1\4\15\uffff\3\4\1\uffff"+
        "\1\4\22\uffff\3\4\1\uffff\1\4\22\uffff\3\4\1\uffff\1\4\22\uffff"+
        "\3\4\1\uffff\1\4\22\uffff";
    static final String DFA200_specialS =
        "\u00ba\uffff}>";
    static final String[] DFA200_transitionS = {
            "\1\1\21\uffff\1\4\47\uffff\1\5\31\uffff\1\2\50\uffff\1\3\17"+
            "\uffff\1\3",
            "",
            "",
            "",
            "\1\13\20\uffff\1\13\36\uffff\1\6\11\uffff\1\13\2\uffff\1\13"+
            "\4\uffff\1\11\1\13\4\uffff\1\13\1\uffff\1\13\4\uffff\1\13\5"+
            "\uffff\1\13\1\uffff\1\13\3\uffff\1\13\16\uffff\1\12\22\uffff"+
            "\1\13\6\uffff\1\7\2\13\31\uffff\1\13\6\uffff\1\13\1\uffff\1"+
            "\13\3\uffff\1\10\2\uffff\1\13\2\uffff\1\13\7\uffff\1\13\1\uffff"+
            "\1\10\1\13\4\uffff\1\13",
            "",
            "\1\13\12\uffff\1\35\5\uffff\1\13\50\uffff\10\13\1\uffff\14"+
            "\13\1\uffff\13\13\1\uffff\2\13\27\uffff\1\36\47\uffff\1\13",
            "\1\13\12\uffff\1\61\56\uffff\3\13\1\uffff\4\13\2\uffff\13\13"+
            "\1\uffff\13\13\1\uffff\2\13\27\uffff\1\62",
            "\1\13\12\uffff\1\100\56\uffff\3\13\1\uffff\4\13\2\uffff\13"+
            "\13\1\uffff\13\13\1\uffff\2\13\27\uffff\1\101",
            "",
            "\1\13\12\uffff\1\117\56\uffff\3\13\1\uffff\4\13\2\uffff\13"+
            "\13\1\uffff\13\13\1\uffff\2\13\27\uffff\1\120",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\13\20\uffff\1\13\36\uffff\1\136\11\uffff\1\13\2\uffff\1"+
            "\13\4\uffff\1\120\1\13\4\uffff\1\13\1\uffff\1\13\4\uffff\1\13"+
            "\5\uffff\1\13\1\uffff\1\13\3\uffff\1\13\16\uffff\1\142\22\uffff"+
            "\1\13\6\uffff\1\137\2\13\31\uffff\1\13\6\uffff\1\13\1\uffff"+
            "\1\13\3\uffff\1\140\2\uffff\1\13\2\uffff\1\13\7\uffff\1\13\1"+
            "\uffff\1\140\1\13\4\uffff\1\13",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\13\20\uffff\1\13\36\uffff\1\165\11\uffff\1\13\2\uffff\1"+
            "\13\4\uffff\1\120\1\13\4\uffff\1\13\1\uffff\1\13\4\uffff\1\13"+
            "\5\uffff\1\13\1\uffff\1\13\3\uffff\1\13\16\uffff\1\171\22\uffff"+
            "\1\13\6\uffff\1\166\2\13\31\uffff\1\13\6\uffff\1\13\1\uffff"+
            "\1\13\3\uffff\1\167\2\uffff\1\13\2\uffff\1\13\7\uffff\1\13\1"+
            "\uffff\1\167\1\13\4\uffff\1\13",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\13\20\uffff\1\13\36\uffff\1\u008c\11\uffff\1\13\2\uffff"+
            "\1\13\4\uffff\1\120\1\13\4\uffff\1\13\1\uffff\1\13\4\uffff\1"+
            "\13\5\uffff\1\13\1\uffff\1\13\3\uffff\1\13\16\uffff\1\u0090"+
            "\22\uffff\1\13\6\uffff\1\u008d\2\13\31\uffff\1\13\6\uffff\1"+
            "\13\1\uffff\1\13\3\uffff\1\u008e\2\uffff\1\13\2\uffff\1\13\7"+
            "\uffff\1\13\1\uffff\1\u008e\1\13\4\uffff\1\13",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\13\20\uffff\1\13\36\uffff\1\u00a3\11\uffff\1\13\2\uffff"+
            "\1\13\4\uffff\1\120\1\13\4\uffff\1\13\1\uffff\1\13\4\uffff\1"+
            "\13\5\uffff\1\13\1\uffff\1\13\3\uffff\1\13\16\uffff\1\u00a7"+
            "\22\uffff\1\13\6\uffff\1\u00a4\2\13\31\uffff\1\13\6\uffff\1"+
            "\13\1\uffff\1\13\3\uffff\1\u00a5\2\uffff\1\13\2\uffff\1\13\7"+
            "\uffff\1\13\1\uffff\1\u00a5\1\13\4\uffff\1\13",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA200_eot = DFA.unpackEncodedString(DFA200_eotS);
    static final short[] DFA200_eof = DFA.unpackEncodedString(DFA200_eofS);
    static final char[] DFA200_min = DFA.unpackEncodedStringToUnsignedChars(DFA200_minS);
    static final char[] DFA200_max = DFA.unpackEncodedStringToUnsignedChars(DFA200_maxS);
    static final short[] DFA200_accept = DFA.unpackEncodedString(DFA200_acceptS);
    static final short[] DFA200_special = DFA.unpackEncodedString(DFA200_specialS);
    static final short[][] DFA200_transition;

    static {
        int numStates = DFA200_transitionS.length;
        DFA200_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA200_transition[i] = DFA.unpackEncodedString(DFA200_transitionS[i]);
        }
    }

    class DFA200 extends DFA {

        public DFA200(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 200;
            this.eot = DFA200_eot;
            this.eof = DFA200_eof;
            this.min = DFA200_min;
            this.max = DFA200_max;
            this.accept = DFA200_accept;
            this.special = DFA200_special;
            this.transition = DFA200_transition;
        }
        public String getDescription() {
            return "1125:1: value : ( ID | string_value | null_stmt | array | NUMBER | struct_init2 );";
        }
    }
 

    public static final BitSet FOLLOW_code_internal_in_code435 = new BitSet(new long[]{0x0040000004080002L,0x0000000000000000L,0x2000060040004040L,0x0000000000000080L});
    public static final BitSet FOLLOW_operator_wrapper_in_code_internal449 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implementation_wrapper_in_code_internal455 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_operator_in_operator_wrapper466 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_extern_wrapper_in_operator484 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_static_section_wrapper_in_operator490 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_start_wrapper_in_operator495 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interface_declaration_wrapper_in_operator502 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typedef_struct_declaration_in_operator508 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typedef_declaration_wrapper_in_operator514 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typedef_in_operator519 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_extern_in_extern_wrapper537 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_189_in_extern556 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_162_in_extern559 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_L_FBR_in_extern562 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xF7FFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00000000000007FFL});
    public static final BitSet FOLLOW_set_in_extern564 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_R_FBR_in_extern569 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implementation_in_implementation_wrapper581 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_169_in_implementation600 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0240000000000000L,0x0000000000000012L});
    public static final BitSet FOLLOW_name_in_implementation603 = new BitSet(new long[]{0x0040000000010000L,0x0000000008004008L,0x2001008040004040L,0x0000000000000080L});
    public static final BitSet FOLLOW_category_in_implementation606 = new BitSet(new long[]{0x0040000000010000L,0x0000000008004000L,0x2001008040004040L,0x0000000000000080L});
    public static final BitSet FOLLOW_super_class_in_implementation609 = new BitSet(new long[]{0x0040000000000000L,0x0000000008004000L,0x2001008040004040L,0x0000000000000080L});
    public static final BitSet FOLLOW_implementation_body_in_implementation614 = new BitSet(new long[]{0x0040000000000000L,0x0000000008004000L,0x2001008040004040L,0x0000000000000080L});
    public static final BitSet FOLLOW_167_in_implementation619 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_implementation622 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_BR_in_category634 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0240000000000000L,0x0000000000000012L});
    public static final BitSet FOLLOW_name_in_category637 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_R_BR_in_category640 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_directives_in_implementation_body658 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typedef_in_implementation_body664 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_static_section_wrapper_in_implementation_body670 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implementation_method_wrapper_in_implementation_body676 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_type_started_wrapper_in_implementation_body682 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_declaration_wrapper_in_implementation_body688 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typedef_struct_declaration_wrapper_in_implementation_body693 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_synthesize_in_directives704 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_176_in_synthesize717 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_ID_in_synthesize720 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000040L});
    public static final BitSet FOLLOW_L_EQ_in_synthesize723 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_ID_in_synthesize725 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_synthesize729 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_199_in_typedef741 = new BitSet(new long[]{0x0040000004000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_typedef_declaration_wrapper_in_typedef745 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typedef_struct_declaration_wrapper_in_typedef749 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_rename_wrapper_in_typedef753 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_rename_in_type_rename_wrapper767 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_type_rename786 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_ID_in_type_rename788 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_type_rename790 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_static_section_in_static_section_wrapper802 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STATIC_PREFIX_in_static_section822 = new BitSet(new long[]{0x0040000004080000L,0x8000000000000100L,0x0000000040004000L,0x0000000000000004L});
    public static final BitSet FOLLOW_CONST_PREFIX_in_static_section824 = new BitSet(new long[]{0x0040000004000000L,0x8000000000000100L,0x0000000040004000L,0x0000000000000004L});
    public static final BitSet FOLLOW_STRUCT_PREFIX_in_static_section827 = new BitSet(new long[]{0x0040000004000000L,0x8000000000000100L,0x0000000040000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_ENUM_PREFIX_in_static_section830 = new BitSet(new long[]{0x0040000000000000L,0x8000000000000100L,0x0000000040000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_static_section2_in_static_section833 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inline_section_in_static_section2842 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implementation_method_wrapper2_in_static_section2849 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_static_section3_in_static_section2856 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_194_in_inline_section868 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_field_type_in_inline_section871 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0240000000000000L,0x0000000000000012L});
    public static final BitSet FOLLOW_name_in_inline_section873 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000108L});
    public static final BitSet FOLLOW_method_params2_in_inline_section876 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000100L});
    public static final BitSet FOLLOW_block_wrapper_in_inline_section880 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_inline_section884 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_type_in_static_section3895 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0240000000000000L,0x0000000000000012L});
    public static final BitSet FOLLOW_name_in_static_section3897 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000248L});
    public static final BitSet FOLLOW_indexed_in_static_section3899 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000248L});
    public static final BitSet FOLLOW_static_end_in_static_section3903 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implementation_method_wrapper3_in_static_end915 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_end_in_static_end921 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_end_internal_in_field_end932 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_value_set_in_field_end_internal950 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_field_end_internal953 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implementation_method3_in_implementation_method_wrapper3965 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_header_body3_in_implementation_method3983 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000100L,0x0010000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_implementation_method3986 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000100L,0x0010000000000000L});
    public static final BitSet FOLLOW_attribute_in_implementation_method3991 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000100L});
    public static final BitSet FOLLOW_block_wrapper_in_implementation_method3996 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_180_in_attribute1009 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_L_BR_in_attribute1012 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_L_BR_in_attribute1015 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_184_in_attribute1018 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_R_BR_in_attribute1021 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_R_BR_in_attribute1024 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_attribute1027 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_implementation_method21039 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_block_wrapper_in_implementation_method21044 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_type_started_in_field_type_started_wrapper1056 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_type_in_field_type_started1075 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0240000000000000L,0x0000000000000012L});
    public static final BitSet FOLLOW_name_in_field_type_started1077 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000048L});
    public static final BitSet FOLLOW_classic_method_declaration_wrapper_in_field_type_started1080 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_declaration_end_wrapper_in_field_type_started1084 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_declaration_end_in_field_declaration_end_wrapper1095 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classic_method_declaration_in_classic_method_declaration_wrapper1113 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_params2_in_classic_method_declaration1133 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_block_wrapper_in_classic_method_declaration1138 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implementation_method_in_implementation_method_wrapper1151 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implementation_method2_in_implementation_method_wrapper21168 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_header_body_in_implementation_method1185 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000100L});
    public static final BitSet FOLLOW_SEMICOLON_in_implementation_method1187 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_block_wrapper_in_implementation_method1192 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_in_block_wrapper1205 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_FBR_in_block1227 = new BitSet(new long[]{0x0040000004080240L,0x8801000228214309L,0xFA6EA04040005C4CL,0x000000000000067BL});
    public static final BitSet FOLLOW_block_internal_full_in_block1233 = new BitSet(new long[]{0x0040000004080240L,0x8801000228214309L,0xFA6EA04040005C4CL,0x000000000000067BL});
    public static final BitSet FOLLOW_block_in_block1237 = new BitSet(new long[]{0x0040000004080240L,0x8801000228214309L,0xFA6EA04040005C4CL,0x000000000000067BL});
    public static final BitSet FOLLOW_R_FBR_in_block1245 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_FBR_in_block_case1260 = new BitSet(new long[]{0x0040000004080240L,0x8801000228214309L,0xFE6EA04040005C4CL,0x000000000000067BL});
    public static final BitSet FOLLOW_block_internal_full_in_block_case1266 = new BitSet(new long[]{0x0040000004080240L,0x8801000228214309L,0xFE6EA04040005C4CL,0x000000000000067BL});
    public static final BitSet FOLLOW_block_in_block_case1270 = new BitSet(new long[]{0x0040000004080240L,0x8801000228214309L,0xFE6EA04040005C4CL,0x000000000000067BL});
    public static final BitSet FOLLOW_default_stmt_in_block_case1279 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_R_FBR_in_block_case1284 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_internal_in_block_internal_full1296 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_try_stmt_in_block_internal1307 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_throw_stmt_wrapper_in_block_internal1312 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_static_start_wrapper_in_block_internal1317 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_block_internal1319 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_do_stmt_in_block_internal1324 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_const_expression_in_block_internal1329 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_block_internal1331 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_init_wrapper_in_block_internal1336 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_if_stmt_wrapper_in_block_internal1341 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_else_stmt_in_block_internal1346 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_switch_stmt_wrapper_in_block_internal1351 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_return_stmt_in_block_internal1356 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_stmt_wrapper_in_block_internal1361 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_while_stmt_wrapper_in_block_internal1366 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_single_operators_in_block_internal1371 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_struct_variable_in_block_internal1376 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_block_internal1378 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enum_variable_in_block_internal1383 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_block_internal1385 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeof_started_in_block_internal1390 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_block_internal1392 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_known_type_started_in_block_internal1397 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_block_internal1399 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_block_internal1404 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_goto_wrapper_in_block_internal1410 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_189_in_block_internal1415 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_goto_operator_in_goto_wrapper1427 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_191_in_goto_operator1444 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_ID_in_goto_operator1446 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_goto_operator1448 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_init_in_variable_init_wrapper1459 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_full_expr_wrapper_in_variable_init1477 = new BitSet(new long[]{0x0040000000010000L,0x8000000000000000L,0x0240000040000000L,0x0000000000000012L});
    public static final BitSet FOLLOW_full_expr2_in_variable_init1481 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_variable_init1484 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COLON_in_variable_init1489 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_known_types_in_known_type_started1501 = new BitSet(new long[]{0x0040000000000040L,0x0000000000000000L,0x0240000040000000L,0x0000000000000012L});
    public static final BitSet FOLLOW_ASTERISK_in_known_type_started1503 = new BitSet(new long[]{0x0040000000000040L,0x0000000000000000L,0x0240000040000000L,0x0000000000000012L});
    public static final BitSet FOLLOW_full_expr2_in_known_type_started1506 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeof_in_typeof_started1518 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214209L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_full_expr_wrapper_in_typeof_started1520 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRUCT_PREFIX_in_struct_variable1533 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214209L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_full_expr_wrapper_in_struct_variable1535 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ENUM_PREFIX_in_enum_variable1544 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214209L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_full_expr_wrapper_in_enum_variable1546 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CONST_PREFIX_in_const_expression1557 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214209L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_full_expr_wrapper_in_const_expression1559 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_throw_stmt_in_throw_stmt_wrapper1568 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_177_in_throw_stmt1585 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_throw_stmt1588 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_178_in_try_stmt1599 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_block_in_try_stmt1602 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000012000000000L});
    public static final BitSet FOLLOW_catch_stmt_in_try_stmt1605 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000012000000000L});
    public static final BitSet FOLLOW_168_in_try_stmt1609 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_block_in_try_stmt1612 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_165_in_catch_stmt1626 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_L_BR_in_catch_stmt1629 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_ID_in_catch_stmt1632 = new BitSet(new long[]{0x0040000000000040L});
    public static final BitSet FOLLOW_ASTERISK_in_catch_stmt1635 = new BitSet(new long[]{0x0040000000000040L});
    public static final BitSet FOLLOW_ID_in_catch_stmt1638 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_R_BR_in_catch_stmt1641 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_block_in_catch_stmt1644 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_switch_stmt_in_switch_stmt_wrapper1657 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_198_in_switch_stmt1674 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_L_BR_in_switch_stmt1677 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214209L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_switch_expr_in_switch_stmt1680 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_R_BR_in_switch_stmt1682 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_switch_body_wrapper_in_switch_stmt1688 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_FBR_in_switch_body_wrapper1701 = new BitSet(new long[]{0x0040000004080240L,0x8801000228214209L,0xFEEEA04040005C4CL,0x000000000000067BL});
    public static final BitSet FOLLOW_switch_body_in_switch_body_wrapper1703 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_R_FBR_in_switch_body_wrapper1705 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_internal_full_in_switch_body1724 = new BitSet(new long[]{0x0040000004080242L,0x8001000228214209L,0xFEEEA04040005C4CL,0x000000000000067BL});
    public static final BitSet FOLLOW_switch_internal_in_switch_body1729 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0480000000000000L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_switch_expr1742 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_case_stmt_wrapper_in_switch_internal1759 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_default_stmt_wrapper_in_switch_internal1765 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_case_stmt_in_case_stmt_wrapper1774 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_183_in_case_stmt1791 = new BitSet(new long[]{0x0040000000000000L,0x0001000000000000L,0x0008000000001C00L,0x0000000000000008L});
    public static final BitSet FOLLOW_case_expr_wrapper_in_case_stmt1794 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_COLON_in_case_stmt1797 = new BitSet(new long[]{0x0040000004080242L,0x8001000228214309L,0xFA6EA04040005C4CL,0x000000000000067BL});
    public static final BitSet FOLLOW_case_body_wrapper_in_case_stmt1802 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_case_body_in_case_body_wrapper1816 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_break_in_case_body1835 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_internal_full_in_case_body1842 = new BitSet(new long[]{0x0040000004080242L,0x8001000228214209L,0xFA6EA04040005C4CL,0x000000000000067BL});
    public static final BitSet FOLLOW_case_expr_in_case_expr_wrapper1858 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_const_expr_in_case_expr1880 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_case_expr1887 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_case_in_block_break1898 = new BitSet(new long[]{0x0000000000000202L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_single_operators_in_block_break1900 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_default_stmt_in_default_stmt_wrapper1912 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_186_in_default_stmt1929 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_COLON_in_default_stmt1932 = new BitSet(new long[]{0x0040000004080242L,0x8001000228214309L,0xFA6EA04040005C4CL,0x000000000000067BL});
    public static final BitSet FOLLOW_default_body_wrapper_in_default_stmt1937 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_default_body_in_default_body_wrapper1950 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_break_in_default_body1970 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_internal_full_in_default_body1976 = new BitSet(new long[]{0x0040000004080242L,0x8001000228214209L,0xFA6EA04040005C4CL,0x000000000000067BL});
    public static final BitSet FOLLOW_SINGLE_OP_in_single_operators1991 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_break_wrapper_in_single_operators1998 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_break_stmt_in_break_wrapper2010 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BREAK_WORD_in_break_stmt2028 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_break_stmt2031 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_187_in_do_stmt2041 = new BitSet(new long[]{0x0040000004080240L,0x8001000228214309L,0xFA6EA04040005C4CL,0x000000000000067BL});
    public static final BitSet FOLLOW_if_stmt_block_in_do_stmt2044 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_202_in_do_stmt2047 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_L_BR_in_do_stmt2050 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214209L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_expression_in_do_stmt2053 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_R_BR_in_do_stmt2055 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_while_stmt_in_while_stmt_wrapper2064 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_202_in_while_stmt2083 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_L_BR_in_while_stmt2086 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214209L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_while_expr_in_while_stmt2089 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_R_BR_in_while_stmt2091 = new BitSet(new long[]{0x0040000004080240L,0x8001000228214309L,0xFA6EA04040005C4CL,0x000000000000067BL});
    public static final BitSet FOLLOW_if_stmt_block_wrapper_in_while_stmt2094 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_while_expr2107 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_stmt_in_for_stmt_wrapper2126 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_190_in_for_stmt2143 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_L_BR_in_for_stmt2146 = new BitSet(new long[]{0x0040000000000040L,0x8001000228214209L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_for_stmt_expr_wrapper_in_for_stmt2149 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_R_BR_in_for_stmt2151 = new BitSet(new long[]{0x0040000004080240L,0x8001000228214309L,0xFA6EA04040005C4CL,0x000000000000067BL});
    public static final BitSet FOLLOW_if_stmt_block_in_for_stmt2154 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_stmt_expr_in_for_stmt_expr_wrapper2166 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_full_expr_wrapper_in_for_stmt_expr2185 = new BitSet(new long[]{0x0040000000000000L,0x8000000000000000L,0x0240000040000000L,0x0000000000000012L});
    public static final BitSet FOLLOW_for_stmt_int1_in_for_stmt_expr2188 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_full_expr2_in_for_stmt_expr2193 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_for_stmt_int1_in_for_stmt_expr2196 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_stmt_int2_in_for_stmt_expr2200 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_stmt_int2_in_for_stmt_expr2206 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_stmt_int2_in_for_stmt_expr2212 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_193_in_for_stmt_int12227 = new BitSet(new long[]{0x0040000000000000L,0x0001000000000208L,0x0248A04000001C00L,0x000000000000021AL});
    public static final BitSet FOLLOW_object_wrapped2_in_for_stmt_int12229 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_for_stmt_int22249 = new BitSet(new long[]{0x0040000000000040L,0x8001000228214209L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_classical_expr_wrp_in_for_stmt_int22251 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_for_stmt_int22254 = new BitSet(new long[]{0x0040000000000042L,0x0001000228214209L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_classical_expr_wrp_in_for_stmt_int22256 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_197_in_return_stmt2273 = new BitSet(new long[]{0x0040000000000040L,0x8001000228214209L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_classical_expr_wrp_in_return_stmt2275 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_return_stmt2278 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_if_stmt_in_if_stmt_wrapper2299 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_192_in_if_stmt2315 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_L_BR_in_if_stmt2318 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214209L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_if_expr_in_if_stmt2321 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_R_BR_in_if_stmt2323 = new BitSet(new long[]{0x0040000004080240L,0x8001000228214309L,0xFA6EA04040005C4CL,0x000000000000067BL});
    public static final BitSet FOLLOW_if_stmt_block_wrapper_in_if_stmt2326 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_if_expr2339 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_188_in_else_stmt2358 = new BitSet(new long[]{0x0040000004080240L,0x8001000228214309L,0xFA6EA04040005C4CL,0x000000000000067BL});
    public static final BitSet FOLLOW_if_stmt_block_in_else_stmt2361 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_if_stmt_block_in_if_stmt_block_wrapper2370 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_wrapper_in_if_stmt_block2387 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_internal_in_if_stmt_block2393 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_static_start_in_static_start_wrapper2405 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STATIC_PREFIX_in_static_start2423 = new BitSet(new long[]{0x0040000000080000L,0x0000000000000000L,0x0240000040000000L,0x0000000000000012L});
    public static final BitSet FOLLOW_CONST_PREFIX_in_static_start2425 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0240000040000000L,0x0000000000000012L});
    public static final BitSet FOLLOW_static_type_wrapper_in_static_start2428 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0240000040000000L,0x0000000000000012L});
    public static final BitSet FOLLOW_full_expr2_in_static_start2431 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_static_type_in_static_type_wrapper2443 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_name_in_static_type2462 = new BitSet(new long[]{0x0000000000000042L});
    public static final BitSet FOLLOW_ASTERISK_in_static_type2464 = new BitSet(new long[]{0x0000000000000042L});
    public static final BitSet FOLLOW_id_part_end_internal_in_id_part_end2476 = new BitSet(new long[]{0x0000000000800002L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_DOT_in_id_part_end_internal2491 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0240000000000000L,0x0000000000000012L});
    public static final BitSet FOLLOW_163_in_id_part_end_internal2495 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0240000000000000L,0x0000000000000012L});
    public static final BitSet FOLLOW_id_part_in_id_part_end_internal2498 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_internal_in_id_part2536 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000208L});
    public static final BitSet FOLLOW_function_brackets_wrapper_in_id_part2538 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000200L});
    public static final BitSet FOLLOW_index_wrapper_in_id_part2541 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000200L});
    public static final BitSet FOLLOW_id_part_in_object_name2554 = new BitSet(new long[]{0x0000000000800002L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_id_part_end_in_object_name2556 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_KBR_in_method_call_wrapper2570 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000208L,0x0240000000000400L,0x0000000000000012L});
    public static final BitSet FOLLOW_method_call2_in_method_call_wrapper2572 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_R_KBR_in_method_call_wrapper2574 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_call2_in_method_call_wrapper22597 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_wrapper_in_method_call22616 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0240000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_method_name_in_method_call22618 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_method_call_message_list_wrapper_in_method_call22622 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_wrapper_internal_in_object_wrapper2633 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_convertion_in_object_wrapper_internal2652 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000200L,0x0240000000000000L,0x0000000000000012L});
    public static final BitSet FOLLOW_object_name_in_object_wrapper_internal2655 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_call_wrapper_in_object_wrapper_internal2659 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_name_in_object_wrapper_internal2665 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_call_wrapper_in_object_wrapper_internal2670 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_object_wrapper_internal2675 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_method_message32687 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_convertion_internal_in_type_convertion2706 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_BR_in_type_convertion_internal2725 = new BitSet(new long[]{0x0040000000080000L,0x0000000000000000L,0x0000000040000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_CONST_PREFIX_in_type_convertion_internal2727 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0000000040000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_201_in_type_convertion_internal2730 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_type_internal_in_type_convertion_internal2733 = new BitSet(new long[]{0x0000000000000040L,0x0400000000001000L});
    public static final BitSet FOLLOW_generic_in_type_convertion_internal2735 = new BitSet(new long[]{0x0000000000000040L,0x0400000000000000L});
    public static final BitSet FOLLOW_ASTERISK_in_type_convertion_internal2738 = new BitSet(new long[]{0x0000000000000040L,0x0400000000000000L});
    public static final BitSet FOLLOW_R_BR_in_type_convertion_internal2741 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_method_name2759 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_property_in_method_name2772 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_call_message_list_in_method_call_message_list_wrapper2789 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_call_message_first_wrapper_in_method_call_message_list2806 = new BitSet(new long[]{0x0040000000010002L});
    public static final BitSet FOLLOW_method_call_message_wrapper_in_method_call_message_list2808 = new BitSet(new long[]{0x0040000000010002L});
    public static final BitSet FOLLOW_method_call_message_first_in_method_call_message_first_wrapper2819 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COLON_in_method_call_message_first2836 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214209L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_message_in_method_call_message_first2839 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_call_message_in_method_call_message_wrapper2849 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prefix_in_method_call_message2868 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214209L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_incomplete_prefix_in_method_call_message2872 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214209L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_message_in_method_call_message2876 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_msg_expr_in_message2885 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_COMMA_in_message2888 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214209L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_msg_expr_in_message2890 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_msg_expr2924 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_expression2940 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_struct_init_in_expression2945 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_full_expr_in_full_expr_wrapper2956 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_full_expr2973 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_COMMA_in_full_expr2976 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214209L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_classical_expr_wrp_in_full_expr2978 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_classical_expr_wrp2_in_full_expr22989 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_COMMA_in_full_expr22992 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0240000040000000L,0x0000000000000012L});
    public static final BitSet FOLLOW_classical_expr_wrp2_in_full_expr22994 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_expr_assign_in_expr_assign_wrapper3005 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_assign_wrapper_in_expr_assign3024 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214309L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_classical_expr_wrp_in_expr_assign3027 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_array_init_wrapper_in_expr_assign3031 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_func_pointer2_in_expr_assign3036 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000200L});
    public static final BitSet FOLLOW_method_call_wrapper_in_expr_assign3038 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_array_init_in_array_init_wrapper3050 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_FBR_in_array_init3069 = new BitSet(new long[]{0x0040000000000040L,0x0801000228214309L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_classical_expr_wrp3_in_array_init3072 = new BitSet(new long[]{0x0000000000020000L,0x0800000000000000L});
    public static final BitSet FOLLOW_COMMA_in_array_init3075 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214309L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_classical_expr_wrp3_in_array_init3077 = new BitSet(new long[]{0x0000000000020000L,0x0800000000000000L});
    public static final BitSet FOLLOW_R_FBR_in_array_init3083 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_array_init_wrapper_in_classical_expr_wrp33095 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_classical_expr_wrp33101 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_expr_in_classical_expr_wrp3114 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_expr_wrapper_in_classical_expr3131 = new BitSet(new long[]{0x0000000000000002L,0x0000000954888864L});
    public static final BitSet FOLLOW_expr_question_wrapper_in_classical_expr3134 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_assign_wrapper_in_classical_expr3138 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_expr2_in_classical_expr_wrp23150 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_name_in_classical_expr23168 = new BitSet(new long[]{0x0000000000000002L,0x0000000914888864L});
    public static final BitSet FOLLOW_func_pointer1_in_classical_expr23172 = new BitSet(new long[]{0x0000000000000002L,0x0000000914888864L});
    public static final BitSet FOLLOW_expr_assign_wrapper_in_classical_expr23175 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_question_in_expr_question_wrapper3185 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_QUESTION_in_expr_question3202 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214209L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_classical_expr_wrp_in_expr_question3204 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_COLON_in_expr_question3206 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214209L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_classical_expr_wrp_in_expr_question3208 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_assign_in_assign_wrapper3217 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_expr_in_simple_expr_wrapper3290 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_or_or_in_simple_expr3308 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_and_and_wrapper_in_expr_or_or3325 = new BitSet(new long[]{0x0000000000000002L,0x0000000001000000L});
    public static final BitSet FOLLOW_L_OR_OR_in_expr_or_or3328 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214209L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_simple_expr_wrapper_in_expr_or_or3330 = new BitSet(new long[]{0x0000000000000002L,0x0000000001000000L});
    public static final BitSet FOLLOW_expr_and_and_in_expr_and_and_wrapper3341 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_or_wrapper_in_expr_and_and3358 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000002L});
    public static final BitSet FOLLOW_L_AND_AND_in_expr_and_and3361 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214209L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_simple_expr_wrapper_in_expr_and_and3363 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000002L});
    public static final BitSet FOLLOW_expr_or_in_expr_or_wrapper3374 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_xor_wrapper_in_expr_or3392 = new BitSet(new long[]{0x0000000000000002L,0x0000000000400000L});
    public static final BitSet FOLLOW_L_OR_in_expr_or3395 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214209L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_simple_expr_wrapper_in_expr_or3397 = new BitSet(new long[]{0x0000000000000002L,0x0000000000400000L});
    public static final BitSet FOLLOW_expr_xor_in_expr_xor_wrapper3408 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_and_wrapper_in_expr_xor3425 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000000L});
    public static final BitSet FOLLOW_L_XOR_in_expr_xor3428 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214209L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_simple_expr_wrapper_in_expr_xor3430 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000000L});
    public static final BitSet FOLLOW_expr_and_in_expr_and_wrapper3442 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_eq_wrapper_in_expr_and3460 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000001L});
    public static final BitSet FOLLOW_L_AND_in_expr_and3463 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214209L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_simple_expr_wrapper_in_expr_and3465 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000001L});
    public static final BitSet FOLLOW_expr_eq_in_expr_eq_wrapper3477 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_cond_wrapper_in_expr_eq3495 = new BitSet(new long[]{0x0000000000000002L,0x0000000000100080L});
    public static final BitSet FOLLOW_set_in_expr_eq3498 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214209L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_simple_expr_wrapper_in_expr_eq3506 = new BitSet(new long[]{0x0000000000000002L,0x0000000000100080L});
    public static final BitSet FOLLOW_expr_cond_in_expr_cond_wrapper3517 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_mov_wrapper_in_expr_cond3534 = new BitSet(new long[]{0x0000000000000002L,0x0000000000063000L});
    public static final BitSet FOLLOW_set_in_expr_cond3537 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214209L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_simple_expr_wrapper_in_expr_cond3553 = new BitSet(new long[]{0x0000000000000002L,0x0000000000063000L});
    public static final BitSet FOLLOW_expr_mov_in_expr_mov_wrapper3564 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_add_wrapper_in_expr_mov3582 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000400L});
    public static final BitSet FOLLOW_set_in_expr_mov3585 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214209L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_simple_expr_wrapper_in_expr_mov3593 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000400L});
    public static final BitSet FOLLOW_expr_add_in_expr_add_wrapper3605 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_mult_wrapper_in_expr_add3622 = new BitSet(new long[]{0x0000000000000002L,0x0000000008004000L});
    public static final BitSet FOLLOW_set_in_expr_add3625 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214209L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_simple_expr_wrapper_in_expr_add3633 = new BitSet(new long[]{0x0000000000000002L,0x0000000008004000L});
    public static final BitSet FOLLOW_expr_mult_in_expr_mult_wrapper3644 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_type_wrapper_in_expr_mult3661 = new BitSet(new long[]{0x0000000000000042L,0x0000000002000010L});
    public static final BitSet FOLLOW_set_in_expr_mult3664 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214209L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_simple_expr_wrapper_in_expr_mult3676 = new BitSet(new long[]{0x0000000000000042L,0x0000000002000010L});
    public static final BitSet FOLLOW_expr_type_in_expr_type_wrapper3688 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_convertion_in_expr_type3705 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214209L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_expr_unname_in_expr_type3708 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ASTERISK_in_expr_unname3719 = new BitSet(new long[]{0x0040000000000000L,0x0001000228214209L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_type_convertion_in_expr_unname3721 = new BitSet(new long[]{0x0040000000000000L,0x0001000228214209L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_expr_addr_in_expr_unname3726 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_AND_in_expr_addr3736 = new BitSet(new long[]{0x0040000000000000L,0x0001000228214208L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_expr_sign_in_expr_addr3739 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_not_wrapper_in_expr_sign3758 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_not_in_expr_not_wrapper3768 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_NOT_in_expr_not3787 = new BitSet(new long[]{0x0040000000000000L,0x0001000220010208L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_expr_not2_in_expr_not3790 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_TILDA_in_expr_not23800 = new BitSet(new long[]{0x0040000000000000L,0x0001000020010208L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_expr_size_of_in_expr_not23803 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SIZEOF_in_expr_size_of3813 = new BitSet(new long[]{0x0040000000000000L,0x0001000020010208L,0x0248A04000001C00L,0x000000000000021AL});
    public static final BitSet FOLLOW_expr_xcrement_in_expr_size_of3816 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_wrapped1_in_expr_xcrement3835 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_wrapped2_in_object_wrapped13845 = new BitSet(new long[]{0x0000000000000002L,0x0000000020010000L});
    public static final BitSet FOLLOW_201_in_object_wrapped23866 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0240000000000000L,0x0000000000000012L});
    public static final BitSet FOLLOW_object_name_in_object_wrapped23869 = new BitSet(new long[]{0x0000000000000002L,0x0000000000001000L});
    public static final BitSet FOLLOW_generic_in_object_wrapped23871 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_call_wrapper_in_object_wrapped23877 = new BitSet(new long[]{0x0000000000800002L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_id_part_end_in_object_wrapped23879 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_BR_in_object_wrapped23885 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214209L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_classical_expr_wrp_in_object_wrapped23887 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_R_BR_in_object_wrapped23889 = new BitSet(new long[]{0x0000000000800002L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_id_part_end_in_object_wrapped23891 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_const_expr_wrapper_in_object_wrapped23897 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_a_started_in_object_wrapped23902 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_function_brackets_in_function_brackets_wrapper3914 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_BR_in_function_brackets3933 = new BitSet(new long[]{0x0040000000000040L,0x0401000228214209L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_classical_expr_wrp_in_function_brackets3936 = new BitSet(new long[]{0x0000000000020000L,0x0400000000000000L});
    public static final BitSet FOLLOW_COMMA_in_function_brackets3939 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214209L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_classical_expr_wrp_in_function_brackets3941 = new BitSet(new long[]{0x0000000000020000L,0x0400000000000000L});
    public static final BitSet FOLLOW_R_BR_in_function_brackets3947 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_index_in_index_wrapper3957 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_KBR_in_index3974 = new BitSet(new long[]{0x0040000000000040L,0x1001000228214209L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_index_number_wrapper_in_index3976 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_R_KBR_in_index3979 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_index_number_wrapper3988 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_BR_in_struct_init4005 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_STRUCT_PREFIX_in_struct_init4008 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_ID_in_struct_init4011 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_R_BR_in_struct_init4014 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_L_FBR_in_struct_init4017 = new BitSet(new long[]{0x0040000000800040L,0x0001000228214209L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_struct_init_line_in_struct_init4023 = new BitSet(new long[]{0x0000000000020000L,0x0800000000000000L});
    public static final BitSet FOLLOW_COMMA_in_struct_init4026 = new BitSet(new long[]{0x0040000000800040L,0x0001000228214209L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_struct_init_line_in_struct_init4029 = new BitSet(new long[]{0x0000000000020000L,0x0800000000000000L});
    public static final BitSet FOLLOW_R_FBR_in_struct_init4035 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_FBR_in_struct_init24049 = new BitSet(new long[]{0x0040000000800040L,0x0001000228214209L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_struct_init_line_in_struct_init24055 = new BitSet(new long[]{0x0000000000020000L,0x0800000000000000L});
    public static final BitSet FOLLOW_COMMA_in_struct_init24058 = new BitSet(new long[]{0x0040000000800040L,0x0001000228214209L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_struct_init_line_in_struct_init24061 = new BitSet(new long[]{0x0000000000020000L,0x0800000000000000L});
    public static final BitSet FOLLOW_R_FBR_in_struct_init24067 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_struct_init_var_in_struct_init_line4080 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_struct_init_expression_in_struct_init_line4085 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_struct_init_expression4098 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_struct_init_method4109 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_struct_init_var4121 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0240000000000000L,0x0000000000000012L});
    public static final BitSet FOLLOW_id_part_in_struct_init_var4123 = new BitSet(new long[]{0x0000000000800000L,0x0000000000000040L});
    public static final BitSet FOLLOW_L_EQ_in_struct_init_var4128 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214309L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_in_q_brackets_in_struct_init_var4132 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_struct_init_var4136 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_a_selector_wrapper_in_a_started4148 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_a_encode_wrapper_in_a_started4153 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_a_protocol_wrapper_in_a_started4158 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_181_in_typeof4168 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_L_BR_in_typeof4171 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_ID_in_typeof4174 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_R_BR_in_typeof4177 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_a_selector_in_a_selector_wrapper4188 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_175_in_a_selector4205 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_L_BR_in_a_selector4207 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_a_selector_value_wrapper_in_a_selector4209 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_R_BR_in_a_selector4211 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_a_protocol_in_a_protocol_wrapper4221 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_173_in_a_protocol4239 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_L_BR_in_a_protocol4241 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_a_selector_value_wrapper_in_a_protocol4243 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_R_BR_in_a_protocol4245 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_a_encode_in_a_encode_wrapper4255 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_a_selector_value_in_a_selector_value_wrapper4272 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_a_selector_value4291 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_COLON_in_a_selector_value4295 = new BitSet(new long[]{0x0040000000000002L});
    public static final BitSet FOLLOW_ID_in_a_selector_value4299 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_COLON_in_a_selector_value4302 = new BitSet(new long[]{0x0040000000000002L});
    public static final BitSet FOLLOW_166_in_a_encode4313 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_L_BR_in_a_encode4315 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFBFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00000000000007FFL});
    public static final BitSet FOLLOW_R_BR_in_a_encode4323 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_const_expr_in_const_expr_wrapper4332 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUMBER_in_const_expr4351 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_const_expr4355 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_LITERAL2_in_const_expr4359 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_LITERAL3_in_const_expr4363 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_null_stmt_in_const_expr4367 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_LITERAL3_in_string_literal34385 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_BR_in_method_brackets4395 = new BitSet(new long[]{0x0040000000000040L,0x0401000228214209L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_expression_in_method_brackets4399 = new BitSet(new long[]{0x0000000000020000L,0x0400000000000000L});
    public static final BitSet FOLLOW_COMMA_in_method_brackets4403 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214209L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_classical_expr_wrp_in_method_brackets4406 = new BitSet(new long[]{0x0000000000020000L,0x0400000000000000L});
    public static final BitSet FOLLOW_R_BR_in_method_brackets4412 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_internal_in_func_pointer14422 = new BitSet(new long[]{0x0000000000000040L,0x0000000000000008L});
    public static final BitSet FOLLOW_ASTERISK_in_func_pointer14425 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_L_BR_in_func_pointer14428 = new BitSet(new long[]{0x0040000000000040L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_ASTERISK_in_func_pointer14430 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_type_internal_in_func_pointer14433 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_R_BR_in_func_pointer14436 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000008L});
    public static final BitSet FOLLOW_func_pointer_params_in_func_pointer14439 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_BR_in_func_pointer24452 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_type_internal_in_func_pointer24455 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_L_BR_in_func_pointer24457 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_ASTERISK_in_func_pointer24460 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_R_BR_in_func_pointer24463 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_func_pointer_params_in_func_pointer24466 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_R_BR_in_func_pointer24469 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_BR_in_func_pointer_params4482 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_ID_in_func_pointer_params4485 = new BitSet(new long[]{0x0000000000020040L,0x0400000000000000L});
    public static final BitSet FOLLOW_ASTERISK_in_func_pointer_params4488 = new BitSet(new long[]{0x0000000000020040L,0x0400000000000000L});
    public static final BitSet FOLLOW_COMMA_in_func_pointer_params4492 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_ID_in_func_pointer_params4495 = new BitSet(new long[]{0x0000000000020040L,0x0400000000000000L});
    public static final BitSet FOLLOW_ASTERISK_in_func_pointer_params4498 = new BitSet(new long[]{0x0000000000020040L,0x0400000000000000L});
    public static final BitSet FOLLOW_R_BR_in_func_pointer_params4503 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_method_start4514 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000008L});
    public static final BitSet FOLLOW_method_brackets_in_method_start4516 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_FBR_in_in_q_brackets4527 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214309L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_q_brackets_source_in_in_q_brackets4530 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_R_FBR_in_in_q_brackets4532 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_q_source_in_q_brackets_source4544 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_q_br_source_in_q_brackets_source4549 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_in_q_brackets_in_q_br_source4562 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_COMMA_in_q_br_source4566 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_in_q_brackets_in_q_br_source4569 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_COMMA_in_q_br_source4573 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_q_source4585 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_COMMA_in_q_source4589 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214209L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_expression_in_q_source4592 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_ID_in_simple_method_call4609 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000008L});
    public static final BitSet FOLLOW_method_brackets_in_simple_method_call4611 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_KBR_in_index_brackets4627 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214209L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_classical_expr_wrp_in_index_brackets4630 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_R_KBR_in_index_brackets4632 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interface_declaration_in_interface_declaration_wrapper4646 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_170_in_interface_declaration4664 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0240000000000000L,0x0000000000000012L});
    public static final BitSet FOLLOW_name_in_interface_declaration4667 = new BitSet(new long[]{0x0040000004010000L,0x0000000008004108L,0x0000100040000000L});
    public static final BitSet FOLLOW_interface_category_in_interface_declaration4670 = new BitSet(new long[]{0x0040000004010000L,0x0000000008004100L,0x0000100040000000L});
    public static final BitSet FOLLOW_super_class_in_interface_declaration4674 = new BitSet(new long[]{0x0040000004000000L,0x0000000008004100L,0x0000100040000000L});
    public static final BitSet FOLLOW_annotated_block_in_interface_declaration4681 = new BitSet(new long[]{0x0040000004000000L,0x0000000008004100L,0x0000108040000000L});
    public static final BitSet FOLLOW_interface_methods_in_interface_declaration4685 = new BitSet(new long[]{0x0040000004000000L,0x0000000008004100L,0x0000108040000000L});
    public static final BitSet FOLLOW_interface_fields_in_interface_declaration4689 = new BitSet(new long[]{0x0040000004000000L,0x0000000008004100L,0x0000108040000000L});
    public static final BitSet FOLLOW_167_in_interface_declaration4698 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_FBR_in_annotated_block4709 = new BitSet(new long[]{0x0040000000000000L,0x0800000000000000L,0x0000480040000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_annotated_block_internal_in_annotated_block4714 = new BitSet(new long[]{0x0040000000000000L,0x0800000000000000L,0x0000480040000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_R_FBR_in_annotated_block4719 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_annotation_in_annotated_block_internal4732 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_public_block_internal_in_annotated_block_internal4739 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_field_declaration_in_public_block_internal4774 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_union_declaration_in_public_block_internal4779 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_type_in_simple_field_declaration4791 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0240000000000000L,0x0000000000000012L});
    public static final BitSet FOLLOW_name_in_simple_field_declaration4793 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_simple_field_declaration4796 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_200_in_union_declaration4809 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_L_FBR_in_union_declaration4812 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_simple_field_declaration_in_union_declaration4818 = new BitSet(new long[]{0x0040000000000000L,0x0800000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_R_FBR_in_union_declaration4823 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_ID_in_union_declaration4826 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_union_declaration4829 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COLON_in_super_class4843 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_ID_in_super_class4846 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_BR_in_interface_category4866 = new BitSet(new long[]{0x0040000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_ID_in_interface_category4869 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_R_BR_in_interface_category4873 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interface_field_wrapper_in_interface_fields4902 = new BitSet(new long[]{0x0040000000000002L,0x0000000000000000L,0x0000100040000000L});
    public static final BitSet FOLLOW_interface_field_in_interface_field_wrapper4913 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_property_prefix_in_interface_field4932 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_interface_field_declaration_in_interface_field4935 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_type_in_interface_field_declaration4946 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0240000000000000L,0x0000000000000012L});
    public static final BitSet FOLLOW_name_in_interface_field_declaration4948 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_interface_field_declaration4950 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_172_in_property_prefix4961 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_L_BR_in_property_prefix4963 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0240000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_property_in_property_prefix4965 = new BitSet(new long[]{0x0000000000020000L,0x0400000000000000L});
    public static final BitSet FOLLOW_COMMA_in_property_prefix4968 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0240000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_property_in_property_prefix4970 = new BitSet(new long[]{0x0000000000020000L,0x0400000000000000L});
    public static final BitSet FOLLOW_R_BR_in_property_prefix4974 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enum_declaration_in_interface_methods5007 = new BitSet(new long[]{0x0000000004000002L,0x0000000008004000L});
    public static final BitSet FOLLOW_interface_method_in_interface_methods5011 = new BitSet(new long[]{0x0000000004000002L,0x0000000008004000L});
    public static final BitSet FOLLOW_method_header_in_interface_method5025 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_header_body_in_method_header5044 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_method_header5046 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_modifier_wrapper_in_method_header_body5056 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000008L,0x0240000000000000L,0x0000000000000012L});
    public static final BitSet FOLLOW_method_type_in_method_header_body5059 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0240000000000000L,0x0000000000000012L});
    public static final BitSet FOLLOW_name_in_method_header_body5063 = new BitSet(new long[]{0x0040000000030002L,0x0000000000000008L,0x0240000000000000L,0x0000000000000012L});
    public static final BitSet FOLLOW_method_params_in_method_header_body5066 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_va_args_wrapper_in_method_header_body5069 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_va_args_in_va_args_wrapper5079 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_va_args5096 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_164_in_va_args5099 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_va_args5102 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_type_in_method_header_body25113 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0240000000000000L,0x0000000000000012L});
    public static final BitSet FOLLOW_name_in_method_header_body25115 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000008L});
    public static final BitSet FOLLOW_method_params2_in_method_header_body25118 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_params2_in_method_header_body35128 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_modifier_in_method_modifier_wrapper5137 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_BR_in_method_type5169 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0000000040004000L});
    public static final BitSet FOLLOW_STRUCT_PREFIX_in_method_type5172 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_type_internal_in_method_type5175 = new BitSet(new long[]{0x0000000000000040L,0x0400000000001000L});
    public static final BitSet FOLLOW_generic_in_method_type5178 = new BitSet(new long[]{0x0000000000000040L,0x0400000000000000L});
    public static final BitSet FOLLOW_ASTERISK_in_method_type5181 = new BitSet(new long[]{0x0000000000000040L,0x0400000000000000L});
    public static final BitSet FOLLOW_R_BR_in_method_type5184 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_BR_in_method_type5198 = new BitSet(new long[]{0x0040000000080040L,0x0400000000001000L,0x0000000040000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_CONST_PREFIX_in_method_type5201 = new BitSet(new long[]{0x0040000000000040L,0x0400000000001000L,0x0000000040000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_known_types_in_method_type5204 = new BitSet(new long[]{0x0040000000000040L,0x0400000000001000L});
    public static final BitSet FOLLOW_ID_in_method_type5207 = new BitSet(new long[]{0x0040000000000040L,0x0400000000001000L});
    public static final BitSet FOLLOW_generic_in_method_type5210 = new BitSet(new long[]{0x0000000000000040L,0x0400000000000000L});
    public static final BitSet FOLLOW_ASTERISK_in_method_type5213 = new BitSet(new long[]{0x0000000000000040L,0x0400000000000000L});
    public static final BitSet FOLLOW_R_BR_in_method_type5216 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_internal1_in_type_internal5241 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000200L});
    public static final BitSet FOLLOW_L_KBR_in_type_internal5244 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_R_KBR_in_type_internal5247 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_LESS_in_generic5281 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_generic_internal_in_generic5283 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_L_MORE_in_generic5285 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_generic_internal5304 = new BitSet(new long[]{0x0000000000020042L});
    public static final BitSet FOLLOW_ASTERISK_in_generic_internal5306 = new BitSet(new long[]{0x0000000000020042L});
    public static final BitSet FOLLOW_COMMA_in_generic_internal5310 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_ID_in_generic_internal5313 = new BitSet(new long[]{0x0000000000020042L});
    public static final BitSet FOLLOW_ASTERISK_in_generic_internal5316 = new BitSet(new long[]{0x0000000000020042L});
    public static final BitSet FOLLOW_L_BR_in_method_params25328 = new BitSet(new long[]{0x0040000004080000L,0x0000000000000000L,0x0000000040004000L,0x0000000000000200L});
    public static final BitSet FOLLOW_method_param_wrapper2_in_method_params25331 = new BitSet(new long[]{0x0000000000020000L,0x0400000000000000L});
    public static final BitSet FOLLOW_COMMA_in_method_params25335 = new BitSet(new long[]{0x0040000004080000L,0x0000000000000000L,0x0000000040004000L,0x0000000000000200L});
    public static final BitSet FOLLOW_method_param_wrapper2_in_method_params25338 = new BitSet(new long[]{0x0000000000020000L,0x0400000000000000L});
    public static final BitSet FOLLOW_R_BR_in_method_params25342 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_param2_in_method_param_wrapper25353 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CONST_PREFIX_in_method_param25371 = new BitSet(new long[]{0x0040000004000000L,0x0000000000000000L,0x0000000040004000L,0x0000000000000200L});
    public static final BitSet FOLLOW_ENUM_PREFIX_in_method_param25374 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0000000040004000L,0x0000000000000200L});
    public static final BitSet FOLLOW_STRUCT_PREFIX_in_method_param25377 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0000000040000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_201_in_method_param25380 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_field_type_in_method_param25383 = new BitSet(new long[]{0x0040000000000002L,0x0000000000000200L,0x0240000000000000L,0x0000000000000012L});
    public static final BitSet FOLLOW_name_in_method_param25385 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000200L});
    public static final BitSet FOLLOW_indexed_in_method_param25388 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_KBR_in_indexed5398 = new BitSet(new long[]{0x0000000000000000L,0x1001000000000000L});
    public static final BitSet FOLLOW_NUMBER_in_indexed5400 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_R_KBR_in_indexed5403 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_param_in_method_params5413 = new BitSet(new long[]{0x0040000000010002L,0x0000000000000008L,0x0240000000000000L,0x0000000000000012L});
    public static final BitSet FOLLOW_prefix_in_method_param5435 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000008L,0x0240000000000000L,0x0000000000000012L});
    public static final BitSet FOLLOW_COLON_in_method_param5440 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000008L,0x0240000000000000L,0x0000000000000012L});
    public static final BitSet FOLLOW_method_type_in_method_param5443 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0240000000000000L,0x0000000000000012L});
    public static final BitSet FOLLOW_name_in_method_param5446 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_prefix5458 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_COLON_in_prefix5460 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COLON_in_incomplete_prefix5479 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typedef_struct_declaration_in_typedef_struct_declaration_wrapper5501 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRUCT_PREFIX_in_typedef_struct_declaration5522 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000100L,0x0240000000000000L,0x0000000000000012L});
    public static final BitSet FOLLOW_name_in_typedef_struct_declaration5524 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_L_FBR_in_typedef_struct_declaration5528 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_typedef_struct_body_in_typedef_struct_declaration5533 = new BitSet(new long[]{0x0040000000000000L,0x0800000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_R_FBR_in_typedef_struct_declaration5537 = new BitSet(new long[]{0x0040000000000002L,0x8000000000000000L,0x0240000000000000L,0x0000000000000012L});
    public static final BitSet FOLLOW_name_in_typedef_struct_declaration5540 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_typedef_struct_declaration5543 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typedef_struct_declaration_element_wrapper_in_typedef_struct_body5556 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_struct_field_in_typedef_struct_declaration_element_wrapper5568 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_type_in_struct_field5586 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0240000000000000L,0x0000000000000012L});
    public static final BitSet FOLLOW_name_in_struct_field5588 = new BitSet(new long[]{0x0000000000020000L,0x8000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_struct_field5592 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0240000000000000L,0x0000000000000012L});
    public static final BitSet FOLLOW_name_in_struct_field5595 = new BitSet(new long[]{0x0000000000020000L,0x8000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_struct_field5599 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typedef_declaration_in_typedef_declaration_wrapper5615 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typedef_declaration_in_enum_declaration5635 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ENUM_PREFIX_in_typedef_declaration5655 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000100L,0x0240000000000000L,0x0000000000000012L});
    public static final BitSet FOLLOW_name_in_typedef_declaration5657 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_L_FBR_in_typedef_declaration5660 = new BitSet(new long[]{0x0040000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_typedef_declaration_element_wrapper_in_typedef_declaration5663 = new BitSet(new long[]{0x0000000000020000L,0x0800000000000000L});
    public static final BitSet FOLLOW_COMMA_in_typedef_declaration5667 = new BitSet(new long[]{0x0040000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_typedef_declaration_element_wrapper_in_typedef_declaration5670 = new BitSet(new long[]{0x0000000000020000L,0x0800000000000000L});
    public static final BitSet FOLLOW_R_FBR_in_typedef_declaration5674 = new BitSet(new long[]{0x0040000000000000L,0x8000000000000000L,0x0240000000000000L,0x0000000000000012L});
    public static final BitSet FOLLOW_name_in_typedef_declaration5677 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_typedef_declaration5680 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typedef_declaration_element_in_typedef_declaration_element_wrapper5690 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_typedef_declaration_element5709 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000040L});
    public static final BitSet FOLLOW_L_EQ_in_typedef_declaration_element5713 = new BitSet(new long[]{0x0040000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_set_in_typedef_declaration_element5716 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUMBER_in_typedef_declaration_element5728 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_L_EQ_in_typedef_declaration_element5730 = new BitSet(new long[]{0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_NUMBER_in_typedef_declaration_element5732 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_declaration_in_field_declaration_wrapper5746 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_modifier_wrapper_in_field_declaration5763 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_field_type_in_field_declaration5766 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0240000000000000L,0x0000000000000012L});
    public static final BitSet FOLLOW_name_in_field_declaration5768 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000040L});
    public static final BitSet FOLLOW_field_declaration_end_in_field_declaration5770 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_value_set_in_field_declaration_end5781 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_field_declaration_end5784 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_start_in_type_start_wrapper5794 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CONST_PREFIX_in_type_start5811 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_field_type_in_type_start5814 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0240000000000000L,0x0000000000000012L});
    public static final BitSet FOLLOW_name_in_type_start5816 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000248L});
    public static final BitSet FOLLOW_L_KBR_in_type_start5819 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_R_KBR_in_type_start5821 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000048L});
    public static final BitSet FOLLOW_type_end_in_type_start5825 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_declaration4_in_type_end5833 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_declaration4_in_type_end5846 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_value_set_in_field_declaration45868 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_field_declaration45871 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_params2_in_method_declaration45884 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_block_wrapper_in_method_declaration45889 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_modifier_in_field_modifier_wrapper5901 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_189_in_field_modifier5919 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_type_internal_in_field_type5931 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_internal_in_field_type_internal5950 = new BitSet(new long[]{0x0000000000000042L,0x0000000000001000L});
    public static final BitSet FOLLOW_generic_in_field_type_internal5952 = new BitSet(new long[]{0x0000000000000042L});
    public static final BitSet FOLLOW_ASTERISK_in_field_type_internal5955 = new BitSet(new long[]{0x0000000000000042L});
    public static final BitSet FOLLOW_name_internal_in_name5968 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_name_internal5989 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_193_in_name_internal5996 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_property_in_name_internal6003 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_EQ_in_value_set6014 = new BitSet(new long[]{0x0040000000000000L,0x0001000000000100L,0x0008000000000400L,0x0000000000000008L});
    public static final BitSet FOLLOW_value_in_value_set6017 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_value6033 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_string_value_in_value6037 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_null_stmt_in_value6041 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_array_in_value6045 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUMBER_in_value6049 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_struct_init2_in_value6053 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_string_value6063 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_FBR_in_array6084 = new BitSet(new long[]{0x0040000000000000L,0x0001000000000100L,0x0008000000000400L,0x0000000000000008L});
    public static final BitSet FOLLOW_value_in_array6087 = new BitSet(new long[]{0x0000000000020000L,0x0800000000000000L});
    public static final BitSet FOLLOW_COMMA_in_array6091 = new BitSet(new long[]{0x0040000000000000L,0x0001000000000100L,0x0008000000000400L,0x0000000000000008L});
    public static final BitSet FOLLOW_value_in_array6094 = new BitSet(new long[]{0x0000000000020000L,0x0800000000000000L});
    public static final BitSet FOLLOW_R_FBR_in_array6098 = new BitSet(new long[]{0x0000000000000002L});

}